/* Generated By:JavaCC: Do not edit this line. CullTokenManager.java */
package com.sun.grid.cull;
import java.util.List;
import java.util.ArrayList;
import java.util.logging.Logger;

/** Token Manager. */
public class CullTokenManager implements CullConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x8000000000000000L) != 0L)
            return 77;
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 42;
            return 36;
         }
         if ((active0 & 0x3e0f8000000L) != 0L)
         {
            jjmatchedKind = 42;
            return 39;
         }
         if ((active1 & 0x4L) != 0L)
            return 17;
         if ((active0 & 0x80000000000L) != 0L)
            return 181;
         if ((active0 & 0x3e80000L) != 0L)
         {
            jjmatchedKind = 42;
            return 47;
         }
         return -1;
      case 1:
         if ((active0 & 0x3e0f8000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 1;
            return 39;
         }
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 1;
            return 35;
         }
         if ((active0 & 0x3e80000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 1;
            return 46;
         }
         return -1;
      case 2:
         if ((active0 & 0x4000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 2;
            }
            return 34;
         }
         if ((active0 & 0xc0f8000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 2;
            }
            return 39;
         }
         if ((active0 & 0x32000000000L) != 0L)
            return 39;
         if ((active0 & 0x3e80000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 2;
            }
            return 45;
         }
         return -1;
      case 3:
         if ((active0 & 0x3e80000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 3;
            }
            return 44;
         }
         if ((active0 & 0x2c018000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 3;
            }
            return 39;
         }
         if ((active0 & 0xe0000000L) != 0L)
            return 39;
         if ((active0 & 0x4000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 3;
            }
            return 33;
         }
         return -1;
      case 4:
         if ((active0 & 0x3e80000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 4;
            return 43;
         }
         if ((active0 & 0x2c07c000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 4;
            return 39;
         }
         return -1;
      case 5:
         if ((active0 & 0x2007fe80000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 5;
            return 39;
         }
         if ((active0 & 0xc000000000L) != 0L)
            return 39;
         return -1;
      case 6:
         if ((active0 & 0x2001be80000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 6;
            return 39;
         }
         if ((active0 & 0x64000000L) != 0L)
            return 39;
         return -1;
      case 7:
         if ((active0 & 0x20000000000L) != 0L)
            return 39;
         if ((active0 & 0x1be80000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 7;
            return 39;
         }
         return -1;
      case 8:
         if ((active0 & 0x1be80000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 8;
            return 39;
         }
         return -1;
      case 9:
         if ((active0 & 0x1be80000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 9;
            return 39;
         }
         return -1;
      case 10:
         if ((active0 & 0x1be80000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 10;
            return 39;
         }
         return -1;
      case 11:
         if ((active0 & 0x1000000L) != 0L)
            return 39;
         if ((active0 & 0x1ae80000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 11;
            return 39;
         }
         return -1;
      case 12:
         if ((active0 & 0x1ae00000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 12;
            return 39;
         }
         if ((active0 & 0x80000L) != 0L)
            return 39;
         return -1;
      case 13:
         if ((active0 & 0x1ac00000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 13;
            return 39;
         }
         if ((active0 & 0x200000L) != 0L)
            return 39;
         return -1;
      case 14:
         if ((active0 & 0x1a000000L) != 0L)
            return 39;
         if ((active0 & 0xc00000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 14;
            return 39;
         }
         return -1;
      case 15:
         if ((active0 & 0xc00000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 15;
            return 39;
         }
         return -1;
      case 16:
         if ((active0 & 0xc00000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 16;
            return 39;
         }
         return -1;
      case 17:
         if ((active0 & 0x800000L) != 0L)
            return 39;
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 17;
            return 39;
         }
         return -1;
      case 18:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 18;
            return 39;
         }
         return -1;
      case 19:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 19;
            return 39;
         }
         return -1;
      case 20:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 20;
            return 39;
         }
         return -1;
      case 21:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 21;
            return 39;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjStopAtPos(0, 67);
      case 34:
         return jjStartNfaWithStates_0(0, 43, 181);
      case 38:
         return jjStopAtPos(0, 51);
      case 39:
         return jjStopAtPos(0, 59);
      case 40:
         return jjStopAtPos(0, 49);
      case 41:
         return jjStopAtPos(0, 50);
      case 42:
         return jjStopAtPos(0, 62);
      case 43:
         return jjStopAtPos(0, 64);
      case 44:
         return jjStopAtPos(0, 47);
      case 45:
         return jjStopAtPos(0, 65);
      case 46:
         return jjStartNfaWithStates_0(0, 66, 17);
      case 47:
         return jjStartNfaWithStates_0(0, 63, 77);
      case 58:
         return jjStopAtPos(0, 61);
      case 59:
         return jjStopAtPos(0, 48);
      case 60:
         return jjStopAtPos(0, 57);
      case 61:
         return jjStopAtPos(0, 46);
      case 62:
         return jjStopAtPos(0, 58);
      case 63:
         return jjStopAtPos(0, 60);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x2000000000L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x8018000000L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x30000000000L);
      case 74:
         return jjMoveStringLiteralDfa1_0(0x3e80000L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x4000000L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x4000000000L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0xe0000000L);
      case 91:
         return jjStopAtPos(0, 52);
      case 92:
         return jjStopAtPos(0, 56);
      case 93:
         return jjStopAtPos(0, 53);
      case 123:
         return jjStopAtPos(0, 44);
      case 124:
         return jjStopAtPos(0, 54);
      case 125:
         return jjStopAtPos(0, 45);
      case 126:
         return jjStopAtPos(0, 55);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0xe0000000L);
      case 68:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x38018000000L);
      case 71:
         return jjMoveStringLiteralDfa2_0(active0, 0x3e80000L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, 0L);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 68:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 37, 39);
         return jjMoveStringLiteralDfa3_0(active0, 0x4003e80000L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L);
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0xe0000000L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0x18000000L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L);
      case 84:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x8060000000L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x401be80000L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L);
      case 69:
         return jjMoveStringLiteralDfa5_0(active0, 0x44000000L);
      case 70:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L);
      case 86:
         return jjMoveStringLiteralDfa5_0(active0, 0x18000000L);
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0x3e80000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 39, 39);
         return jjMoveStringLiteralDfa6_0(active0, 0x38200000L);
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L);
      case 77:
         return jjMoveStringLiteralDfa6_0(active0, 0x3000000L);
      case 78:
         return jjMoveStringLiteralDfa6_0(active0, 0x44000000L);
      case 80:
         return jjMoveStringLiteralDfa6_0(active0, 0xc00000L);
      case 82:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L);
      case 89:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 38, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x3000000L);
      case 68:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 26, 39);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 30, 39);
         return jjMoveStringLiteralDfa7_0(active0, 0x18000000L);
      case 70:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 29, 39);
         break;
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000L);
      case 82:
         return jjMoveStringLiteralDfa7_0(active0, 0xc00000L);
      case 83:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000L);
      case 86:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000L);
      case 73:
         return jjMoveStringLiteralDfa8_0(active0, 0xc00000L);
      case 79:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000L);
      case 80:
         return jjMoveStringLiteralDfa8_0(active0, 0x3000000L);
      case 84:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 41, 39);
         break;
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0x18000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa9_0(active0, 0x18000000L);
      case 77:
         return jjMoveStringLiteralDfa9_0(active0, 0xc00000L);
      case 78:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000L);
      case 80:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000L);
      case 84:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000L);
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000L);
      case 73:
         return jjMoveStringLiteralDfa10_0(active0, 0x18c00000L);
      case 79:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000L);
      case 84:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000L);
      case 95:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000L);
      case 68:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000L);
      case 79:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000L);
      case 83:
         return jjMoveStringLiteralDfa11_0(active0, 0x18000000L);
      case 84:
         return jjMoveStringLiteralDfa11_0(active0, 0xc00000L);
      case 95:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000L);
      case 73:
         return jjMoveStringLiteralDfa12_0(active0, 0xc00000L);
      case 74:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(11, 24, 39);
         break;
      case 79:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000L);
      case 84:
         return jjMoveStringLiteralDfa12_0(active0, 0x18000000L);
      case 95:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa13_0(active0, 0x200000L);
      case 68:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000000L);
      case 69:
         return jjMoveStringLiteralDfa13_0(active0, 0x10000000L);
      case 74:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(12, 19, 39);
         break;
      case 79:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000L);
      case 86:
         return jjMoveStringLiteralDfa13_0(active0, 0xc00000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000000L);
      case 69:
         return jjMoveStringLiteralDfa14_0(active0, 0x8c00000L);
      case 74:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(13, 21, 39);
         break;
      case 78:
         return jjMoveStringLiteralDfa14_0(active0, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
static private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 68:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(14, 28, 39);
         break;
      case 70:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(14, 27, 39);
         break;
      case 74:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(14, 25, 39);
         break;
      case 95:
         return jjMoveStringLiteralDfa15_0(active0, 0xc00000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
static private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa16_0(active0, 0x800000L);
      case 82:
         return jjMoveStringLiteralDfa16_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L);
}
static private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa17_0(active0, 0x800000L);
      case 79:
         return jjMoveStringLiteralDfa17_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L);
}
static private int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 74:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(17, 23, 39);
         break;
      case 79:
         return jjMoveStringLiteralDfa18_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L);
}
static private int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa19_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0, 0L);
}
static private int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa20_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0, 0L);
}
static private int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa21_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0, 0L);
}
static private int jjMoveStringLiteralDfa21_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa22_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0, 0L);
}
static private int jjMoveStringLiteralDfa22_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(20, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0, 0L);
      return 22;
   }
   switch(curChar)
   {
      case 74:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(22, 22, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_0(21, active0, 0L);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 181;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 45:
               case 39:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAdd(39);
                  break;
               case 44:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAdd(39);
                  break;
               case 43:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAdd(39);
                  break;
               case 34:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAdd(39);
                  break;
               case 77:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(83, 84);
                  else if (curChar == 47)
                     jjCheckNAddStates(0, 2);
                  break;
               case 36:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAdd(39);
                  break;
               case 181:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  else if (curChar == 34)
                  {
                     if (kind > 17)
                        kind = 17;
                  }
                  break;
               case 35:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAdd(39);
                  break;
               case 47:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAdd(39);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(6, 12);
                  else if (curChar == 47)
                     jjAddStates(13, 14);
                  else if (curChar == 34)
                     jjCheckNAddStates(3, 5);
                  else if (curChar == 46)
                     jjCheckNAdd(17);
                  else if (curChar == 35)
                     jjCheckNAddStates(15, 17);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 10)
                        kind = 10;
                     jjCheckNAddTwoStates(6, 7);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 10)
                        kind = 10;
                     jjCheckNAddStates(18, 20);
                  }
                  break;
               case 33:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAdd(39);
                  break;
               case 46:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAdd(39);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(15, 17);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 9)
                     kind = 9;
                  break;
               case 3:
                  if (curChar == 10 && kind > 9)
                     kind = 9;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddTwoStates(6, 7);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddTwoStates(6, 7);
                  break;
               case 16:
                  if (curChar == 46)
                     jjCheckNAdd(17);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAddStates(21, 23);
                  break;
               case 19:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(20);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAddTwoStates(20, 21);
                  break;
               case 22:
                  if (curChar == 34)
                     jjCheckNAddStates(3, 5);
                  break;
               case 23:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 25:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 26:
                  if (curChar == 34 && kind > 17)
                     kind = 17;
                  break;
               case 27:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(24, 27);
                  break;
               case 28:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 29:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(28);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(6, 12);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(58, 59);
                  break;
               case 59:
                  if (curChar != 46)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAddStates(28, 30);
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAddStates(28, 30);
                  break;
               case 62:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(63);
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAddTwoStates(63, 21);
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(64, 65);
                  break;
               case 66:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(67);
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAddTwoStates(67, 21);
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(31, 33);
                  break;
               case 70:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(71);
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(71, 21);
                  break;
               case 72:
                  if (curChar != 48)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddStates(18, 20);
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddTwoStates(74, 7);
                  break;
               case 75:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddTwoStates(75, 7);
                  break;
               case 76:
                  if (curChar == 47)
                     jjAddStates(13, 14);
                  break;
               case 78:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 79:
                  if ((0x2400L & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 80:
                  if (curChar == 10 && kind > 7)
                     kind = 7;
                  break;
               case 81:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(83, 84);
                  break;
               case 83:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(83, 84);
                  break;
               case 84:
                  if (curChar == 42)
                     jjCheckNAddStates(34, 36);
                  break;
               case 85:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(86, 84);
                  break;
               case 86:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(86, 84);
                  break;
               case 87:
                  if (curChar == 47 && kind > 8)
                     kind = 8;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 45:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     jjCheckNAdd(39);
                  }
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 53;
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 44:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     jjCheckNAdd(39);
                  }
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 52;
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 43:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     jjCheckNAdd(39);
                  }
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 51;
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 34:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     jjCheckNAdd(39);
                  }
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 36:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     jjCheckNAdd(39);
                  }
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 181:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  else if (curChar == 92)
                     jjAddStates(37, 39);
                  break;
               case 35:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     jjCheckNAdd(39);
                  }
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 47:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     jjCheckNAdd(39);
                  }
                  if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 55;
                  if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     jjCheckNAdd(39);
                  }
                  if (curChar == 83)
                     jjAddStates(40, 50);
                  else if (curChar == 74)
                     jjAddStates(51, 52);
                  else if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 36;
                  else if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 14;
                  else if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 33:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     jjCheckNAdd(39);
                  }
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 46:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     jjCheckNAdd(39);
                  }
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 54;
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 1:
                  jjAddStates(15, 17);
                  break;
               case 7:
                  if ((0x100000001000L & l) != 0L && kind > 10)
                     kind = 10;
                  break;
               case 8:
                  if (curChar == 69 && kind > 14)
                     kind = 14;
                  break;
               case 9:
                  if (curChar == 85)
                     jjCheckNAdd(8);
                  break;
               case 10:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 83)
                     jjCheckNAdd(8);
                  break;
               case 13:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 18:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(53, 54);
                  break;
               case 21:
                  if ((0x5000000050L & l) != 0L && kind > 15)
                     kind = 15;
                  break;
               case 23:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 24:
                  if (curChar == 92)
                     jjAddStates(37, 39);
                  break;
               case 25:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 31:
                  if (curChar == 70 && kind > 18)
                     kind = 18;
                  break;
               case 32:
               case 89:
                  if (curChar == 69)
                     jjCheckNAdd(31);
                  break;
               case 37:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAdd(39);
                  break;
               case 39:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAdd(39);
                  break;
               case 40:
                  if (curChar == 74)
                     jjAddStates(51, 52);
                  break;
               case 41:
                  if (curChar == 74 && kind > 20)
                     kind = 20;
                  break;
               case 42:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 48:
                  if (curChar == 80 && kind > 20)
                     kind = 20;
                  break;
               case 49:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 74)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 61:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(55, 56);
                  break;
               case 65:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(57, 58);
                  break;
               case 69:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(59, 60);
                  break;
               case 73:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(74);
                  break;
               case 74:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddTwoStates(74, 7);
                  break;
               case 78:
                  jjAddStates(0, 2);
                  break;
               case 83:
                  jjCheckNAddTwoStates(83, 84);
                  break;
               case 85:
               case 86:
                  jjCheckNAddTwoStates(86, 84);
                  break;
               case 88:
                  if (curChar == 83)
                     jjAddStates(40, 50);
                  break;
               case 90:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 91:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 92:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 94:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 95:
                  if (curChar == 84 && kind > 32)
                     kind = 32;
                  break;
               case 96:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 97:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 101:
                  if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 102:
                  if (curChar == 68 && kind > 32)
                     kind = 32;
                  break;
               case 103:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 105:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 106:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 107:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 108:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 109:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 110:
                  if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 111:
                  if (curChar == 80 && kind > 33)
                     kind = 33;
                  break;
               case 112:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 113:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 114:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 115:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 116:
                  if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 117:
                  if (curChar == 68 && kind > 33)
                     kind = 33;
                  break;
               case 118:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 119:
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 120:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 121:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 122:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 123:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 124:
                  if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 125:
                  if (curChar == 84 && kind > 34)
                     kind = 34;
                  break;
               case 126:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 127:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 128:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 129:
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 130:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 131:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 132:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 133:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 134:
                  if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 135:
                  if (curChar == 68 && kind > 34)
                     kind = 34;
                  break;
               case 136:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 137:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 138:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 139:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 140:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 141:
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 142:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 143:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 144:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 145:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 146:
                  if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 145;
                  break;
               case 147:
                  if (curChar == 70 && kind > 35)
                     kind = 35;
                  break;
               case 148:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 147;
                  break;
               case 149:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 150:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 151:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 152:
                  if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 153:
                  if (curChar == 68 && kind > 35)
                     kind = 35;
                  break;
               case 154:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 155:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 156:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 157:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 158:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 157;
                  break;
               case 159:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 158;
                  break;
               case 160:
                  if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 159;
                  break;
               case 161:
                  if (curChar == 84 && kind > 36)
                     kind = 36;
                  break;
               case 162:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 161;
                  break;
               case 163:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 162;
                  break;
               case 164:
                  if (curChar == 74)
                     jjstateSet[jjnewStateCnt++] = 163;
                  break;
               case 165:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 164;
                  break;
               case 166:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 165;
                  break;
               case 167:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 166;
                  break;
               case 168:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 167;
                  break;
               case 169:
                  if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 168;
                  break;
               case 170:
                  if (curChar == 68 && kind > 36)
                     kind = 36;
                  break;
               case 171:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 170;
                  break;
               case 172:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 171;
                  break;
               case 173:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 172;
                  break;
               case 174:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 173;
                  break;
               case 175:
                  if (curChar == 74)
                     jjstateSet[jjnewStateCnt++] = 174;
                  break;
               case 176:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 175;
                  break;
               case 177:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 176;
                  break;
               case 178:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 177;
                  break;
               case 179:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 178;
                  break;
               case 180:
                  if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 179;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 181:
               case 23:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(15, 17);
                  break;
               case 78:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(0, 2);
                  break;
               case 83:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(83, 84);
                  break;
               case 85:
               case 86:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(86, 84);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 181 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   78, 79, 81, 23, 24, 26, 58, 59, 64, 65, 68, 69, 21, 77, 82, 1, 
   2, 4, 73, 75, 7, 17, 18, 21, 23, 24, 28, 26, 60, 61, 21, 68, 
   69, 21, 84, 85, 87, 25, 27, 29, 94, 101, 110, 116, 124, 134, 146, 152, 
   160, 169, 180, 47, 56, 19, 20, 62, 63, 66, 67, 70, 71, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, 
"\112\107\104\111\137\122\117\117\124\137\117\102\112", null, "\112\107\104\111\137\105\126\105\116\124\137\117\102\112", 
"\112\107\104\111\137\120\122\111\115\111\124\111\126\105\137\122\117\117\124\137\117\102\112", "\112\107\104\111\137\120\122\111\115\111\124\111\126\105\137\117\102\112", 
"\112\107\104\111\137\115\101\120\137\117\102\112", "\112\107\104\111\137\115\101\120\120\105\104\137\117\102\112", 
"\114\111\123\124\105\116\104", "\104\105\122\111\126\105\104\137\114\111\123\124\104\105\106", 
"\104\105\122\111\126\105\104\137\114\111\123\124\105\116\104", "\116\101\115\105\104\105\106", "\116\101\115\105\105\116\104", 
"\116\101\115\105", null, null, null, null, null, "\101\104\104", "\115\117\104\111\106\131", 
"\104\105\114\105\124\105", "\107\105\124", "\107\105\124\137\114\111\123\124", null, "\42", "\173", 
"\175", "\75", "\54", "\73", "\50", "\51", "\46", "\133", "\135", "\174", "\176", 
"\134", "\74", "\76", "\47", "\77", "\72", "\52", "\57", "\53", "\55", "\56", "\41", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xfffffffffffec401L, 0xfL, 
};
static final long[] jjtoSkip = {
   0x3feL, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[181];
static private final int[] jjstateSet = new int[362];
static protected char curChar;
/** Constructor. */
public CullTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public CullTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 181; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while ((curChar < 64 && (0x2100002600L & (1L << curChar)) != 0L) || 
             (curChar >> 6) == 1 && (0x40000000L & (1L << (curChar & 077))) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
