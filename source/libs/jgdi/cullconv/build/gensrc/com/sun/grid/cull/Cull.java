/* Generated By:JavaCC: Do not edit this line. Cull.java */
package com.sun.grid.cull;

import java.util.List;
import java.util.ArrayList;
import java.util.logging.Logger;

public class Cull implements CullConstants {

  static Logger logger = Logger.getLogger("cullconv");

  public static void main(String args[]) throws ParseException, java.io.IOException {
    java.io.InputStream in = new java.io.FileInputStream(args[0]);
    CullFile cullFile = parse(in);
    System.out.println( "Found " + cullFile.getCullObjectCount() + " cull objects");
  }

  private static Cull parser;
  public static CullFile parse( java.io.InputStream in )
      throws ParseException, java.io.IOException
  {
    if( parser == null ) {
       parser = new Cull(in);
    } else {
       parser.ReInit(in);
    }
    return parser.CullFile();
  }

  static final public CullFile CullFile() throws ParseException {
   CullFile ret = new CullFile();
   CullObject     obj = null;
   CullNameSpace  namespace = null;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case ID:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
        Misc();
        break;
      case LISTDEF:
        obj = CullObject();
                                     ret.addCullObject(obj);
        break;
      case DERIVED_LISTDEF:
        obj = DervivedCullObject();
                                     ret.addCullObject(obj);
        break;
      case NAMEDEF:
        namespace = CullNameSpace();
                                      ret.addNameSpace(namespace);
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case STRING_LITERAL:
      case LISTDEF:
      case DERIVED_LISTDEF:
      case NAMEDEF:
      case ID:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
     {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  static final public void Misc() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      jj_consume_token(INTEGER_LITERAL);
      break;
    case FLOATING_POINT_LITERAL:
      jj_consume_token(FLOATING_POINT_LITERAL);
      break;
    case STRING_LITERAL:
      jj_consume_token(STRING_LITERAL);
      break;
    case 43:
      jj_consume_token(43);
      break;
    case 44:
      jj_consume_token(44);
      break;
    case 45:
      jj_consume_token(45);
      break;
    case 46:
      jj_consume_token(46);
      break;
    case 47:
      jj_consume_token(47);
      break;
    case 48:
      jj_consume_token(48);
      break;
    case 49:
      jj_consume_token(49);
      break;
    case 50:
      jj_consume_token(50);
      break;
    case 51:
      jj_consume_token(51);
      break;
    case 52:
      jj_consume_token(52);
      break;
    case 53:
      jj_consume_token(53);
      break;
    case 54:
      jj_consume_token(54);
      break;
    case 55:
      jj_consume_token(55);
      break;
    case 56:
      jj_consume_token(56);
      break;
    case 57:
      jj_consume_token(57);
      break;
    case 58:
      jj_consume_token(58);
      break;
    case 59:
      jj_consume_token(59);
      break;
    case 60:
      jj_consume_token(60);
      break;
    case 61:
      jj_consume_token(61);
      break;
    case 62:
      jj_consume_token(62);
      break;
    case 63:
      jj_consume_token(63);
      break;
    case 64:
      jj_consume_token(64);
      break;
    case 65:
      jj_consume_token(65);
      break;
    case 66:
      jj_consume_token(66);
      break;
    case 67:
      jj_consume_token(67);
      break;
    case ID:
      jj_consume_token(ID);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public String Literal() throws ParseException {
    Token token = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      token = jj_consume_token(INTEGER_LITERAL);
     {if (true) return token.image;}
      break;
    case FLOATING_POINT_LITERAL:
      token = jj_consume_token(FLOATING_POINT_LITERAL);
     {if (true) return token.image;}
      break;
    case STRING_LITERAL:
      token = jj_consume_token(STRING_LITERAL);
     {if (true) return token.image.substring(1,token.image.length()-1);}
      break;
    case BOOLEAN_LITERAL:
      token = jj_consume_token(BOOLEAN_LITERAL);
     if (token.image.equalsIgnoreCase("true")) {
        {if (true) return "true";}
     } else {
        {if (true) return "false";}
     }
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public CullNameSpace CullNameSpace() throws ParseException {
  CullNameSpace ret;
  Token  nameSpaceToken;
    jj_consume_token(NAMEDEF);
    jj_consume_token(49);
    nameSpaceToken = jj_consume_token(ID);
    jj_consume_token(50);
     ret = new CullNameSpace();
     ret.setNameSpace( nameSpaceToken.image );
    label_2:
    while (true) {
      NameAttr(ret);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
    }
    jj_consume_token(NAMEEND);
     {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  static final public void NameAttr(CullNameSpace obj) throws ParseException {
   Token nameToken;
    jj_consume_token(NAME);
    jj_consume_token(49);
    nameToken = jj_consume_token(STRING_LITERAL);
    jj_consume_token(50);
     obj.addName(nameToken.image.substring(1,nameToken.image.length()-1));
  }

  static final public CullObject CullObject() throws ParseException {
  CullObject ret = new CullObject();
  Token nameToken;
  Token paramToken;
  List  params = new ArrayList();
    jj_consume_token(LISTDEF);
    jj_consume_token(49);
    nameToken = jj_consume_token(ID);
     ret.setName(nameToken.image);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 47:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      jj_consume_token(47);
      paramToken = jj_consume_token(ID);
    params.add( paramToken.image );
    }
    jj_consume_token(50);
    for(int i = 0; i < params.size(); i++) {
       ret.addParam((String)params.get(i));
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case JGDI_ROOT_OBJ:
    case JGDI_OBJ:
    case JGDI_PRIMITIVE_ROOT_OBJ:
    case JGDI_PRIMITIVE_OBJ:
    case JGDI_MAP_OBJ:
    case JGDI_MAPPED_OBJ:
      JGDIObject(ret);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SGE_LIST:
      case SGE_MAP:
      case SGE_MAPLIST:
      case SGE_REF:
      case SGE_OBJ:
      case ID:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      CullAttr(ret);
    }
    jj_consume_token(LISTEND);
     {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  static final public CullObject DervivedCullObject() throws ParseException {
  CullObject ret = new CullObject();
  Token nameToken;
  Token parentToken;
    jj_consume_token(DERIVED_LISTDEF);
    jj_consume_token(49);
    nameToken = jj_consume_token(ID);
                             ret.setName(nameToken.image);
    jj_consume_token(47);
    parentToken = jj_consume_token(ID);
                             ret.setParentName(parentToken.image);
    jj_consume_token(50);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case JGDI_ROOT_OBJ:
    case JGDI_OBJ:
    case JGDI_PRIMITIVE_ROOT_OBJ:
    case JGDI_PRIMITIVE_OBJ:
    case JGDI_MAP_OBJ:
    case JGDI_MAPPED_OBJ:
      JGDIObject(ret);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    jj_consume_token(DERIVED_LISTEND);
     {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  static final public void JGDIObject(CullObject obj) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case JGDI_PRIMITIVE_ROOT_OBJ:
      JGDIPrimitiveRootObject(obj);
      break;
    case JGDI_ROOT_OBJ:
      JGDIRootObject(obj);
      break;
    case JGDI_OBJ:
      JGDINamedObject(obj);
      break;
    case JGDI_PRIMITIVE_OBJ:
      JGDIPrimitiveSimpleObject(obj);
      break;
    case JGDI_MAP_OBJ:
      JGDIMapObject(obj);
      break;
    case JGDI_MAPPED_OBJ:
      CullMappedObject(obj);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case JGDI_EVENT_OBJ:
      JGDIEventObject(obj);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
  }

  static final public void JGDIEventObject(CullObject obj) throws ParseException {
    jj_consume_token(JGDI_EVENT_OBJ);
    jj_consume_token(49);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADD:
    case MODIFY:
    case DELETE:
    case GET_LIST:
      JGDIEvent(obj);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 54:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_5;
        }
        jj_consume_token(54);
        JGDIEvent(obj);
      }
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    jj_consume_token(50);
  }

  static final public void JGDIEvent(CullObject obj) throws ParseException {
   Token evtNameToken;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADD:
      jj_consume_token(ADD);
      JGDIEventName(obj, "ADD");
                                                 obj.setHasAddEvent(true);
      break;
    case MODIFY:
      jj_consume_token(MODIFY);
      JGDIEventName(obj, "MODIFY");
                                                 obj.setHasModifyEvent(true);
      break;
    case DELETE:
      jj_consume_token(DELETE);
      JGDIEventName(obj, "DELETE");
                                                 obj.setHasDeleteEvent(true);
      break;
    case GET_LIST:
      jj_consume_token(GET_LIST);
      JGDIEventName(obj, "GET_LIST");
                                                 obj.setHasGetListEvent(true);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void JGDIEventName(CullObject obj, String name) throws ParseException {
   Token evtNameToken;
    jj_consume_token(49);
    evtNameToken = jj_consume_token(ID);
    jj_consume_token(50);
       if(name.equals("ADD")) {
            obj.setAddEventName(evtNameToken.image);
       } else if (name.equals("MODIFY")) {
            obj.setModifyEventName(evtNameToken.image);
       } else if (name.equals("DELETE")) {
            obj.setDeleteEventName(evtNameToken.image);
       } else if (name.equals("GET_LIST")) {
            obj.setGetListEventName(evtNameToken.image);
       } else {
            {if (true) throw new IllegalStateException("unknown event name " + name);}
       }
  }

  static final public void JGDIRootObject(CullObject obj) throws ParseException {
  Token nameToken;
  Token listNameToken;
    jj_consume_token(JGDI_ROOT_OBJ);
                             obj.setRootObject(true);
    jj_consume_token(49);
    nameToken = jj_consume_token(ID);
                             obj.setIdlName( nameToken.image );
    jj_consume_token(47);
    listNameToken = jj_consume_token(ID);
                             obj.setListName(listNameToken.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 47:
      jj_consume_token(47);
      JGDIOperation(obj);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 54:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_6;
        }
        jj_consume_token(54);
        JGDIOperation(obj);
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    jj_consume_token(50);
  }

  static final public void JGDIOperation(CullObject obj) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADD:
      jj_consume_token(ADD);
                obj.setHasAddOperation(true);
      break;
    case MODIFY:
      jj_consume_token(MODIFY);
                obj.setHasModifyOperation(true);
      break;
    case DELETE:
      jj_consume_token(DELETE);
                obj.setHasDeleteOperation(true);
      break;
    case GET:
      jj_consume_token(GET);
                obj.setHasGetOperation(true);
      break;
    case GET_LIST:
      jj_consume_token(GET_LIST);
                obj.setHasGetListOperation(true);
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void JGDINamedObject(CullObject obj) throws ParseException {
  Token nameToken;
    jj_consume_token(JGDI_OBJ);
                        obj.setType(CullObject.TYPE_SIMPLE);
    jj_consume_token(49);
    nameToken = jj_consume_token(ID);
                        obj.setIdlName( nameToken.image );
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 47:
      jj_consume_token(47);
      JGDIOperation(obj);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 54:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_7;
        }
        jj_consume_token(54);
        JGDIOperation(obj);
      }
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    jj_consume_token(50);
  }

  static final public void JGDIMapObject(CullObject obj) throws ParseException {
   Token keyToken;
   Token valueToken;
    jj_consume_token(JGDI_MAP_OBJ);
                         obj.setType(CullObject.TYPE_MAP);
    jj_consume_token(49);
    keyToken = jj_consume_token(ID);
                         obj.setKeyAttrName(keyToken.image);
    jj_consume_token(47);
    valueToken = jj_consume_token(ID);
                         obj.setValueAttrName(valueToken.image);
    jj_consume_token(50);
  }

  static final public void JGDIPrimitiveSimpleObject(CullObject obj) throws ParseException {
  Token contentAttributeToken;
    jj_consume_token(JGDI_PRIMITIVE_OBJ);
                                obj.setType(CullObject.TYPE_PRIMITIVE);
    jj_consume_token(49);
    contentAttributeToken = jj_consume_token(ID);
                                obj.setContentAttrName(contentAttributeToken.image);
    jj_consume_token(50);
  }

  static final public void CullMappedObject(CullObject obj) throws ParseException {
  Token implClassToken;
    jj_consume_token(JGDI_MAPPED_OBJ);
                          obj.setType(CullObject.TYPE_MAPPED);
    jj_consume_token(49);
    implClassToken = jj_consume_token(ID);
                          obj.setImplClass(implClassToken.image);
    jj_consume_token(50);
  }

  static final public void JGDIPrimitiveRootObject(CullObject obj) throws ParseException {
  Token contentAttributeToken;
  Token nameToken;
  Token listNameToken;
    jj_consume_token(JGDI_PRIMITIVE_ROOT_OBJ);
                                   obj.setRootObject(true); obj.setType(CullObject.TYPE_PRIMITIVE);
    jj_consume_token(49);
    nameToken = jj_consume_token(ID);
                                   obj.setIdlName( nameToken.image );
    jj_consume_token(47);
    contentAttributeToken = jj_consume_token(ID);
                                   obj.setContentAttrName(contentAttributeToken.image);
    jj_consume_token(47);
    listNameToken = jj_consume_token(ID);
                                   obj.setListName(listNameToken.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 47:
      jj_consume_token(47);
      JGDIOperation(obj);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 54:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_8;
        }
        jj_consume_token(54);
        JGDIOperation(obj);
      }
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    jj_consume_token(50);
  }

  static final public void CullAttr(CullObject obj) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      CullSimpleAttr(obj);
      break;
    case SGE_LIST:
      CullListAttr(obj);
      break;
    case SGE_MAP:
      CullMapAttr(obj);
      break;
    case SGE_MAPLIST:
      CullMapListAttr(obj);
      break;
    case SGE_REF:
      CullRefAttr(obj);
      break;
    case SGE_OBJ:
      CullObjectAttr(obj);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void CullListAttr(CullObject obj) throws ParseException {
   Token typeToken;
   Token nameToken;
   String defaultValue = null;
   CullListAttr attr;
    jj_consume_token(SGE_LIST);
    jj_consume_token(49);
    nameToken = jj_consume_token(ID);
     attr = new CullListAttr();
     attr.setName( nameToken.image );
    jj_consume_token(47);
    typeToken = jj_consume_token(ID);
     attr.setType( typeToken.image );
    jj_consume_token(47);
    CullParam(attr);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 47:
      jj_consume_token(47);
      defaultValue = Literal();
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    jj_consume_token(50);
     if (defaultValue != null) {
        attr.setDefault( defaultValue );
     }
     obj.addAttr(attr);
  }

  static final public void CullMapAttr(CullObject obj) throws ParseException {
   Token typeToken;
   Token nameToken;
   String defaultKey = null;
   String defaultValue = null;
   String keyName = null;
   String  valueName = null;
   CullMapAttr attr;
    jj_consume_token(SGE_MAP);
    jj_consume_token(49);
    nameToken = jj_consume_token(ID);
     attr = new CullMapAttr();
     attr.setName( nameToken.image );
    jj_consume_token(47);
    typeToken = jj_consume_token(ID);
     attr.setType( typeToken.image );
    jj_consume_token(47);
    CullParam(attr);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 47:
      jj_consume_token(47);
      defaultKey = Literal();
      jj_consume_token(47);
      defaultValue = Literal();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 47:
        jj_consume_token(47);
        keyName = StringLiteral(false);
        jj_consume_token(47);
        valueName = StringLiteral(false);
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    jj_consume_token(50);
     if (defaultKey != null ) {
        attr.setDefaultKey(defaultKey);
     }
     if (defaultValue != null) {
        attr.setDefault( defaultValue );
     }
     if(keyName != null) {
        attr.setKeyName(keyName);
     }
     if(valueName != null) {
        attr.setValueName(valueName);
     }
     obj.addAttr(attr);
  }

  static final public void CullMapListAttr(CullObject obj) throws ParseException {
   Token typeToken;
   Token nameToken;
   String defaultKey = null;
   String defaultValue = null;
   String keyName = null;
   String valueName = null;
   CullMapListAttr attr;
    jj_consume_token(SGE_MAPLIST);
    jj_consume_token(49);
    nameToken = jj_consume_token(ID);
     attr = new CullMapListAttr();
     attr.setName( nameToken.image );
    jj_consume_token(47);
    typeToken = jj_consume_token(ID);
     attr.setType( typeToken.image );
    jj_consume_token(47);
    CullParam(attr);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 47:
      jj_consume_token(47);
      defaultKey = Literal();
      jj_consume_token(47);
      defaultValue = Literal();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 47:
        jj_consume_token(47);
        keyName = StringLiteral(false);
        jj_consume_token(47);
        valueName = StringLiteral(false);
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    jj_consume_token(50);
     if (defaultKey != null) {
        attr.setDefaultKey( defaultKey );
     }
     if (defaultValue != null) {
        attr.setDefault( defaultValue );
     }
     if (keyName != null) {
        attr.setKeyName(keyName);
     }
     if (valueName != null) {
        attr.setValueName(valueName);
     }
     obj.addAttr(attr);
  }

  static final public String StringLiteral(boolean withQuotes) throws ParseException {
   Token token = null;
    token = jj_consume_token(STRING_LITERAL);
     String ret = null;
     if(withQuotes) {
       ret = token.image;
     } else {
       ret = token.image.substring(1, token.image.length() - 1);
     }
     {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  static final public void CullRefAttr(CullObject obj) throws ParseException {
   Token typeToken;
   Token nameToken;
   String defaultValue = null;
   CullRefAttr attr;
    jj_consume_token(SGE_REF);
    jj_consume_token(49);
    nameToken = jj_consume_token(ID);
     attr = new CullRefAttr();
     attr.setName( nameToken.image );
    jj_consume_token(47);
    typeToken = jj_consume_token(ID);
     attr.setType( typeToken.image );
    jj_consume_token(47);
    CullParam(attr);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 47:
      jj_consume_token(47);
      defaultValue = Literal();
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    jj_consume_token(50);
     if (defaultValue != null) {
        attr.setDefault( defaultValue );
     }
     obj.addAttr(attr);
  }

  static final public void CullObjectAttr(CullObject obj) throws ParseException {
   Token typeToken;
   Token nameToken;
   String defaultValue = null;
   CullObjectAttr attr;
    jj_consume_token(SGE_OBJ);
    jj_consume_token(49);
    nameToken = jj_consume_token(ID);
     attr = new CullObjectAttr();
     attr.setName( nameToken.image );
    jj_consume_token(47);
    typeToken = jj_consume_token(ID);
     attr.setType( typeToken.image );
    jj_consume_token(47);
    CullParam(attr);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 47:
      jj_consume_token(47);
      defaultValue = Literal();
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    jj_consume_token(50);
     if (defaultValue != null) {
        attr.setDefault( defaultValue );
     }
     obj.addAttr(attr);
  }

  static final public void CullSimpleAttr(CullObject obj) throws ParseException {
   Token typeToken;
   Token nameToken;
   String defaultValue = null;
   CullAttr attr;
    typeToken = jj_consume_token(ID);
    jj_consume_token(49);
    nameToken = jj_consume_token(ID);
     attr = new CullAttr();
     attr.setName( nameToken.image );
     attr.setType( typeToken.image );
    jj_consume_token(47);
    CullParam(attr);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 47:
      jj_consume_token(47);
      defaultValue = Literal();
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
    jj_consume_token(50);
     if (defaultValue != null) {
        attr.setDefault( defaultValue );
     }
     obj.addAttr(attr);
  }

  static final public void CullParam(CullAttr attr) throws ParseException {
   Token t;
    t = jj_consume_token(ID);
               attr.addParam( t.image );
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 54:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_9;
      }
      jj_consume_token(54);
      t = jj_consume_token(ID);
                     attr.addParam( t.image );
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CullTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[31];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x28068400,0x28068400,0x28400,0x2c400,0x80000000,0x0,0x3d80000,0x0,0x3d80000,0x3d80000,0x200000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xfffffc00,0xfffffc00,0xfffffc00,0x0,0x0,0x8000,0x0,0x41f,0x0,0x0,0x0,0x400000,0x2e0,0x2e0,0x400000,0x8000,0x3e0,0x400000,0x8000,0x400000,0x8000,0x41f,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x400000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0xf,0xf,0xf,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public Cull(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Cull(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CullTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Cull(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CullTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Cull(CullTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CullTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[68];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 31; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 68; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
