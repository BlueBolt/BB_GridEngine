/*___INFO__MARK_BEGIN__*/
/*************************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  the Sun Industry Standards Source License Version 1.2
 *
 *  Sun Microsystems Inc., March, 2001
 *
 *
 *  Sun Industry Standards Source License Version 1.2
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.2 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *   Copyright: 2001 by Sun Microsystems, Inc.
 *
 *   All Rights Reserved.
 *
 ************************************************************************/
/*___INFO__MARK_END__*/
/**
 *  Generated from javamodel_impl.jsp
 *  !!! DO NOT EDIT THIS FILE !!!
 */

package com.sun.grid.jgdi.configuration;

import javax.management.*;
import com.sun.grid.jgdi.configuration.GEObject;
import java.util.List;
import java.util.LinkedList;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.logging.Logger;
import java.util.logging.Level;

/**
 *  Java representation of the cull object RQS_Type
 *  defined in sge_all_listsL.template
 *
 *  <p><strong>Warning:</strong>  The  ResourceQuotaSetImpl class will 
 *  not be compatible with future Sun&trade; Grid Engine releases.</p>
 */
public class ResourceQuotaSetImpl extends    GEObjectImpl implements ResourceQuotaSet {


   /**
    *  Create a new instance of ResourceQuotaSetImpl. The new instance
    *  will not be initialized with the default values.
    */
   public ResourceQuotaSetImpl() {
      this(false);
   }
   
   /**
    *   Create a new instanceof
    *   @param  initWithDefaultValues if <code>true</code> the new instance will
    *                                 be initialized with the default values as defined
    *                                 in the cull definition.
    */
   public ResourceQuotaSetImpl(boolean initWithDefaultValues) { 

      if (initWithDefaultValues) {     
    }

  } // end of default constructor
  
  // --- newInstance method with primary key field
  

   /**
    *  Create a new instance of ResourceQuotaSetImpl
    */
   public ResourceQuotaSetImpl(java.lang.String name ) {

   
         setName(name);

    }



    // Attribute name ------------------------------------------------
   
    /**
     *  Determine if the name attribute is set
     *  @return <code>true</code> if the name attribute is set
     */
    public boolean isSetName() {
   
        return  (m_name != null);

    }
   
    private java.lang.String m_name;

    /**
     *   Set the name attribute.
     *
     *   @param aName  the new value for the  name attribute
     */
    public void setName(java.lang.String aName) {   
        m_name = aName;

    }

    /**
     *  Get the value of the name attribute.
     *  @return the value of the name attribute
     */
    public java.lang.String getName() {
        return m_name;
    }


    // Attribute description ------------------------------------------------
   
    /**
     *  Determine if the description attribute is set
     *  @return <code>true</code> if the description attribute is set
     */
    public boolean isSetDescription() {
   
        return  (m_description != null);

    }
   
    private java.lang.String m_description;

    /**
     *   Set the description attribute.
     *
     *   @param aDescription  the new value for the  description attribute
     */
    public void setDescription(java.lang.String aDescription) {   
        m_description = aDescription;

    }

    /**
     *  Get the value of the description attribute.
     *  @return the value of the description attribute
     */
    public java.lang.String getDescription() {
        return m_description;
    }


    // Attribute enabled ------------------------------------------------

    private boolean isEnabledSet;
   
    /**
     *  Determine if the enabled attribute is set
     *  @return <code>true</code> if the enabled attribute is set
     */
    public boolean isSetEnabled() {

        return isEnabledSet;

    }
   
    private boolean m_enabled;

    /**
     *   Set the enabled attribute.
     *
     *   @param aEnabled  the new value for the  enabled attribute
     */
    public void setEnabled(boolean aEnabled) {   
        m_enabled = aEnabled;

        isEnabledSet = true;

    }

    /**
     *  Get the value of the enabled attribute.
     *  @return the value of the enabled attribute
     */
    public boolean isEnabled() {
        return m_enabled;
    }


    // Attribute rule ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.ResourceQuotaRule > m_ruleList;
   
    private void initRule() {
        if (m_ruleList == null) {
            m_ruleList = new LinkedList< com.sun.grid.jgdi.configuration.ResourceQuotaRule >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.ResourceQuotaRule attribute.

     *   @param arule  the new com.sun.grid.jgdi.configuration.ResourceQuotaRule attribute
     */
    public void addRule(com.sun.grid.jgdi.configuration.ResourceQuotaRule arule) {   
        initRule();
        
        m_ruleList.add(arule);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.ResourceQuotaRule attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.ResourceQuotaRule attribute
     *   @param arule  the new com.sun.grid.jgdi.configuration.ResourceQuotaRule attribute
     */
    public void setRule(int index, com.sun.grid.jgdi.configuration.ResourceQuotaRule arule) {
        initRule();
        m_ruleList.set(index, arule);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.ResourceQuotaRule attributes.
     */
    public void removeAllRule() {
        if (m_ruleList != null) {
            m_ruleList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.ResourceQuotaRule attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.ResourceQuotaRule attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.ResourceQuotaRule attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.ResourceQuotaRule removeRule(int index) {
        initRule();
        return (com.sun.grid.jgdi.configuration.ResourceQuotaRule)m_ruleList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.ResourceQuotaRule attribute.
     *  @param arule  the com.sun.grid.jgdi.configuration.ResourceQuotaRule attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.ResourceQuotaRule attribute has been removed
     */
    public boolean removeRule(com.sun.grid.jgdi.configuration.ResourceQuotaRule arule) {
        initRule();
        return m_ruleList.remove(arule);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.ResourceQuotaRule attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.ResourceQuotaRule attributes
     */
    public List< com.sun.grid.jgdi.configuration.ResourceQuotaRule > getRuleList() {
        initRule();
        return Collections.unmodifiableList(m_ruleList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.ResourceQuotaRule attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.ResourceQuotaRule attributes.
     */
    public int getRuleCount() {
        if (m_ruleList != null) {
            return m_ruleList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.ResourceQuotaRule attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.ResourceQuotaRule attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.ResourceQuotaRule attribute
     */
    public com.sun.grid.jgdi.configuration.ResourceQuotaRule getRule(int index) {
        initRule();
        return (com.sun.grid.jgdi.configuration.ResourceQuotaRule)m_ruleList.get(index);
    }
   
    /**
     *  Determine if the rule attribute is set
     *  @return <code>true</code> if the rule attribute is set
     */
    public boolean isSetRule () {
        return (m_ruleList != null) && (!m_ruleList.isEmpty());
    }
   



    /**
     *  Is the primary key information equal to the primary key information
     *  of <code>obj</code>.
     *
     *  @param obj   the compared object
     *  @return <code>true</code> if the primary key information is equal to the
     *          primary key informations of <code>obj</code>.
     */
    public boolean equals(Object obj) {

        return (obj instanceof ResourceQuotaSetImpl && getName().equals(((com.sun.grid.jgdi.configuration.ResourceQuotaSet)obj).getName()));

    }

    
    
    public boolean equalsCompletely(Object obj) {
        Logger logger = Logger.getLogger(getClass().getName());
        if (obj instanceof  ResourceQuotaSetImpl) {
            com.sun.grid.jgdi.configuration.ResourceQuotaSet obj1 = (com.sun.grid.jgdi.configuration.ResourceQuotaSet)obj;

            {
                java.lang.String value1 = getName();
                java.lang.String value2 = obj1.getName();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute RQS_name of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes RQS_name are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                java.lang.String value1 = getDescription();
                java.lang.String value2 = obj1.getDescription();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute RQS_description of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes RQS_description are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                boolean value1 = isEnabled();
                boolean value2 = obj1.isEnabled();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes RQS_enabled are not equal");
                }
                return false;
            }

            }

            {
                int ruleCount = getRuleCount();
                if (ruleCount != obj1.getRuleCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists rule has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < ruleCount; i++) {
                    com.sun.grid.jgdi.configuration.ResourceQuotaRule value1 = getRule(i);
                    com.sun.grid.jgdi.configuration.ResourceQuotaRule value2 = obj1.getRule(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute RQS_rule of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

                } // end of for
            }

            return true;
        } else {
            return true;
        }
    }
  
    public java.lang.String toString() {
        StringBuilder ret = new StringBuilder();
        ret.append("ResourceQuotaSetImpl(");

        ret.append(getName());

        ret.append(")");
        return ret.toString();
    }



    public java.lang.String dump() {
        StringBuilder sb = new StringBuilder();

            {
                java.lang.String value = getName();
                sb.append("Name = " + value + "\n");
            }

            {
                java.lang.String value = getDescription();
                sb.append("Description = " + value + "\n");
            }

            {
                boolean value = isEnabled();
                sb.append("Enabled = " + value + "\n");
            }

            int ruleCount = getRuleCount();
            for (int i = 0; i < ruleCount; i++) {
                com.sun.grid.jgdi.configuration.ResourceQuotaRule value = getRule(i);
                
                sb.append("Rule[" + i + "] = " + value.dump() + "\n");
                
            } // end of for

        return sb.toString();
    }    

 
}
