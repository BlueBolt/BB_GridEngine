/*___INFO__MARK_BEGIN__*/
/*************************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  the Sun Industry Standards Source License Version 1.2
 *
 *  Sun Microsystems Inc., March, 2001
 *
 *
 *  Sun Industry Standards Source License Version 1.2
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.2 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *   Copyright: 2001 by Sun Microsystems, Inc.
 *
 *   All Rights Reserved.
 *
 ************************************************************************/
/*___INFO__MARK_END__*/
/**
 *  Generated from javamodel_impl.jsp
 *  !!! DO NOT EDIT THIS FILE !!!
 */

package com.sun.grid.jgdi.configuration;

import javax.management.*;
import com.sun.grid.jgdi.configuration.GEObject;
import java.util.List;
import java.util.LinkedList;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.logging.Logger;
import java.util.logging.Level;

/**
 *  Java representation of the cull object SC_Type
 *  defined in sge_all_listsL.template
 *
 *  <p><strong>Warning:</strong>  The  SchedConfImpl class will 
 *  not be compatible with future Sun&trade; Grid Engine releases.</p>
 */
public class SchedConfImpl extends    GEObjectImpl implements SchedConf {


   /**
    *  Create a new instance of SchedConfImpl. The new instance
    *  will not be initialized with the default values.
    */
   public SchedConfImpl() {
      this(false);
   }
   
   /**
    *   Create a new instanceof
    *   @param  initWithDefaultValues if <code>true</code> the new instance will
    *                                 be initialized with the default values as defined
    *                                 in the cull definition.
    */
   public SchedConfImpl(boolean initWithDefaultValues) { 

      if (initWithDefaultValues) { 
       setAlgorithm("default");
       setScheduleInterval("0:0:15");
       setMaxujobs(0);
       setQueueSortMethod(0);
       setLoadAdjustmentDecayTime("0:7:30");
       setLoadFormula("np_load_avg");
       setScheddJobInfo("true");
       setFlushSubmitSec(0);
       setFlushFinishSec(0);
       setParams("none");
       setReprioritizeInterval("0:0:0");
       setHalftime(168);
       setCompensationFactor(5.0);
       setWeightUser(0.25);
       setWeightProject(0.25);
       setWeightDepartment(0.25);
       setWeightJob(0.25);
       setWeightTicketsFunctional(0);
       setWeightTicketsShare(0);
       setWeightTicketsOverride(0);
       setMaxFunctionalJobsToSchedule(200);
       setMaxPendingTasksPerJob(50);
       setHalflifeDecayList("none");
       setPolicyHierarchy("OFS");
       setWeightTicket(0.01);
       setWeightWaitingTime(0.0);
       setWeightDeadline(3600000.0);
       setWeightUrgency(0.1);
       setWeightPriority(1.0);
       setMaxReservation(0);
       setDefaultDuration("0:10:0");    
    }

  } // end of default constructor
  
  // --- newInstance method with primary key field
  



    // Attribute algorithm ------------------------------------------------
   
    /**
     *  Determine if the algorithm attribute is set
     *  @return <code>true</code> if the algorithm attribute is set
     */
    public boolean isSetAlgorithm() {
   
        return  (m_algorithm != null);

    }
   
    private java.lang.String m_algorithm;

    /**
     *   Set the algorithm attribute.
     *
     *   @param aAlgorithm  the new value for the  algorithm attribute
     */
    public void setAlgorithm(java.lang.String aAlgorithm) {   
        m_algorithm = aAlgorithm;

    }

    /**
     *  Get the value of the algorithm attribute.
     *  @return the value of the algorithm attribute
     */
    public java.lang.String getAlgorithm() {
        return m_algorithm;
    }


    // Attribute scheduleInterval ------------------------------------------------
   
    /**
     *  Determine if the scheduleInterval attribute is set
     *  @return <code>true</code> if the scheduleInterval attribute is set
     */
    public boolean isSetScheduleInterval() {
   
        return  (m_scheduleInterval != null);

    }
   
    private java.lang.String m_scheduleInterval;

    /**
     *   Set the scheduleInterval attribute.
     *
     *   @param aScheduleInterval  the new value for the  scheduleInterval attribute
     */
    public void setScheduleInterval(java.lang.String aScheduleInterval) {   
        m_scheduleInterval = aScheduleInterval;

    }

    /**
     *  Get the value of the scheduleInterval attribute.
     *  @return the value of the scheduleInterval attribute
     */
    public java.lang.String getScheduleInterval() {
        return m_scheduleInterval;
    }


    // Attribute maxujobs ------------------------------------------------

    private boolean isMaxujobsSet;
   
    /**
     *  Determine if the maxujobs attribute is set
     *  @return <code>true</code> if the maxujobs attribute is set
     */
    public boolean isSetMaxujobs() {

        return isMaxujobsSet;

    }
   
    private int m_maxujobs;

    /**
     *   Set the maxujobs attribute.
     *
     *   @param aMaxujobs  the new value for the  maxujobs attribute
     */
    public void setMaxujobs(int aMaxujobs) {   
        m_maxujobs = aMaxujobs;

        isMaxujobsSet = true;

    }

    /**
     *  Get the value of the maxujobs attribute.
     *  @return the value of the maxujobs attribute
     */
    public int getMaxujobs() {
        return m_maxujobs;
    }


    // Attribute queueSortMethod ------------------------------------------------

    private boolean isQueueSortMethodSet;
   
    /**
     *  Determine if the queueSortMethod attribute is set
     *  @return <code>true</code> if the queueSortMethod attribute is set
     */
    public boolean isSetQueueSortMethod() {

        return isQueueSortMethodSet;

    }
   
    private int m_queueSortMethod;

    /**
     *   Set the queueSortMethod attribute.
     *
     *   @param aQueueSortMethod  the new value for the  queueSortMethod attribute
     */
    public void setQueueSortMethod(int aQueueSortMethod) {   
        m_queueSortMethod = aQueueSortMethod;

        isQueueSortMethodSet = true;

    }

    /**
     *  Get the value of the queueSortMethod attribute.
     *  @return the value of the queueSortMethod attribute
     */
    public int getQueueSortMethod() {
        return m_queueSortMethod;
    }


    // Attribute jobLoadAdjustments ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.ComplexEntry > m_jobLoadAdjustmentsList;
   
    private void initJobLoadAdjustments() {
        if (m_jobLoadAdjustmentsList == null) {
            m_jobLoadAdjustmentsList = new LinkedList< com.sun.grid.jgdi.configuration.ComplexEntry >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.ComplexEntry attribute.

     *   @param ajobLoadAdjustments  the new com.sun.grid.jgdi.configuration.ComplexEntry attribute
     */
    public void addJobLoadAdjustments(com.sun.grid.jgdi.configuration.ComplexEntry ajobLoadAdjustments) {   
        initJobLoadAdjustments();
        
        m_jobLoadAdjustmentsList.add(ajobLoadAdjustments);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.ComplexEntry attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.ComplexEntry attribute
     *   @param ajobLoadAdjustments  the new com.sun.grid.jgdi.configuration.ComplexEntry attribute
     */
    public void setJobLoadAdjustments(int index, com.sun.grid.jgdi.configuration.ComplexEntry ajobLoadAdjustments) {
        initJobLoadAdjustments();
        m_jobLoadAdjustmentsList.set(index, ajobLoadAdjustments);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.ComplexEntry attributes.
     */
    public void removeAllJobLoadAdjustments() {
        if (m_jobLoadAdjustmentsList != null) {
            m_jobLoadAdjustmentsList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.ComplexEntry attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.ComplexEntry attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.ComplexEntry attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.ComplexEntry removeJobLoadAdjustments(int index) {
        initJobLoadAdjustments();
        return (com.sun.grid.jgdi.configuration.ComplexEntry)m_jobLoadAdjustmentsList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.ComplexEntry attribute.
     *  @param ajobLoadAdjustments  the com.sun.grid.jgdi.configuration.ComplexEntry attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.ComplexEntry attribute has been removed
     */
    public boolean removeJobLoadAdjustments(com.sun.grid.jgdi.configuration.ComplexEntry ajobLoadAdjustments) {
        initJobLoadAdjustments();
        return m_jobLoadAdjustmentsList.remove(ajobLoadAdjustments);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.ComplexEntry attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.ComplexEntry attributes
     */
    public List< com.sun.grid.jgdi.configuration.ComplexEntry > getJobLoadAdjustmentsList() {
        initJobLoadAdjustments();
        return Collections.unmodifiableList(m_jobLoadAdjustmentsList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.ComplexEntry attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.ComplexEntry attributes.
     */
    public int getJobLoadAdjustmentsCount() {
        if (m_jobLoadAdjustmentsList != null) {
            return m_jobLoadAdjustmentsList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.ComplexEntry attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.ComplexEntry attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.ComplexEntry attribute
     */
    public com.sun.grid.jgdi.configuration.ComplexEntry getJobLoadAdjustments(int index) {
        initJobLoadAdjustments();
        return (com.sun.grid.jgdi.configuration.ComplexEntry)m_jobLoadAdjustmentsList.get(index);
    }
   
    /**
     *  Determine if the jobLoadAdjustments attribute is set
     *  @return <code>true</code> if the jobLoadAdjustments attribute is set
     */
    public boolean isSetJobLoadAdjustments () {
        return (m_jobLoadAdjustmentsList != null) && (!m_jobLoadAdjustmentsList.isEmpty());
    }
   

    // Attribute loadAdjustmentDecayTime ------------------------------------------------
   
    /**
     *  Determine if the loadAdjustmentDecayTime attribute is set
     *  @return <code>true</code> if the loadAdjustmentDecayTime attribute is set
     */
    public boolean isSetLoadAdjustmentDecayTime() {
   
        return  (m_loadAdjustmentDecayTime != null);

    }
   
    private java.lang.String m_loadAdjustmentDecayTime;

    /**
     *   Set the loadAdjustmentDecayTime attribute.
     *
     *   @param aLoadAdjustmentDecayTime  the new value for the  loadAdjustmentDecayTime attribute
     */
    public void setLoadAdjustmentDecayTime(java.lang.String aLoadAdjustmentDecayTime) {   
        m_loadAdjustmentDecayTime = aLoadAdjustmentDecayTime;

    }

    /**
     *  Get the value of the loadAdjustmentDecayTime attribute.
     *  @return the value of the loadAdjustmentDecayTime attribute
     */
    public java.lang.String getLoadAdjustmentDecayTime() {
        return m_loadAdjustmentDecayTime;
    }


    // Attribute loadFormula ------------------------------------------------
   
    /**
     *  Determine if the loadFormula attribute is set
     *  @return <code>true</code> if the loadFormula attribute is set
     */
    public boolean isSetLoadFormula() {
   
        return  (m_loadFormula != null);

    }
   
    private java.lang.String m_loadFormula;

    /**
     *   Set the loadFormula attribute.
     *
     *   @param aLoadFormula  the new value for the  loadFormula attribute
     */
    public void setLoadFormula(java.lang.String aLoadFormula) {   
        m_loadFormula = aLoadFormula;

    }

    /**
     *  Get the value of the loadFormula attribute.
     *  @return the value of the loadFormula attribute
     */
    public java.lang.String getLoadFormula() {
        return m_loadFormula;
    }


    // Attribute scheddJobInfo ------------------------------------------------
   
    /**
     *  Determine if the scheddJobInfo attribute is set
     *  @return <code>true</code> if the scheddJobInfo attribute is set
     */
    public boolean isSetScheddJobInfo() {
   
        return  (m_scheddJobInfo != null);

    }
   
    private java.lang.String m_scheddJobInfo;

    /**
     *   Set the scheddJobInfo attribute.
     *
     *   @param aScheddJobInfo  the new value for the  scheddJobInfo attribute
     */
    public void setScheddJobInfo(java.lang.String aScheddJobInfo) {   
        m_scheddJobInfo = aScheddJobInfo;

    }

    /**
     *  Get the value of the scheddJobInfo attribute.
     *  @return the value of the scheddJobInfo attribute
     */
    public java.lang.String getScheddJobInfo() {
        return m_scheddJobInfo;
    }


    // Attribute flushSubmitSec ------------------------------------------------

    private boolean isFlushSubmitSecSet;
   
    /**
     *  Determine if the flushSubmitSec attribute is set
     *  @return <code>true</code> if the flushSubmitSec attribute is set
     */
    public boolean isSetFlushSubmitSec() {

        return isFlushSubmitSecSet;

    }
   
    private int m_flushSubmitSec;

    /**
     *   Set the flushSubmitSec attribute.
     *
     *   @param aFlushSubmitSec  the new value for the  flushSubmitSec attribute
     */
    public void setFlushSubmitSec(int aFlushSubmitSec) {   
        m_flushSubmitSec = aFlushSubmitSec;

        isFlushSubmitSecSet = true;

    }

    /**
     *  Get the value of the flushSubmitSec attribute.
     *  @return the value of the flushSubmitSec attribute
     */
    public int getFlushSubmitSec() {
        return m_flushSubmitSec;
    }


    // Attribute flushFinishSec ------------------------------------------------

    private boolean isFlushFinishSecSet;
   
    /**
     *  Determine if the flushFinishSec attribute is set
     *  @return <code>true</code> if the flushFinishSec attribute is set
     */
    public boolean isSetFlushFinishSec() {

        return isFlushFinishSecSet;

    }
   
    private int m_flushFinishSec;

    /**
     *   Set the flushFinishSec attribute.
     *
     *   @param aFlushFinishSec  the new value for the  flushFinishSec attribute
     */
    public void setFlushFinishSec(int aFlushFinishSec) {   
        m_flushFinishSec = aFlushFinishSec;

        isFlushFinishSecSet = true;

    }

    /**
     *  Get the value of the flushFinishSec attribute.
     *  @return the value of the flushFinishSec attribute
     */
    public int getFlushFinishSec() {
        return m_flushFinishSec;
    }


    // Attribute params ------------------------------------------------
   
    /**
     *  Determine if the params attribute is set
     *  @return <code>true</code> if the params attribute is set
     */
    public boolean isSetParams() {
   
        return  (m_params != null);

    }
   
    private java.lang.String m_params;

    /**
     *   Set the params attribute.
     *
     *   @param aParams  the new value for the  params attribute
     */
    public void setParams(java.lang.String aParams) {   
        m_params = aParams;

    }

    /**
     *  Get the value of the params attribute.
     *  @return the value of the params attribute
     */
    public java.lang.String getParams() {
        return m_params;
    }


    // Attribute reprioritizeInterval ------------------------------------------------
   
    /**
     *  Determine if the reprioritizeInterval attribute is set
     *  @return <code>true</code> if the reprioritizeInterval attribute is set
     */
    public boolean isSetReprioritizeInterval() {
   
        return  (m_reprioritizeInterval != null);

    }
   
    private java.lang.String m_reprioritizeInterval;

    /**
     *   Set the reprioritizeInterval attribute.
     *
     *   @param aReprioritizeInterval  the new value for the  reprioritizeInterval attribute
     */
    public void setReprioritizeInterval(java.lang.String aReprioritizeInterval) {   
        m_reprioritizeInterval = aReprioritizeInterval;

    }

    /**
     *  Get the value of the reprioritizeInterval attribute.
     *  @return the value of the reprioritizeInterval attribute
     */
    public java.lang.String getReprioritizeInterval() {
        return m_reprioritizeInterval;
    }


    // Attribute halftime ------------------------------------------------

    private boolean isHalftimeSet;
   
    /**
     *  Determine if the halftime attribute is set
     *  @return <code>true</code> if the halftime attribute is set
     */
    public boolean isSetHalftime() {

        return isHalftimeSet;

    }
   
    private int m_halftime;

    /**
     *   Set the halftime attribute.
     *
     *   @param aHalftime  the new value for the  halftime attribute
     */
    public void setHalftime(int aHalftime) {   
        m_halftime = aHalftime;

        isHalftimeSet = true;

    }

    /**
     *  Get the value of the halftime attribute.
     *  @return the value of the halftime attribute
     */
    public int getHalftime() {
        return m_halftime;
    }


    // Attribute usageWeightList ------------------------------------------------

    // keyClassName for SGE_STRING = String

   
    private Map m_usageWeight;

    private void initUsageWeight() {
        if (m_usageWeight == null) {
            m_usageWeight = new LinkedHashMap();
        }
    }
   
    /**
     *  <p>Put the attribute usageWeight for a key.</p>
     *
     *  @param key    the key
     *  @param value  the value
     */
    public void putUsageWeight(String key, double value) {   
        initUsageWeight();
        m_usageWeight.put(key,

                            new java.lang.Double(value)

                            );
    }

    /**
     *  <p>Get the default value of the attribute usageWeight.</p>
     *  @return the default value of the attribute usageWeight
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public double getDefaultUsageWeight() {
        if (m_usageWeight == null) {
            throw new IllegalStateException("default value for attribute usageWeight not found");
        }
        java.lang.Double ret = (java.lang.Double)m_usageWeight.get("default");
        if (ret == null) {
            throw new IllegalStateException("default value for attribute usageWeight not found");
        }

        return ret.doubleValue();

    }
   
    /**
     *  <p>Get the usageWeight attribute for a key.</p>
     *  @param   key   the key
     *  @return  the usageWeight attribute for the host or the
     *           default value of  usageWeight
     */
    public double getUsageWeight(String key) {
        initUsageWeight();
        if (m_usageWeight.containsKey(key)) {      
            java.lang.Double ret = (java.lang.Double)m_usageWeight.get(key);
            if (ret != null) {

                return ret.doubleValue();

            } else {
                return 0.0;
            }
        } else {
            return getDefaultUsageWeight();
        }
    }


    /**
     *  <p>remove the attribute usageWeight for a key.</p>
     *
     *  @param key tje key
     *  @return the value for the key or <code>null</code>
     *          if the value attribute was not defined for the key.
     */
    public java.lang.Double removeUsageWeight(String key) {
        initUsageWeight();
        return (java.lang.Double)m_usageWeight.remove(key);
    }

    /**
     *  <p>Remove the attribute usageWeight for all keys.</p>
     */
    public void removeAllUsageWeight() {
        if (m_usageWeight != null) {
            m_usageWeight.clear();
        }
    }
   
    /**
     *  Get the set of keys which have the attribute usageWeight set.
     *  @return set of keys
     */
    public Set<String> getUsageWeightKeys() {
        if (m_usageWeight == null) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(m_usageWeight.keySet());
        }
    }
   
    /**
     *  Get the number of keys which have the attribute usageWeight set.
     *  @return the number of keys which have the attribute usageWeight set.
     */
    public int getUsageWeightCount() {
        if (m_usageWeight == null) {
            return 0;
        } else {
            return m_usageWeight.size();
        }
    }
   
    /**
     *  Determine if any usageWeight attribute is set
     *  @return <code>true</code> if the usageWeight attribute is set
     */
    public boolean isSetUsageWeight () {
        return (m_usageWeight != null) && (!m_usageWeight.isEmpty());
    }
   
    /**
     *  Determine if any usageWeight attribute is for a key is set
     *  @param  key the key
     *  @return <code>true</code> if the usageWeight attribute is set
     */
    public boolean isSetUsageWeight(String key) {
        return (m_usageWeight != null) && (m_usageWeight.get(key) != null);
    }
   


    // Attribute compensationFactor ------------------------------------------------

    private boolean isCompensationFactorSet;
   
    /**
     *  Determine if the compensationFactor attribute is set
     *  @return <code>true</code> if the compensationFactor attribute is set
     */
    public boolean isSetCompensationFactor() {

        return isCompensationFactorSet;

    }
   
    private double m_compensationFactor;

    /**
     *   Set the compensationFactor attribute.
     *
     *   @param aCompensationFactor  the new value for the  compensationFactor attribute
     */
    public void setCompensationFactor(double aCompensationFactor) {   
        m_compensationFactor = aCompensationFactor;

        isCompensationFactorSet = true;

    }

    /**
     *  Get the value of the compensationFactor attribute.
     *  @return the value of the compensationFactor attribute
     */
    public double getCompensationFactor() {
        return m_compensationFactor;
    }


    // Attribute weightUser ------------------------------------------------

    private boolean isWeightUserSet;
   
    /**
     *  Determine if the weightUser attribute is set
     *  @return <code>true</code> if the weightUser attribute is set
     */
    public boolean isSetWeightUser() {

        return isWeightUserSet;

    }
   
    private double m_weightUser;

    /**
     *   Set the weightUser attribute.
     *
     *   @param aWeightUser  the new value for the  weightUser attribute
     */
    public void setWeightUser(double aWeightUser) {   
        m_weightUser = aWeightUser;

        isWeightUserSet = true;

    }

    /**
     *  Get the value of the weightUser attribute.
     *  @return the value of the weightUser attribute
     */
    public double getWeightUser() {
        return m_weightUser;
    }


    // Attribute weightProject ------------------------------------------------

    private boolean isWeightProjectSet;
   
    /**
     *  Determine if the weightProject attribute is set
     *  @return <code>true</code> if the weightProject attribute is set
     */
    public boolean isSetWeightProject() {

        return isWeightProjectSet;

    }
   
    private double m_weightProject;

    /**
     *   Set the weightProject attribute.
     *
     *   @param aWeightProject  the new value for the  weightProject attribute
     */
    public void setWeightProject(double aWeightProject) {   
        m_weightProject = aWeightProject;

        isWeightProjectSet = true;

    }

    /**
     *  Get the value of the weightProject attribute.
     *  @return the value of the weightProject attribute
     */
    public double getWeightProject() {
        return m_weightProject;
    }


    // Attribute weightDepartment ------------------------------------------------

    private boolean isWeightDepartmentSet;
   
    /**
     *  Determine if the weightDepartment attribute is set
     *  @return <code>true</code> if the weightDepartment attribute is set
     */
    public boolean isSetWeightDepartment() {

        return isWeightDepartmentSet;

    }
   
    private double m_weightDepartment;

    /**
     *   Set the weightDepartment attribute.
     *
     *   @param aWeightDepartment  the new value for the  weightDepartment attribute
     */
    public void setWeightDepartment(double aWeightDepartment) {   
        m_weightDepartment = aWeightDepartment;

        isWeightDepartmentSet = true;

    }

    /**
     *  Get the value of the weightDepartment attribute.
     *  @return the value of the weightDepartment attribute
     */
    public double getWeightDepartment() {
        return m_weightDepartment;
    }


    // Attribute weightJob ------------------------------------------------

    private boolean isWeightJobSet;
   
    /**
     *  Determine if the weightJob attribute is set
     *  @return <code>true</code> if the weightJob attribute is set
     */
    public boolean isSetWeightJob() {

        return isWeightJobSet;

    }
   
    private double m_weightJob;

    /**
     *   Set the weightJob attribute.
     *
     *   @param aWeightJob  the new value for the  weightJob attribute
     */
    public void setWeightJob(double aWeightJob) {   
        m_weightJob = aWeightJob;

        isWeightJobSet = true;

    }

    /**
     *  Get the value of the weightJob attribute.
     *  @return the value of the weightJob attribute
     */
    public double getWeightJob() {
        return m_weightJob;
    }


    // Attribute weightTicketsFunctional ------------------------------------------------

    private boolean isWeightTicketsFunctionalSet;
   
    /**
     *  Determine if the weightTicketsFunctional attribute is set
     *  @return <code>true</code> if the weightTicketsFunctional attribute is set
     */
    public boolean isSetWeightTicketsFunctional() {

        return isWeightTicketsFunctionalSet;

    }
   
    private int m_weightTicketsFunctional;

    /**
     *   Set the weightTicketsFunctional attribute.
     *
     *   @param aWeightTicketsFunctional  the new value for the  weightTicketsFunctional attribute
     */
    public void setWeightTicketsFunctional(int aWeightTicketsFunctional) {   
        m_weightTicketsFunctional = aWeightTicketsFunctional;

        isWeightTicketsFunctionalSet = true;

    }

    /**
     *  Get the value of the weightTicketsFunctional attribute.
     *  @return the value of the weightTicketsFunctional attribute
     */
    public int getWeightTicketsFunctional() {
        return m_weightTicketsFunctional;
    }


    // Attribute weightTicketsShare ------------------------------------------------

    private boolean isWeightTicketsShareSet;
   
    /**
     *  Determine if the weightTicketsShare attribute is set
     *  @return <code>true</code> if the weightTicketsShare attribute is set
     */
    public boolean isSetWeightTicketsShare() {

        return isWeightTicketsShareSet;

    }
   
    private int m_weightTicketsShare;

    /**
     *   Set the weightTicketsShare attribute.
     *
     *   @param aWeightTicketsShare  the new value for the  weightTicketsShare attribute
     */
    public void setWeightTicketsShare(int aWeightTicketsShare) {   
        m_weightTicketsShare = aWeightTicketsShare;

        isWeightTicketsShareSet = true;

    }

    /**
     *  Get the value of the weightTicketsShare attribute.
     *  @return the value of the weightTicketsShare attribute
     */
    public int getWeightTicketsShare() {
        return m_weightTicketsShare;
    }


    // Attribute weightTicketsOverride ------------------------------------------------

    private boolean isWeightTicketsOverrideSet;
   
    /**
     *  Determine if the weightTicketsOverride attribute is set
     *  @return <code>true</code> if the weightTicketsOverride attribute is set
     */
    public boolean isSetWeightTicketsOverride() {

        return isWeightTicketsOverrideSet;

    }
   
    private int m_weightTicketsOverride;

    /**
     *   Set the weightTicketsOverride attribute.
     *
     *   @param aWeightTicketsOverride  the new value for the  weightTicketsOverride attribute
     */
    public void setWeightTicketsOverride(int aWeightTicketsOverride) {   
        m_weightTicketsOverride = aWeightTicketsOverride;

        isWeightTicketsOverrideSet = true;

    }

    /**
     *  Get the value of the weightTicketsOverride attribute.
     *  @return the value of the weightTicketsOverride attribute
     */
    public int getWeightTicketsOverride() {
        return m_weightTicketsOverride;
    }


    // Attribute shareOverrideTickets ------------------------------------------------

    private boolean isShareOverrideTicketsSet;
   
    /**
     *  Determine if the shareOverrideTickets attribute is set
     *  @return <code>true</code> if the shareOverrideTickets attribute is set
     */
    public boolean isSetShareOverrideTickets() {

        return isShareOverrideTicketsSet;

    }
   
    private boolean m_shareOverrideTickets;

    /**
     *   Set the shareOverrideTickets attribute.
     *
     *   @param aShareOverrideTickets  the new value for the  shareOverrideTickets attribute
     */
    public void setShareOverrideTickets(boolean aShareOverrideTickets) {   
        m_shareOverrideTickets = aShareOverrideTickets;

        isShareOverrideTicketsSet = true;

    }

    /**
     *  Get the value of the shareOverrideTickets attribute.
     *  @return the value of the shareOverrideTickets attribute
     */
    public boolean isShareOverrideTickets() {
        return m_shareOverrideTickets;
    }


    // Attribute shareFunctionalShares ------------------------------------------------

    private boolean isShareFunctionalSharesSet;
   
    /**
     *  Determine if the shareFunctionalShares attribute is set
     *  @return <code>true</code> if the shareFunctionalShares attribute is set
     */
    public boolean isSetShareFunctionalShares() {

        return isShareFunctionalSharesSet;

    }
   
    private boolean m_shareFunctionalShares;

    /**
     *   Set the shareFunctionalShares attribute.
     *
     *   @param aShareFunctionalShares  the new value for the  shareFunctionalShares attribute
     */
    public void setShareFunctionalShares(boolean aShareFunctionalShares) {   
        m_shareFunctionalShares = aShareFunctionalShares;

        isShareFunctionalSharesSet = true;

    }

    /**
     *  Get the value of the shareFunctionalShares attribute.
     *  @return the value of the shareFunctionalShares attribute
     */
    public boolean isShareFunctionalShares() {
        return m_shareFunctionalShares;
    }


    // Attribute maxFunctionalJobsToSchedule ------------------------------------------------

    private boolean isMaxFunctionalJobsToScheduleSet;
   
    /**
     *  Determine if the maxFunctionalJobsToSchedule attribute is set
     *  @return <code>true</code> if the maxFunctionalJobsToSchedule attribute is set
     */
    public boolean isSetMaxFunctionalJobsToSchedule() {

        return isMaxFunctionalJobsToScheduleSet;

    }
   
    private int m_maxFunctionalJobsToSchedule;

    /**
     *   Set the maxFunctionalJobsToSchedule attribute.
     *
     *   @param aMaxFunctionalJobsToSchedule  the new value for the  maxFunctionalJobsToSchedule attribute
     */
    public void setMaxFunctionalJobsToSchedule(int aMaxFunctionalJobsToSchedule) {   
        m_maxFunctionalJobsToSchedule = aMaxFunctionalJobsToSchedule;

        isMaxFunctionalJobsToScheduleSet = true;

    }

    /**
     *  Get the value of the maxFunctionalJobsToSchedule attribute.
     *  @return the value of the maxFunctionalJobsToSchedule attribute
     */
    public int getMaxFunctionalJobsToSchedule() {
        return m_maxFunctionalJobsToSchedule;
    }


    // Attribute reportPjobTickets ------------------------------------------------

    private boolean isReportPjobTicketsSet;
   
    /**
     *  Determine if the reportPjobTickets attribute is set
     *  @return <code>true</code> if the reportPjobTickets attribute is set
     */
    public boolean isSetReportPjobTickets() {

        return isReportPjobTicketsSet;

    }
   
    private boolean m_reportPjobTickets;

    /**
     *   Set the reportPjobTickets attribute.
     *
     *   @param aReportPjobTickets  the new value for the  reportPjobTickets attribute
     */
    public void setReportPjobTickets(boolean aReportPjobTickets) {   
        m_reportPjobTickets = aReportPjobTickets;

        isReportPjobTicketsSet = true;

    }

    /**
     *  Get the value of the reportPjobTickets attribute.
     *  @return the value of the reportPjobTickets attribute
     */
    public boolean isReportPjobTickets() {
        return m_reportPjobTickets;
    }


    // Attribute maxPendingTasksPerJob ------------------------------------------------

    private boolean isMaxPendingTasksPerJobSet;
   
    /**
     *  Determine if the maxPendingTasksPerJob attribute is set
     *  @return <code>true</code> if the maxPendingTasksPerJob attribute is set
     */
    public boolean isSetMaxPendingTasksPerJob() {

        return isMaxPendingTasksPerJobSet;

    }
   
    private int m_maxPendingTasksPerJob;

    /**
     *   Set the maxPendingTasksPerJob attribute.
     *
     *   @param aMaxPendingTasksPerJob  the new value for the  maxPendingTasksPerJob attribute
     */
    public void setMaxPendingTasksPerJob(int aMaxPendingTasksPerJob) {   
        m_maxPendingTasksPerJob = aMaxPendingTasksPerJob;

        isMaxPendingTasksPerJobSet = true;

    }

    /**
     *  Get the value of the maxPendingTasksPerJob attribute.
     *  @return the value of the maxPendingTasksPerJob attribute
     */
    public int getMaxPendingTasksPerJob() {
        return m_maxPendingTasksPerJob;
    }


    // Attribute halflifeDecayList ------------------------------------------------
   
    /**
     *  Determine if the halflifeDecayList attribute is set
     *  @return <code>true</code> if the halflifeDecayList attribute is set
     */
    public boolean isSetHalflifeDecayList() {
   
        return  (m_halflifeDecayList != null);

    }
   
    private java.lang.String m_halflifeDecayList;

    /**
     *   Set the halflifeDecayList attribute.
     *
     *   @param aHalflifeDecayList  the new value for the  halflifeDecayList attribute
     */
    public void setHalflifeDecayList(java.lang.String aHalflifeDecayList) {   
        m_halflifeDecayList = aHalflifeDecayList;

    }

    /**
     *  Get the value of the halflifeDecayList attribute.
     *  @return the value of the halflifeDecayList attribute
     */
    public java.lang.String getHalflifeDecayList() {
        return m_halflifeDecayList;
    }


    // Attribute policyHierarchy ------------------------------------------------
   
    /**
     *  Determine if the policyHierarchy attribute is set
     *  @return <code>true</code> if the policyHierarchy attribute is set
     */
    public boolean isSetPolicyHierarchy() {
   
        return  (m_policyHierarchy != null);

    }
   
    private java.lang.String m_policyHierarchy;

    /**
     *   Set the policyHierarchy attribute.
     *
     *   @param aPolicyHierarchy  the new value for the  policyHierarchy attribute
     */
    public void setPolicyHierarchy(java.lang.String aPolicyHierarchy) {   
        m_policyHierarchy = aPolicyHierarchy;

    }

    /**
     *  Get the value of the policyHierarchy attribute.
     *  @return the value of the policyHierarchy attribute
     */
    public java.lang.String getPolicyHierarchy() {
        return m_policyHierarchy;
    }


    // Attribute weightTicket ------------------------------------------------

    private boolean isWeightTicketSet;
   
    /**
     *  Determine if the weightTicket attribute is set
     *  @return <code>true</code> if the weightTicket attribute is set
     */
    public boolean isSetWeightTicket() {

        return isWeightTicketSet;

    }
   
    private double m_weightTicket;

    /**
     *   Set the weightTicket attribute.
     *
     *   @param aWeightTicket  the new value for the  weightTicket attribute
     */
    public void setWeightTicket(double aWeightTicket) {   
        m_weightTicket = aWeightTicket;

        isWeightTicketSet = true;

    }

    /**
     *  Get the value of the weightTicket attribute.
     *  @return the value of the weightTicket attribute
     */
    public double getWeightTicket() {
        return m_weightTicket;
    }


    // Attribute weightWaitingTime ------------------------------------------------

    private boolean isWeightWaitingTimeSet;
   
    /**
     *  Determine if the weightWaitingTime attribute is set
     *  @return <code>true</code> if the weightWaitingTime attribute is set
     */
    public boolean isSetWeightWaitingTime() {

        return isWeightWaitingTimeSet;

    }
   
    private double m_weightWaitingTime;

    /**
     *   Set the weightWaitingTime attribute.
     *
     *   @param aWeightWaitingTime  the new value for the  weightWaitingTime attribute
     */
    public void setWeightWaitingTime(double aWeightWaitingTime) {   
        m_weightWaitingTime = aWeightWaitingTime;

        isWeightWaitingTimeSet = true;

    }

    /**
     *  Get the value of the weightWaitingTime attribute.
     *  @return the value of the weightWaitingTime attribute
     */
    public double getWeightWaitingTime() {
        return m_weightWaitingTime;
    }


    // Attribute weightDeadline ------------------------------------------------

    private boolean isWeightDeadlineSet;
   
    /**
     *  Determine if the weightDeadline attribute is set
     *  @return <code>true</code> if the weightDeadline attribute is set
     */
    public boolean isSetWeightDeadline() {

        return isWeightDeadlineSet;

    }
   
    private double m_weightDeadline;

    /**
     *   Set the weightDeadline attribute.
     *
     *   @param aWeightDeadline  the new value for the  weightDeadline attribute
     */
    public void setWeightDeadline(double aWeightDeadline) {   
        m_weightDeadline = aWeightDeadline;

        isWeightDeadlineSet = true;

    }

    /**
     *  Get the value of the weightDeadline attribute.
     *  @return the value of the weightDeadline attribute
     */
    public double getWeightDeadline() {
        return m_weightDeadline;
    }


    // Attribute weightUrgency ------------------------------------------------

    private boolean isWeightUrgencySet;
   
    /**
     *  Determine if the weightUrgency attribute is set
     *  @return <code>true</code> if the weightUrgency attribute is set
     */
    public boolean isSetWeightUrgency() {

        return isWeightUrgencySet;

    }
   
    private double m_weightUrgency;

    /**
     *   Set the weightUrgency attribute.
     *
     *   @param aWeightUrgency  the new value for the  weightUrgency attribute
     */
    public void setWeightUrgency(double aWeightUrgency) {   
        m_weightUrgency = aWeightUrgency;

        isWeightUrgencySet = true;

    }

    /**
     *  Get the value of the weightUrgency attribute.
     *  @return the value of the weightUrgency attribute
     */
    public double getWeightUrgency() {
        return m_weightUrgency;
    }


    // Attribute weightPriority ------------------------------------------------

    private boolean isWeightPrioritySet;
   
    /**
     *  Determine if the weightPriority attribute is set
     *  @return <code>true</code> if the weightPriority attribute is set
     */
    public boolean isSetWeightPriority() {

        return isWeightPrioritySet;

    }
   
    private double m_weightPriority;

    /**
     *   Set the weightPriority attribute.
     *
     *   @param aWeightPriority  the new value for the  weightPriority attribute
     */
    public void setWeightPriority(double aWeightPriority) {   
        m_weightPriority = aWeightPriority;

        isWeightPrioritySet = true;

    }

    /**
     *  Get the value of the weightPriority attribute.
     *  @return the value of the weightPriority attribute
     */
    public double getWeightPriority() {
        return m_weightPriority;
    }


    // Attribute maxReservation ------------------------------------------------

    private boolean isMaxReservationSet;
   
    /**
     *  Determine if the maxReservation attribute is set
     *  @return <code>true</code> if the maxReservation attribute is set
     */
    public boolean isSetMaxReservation() {

        return isMaxReservationSet;

    }
   
    private int m_maxReservation;

    /**
     *   Set the maxReservation attribute.
     *
     *   @param aMaxReservation  the new value for the  maxReservation attribute
     */
    public void setMaxReservation(int aMaxReservation) {   
        m_maxReservation = aMaxReservation;

        isMaxReservationSet = true;

    }

    /**
     *  Get the value of the maxReservation attribute.
     *  @return the value of the maxReservation attribute
     */
    public int getMaxReservation() {
        return m_maxReservation;
    }


    // Attribute defaultDuration ------------------------------------------------
   
    /**
     *  Determine if the defaultDuration attribute is set
     *  @return <code>true</code> if the defaultDuration attribute is set
     */
    public boolean isSetDefaultDuration() {
   
        return  (m_defaultDuration != null);

    }
   
    private java.lang.String m_defaultDuration;

    /**
     *   Set the defaultDuration attribute.
     *
     *   @param aDefaultDuration  the new value for the  defaultDuration attribute
     */
    public void setDefaultDuration(java.lang.String aDefaultDuration) {   
        m_defaultDuration = aDefaultDuration;

    }

    /**
     *  Get the value of the defaultDuration attribute.
     *  @return the value of the defaultDuration attribute
     */
    public java.lang.String getDefaultDuration() {
        return m_defaultDuration;
    }




    /**
     *  Is the primary key information equal to the primary key information
     *  of <code>obj</code>.
     *
     *  @param obj   the compared object
     *  @return <code>true</code> if the primary key information is equal to the
     *          primary key informations of <code>obj</code>.
     */
    public boolean equals(Object obj) {
            
            return obj instanceof SchedConfImpl;

    }

    
    
    public boolean equalsCompletely(Object obj) {
        Logger logger = Logger.getLogger(getClass().getName());
        if (obj instanceof  SchedConfImpl) {
            com.sun.grid.jgdi.configuration.SchedConf obj1 = (com.sun.grid.jgdi.configuration.SchedConf)obj;

            {
                java.lang.String value1 = getAlgorithm();
                java.lang.String value2 = obj1.getAlgorithm();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute SC_algorithm of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes SC_algorithm are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                java.lang.String value1 = getScheduleInterval();
                java.lang.String value2 = obj1.getScheduleInterval();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute SC_schedule_interval of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes SC_schedule_interval are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                int value1 = getMaxujobs();
                int value2 = obj1.getMaxujobs();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes SC_maxujobs are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getQueueSortMethod();
                int value2 = obj1.getQueueSortMethod();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes SC_queue_sort_method are not equal");
                }
                return false;
            }

            }

            {
                int jobLoadAdjustmentsCount = getJobLoadAdjustmentsCount();
                if (jobLoadAdjustmentsCount != obj1.getJobLoadAdjustmentsCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists jobLoadAdjustments has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < jobLoadAdjustmentsCount; i++) {
                    com.sun.grid.jgdi.configuration.ComplexEntry value1 = getJobLoadAdjustments(i);
                    com.sun.grid.jgdi.configuration.ComplexEntry value2 = obj1.getJobLoadAdjustments(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute SC_job_load_adjustments of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

                } // end of for
            }

            {
                java.lang.String value1 = getLoadAdjustmentDecayTime();
                java.lang.String value2 = obj1.getLoadAdjustmentDecayTime();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute SC_load_adjustment_decay_time of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes SC_load_adjustment_decay_time are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                java.lang.String value1 = getLoadFormula();
                java.lang.String value2 = obj1.getLoadFormula();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute SC_load_formula of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes SC_load_formula are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                java.lang.String value1 = getScheddJobInfo();
                java.lang.String value2 = obj1.getScheddJobInfo();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute SC_schedd_job_info of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes SC_schedd_job_info are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                int value1 = getFlushSubmitSec();
                int value2 = obj1.getFlushSubmitSec();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes SC_flush_submit_sec are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getFlushFinishSec();
                int value2 = obj1.getFlushFinishSec();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes SC_flush_finish_sec are not equal");
                }
                return false;
            }

            }

            {
                java.lang.String value1 = getParams();
                java.lang.String value2 = obj1.getParams();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute SC_params of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes SC_params are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                java.lang.String value1 = getReprioritizeInterval();
                java.lang.String value2 = obj1.getReprioritizeInterval();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute SC_reprioritize_interval of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes SC_reprioritize_interval are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                int value1 = getHalftime();
                int value2 = obj1.getHalftime();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes SC_halftime are not equal");
                }
                return false;
            }

            }
           
            {
                Set usageWeightSet1 = getUsageWeightKeys();
                Set usageWeightSet2 = obj1.getUsageWeightKeys();
                if (usageWeightSet1.size() != usageWeightSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("maps usageWeight has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getUsageWeightKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    double value1 = getUsageWeight(key);
                    double value2 = obj1.getUsageWeight(key);             

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes UA_value are not equal");
                }
                return false;
            }

                }
            }

            {
                double value1 = getCompensationFactor();
                double value2 = obj1.getCompensationFactor();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes SC_compensation_factor are not equal");
                }
                return false;
            }

            }

            {
                double value1 = getWeightUser();
                double value2 = obj1.getWeightUser();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes SC_weight_user are not equal");
                }
                return false;
            }

            }

            {
                double value1 = getWeightProject();
                double value2 = obj1.getWeightProject();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes SC_weight_project are not equal");
                }
                return false;
            }

            }

            {
                double value1 = getWeightDepartment();
                double value2 = obj1.getWeightDepartment();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes SC_weight_department are not equal");
                }
                return false;
            }

            }

            {
                double value1 = getWeightJob();
                double value2 = obj1.getWeightJob();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes SC_weight_job are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getWeightTicketsFunctional();
                int value2 = obj1.getWeightTicketsFunctional();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes SC_weight_tickets_functional are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getWeightTicketsShare();
                int value2 = obj1.getWeightTicketsShare();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes SC_weight_tickets_share are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getWeightTicketsOverride();
                int value2 = obj1.getWeightTicketsOverride();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes SC_weight_tickets_override are not equal");
                }
                return false;
            }

            }

            {
                boolean value1 = isShareOverrideTickets();
                boolean value2 = obj1.isShareOverrideTickets();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes SC_share_override_tickets are not equal");
                }
                return false;
            }

            }

            {
                boolean value1 = isShareFunctionalShares();
                boolean value2 = obj1.isShareFunctionalShares();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes SC_share_functional_shares are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getMaxFunctionalJobsToSchedule();
                int value2 = obj1.getMaxFunctionalJobsToSchedule();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes SC_max_functional_jobs_to_schedule are not equal");
                }
                return false;
            }

            }

            {
                boolean value1 = isReportPjobTickets();
                boolean value2 = obj1.isReportPjobTickets();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes SC_report_pjob_tickets are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getMaxPendingTasksPerJob();
                int value2 = obj1.getMaxPendingTasksPerJob();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes SC_max_pending_tasks_per_job are not equal");
                }
                return false;
            }

            }

            {
                java.lang.String value1 = getHalflifeDecayList();
                java.lang.String value2 = obj1.getHalflifeDecayList();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute SC_halflife_decay_list of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes SC_halflife_decay_list are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                java.lang.String value1 = getPolicyHierarchy();
                java.lang.String value2 = obj1.getPolicyHierarchy();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute SC_policy_hierarchy of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes SC_policy_hierarchy are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                double value1 = getWeightTicket();
                double value2 = obj1.getWeightTicket();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes SC_weight_ticket are not equal");
                }
                return false;
            }

            }

            {
                double value1 = getWeightWaitingTime();
                double value2 = obj1.getWeightWaitingTime();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes SC_weight_waiting_time are not equal");
                }
                return false;
            }

            }

            {
                double value1 = getWeightDeadline();
                double value2 = obj1.getWeightDeadline();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes SC_weight_deadline are not equal");
                }
                return false;
            }

            }

            {
                double value1 = getWeightUrgency();
                double value2 = obj1.getWeightUrgency();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes SC_weight_urgency are not equal");
                }
                return false;
            }

            }

            {
                double value1 = getWeightPriority();
                double value2 = obj1.getWeightPriority();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes SC_weight_priority are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getMaxReservation();
                int value2 = obj1.getMaxReservation();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes SC_max_reservation are not equal");
                }
                return false;
            }

            }

            {
                java.lang.String value1 = getDefaultDuration();
                java.lang.String value2 = obj1.getDefaultDuration();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute SC_default_duration of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes SC_default_duration are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            return true;
        } else {
            return true;
        }
    }
  
    public java.lang.String toString() {
        StringBuilder ret = new StringBuilder();
        ret.append("SchedConfImpl(");

        ret.append(")");
        return ret.toString();
    }



    public java.lang.String dump() {
        StringBuilder sb = new StringBuilder();

            {
                java.lang.String value = getAlgorithm();
                sb.append("Algorithm = " + value + "\n");
            }

            {
                java.lang.String value = getScheduleInterval();
                sb.append("ScheduleInterval = " + value + "\n");
            }

            {
                int value = getMaxujobs();
                sb.append("Maxujobs = " + value + "\n");
            }

            {
                int value = getQueueSortMethod();
                sb.append("QueueSortMethod = " + value + "\n");
            }

            int jobLoadAdjustmentsCount = getJobLoadAdjustmentsCount();
            for (int i = 0; i < jobLoadAdjustmentsCount; i++) {
                com.sun.grid.jgdi.configuration.ComplexEntry value = getJobLoadAdjustments(i);
                
                sb.append("JobLoadAdjustments[" + i + "] = " + value.dump() + "\n");
                
            } // end of for

            {
                java.lang.String value = getLoadAdjustmentDecayTime();
                sb.append("LoadAdjustmentDecayTime = " + value + "\n");
            }

            {
                java.lang.String value = getLoadFormula();
                sb.append("LoadFormula = " + value + "\n");
            }

            {
                java.lang.String value = getScheddJobInfo();
                sb.append("ScheddJobInfo = " + value + "\n");
            }

            {
                int value = getFlushSubmitSec();
                sb.append("FlushSubmitSec = " + value + "\n");
            }

            {
                int value = getFlushFinishSec();
                sb.append("FlushFinishSec = " + value + "\n");
            }

            {
                java.lang.String value = getParams();
                sb.append("Params = " + value + "\n");
            }

            {
                java.lang.String value = getReprioritizeInterval();
                sb.append("ReprioritizeInterval = " + value + "\n");
            }

            {
                int value = getHalftime();
                sb.append("Halftime = " + value + "\n");
            }

            for (java.lang.String key : getUsageWeightKeys()) {
                double value = getUsageWeight(key);
                
                sb.append("UsageWeight[" + key + "] = " + value + "\n");
                
            }

            {
                double value = getCompensationFactor();
                sb.append("CompensationFactor = " + value + "\n");
            }

            {
                double value = getWeightUser();
                sb.append("WeightUser = " + value + "\n");
            }

            {
                double value = getWeightProject();
                sb.append("WeightProject = " + value + "\n");
            }

            {
                double value = getWeightDepartment();
                sb.append("WeightDepartment = " + value + "\n");
            }

            {
                double value = getWeightJob();
                sb.append("WeightJob = " + value + "\n");
            }

            {
                int value = getWeightTicketsFunctional();
                sb.append("WeightTicketsFunctional = " + value + "\n");
            }

            {
                int value = getWeightTicketsShare();
                sb.append("WeightTicketsShare = " + value + "\n");
            }

            {
                int value = getWeightTicketsOverride();
                sb.append("WeightTicketsOverride = " + value + "\n");
            }

            {
                boolean value = isShareOverrideTickets();
                sb.append("ShareOverrideTickets = " + value + "\n");
            }

            {
                boolean value = isShareFunctionalShares();
                sb.append("ShareFunctionalShares = " + value + "\n");
            }

            {
                int value = getMaxFunctionalJobsToSchedule();
                sb.append("MaxFunctionalJobsToSchedule = " + value + "\n");
            }

            {
                boolean value = isReportPjobTickets();
                sb.append("ReportPjobTickets = " + value + "\n");
            }

            {
                int value = getMaxPendingTasksPerJob();
                sb.append("MaxPendingTasksPerJob = " + value + "\n");
            }

            {
                java.lang.String value = getHalflifeDecayList();
                sb.append("HalflifeDecayList = " + value + "\n");
            }

            {
                java.lang.String value = getPolicyHierarchy();
                sb.append("PolicyHierarchy = " + value + "\n");
            }

            {
                double value = getWeightTicket();
                sb.append("WeightTicket = " + value + "\n");
            }

            {
                double value = getWeightWaitingTime();
                sb.append("WeightWaitingTime = " + value + "\n");
            }

            {
                double value = getWeightDeadline();
                sb.append("WeightDeadline = " + value + "\n");
            }

            {
                double value = getWeightUrgency();
                sb.append("WeightUrgency = " + value + "\n");
            }

            {
                double value = getWeightPriority();
                sb.append("WeightPriority = " + value + "\n");
            }

            {
                int value = getMaxReservation();
                sb.append("MaxReservation = " + value + "\n");
            }

            {
                java.lang.String value = getDefaultDuration();
                sb.append("DefaultDuration = " + value + "\n");
            }

        return sb.toString();
    }    

 
}
