/*___INFO__MARK_BEGIN__*/
/*************************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  the Sun Industry Standards Source License Version 1.2
 *
 *  Sun Microsystems Inc., March, 2001
 *
 *
 *  Sun Industry Standards Source License Version 1.2
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.2 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *   Copyright: 2001 by Sun Microsystems, Inc.
 *
 *   All Rights Reserved.
 *
 ************************************************************************/
/*___INFO__MARK_END__*/
/**
 *  Generated from javamodel_impl.jsp
 *  !!! DO NOT EDIT THIS FILE !!!
 */

package com.sun.grid.jgdi.configuration;

import javax.management.*;
import com.sun.grid.jgdi.configuration.GEObject;
import java.util.List;
import java.util.LinkedList;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.logging.Logger;
import java.util.logging.Level;

/**
 *  Java representation of the cull object PET_Type
 *  defined in sge_all_listsL.template
 *
 *  <p><strong>Warning:</strong>  The  PETaskImpl class will 
 *  not be compatible with future Sun&trade; Grid Engine releases.</p>
 */
public class PETaskImpl extends    GEObjectImpl implements PETask {


   /**
    *  Create a new instance of PETaskImpl. The new instance
    *  will not be initialized with the default values.
    */
   public PETaskImpl() {
      this(false);
   }
   
   /**
    *   Create a new instanceof
    *   @param  initWithDefaultValues if <code>true</code> the new instance will
    *                                 be initialized with the default values as defined
    *                                 in the cull definition.
    */
   public PETaskImpl(boolean initWithDefaultValues) { 

      if (initWithDefaultValues) {     
    }

  } // end of default constructor
  
  // --- newInstance method with primary key field
  

   /**
    *  Create a new instance of PETaskImpl
    */
   public PETaskImpl(java.lang.String id ) {

   
         setId(id);

    }



    // Attribute id ------------------------------------------------
   
    /**
     *  Determine if the id attribute is set
     *  @return <code>true</code> if the id attribute is set
     */
    public boolean isSetId() {
   
        return  (m_id != null);

    }
   
    private java.lang.String m_id;

    /**
     *   Set the id attribute.
     *
     *   @param aId  the new value for the  id attribute
     */
    public void setId(java.lang.String aId) {   
        m_id = aId;

    }

    /**
     *  Get the value of the id attribute.
     *  @return the value of the id attribute
     */
    public java.lang.String getId() {
        return m_id;
    }


    // Attribute name ------------------------------------------------
   
    /**
     *  Determine if the name attribute is set
     *  @return <code>true</code> if the name attribute is set
     */
    public boolean isSetName() {
   
        return  (m_name != null);

    }
   
    private java.lang.String m_name;

    /**
     *   Set the name attribute.
     *
     *   @param aName  the new value for the  name attribute
     */
    public void setName(java.lang.String aName) {   
        m_name = aName;

    }

    /**
     *  Get the value of the name attribute.
     *  @return the value of the name attribute
     */
    public java.lang.String getName() {
        return m_name;
    }


    // Attribute status ------------------------------------------------

    private boolean isStatusSet;
   
    /**
     *  Determine if the status attribute is set
     *  @return <code>true</code> if the status attribute is set
     */
    public boolean isSetStatus() {

        return isStatusSet;

    }
   
    private int m_status;

    /**
     *   Set the status attribute.
     *
     *   @param aStatus  the new value for the  status attribute
     */
    public void setStatus(int aStatus) {   
        m_status = aStatus;

        isStatusSet = true;

    }

    /**
     *  Get the value of the status attribute.
     *  @return the value of the status attribute
     */
    public int getStatus() {
        return m_status;
    }


    // Attribute grantedDestinIdentifierList ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.JG > m_grantedDestinIdentifierList;
   
    private void initGrantedDestinIdentifier() {
        if (m_grantedDestinIdentifierList == null) {
            m_grantedDestinIdentifierList = new LinkedList< com.sun.grid.jgdi.configuration.JG >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.JG attribute.

     *   @param agrantedDestinIdentifier  the new com.sun.grid.jgdi.configuration.JG attribute
     */
    public void addGrantedDestinIdentifier(com.sun.grid.jgdi.configuration.JG agrantedDestinIdentifier) {   
        initGrantedDestinIdentifier();
        
        m_grantedDestinIdentifierList.add(agrantedDestinIdentifier);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.JG attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.JG attribute
     *   @param agrantedDestinIdentifier  the new com.sun.grid.jgdi.configuration.JG attribute
     */
    public void setGrantedDestinIdentifier(int index, com.sun.grid.jgdi.configuration.JG agrantedDestinIdentifier) {
        initGrantedDestinIdentifier();
        m_grantedDestinIdentifierList.set(index, agrantedDestinIdentifier);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.JG attributes.
     */
    public void removeAllGrantedDestinIdentifier() {
        if (m_grantedDestinIdentifierList != null) {
            m_grantedDestinIdentifierList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.JG attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.JG attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.JG attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.JG removeGrantedDestinIdentifier(int index) {
        initGrantedDestinIdentifier();
        return (com.sun.grid.jgdi.configuration.JG)m_grantedDestinIdentifierList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.JG attribute.
     *  @param agrantedDestinIdentifier  the com.sun.grid.jgdi.configuration.JG attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.JG attribute has been removed
     */
    public boolean removeGrantedDestinIdentifier(com.sun.grid.jgdi.configuration.JG agrantedDestinIdentifier) {
        initGrantedDestinIdentifier();
        return m_grantedDestinIdentifierList.remove(agrantedDestinIdentifier);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.JG attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.JG attributes
     */
    public List< com.sun.grid.jgdi.configuration.JG > getGrantedDestinIdentifierList() {
        initGrantedDestinIdentifier();
        return Collections.unmodifiableList(m_grantedDestinIdentifierList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.JG attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.JG attributes.
     */
    public int getGrantedDestinIdentifierCount() {
        if (m_grantedDestinIdentifierList != null) {
            return m_grantedDestinIdentifierList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.JG attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.JG attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.JG attribute
     */
    public com.sun.grid.jgdi.configuration.JG getGrantedDestinIdentifier(int index) {
        initGrantedDestinIdentifier();
        return (com.sun.grid.jgdi.configuration.JG)m_grantedDestinIdentifierList.get(index);
    }
   
    /**
     *  Determine if the grantedDestinIdentifier attribute is set
     *  @return <code>true</code> if the grantedDestinIdentifier attribute is set
     */
    public boolean isSetGrantedDestinIdentifier () {
        return (m_grantedDestinIdentifierList != null) && (!m_grantedDestinIdentifierList.isEmpty());
    }
   

    // Attribute pid ------------------------------------------------

    private boolean isPidSet;
   
    /**
     *  Determine if the pid attribute is set
     *  @return <code>true</code> if the pid attribute is set
     */
    public boolean isSetPid() {

        return isPidSet;

    }
   
    private int m_pid;

    /**
     *   Set the pid attribute.
     *
     *   @param aPid  the new value for the  pid attribute
     */
    public void setPid(int aPid) {   
        m_pid = aPid;

        isPidSet = true;

    }

    /**
     *  Get the value of the pid attribute.
     *  @return the value of the pid attribute
     */
    public int getPid() {
        return m_pid;
    }


    // Attribute osjobid ------------------------------------------------
   
    /**
     *  Determine if the osjobid attribute is set
     *  @return <code>true</code> if the osjobid attribute is set
     */
    public boolean isSetOsjobid() {
   
        return  (m_osjobid != null);

    }
   
    private java.lang.String m_osjobid;

    /**
     *   Set the osjobid attribute.
     *
     *   @param aOsjobid  the new value for the  osjobid attribute
     */
    public void setOsjobid(java.lang.String aOsjobid) {   
        m_osjobid = aOsjobid;

    }

    /**
     *  Get the value of the osjobid attribute.
     *  @return the value of the osjobid attribute
     */
    public java.lang.String getOsjobid() {
        return m_osjobid;
    }


    // Attribute usage ------------------------------------------------

    // keyClassName for SGE_STRING = String

   
    private Map m_usage;

    private void initUsage() {
        if (m_usage == null) {
            m_usage = new LinkedHashMap();
        }
    }
   
    /**
     *  <p>Put the attribute usage for a key.</p>
     *
     *  @param key    the key
     *  @param value  the value
     */
    public void putUsage(String key, double value) {   
        initUsage();
        m_usage.put(key,

                            new java.lang.Double(value)

                            );
    }

    /**
     *  <p>Get the default value of the attribute usage.</p>
     *  @return the default value of the attribute usage
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public double getDefaultUsage() {
        if (m_usage == null) {
            throw new IllegalStateException("default value for attribute usage not found");
        }
        java.lang.Double ret = (java.lang.Double)m_usage.get("default");
        if (ret == null) {
            throw new IllegalStateException("default value for attribute usage not found");
        }

        return ret.doubleValue();

    }
   
    /**
     *  <p>Get the usage attribute for a key.</p>
     *  @param   key   the key
     *  @return  the usage attribute for the host or the
     *           default value of  usage
     */
    public double getUsage(String key) {
        initUsage();
        if (m_usage.containsKey(key)) {      
            java.lang.Double ret = (java.lang.Double)m_usage.get(key);
            if (ret != null) {

                return ret.doubleValue();

            } else {
                return 0.0;
            }
        } else {
            return getDefaultUsage();
        }
    }


    /**
     *  <p>remove the attribute usage for a key.</p>
     *
     *  @param key tje key
     *  @return the value for the key or <code>null</code>
     *          if the value attribute was not defined for the key.
     */
    public java.lang.Double removeUsage(String key) {
        initUsage();
        return (java.lang.Double)m_usage.remove(key);
    }

    /**
     *  <p>Remove the attribute usage for all keys.</p>
     */
    public void removeAllUsage() {
        if (m_usage != null) {
            m_usage.clear();
        }
    }
   
    /**
     *  Get the set of keys which have the attribute usage set.
     *  @return set of keys
     */
    public Set<String> getUsageKeys() {
        if (m_usage == null) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(m_usage.keySet());
        }
    }
   
    /**
     *  Get the number of keys which have the attribute usage set.
     *  @return the number of keys which have the attribute usage set.
     */
    public int getUsageCount() {
        if (m_usage == null) {
            return 0;
        } else {
            return m_usage.size();
        }
    }
   
    /**
     *  Determine if any usage attribute is set
     *  @return <code>true</code> if the usage attribute is set
     */
    public boolean isSetUsage () {
        return (m_usage != null) && (!m_usage.isEmpty());
    }
   
    /**
     *  Determine if any usage attribute is for a key is set
     *  @param  key the key
     *  @return <code>true</code> if the usage attribute is set
     */
    public boolean isSetUsage(String key) {
        return (m_usage != null) && (m_usage.get(key) != null);
    }
   


    // Attribute scaledUsage ------------------------------------------------

    // keyClassName for SGE_STRING = String

   
    private Map m_scaledUsage;

    private void initScaledUsage() {
        if (m_scaledUsage == null) {
            m_scaledUsage = new LinkedHashMap();
        }
    }
   
    /**
     *  <p>Put the attribute scaledUsage for a key.</p>
     *
     *  @param key    the key
     *  @param value  the value
     */
    public void putScaledUsage(String key, double value) {   
        initScaledUsage();
        m_scaledUsage.put(key,

                            new java.lang.Double(value)

                            );
    }

    /**
     *  <p>Get the default value of the attribute scaledUsage.</p>
     *  @return the default value of the attribute scaledUsage
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public double getDefaultScaledUsage() {
        if (m_scaledUsage == null) {
            throw new IllegalStateException("default value for attribute scaledUsage not found");
        }
        java.lang.Double ret = (java.lang.Double)m_scaledUsage.get("default");
        if (ret == null) {
            throw new IllegalStateException("default value for attribute scaledUsage not found");
        }

        return ret.doubleValue();

    }
   
    /**
     *  <p>Get the scaledUsage attribute for a key.</p>
     *  @param   key   the key
     *  @return  the scaledUsage attribute for the host or the
     *           default value of  scaledUsage
     */
    public double getScaledUsage(String key) {
        initScaledUsage();
        if (m_scaledUsage.containsKey(key)) {      
            java.lang.Double ret = (java.lang.Double)m_scaledUsage.get(key);
            if (ret != null) {

                return ret.doubleValue();

            } else {
                return 0.0;
            }
        } else {
            return getDefaultScaledUsage();
        }
    }


    /**
     *  <p>remove the attribute scaledUsage for a key.</p>
     *
     *  @param key tje key
     *  @return the value for the key or <code>null</code>
     *          if the value attribute was not defined for the key.
     */
    public java.lang.Double removeScaledUsage(String key) {
        initScaledUsage();
        return (java.lang.Double)m_scaledUsage.remove(key);
    }

    /**
     *  <p>Remove the attribute scaledUsage for all keys.</p>
     */
    public void removeAllScaledUsage() {
        if (m_scaledUsage != null) {
            m_scaledUsage.clear();
        }
    }
   
    /**
     *  Get the set of keys which have the attribute scaledUsage set.
     *  @return set of keys
     */
    public Set<String> getScaledUsageKeys() {
        if (m_scaledUsage == null) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(m_scaledUsage.keySet());
        }
    }
   
    /**
     *  Get the number of keys which have the attribute scaledUsage set.
     *  @return the number of keys which have the attribute scaledUsage set.
     */
    public int getScaledUsageCount() {
        if (m_scaledUsage == null) {
            return 0;
        } else {
            return m_scaledUsage.size();
        }
    }
   
    /**
     *  Determine if any scaledUsage attribute is set
     *  @return <code>true</code> if the scaledUsage attribute is set
     */
    public boolean isSetScaledUsage () {
        return (m_scaledUsage != null) && (!m_scaledUsage.isEmpty());
    }
   
    /**
     *  Determine if any scaledUsage attribute is for a key is set
     *  @param  key the key
     *  @return <code>true</code> if the scaledUsage attribute is set
     */
    public boolean isSetScaledUsage(String key) {
        return (m_scaledUsage != null) && (m_scaledUsage.get(key) != null);
    }
   


    // Attribute reportedUsage ------------------------------------------------

    // keyClassName for SGE_STRING = String

   
    private Map m_reportedUsage;

    private void initReportedUsage() {
        if (m_reportedUsage == null) {
            m_reportedUsage = new LinkedHashMap();
        }
    }
   
    /**
     *  <p>Put the attribute reportedUsage for a key.</p>
     *
     *  @param key    the key
     *  @param value  the value
     */
    public void putReportedUsage(String key, double value) {   
        initReportedUsage();
        m_reportedUsage.put(key,

                            new java.lang.Double(value)

                            );
    }

    /**
     *  <p>Get the default value of the attribute reportedUsage.</p>
     *  @return the default value of the attribute reportedUsage
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public double getDefaultReportedUsage() {
        if (m_reportedUsage == null) {
            throw new IllegalStateException("default value for attribute reportedUsage not found");
        }
        java.lang.Double ret = (java.lang.Double)m_reportedUsage.get("default");
        if (ret == null) {
            throw new IllegalStateException("default value for attribute reportedUsage not found");
        }

        return ret.doubleValue();

    }
   
    /**
     *  <p>Get the reportedUsage attribute for a key.</p>
     *  @param   key   the key
     *  @return  the reportedUsage attribute for the host or the
     *           default value of  reportedUsage
     */
    public double getReportedUsage(String key) {
        initReportedUsage();
        if (m_reportedUsage.containsKey(key)) {      
            java.lang.Double ret = (java.lang.Double)m_reportedUsage.get(key);
            if (ret != null) {

                return ret.doubleValue();

            } else {
                return 0.0;
            }
        } else {
            return getDefaultReportedUsage();
        }
    }


    /**
     *  <p>remove the attribute reportedUsage for a key.</p>
     *
     *  @param key tje key
     *  @return the value for the key or <code>null</code>
     *          if the value attribute was not defined for the key.
     */
    public java.lang.Double removeReportedUsage(String key) {
        initReportedUsage();
        return (java.lang.Double)m_reportedUsage.remove(key);
    }

    /**
     *  <p>Remove the attribute reportedUsage for all keys.</p>
     */
    public void removeAllReportedUsage() {
        if (m_reportedUsage != null) {
            m_reportedUsage.clear();
        }
    }
   
    /**
     *  Get the set of keys which have the attribute reportedUsage set.
     *  @return set of keys
     */
    public Set<String> getReportedUsageKeys() {
        if (m_reportedUsage == null) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(m_reportedUsage.keySet());
        }
    }
   
    /**
     *  Get the number of keys which have the attribute reportedUsage set.
     *  @return the number of keys which have the attribute reportedUsage set.
     */
    public int getReportedUsageCount() {
        if (m_reportedUsage == null) {
            return 0;
        } else {
            return m_reportedUsage.size();
        }
    }
   
    /**
     *  Determine if any reportedUsage attribute is set
     *  @return <code>true</code> if the reportedUsage attribute is set
     */
    public boolean isSetReportedUsage () {
        return (m_reportedUsage != null) && (!m_reportedUsage.isEmpty());
    }
   
    /**
     *  Determine if any reportedUsage attribute is for a key is set
     *  @param  key the key
     *  @return <code>true</code> if the reportedUsage attribute is set
     */
    public boolean isSetReportedUsage(String key) {
        return (m_reportedUsage != null) && (m_reportedUsage.get(key) != null);
    }
   


    // Attribute previousUsage ------------------------------------------------

    // keyClassName for SGE_STRING = String

   
    private Map m_previousUsage;

    private void initPreviousUsage() {
        if (m_previousUsage == null) {
            m_previousUsage = new LinkedHashMap();
        }
    }
   
    /**
     *  <p>Put the attribute previousUsage for a key.</p>
     *
     *  @param key    the key
     *  @param value  the value
     */
    public void putPreviousUsage(String key, double value) {   
        initPreviousUsage();
        m_previousUsage.put(key,

                            new java.lang.Double(value)

                            );
    }

    /**
     *  <p>Get the default value of the attribute previousUsage.</p>
     *  @return the default value of the attribute previousUsage
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public double getDefaultPreviousUsage() {
        if (m_previousUsage == null) {
            throw new IllegalStateException("default value for attribute previousUsage not found");
        }
        java.lang.Double ret = (java.lang.Double)m_previousUsage.get("default");
        if (ret == null) {
            throw new IllegalStateException("default value for attribute previousUsage not found");
        }

        return ret.doubleValue();

    }
   
    /**
     *  <p>Get the previousUsage attribute for a key.</p>
     *  @param   key   the key
     *  @return  the previousUsage attribute for the host or the
     *           default value of  previousUsage
     */
    public double getPreviousUsage(String key) {
        initPreviousUsage();
        if (m_previousUsage.containsKey(key)) {      
            java.lang.Double ret = (java.lang.Double)m_previousUsage.get(key);
            if (ret != null) {

                return ret.doubleValue();

            } else {
                return 0.0;
            }
        } else {
            return getDefaultPreviousUsage();
        }
    }


    /**
     *  <p>remove the attribute previousUsage for a key.</p>
     *
     *  @param key tje key
     *  @return the value for the key or <code>null</code>
     *          if the value attribute was not defined for the key.
     */
    public java.lang.Double removePreviousUsage(String key) {
        initPreviousUsage();
        return (java.lang.Double)m_previousUsage.remove(key);
    }

    /**
     *  <p>Remove the attribute previousUsage for all keys.</p>
     */
    public void removeAllPreviousUsage() {
        if (m_previousUsage != null) {
            m_previousUsage.clear();
        }
    }
   
    /**
     *  Get the set of keys which have the attribute previousUsage set.
     *  @return set of keys
     */
    public Set<String> getPreviousUsageKeys() {
        if (m_previousUsage == null) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(m_previousUsage.keySet());
        }
    }
   
    /**
     *  Get the number of keys which have the attribute previousUsage set.
     *  @return the number of keys which have the attribute previousUsage set.
     */
    public int getPreviousUsageCount() {
        if (m_previousUsage == null) {
            return 0;
        } else {
            return m_previousUsage.size();
        }
    }
   
    /**
     *  Determine if any previousUsage attribute is set
     *  @return <code>true</code> if the previousUsage attribute is set
     */
    public boolean isSetPreviousUsage () {
        return (m_previousUsage != null) && (!m_previousUsage.isEmpty());
    }
   
    /**
     *  Determine if any previousUsage attribute is for a key is set
     *  @param  key the key
     *  @return <code>true</code> if the previousUsage attribute is set
     */
    public boolean isSetPreviousUsage(String key) {
        return (m_previousUsage != null) && (m_previousUsage.get(key) != null);
    }
   


    // Attribute submissionTime ------------------------------------------------

    private boolean isSubmissionTimeSet;
   
    /**
     *  Determine if the submissionTime attribute is set
     *  @return <code>true</code> if the submissionTime attribute is set
     */
    public boolean isSetSubmissionTime() {

        return isSubmissionTimeSet;

    }
   
    private int m_submissionTime;

    /**
     *   Set the submissionTime attribute.
     *
     *   @param aSubmissionTime  the new value for the  submissionTime attribute
     */
    public void setSubmissionTime(int aSubmissionTime) {   
        m_submissionTime = aSubmissionTime;

        isSubmissionTimeSet = true;

    }

    /**
     *  Get the value of the submissionTime attribute.
     *  @return the value of the submissionTime attribute
     */
    public int getSubmissionTime() {
        return m_submissionTime;
    }


    // Attribute startTime ------------------------------------------------

    private boolean isStartTimeSet;
   
    /**
     *  Determine if the startTime attribute is set
     *  @return <code>true</code> if the startTime attribute is set
     */
    public boolean isSetStartTime() {

        return isStartTimeSet;

    }
   
    private int m_startTime;

    /**
     *   Set the startTime attribute.
     *
     *   @param aStartTime  the new value for the  startTime attribute
     */
    public void setStartTime(int aStartTime) {   
        m_startTime = aStartTime;

        isStartTimeSet = true;

    }

    /**
     *  Get the value of the startTime attribute.
     *  @return the value of the startTime attribute
     */
    public int getStartTime() {
        return m_startTime;
    }


    // Attribute endTime ------------------------------------------------

    private boolean isEndTimeSet;
   
    /**
     *  Determine if the endTime attribute is set
     *  @return <code>true</code> if the endTime attribute is set
     */
    public boolean isSetEndTime() {

        return isEndTimeSet;

    }
   
    private int m_endTime;

    /**
     *   Set the endTime attribute.
     *
     *   @param aEndTime  the new value for the  endTime attribute
     */
    public void setEndTime(int aEndTime) {   
        m_endTime = aEndTime;

        isEndTimeSet = true;

    }

    /**
     *  Get the value of the endTime attribute.
     *  @return the value of the endTime attribute
     */
    public int getEndTime() {
        return m_endTime;
    }


    // Attribute cwd ------------------------------------------------
   
    /**
     *  Determine if the cwd attribute is set
     *  @return <code>true</code> if the cwd attribute is set
     */
    public boolean isSetCwd() {
   
        return  (m_cwd != null);

    }
   
    private java.lang.String m_cwd;

    /**
     *   Set the cwd attribute.
     *
     *   @param aCwd  the new value for the  cwd attribute
     */
    public void setCwd(java.lang.String aCwd) {   
        m_cwd = aCwd;

    }

    /**
     *  Get the value of the cwd attribute.
     *  @return the value of the cwd attribute
     */
    public java.lang.String getCwd() {
        return m_cwd;
    }


    // Attribute pathAliases ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.PathAlias > m_pathAliasesList;
   
    private void initPathAliases() {
        if (m_pathAliasesList == null) {
            m_pathAliasesList = new LinkedList< com.sun.grid.jgdi.configuration.PathAlias >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.PathAlias attribute.

     *   @param apathAliases  the new com.sun.grid.jgdi.configuration.PathAlias attribute
     */
    public void addPathAliases(com.sun.grid.jgdi.configuration.PathAlias apathAliases) {   
        initPathAliases();
        
        m_pathAliasesList.add(apathAliases);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.PathAlias attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.PathAlias attribute
     *   @param apathAliases  the new com.sun.grid.jgdi.configuration.PathAlias attribute
     */
    public void setPathAliases(int index, com.sun.grid.jgdi.configuration.PathAlias apathAliases) {
        initPathAliases();
        m_pathAliasesList.set(index, apathAliases);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.PathAlias attributes.
     */
    public void removeAllPathAliases() {
        if (m_pathAliasesList != null) {
            m_pathAliasesList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.PathAlias attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.PathAlias attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.PathAlias attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.PathAlias removePathAliases(int index) {
        initPathAliases();
        return (com.sun.grid.jgdi.configuration.PathAlias)m_pathAliasesList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.PathAlias attribute.
     *  @param apathAliases  the com.sun.grid.jgdi.configuration.PathAlias attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.PathAlias attribute has been removed
     */
    public boolean removePathAliases(com.sun.grid.jgdi.configuration.PathAlias apathAliases) {
        initPathAliases();
        return m_pathAliasesList.remove(apathAliases);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.PathAlias attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.PathAlias attributes
     */
    public List< com.sun.grid.jgdi.configuration.PathAlias > getPathAliasesList() {
        initPathAliases();
        return Collections.unmodifiableList(m_pathAliasesList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.PathAlias attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.PathAlias attributes.
     */
    public int getPathAliasesCount() {
        if (m_pathAliasesList != null) {
            return m_pathAliasesList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.PathAlias attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.PathAlias attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.PathAlias attribute
     */
    public com.sun.grid.jgdi.configuration.PathAlias getPathAliases(int index) {
        initPathAliases();
        return (com.sun.grid.jgdi.configuration.PathAlias)m_pathAliasesList.get(index);
    }
   
    /**
     *  Determine if the pathAliases attribute is set
     *  @return <code>true</code> if the pathAliases attribute is set
     */
    public boolean isSetPathAliases () {
        return (m_pathAliasesList != null) && (!m_pathAliasesList.isEmpty());
    }
   

    // Attribute environment ------------------------------------------------

    // keyClassName for SGE_STRING = String

   
    private Map m_environment;

    private void initEnvironment() {
        if (m_environment == null) {
            m_environment = new LinkedHashMap();
        }
    }
   
    /**
     *  <p>Put the attribute environment for a key.</p>
     *
     *  @param key    the key
     *  @param value  the value
     */
    public void putEnvironment(String key, String value) {   
        initEnvironment();
        m_environment.put(key,

                            value

                            );
    }

    /**
     *  <p>Get the default value of the attribute environment.</p>
     *  @return the default value of the attribute environment
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultEnvironment() {
        if (m_environment == null) {
            throw new IllegalStateException("default value for attribute environment not found");
        }
        java.lang.String ret = (java.lang.String)m_environment.get("default");
        if (ret == null) {
            throw new IllegalStateException("default value for attribute environment not found");
        }

        return ret;

    }
   
    /**
     *  <p>Get the environment attribute for a key.</p>
     *  @param   key   the key
     *  @return  the environment attribute for the host or the
     *           default value of  environment
     */
    public String getEnvironment(String key) {
        initEnvironment();
        if (m_environment.containsKey(key)) {      
            java.lang.String ret = (java.lang.String)m_environment.get(key);
            if (ret != null) {

                return ret;

            } else {
                return null;
            }
        } else {
            return getDefaultEnvironment();
        }
    }


    /**
     *  <p>remove the attribute environment for a key.</p>
     *
     *  @param key tje key
     *  @return the value for the key or <code>null</code>
     *          if the value attribute was not defined for the key.
     */
    public java.lang.String removeEnvironment(String key) {
        initEnvironment();
        return (java.lang.String)m_environment.remove(key);
    }

    /**
     *  <p>Remove the attribute environment for all keys.</p>
     */
    public void removeAllEnvironment() {
        if (m_environment != null) {
            m_environment.clear();
        }
    }
   
    /**
     *  Get the set of keys which have the attribute environment set.
     *  @return set of keys
     */
    public Set<String> getEnvironmentKeys() {
        if (m_environment == null) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(m_environment.keySet());
        }
    }
   
    /**
     *  Get the number of keys which have the attribute environment set.
     *  @return the number of keys which have the attribute environment set.
     */
    public int getEnvironmentCount() {
        if (m_environment == null) {
            return 0;
        } else {
            return m_environment.size();
        }
    }
   
    /**
     *  Determine if any environment attribute is set
     *  @return <code>true</code> if the environment attribute is set
     */
    public boolean isSetEnvironment () {
        return (m_environment != null) && (!m_environment.isEmpty());
    }
   
    /**
     *  Determine if any environment attribute is for a key is set
     *  @param  key the key
     *  @return <code>true</code> if the environment attribute is set
     */
    public boolean isSetEnvironment(String key) {
        return (m_environment != null) && (m_environment.get(key) != null);
    }
   


    // Attribute doContact ------------------------------------------------

    private boolean isDoContactSet;
   
    /**
     *  Determine if the doContact attribute is set
     *  @return <code>true</code> if the doContact attribute is set
     */
    public boolean isSetDoContact() {

        return isDoContactSet;

    }
   
    private boolean m_doContact;

    /**
     *   Set the doContact attribute.
     *
     *   @param aDoContact  the new value for the  doContact attribute
     */
    public void setDoContact(boolean aDoContact) {   
        m_doContact = aDoContact;

        isDoContactSet = true;

    }

    /**
     *  Get the value of the doContact attribute.
     *  @return the value of the doContact attribute
     */
    public boolean isDoContact() {
        return m_doContact;
    }




    /**
     *  Is the primary key information equal to the primary key information
     *  of <code>obj</code>.
     *
     *  @param obj   the compared object
     *  @return <code>true</code> if the primary key information is equal to the
     *          primary key informations of <code>obj</code>.
     */
    public boolean equals(Object obj) {

        return (obj instanceof PETaskImpl && getId().equals(((com.sun.grid.jgdi.configuration.PETask)obj).getId()));

    }

    
    
    public boolean equalsCompletely(Object obj) {
        Logger logger = Logger.getLogger(getClass().getName());
        if (obj instanceof  PETaskImpl) {
            com.sun.grid.jgdi.configuration.PETask obj1 = (com.sun.grid.jgdi.configuration.PETask)obj;

            {
                java.lang.String value1 = getId();
                java.lang.String value2 = obj1.getId();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute PET_id of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes PET_id are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                java.lang.String value1 = getName();
                java.lang.String value2 = obj1.getName();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute PET_name of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes PET_name are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                int value1 = getStatus();
                int value2 = obj1.getStatus();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes PET_status are not equal");
                }
                return false;
            }

            }

            {
                int grantedDestinIdentifierCount = getGrantedDestinIdentifierCount();
                if (grantedDestinIdentifierCount != obj1.getGrantedDestinIdentifierCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists grantedDestinIdentifier has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < grantedDestinIdentifierCount; i++) {
                    com.sun.grid.jgdi.configuration.JG value1 = getGrantedDestinIdentifier(i);
                    com.sun.grid.jgdi.configuration.JG value2 = obj1.getGrantedDestinIdentifier(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute PET_granted_destin_identifier_list of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

                } // end of for
            }

            {
                int value1 = getPid();
                int value2 = obj1.getPid();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes PET_pid are not equal");
                }
                return false;
            }

            }

            {
                java.lang.String value1 = getOsjobid();
                java.lang.String value2 = obj1.getOsjobid();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute PET_osjobid of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes PET_osjobid are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }
           
            {
                Set usageSet1 = getUsageKeys();
                Set usageSet2 = obj1.getUsageKeys();
                if (usageSet1.size() != usageSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("maps usage has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getUsageKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    double value1 = getUsage(key);
                    double value2 = obj1.getUsage(key);             

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes UA_value are not equal");
                }
                return false;
            }

                }
            }
           
            {
                Set scaledUsageSet1 = getScaledUsageKeys();
                Set scaledUsageSet2 = obj1.getScaledUsageKeys();
                if (scaledUsageSet1.size() != scaledUsageSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("maps scaledUsage has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getScaledUsageKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    double value1 = getScaledUsage(key);
                    double value2 = obj1.getScaledUsage(key);             

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes UA_value are not equal");
                }
                return false;
            }

                }
            }
           
            {
                Set reportedUsageSet1 = getReportedUsageKeys();
                Set reportedUsageSet2 = obj1.getReportedUsageKeys();
                if (reportedUsageSet1.size() != reportedUsageSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("maps reportedUsage has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getReportedUsageKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    double value1 = getReportedUsage(key);
                    double value2 = obj1.getReportedUsage(key);             

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes UA_value are not equal");
                }
                return false;
            }

                }
            }
           
            {
                Set previousUsageSet1 = getPreviousUsageKeys();
                Set previousUsageSet2 = obj1.getPreviousUsageKeys();
                if (previousUsageSet1.size() != previousUsageSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("maps previousUsage has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getPreviousUsageKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    double value1 = getPreviousUsage(key);
                    double value2 = obj1.getPreviousUsage(key);             

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes UA_value are not equal");
                }
                return false;
            }

                }
            }

            {
                int value1 = getSubmissionTime();
                int value2 = obj1.getSubmissionTime();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes PET_submission_time are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getStartTime();
                int value2 = obj1.getStartTime();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes PET_start_time are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getEndTime();
                int value2 = obj1.getEndTime();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes PET_end_time are not equal");
                }
                return false;
            }

            }

            {
                java.lang.String value1 = getCwd();
                java.lang.String value2 = obj1.getCwd();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute PET_cwd of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes PET_cwd are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                int pathAliasesCount = getPathAliasesCount();
                if (pathAliasesCount != obj1.getPathAliasesCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists pathAliases has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < pathAliasesCount; i++) {
                    com.sun.grid.jgdi.configuration.PathAlias value1 = getPathAliases(i);
                    com.sun.grid.jgdi.configuration.PathAlias value2 = obj1.getPathAliases(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute PET_path_aliases of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

                } // end of for
            }
           
            {
                Set environmentSet1 = getEnvironmentKeys();
                Set environmentSet2 = obj1.getEnvironmentKeys();
                if (environmentSet1.size() != environmentSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("maps environment has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getEnvironmentKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    java.lang.String value1 = getEnvironment(key);
                    java.lang.String value2 = obj1.getEnvironment(key);             

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute VA_value of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes VA_value are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

                }
            }

            {
                boolean value1 = isDoContact();
                boolean value2 = obj1.isDoContact();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes PET_do_contact are not equal");
                }
                return false;
            }

            }

            return true;
        } else {
            return true;
        }
    }
  
    public java.lang.String toString() {
        StringBuilder ret = new StringBuilder();
        ret.append("PETaskImpl(");

        ret.append(getId());

        ret.append(")");
        return ret.toString();
    }



    public java.lang.String dump() {
        StringBuilder sb = new StringBuilder();

            {
                java.lang.String value = getId();
                sb.append("Id = " + value + "\n");
            }

            {
                java.lang.String value = getName();
                sb.append("Name = " + value + "\n");
            }

            {
                int value = getStatus();
                sb.append("Status = " + value + "\n");
            }

            int grantedDestinIdentifierCount = getGrantedDestinIdentifierCount();
            for (int i = 0; i < grantedDestinIdentifierCount; i++) {
                com.sun.grid.jgdi.configuration.JG value = getGrantedDestinIdentifier(i);
                
                sb.append("GrantedDestinIdentifier[" + i + "] = " + value.dump() + "\n");
                
            } // end of for

            {
                int value = getPid();
                sb.append("Pid = " + value + "\n");
            }

            {
                java.lang.String value = getOsjobid();
                sb.append("Osjobid = " + value + "\n");
            }

            for (java.lang.String key : getUsageKeys()) {
                double value = getUsage(key);
                
                sb.append("Usage[" + key + "] = " + value + "\n");
                
            }

            for (java.lang.String key : getScaledUsageKeys()) {
                double value = getScaledUsage(key);
                
                sb.append("ScaledUsage[" + key + "] = " + value + "\n");
                
            }

            for (java.lang.String key : getReportedUsageKeys()) {
                double value = getReportedUsage(key);
                
                sb.append("ReportedUsage[" + key + "] = " + value + "\n");
                
            }

            for (java.lang.String key : getPreviousUsageKeys()) {
                double value = getPreviousUsage(key);
                
                sb.append("PreviousUsage[" + key + "] = " + value + "\n");
                
            }

            {
                int value = getSubmissionTime();
                sb.append("SubmissionTime = " + value + "\n");
            }

            {
                int value = getStartTime();
                sb.append("StartTime = " + value + "\n");
            }

            {
                int value = getEndTime();
                sb.append("EndTime = " + value + "\n");
            }

            {
                java.lang.String value = getCwd();
                sb.append("Cwd = " + value + "\n");
            }

            int pathAliasesCount = getPathAliasesCount();
            for (int i = 0; i < pathAliasesCount; i++) {
                com.sun.grid.jgdi.configuration.PathAlias value = getPathAliases(i);
                
                sb.append("PathAliases[" + i + "] = " + value.dump() + "\n");
                
            } // end of for

            for (java.lang.String key : getEnvironmentKeys()) {
                java.lang.String value = getEnvironment(key);
                
                sb.append("Environment[" + key + "] = " + value + "\n");
                
            }

            {
                boolean value = isDoContact();
                sb.append("DoContact = " + value + "\n");
            }

        return sb.toString();
    }    

 
}
