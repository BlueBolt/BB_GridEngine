/*___INFO__MARK_BEGIN__*/
/*************************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  the Sun Industry Standards Source License Version 1.2
 *
 *  Sun Microsystems Inc., March, 2001
 *
 *
 *  Sun Industry Standards Source License Version 1.2
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.2 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *   Copyright: 2001 by Sun Microsystems, Inc.
 *
 *   All Rights Reserved.
 *
 ************************************************************************/
/*___INFO__MARK_END__*/
/**
 *  Generated from javadescriptor.jsp
 *  !!! DO NOT EDIT THIS FILE !!!
 */

package com.sun.grid.jgdi.configuration.reflect;

import com.sun.grid.jgdi.configuration.*;
import com.sun.grid.jgdi.CullConstants;

/**
 *  Java descriptor of the cull object JB_Type
 *  defined in sge_all_listsL.template
 */
public class JobDescriptor extends  GEObjectDescriptor {

   public JobDescriptor() {
      this(JobImpl.class, "JB_Type" );
      setImplClass(JobImpl.class);
   }
      
   protected JobDescriptor(Class type, String name) {
      super(type, name);
     
      PropertyDescriptor propDescr = null;

      propDescr = addSimple("jobNumber", Integer.TYPE, "SGE_ULONG", CullConstants.JB_job_number, true, false, false); 

      propDescr = addSimple("jobName", String.class, "SGE_STRING", CullConstants.JB_job_name, false, false, false); 

      propDescr = addSimple("version", Integer.TYPE, "SGE_ULONG", CullConstants.JB_version, false, true, false); 

      propDescr = addList("jidRequest", JobReference.class, "JRE_Type", CullConstants.JB_jid_request_list, true, false, false);

      propDescr = addList("jidPredecessor", JobReference.class, "JRE_Type", CullConstants.JB_jid_predecessor_list, true, true, false);

      propDescr = addList("jidSuccessor", JobReference.class, "JRE_Type", CullConstants.JB_jid_successor_list, true, true, false);

      propDescr = addList("jaAdRequest", JobReference.class, "JRE_Type", CullConstants.JB_ja_ad_request_list, true, false, false);

      propDescr = addList("jaAdPredecessor", JobReference.class, "JRE_Type", CullConstants.JB_ja_ad_predecessor_list, true, true, false);

      propDescr = addList("jaAdSuccessor", JobReference.class, "JRE_Type", CullConstants.JB_ja_ad_successor_list, true, true, false);

      propDescr = addSimple("session", String.class, "SGE_STRING", CullConstants.JB_session, false, false, false); 

      propDescr = addSimple("project", String.class, "SGE_STRING", CullConstants.JB_project, false, false, false); 

      propDescr = addSimple("department", String.class, "SGE_STRING", CullConstants.JB_department, false, false, false); 

      propDescr = addSimple("directivePrefix", String.class, "SGE_STRING", CullConstants.JB_directive_prefix, false, false, false); 

      propDescr = addSimple("execFile", String.class, "SGE_STRING", CullConstants.JB_exec_file, false, false, false); 

      propDescr = addSimple("scriptFile", String.class, "SGE_STRING", CullConstants.JB_script_file, false, false, false); 

      propDescr = addSimple("scriptSize", Integer.TYPE, "SGE_ULONG", CullConstants.JB_script_size, false, false, false); 

      propDescr = addSimple("scriptPtr", String.class, "SGE_STRING", CullConstants.JB_script_ptr, false, false, false); 

      propDescr = addSimple("submissionTime", Integer.TYPE, "SGE_ULONG", CullConstants.JB_submission_time, false, true, false); 

      propDescr = addSimple("executionTime", Integer.TYPE, "SGE_ULONG", CullConstants.JB_execution_time, false, false, false); 

      propDescr = addSimple("deadline", Integer.TYPE, "SGE_ULONG", CullConstants.JB_deadline, false, false, false); 

      propDescr = addSimple("owner", String.class, "SGE_STRING", CullConstants.JB_owner, false, true, false); 

      propDescr = addSimple("uid", Integer.TYPE, "SGE_ULONG", CullConstants.JB_uid, false, true, false); 

      propDescr = addSimple("group", String.class, "SGE_STRING", CullConstants.JB_group, false, true, false); 

      propDescr = addSimple("gid", Integer.TYPE, "SGE_ULONG", CullConstants.JB_gid, false, true, false); 

      propDescr = addSimple("account", String.class, "SGE_STRING", CullConstants.JB_account, false, false, false); 

      propDescr = addSimple("cwd", String.class, "SGE_STRING", CullConstants.JB_cwd, false, false, false); 

      propDescr = addSimple("notify", Boolean.TYPE, "SGE_BOOL", CullConstants.JB_notify, false, false, false); 

      propDescr = addSimple("type", Integer.TYPE, "SGE_ULONG", CullConstants.JB_type, false, false, false); 

      propDescr = addSimple("reserve", Boolean.TYPE, "SGE_BOOL", CullConstants.JB_reserve, false, false, false); 

      propDescr = addSimple("priority", Integer.TYPE, "SGE_ULONG", CullConstants.JB_priority, false, false, false); 

      propDescr = addSimple("jobshare", Integer.TYPE, "SGE_ULONG", CullConstants.JB_jobshare, false, false, false); 

      propDescr = addList("shell", PathName.class, "PN_Type", CullConstants.JB_shell_list, true, false, false);

      propDescr = addSimple("verify", Integer.TYPE, "SGE_ULONG", CullConstants.JB_verify, false, true, false); 

      // keyAttr = VA_variable (type = SGE_STRING)
      // valueAttr = VA_value (type = SGE_STRING)
      propDescr = addMap("env", String.class, "VA_Type", String.class,
             CullConstants.JB_env_list, CullConstants.VA_variable, CullConstants.VA_value,
             null, false, false);

      // keyAttr = VA_variable (type = SGE_STRING)
      // valueAttr = VA_value (type = SGE_STRING)
      propDescr = addMap("context", String.class, "VA_Type", String.class,
             CullConstants.JB_context, CullConstants.VA_variable, CullConstants.VA_value,
             null, false, false);

      propDescr = addList("jobArgs", String.class, "ST_Type", CullConstants.JB_job_args, true, false, false);

         propDescr.setHasCullWrapper(true);
         propDescr.setCullContentField(CullConstants.ST_name);

      propDescr = addSimple("checkpointAttr", Integer.TYPE, "SGE_ULONG", CullConstants.JB_checkpoint_attr, false, true, false); 

      propDescr = addSimple("checkpointName", String.class, "SGE_STRING", CullConstants.JB_checkpoint_name, false, false, false); 

      propDescr = addSimple("checkpointObject", Checkpoint.class, "CK_Type", CullConstants.JB_checkpoint_object, false, true, false); 

      propDescr = addSimple("checkpointInterval", Integer.TYPE, "SGE_ULONG", CullConstants.JB_checkpoint_interval, false, true, false); 

      propDescr = addSimple("restart", Integer.TYPE, "SGE_ULONG", CullConstants.JB_restart, false, false, false); 

      propDescr = addList("stdoutPath", PathName.class, "PN_Type", CullConstants.JB_stdout_path_list, true, false, false);

      propDescr = addList("stderrPath", PathName.class, "PN_Type", CullConstants.JB_stderr_path_list, true, false, false);

      propDescr = addList("stdinPath", PathName.class, "PN_Type", CullConstants.JB_stdin_path_list, true, false, false);

      propDescr = addSimple("mergeStderr", Boolean.TYPE, "SGE_BOOL", CullConstants.JB_merge_stderr, false, false, false); 

      propDescr = addList("hardResource", ComplexEntry.class, "CE_Type", CullConstants.JB_hard_resource_list, true, false, false);

      propDescr = addList("softResource", ComplexEntry.class, "CE_Type", CullConstants.JB_soft_resource_list, true, false, false);

      propDescr = addList("hardQueue", String.class, "QR_Type", CullConstants.JB_hard_queue_list, true, false, false);

         propDescr.setHasCullWrapper(true);
         propDescr.setCullContentField(CullConstants.QR_name);

      propDescr = addList("softQueue", String.class, "QR_Type", CullConstants.JB_soft_queue_list, true, false, false);

         propDescr.setHasCullWrapper(true);
         propDescr.setCullContentField(CullConstants.QR_name);

      propDescr = addSimple("mailOptions", Integer.TYPE, "SGE_ULONG", CullConstants.JB_mail_options, false, false, false); 

      propDescr = addList("mail", MailReceiver.class, "MR_Type", CullConstants.JB_mail_list, true, false, false);

      propDescr = addSimple("pe", String.class, "SGE_STRING", CullConstants.JB_pe, false, false, false); 

      propDescr = addList("peRange", Range.class, "RN_Type", CullConstants.JB_pe_range, true, false, false);

      propDescr = addList("masterHardQueue", String.class, "QR_Type", CullConstants.JB_master_hard_queue_list, true, false, false);

         propDescr.setHasCullWrapper(true);
         propDescr.setCullContentField(CullConstants.QR_name);

      propDescr = addSimple("tgt", String.class, "SGE_STRING", CullConstants.JB_tgt, false, false, false); 

      propDescr = addSimple("cred", String.class, "SGE_STRING", CullConstants.JB_cred, false, false, false); 

      propDescr = addList("jaStructure", Range.class, "RN_Type", CullConstants.JB_ja_structure, true, false, false);

      propDescr = addList("jaNHIds", Range.class, "RN_Type", CullConstants.JB_ja_n_h_ids, true, false, false);

      propDescr = addList("jaUHIds", Range.class, "RN_Type", CullConstants.JB_ja_u_h_ids, true, false, false);

      propDescr = addList("jaSHIds", Range.class, "RN_Type", CullConstants.JB_ja_s_h_ids, true, false, false);

      propDescr = addList("jaOHIds", Range.class, "RN_Type", CullConstants.JB_ja_o_h_ids, true, false, false);

      propDescr = addList("jaAHIds", Range.class, "RN_Type", CullConstants.JB_ja_a_h_ids, true, false, false);

      propDescr = addList("jaTemplate", JobTask.class, "JAT_Type", CullConstants.JB_ja_template, true, false, false);

      propDescr = addList("jaTasks", JobTask.class, "JAT_Type", CullConstants.JB_ja_tasks, true, false, false);

      propDescr = addSimple("host", String.class, "SGE_HOST", CullConstants.JB_host, false, true, false); 

      propDescr = addList("user", String.class, "ST_Type", CullConstants.JB_user_list, true, false, false);

         propDescr.setHasCullWrapper(true);
         propDescr.setCullContentField(CullConstants.ST_name);

      propDescr = addSimple("verifySuitableQueues", Integer.TYPE, "SGE_ULONG", CullConstants.JB_verify_suitable_queues, false, false, false); 

      propDescr = addSimple("overrideTickets", Integer.TYPE, "SGE_ULONG", CullConstants.JB_override_tickets, false, false, false); 

      propDescr = addList("pathAliases", PathAlias.class, "PA_Type", CullConstants.JB_path_aliases, true, false, false);

      propDescr = addSimple("urg", Double.TYPE, "SGE_DOUBLE", CullConstants.JB_urg, false, false, false); 

      propDescr = addSimple("nurg", Double.TYPE, "SGE_DOUBLE", CullConstants.JB_nurg, false, true, false); 

      propDescr = addSimple("nppri", Double.TYPE, "SGE_DOUBLE", CullConstants.JB_nppri, false, true, false); 

      propDescr = addSimple("rrcontr", Double.TYPE, "SGE_DOUBLE", CullConstants.JB_rrcontr, false, true, false); 

      propDescr = addSimple("dlcontr", Double.TYPE, "SGE_DOUBLE", CullConstants.JB_dlcontr, false, true, false); 

      propDescr = addSimple("wtcontr", Double.TYPE, "SGE_DOUBLE", CullConstants.JB_wtcontr, false, true, false); 

      propDescr = addSimple("ar", Integer.TYPE, "SGE_ULONG", CullConstants.JB_ar, false, false, false); 

      propDescr = addSimple("pty", Integer.TYPE, "SGE_ULONG", CullConstants.JB_pty, false, false, false); 

      propDescr = addSimple("jaTaskConcurrency", Integer.TYPE, "SGE_ULONG", CullConstants.JB_ja_task_concurrency, false, false, false); 

      propDescr = addList("binding", Binding.class, "BN_Type", CullConstants.JB_binding, true, false, false);

   }
   
   public void validate(Object obj) throws InvalidObjectException {
   
      if (!(obj instanceof Job)) {
         throw new InvalidObjectException(obj, "obj is not an instanceof Job");
      }

      Job cullObj = (Job)obj;
      InvalidObjectException exc = null;
   
       if (!cullObj.isSetJobNumber()) {
          if (exc == null) {
             exc = new InvalidObjectException(obj, "Primary key fields are not set");
          }
          exc.addPropertyError("jobNumber", "primary key field is required");
       }

       if (exc != null) {
           throw exc;
       }

   }
}
