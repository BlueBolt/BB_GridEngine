/*___INFO__MARK_BEGIN__*/
/*************************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  the Sun Industry Standards Source License Version 1.2
 *
 *  Sun Microsystems Inc., March, 2001
 *
 *
 *  Sun Industry Standards Source License Version 1.2
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.2 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *   Copyright: 2001 by Sun Microsystems, Inc.
 *
 *   All Rights Reserved.
 *
 ************************************************************************/
/*___INFO__MARK_END__*/
/**
 *  Generated from javadescriptor.jsp
 *  !!! DO NOT EDIT THIS FILE !!!
 */

package com.sun.grid.jgdi.configuration.reflect;

import com.sun.grid.jgdi.configuration.*;
import com.sun.grid.jgdi.CullConstants;

/**
 *  Java descriptor of the cull object EH_Type
 *  defined in sge_all_listsL.template
 */
public class ExecHostDescriptor extends  GEObjectDescriptor {

   public ExecHostDescriptor() {
      this(ExecHostImpl.class, "EH_Type" );
      setImplClass(ExecHostImpl.class);
   }
      
   protected ExecHostDescriptor(Class type, String name) {
      super(type, name);
     
      PropertyDescriptor propDescr = null;

      propDescr = addSimple("name", String.class, "SGE_HOST_D", CullConstants.EH_name, true, false, true); 

      // keyAttr = HS_name (type = SGE_STRING)
      // valueAttr = HS_value (type = SGE_DOUBLE)
      propDescr = addMap("scaling", Double.TYPE, "HS_Type", String.class,
             CullConstants.EH_scaling_list, CullConstants.HS_name, CullConstants.HS_value,
             null, false, true);

      propDescr = addList("consumableConfig", ComplexEntry.class, "CE_Type", CullConstants.EH_consumable_config_list, true, false, true);

      // keyAttr = HS_name (type = SGE_STRING)
      // valueAttr = HS_value (type = SGE_DOUBLE)
      propDescr = addMap("usageScaling", Double.TYPE, "HS_Type", String.class,
             CullConstants.EH_usage_scaling_list, CullConstants.HS_name, CullConstants.HS_value,
             null, false, true);

      // keyAttr = HL_name (type = SGE_STRING)
      // valueAttr = HL_value (type = SGE_STRING)
      propDescr = addMap("load", String.class, "HL_Type", String.class,
             CullConstants.EH_load_list, CullConstants.HL_name, CullConstants.HL_value,
             null, true, false);

      propDescr = addSimple("processors", Integer.TYPE, "SGE_ULONG", CullConstants.EH_processors, false, true, false); 

      propDescr = addList("acl", UserSet.class, "US_Type", CullConstants.EH_acl, true, false, true);

      propDescr = addList("xacl", UserSet.class, "US_Type", CullConstants.EH_xacl, true, false, true);

      propDescr = addList("prj", Project.class, "PR_Type", CullConstants.EH_prj, true, false, true);

      propDescr = addList("xprj", Project.class, "PR_Type", CullConstants.EH_xprj, true, false, true);

      propDescr = addList("reportVariables", String.class, "STU_Type", CullConstants.EH_report_variables, true, false, true);

         propDescr.setHasCullWrapper(true);
         propDescr.setCullContentField(CullConstants.STU_name);

   }
   
   public void validate(Object obj) throws InvalidObjectException {
   
      if (!(obj instanceof ExecHost)) {
         throw new InvalidObjectException(obj, "obj is not an instanceof ExecHost");
      }

      ExecHost cullObj = (ExecHost)obj;
      InvalidObjectException exc = null;
   
       if (!cullObj.isSetName()) {
          if (exc == null) {
             exc = new InvalidObjectException(obj, "Primary key fields are not set");
          }
          exc.addPropertyError("name", "primary key field is required");
       }

       if (exc != null) {
           throw exc;
       }

   }
}
