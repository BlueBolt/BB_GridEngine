/*___INFO__MARK_BEGIN__*/
/*************************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  the Sun Industry Standards Source License Version 1.2
 *
 *  Sun Microsystems Inc., March, 2001
 *
 *
 *  Sun Industry Standards Source License Version 1.2
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.2 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *   Copyright: 2001 by Sun Microsystems, Inc.
 *
 *   All Rights Reserved.
 *
 ************************************************************************/
/*___INFO__MARK_END__*/
/**
 *  Generated from java_jgdi.jsp
 *  !!! DO NOT EDIT THIS FILE !!!
 */


package com.sun.grid.jgdi;

import java.util.List;
import com.sun.grid.jgdi.JGDIException;
import com.sun.grid.jgdi.configuration.JGDIAnswer;
import com.sun.grid.jgdi.monitoring.filter.UserFilter;

import com.sun.grid.jgdi.configuration.Hostgroup;
import com.sun.grid.jgdi.configuration.SubmitHost;
import com.sun.grid.jgdi.configuration.ExecHost;
import com.sun.grid.jgdi.configuration.Manager;
import com.sun.grid.jgdi.configuration.AdvanceReservation;
import com.sun.grid.jgdi.configuration.SchedConf;
import com.sun.grid.jgdi.configuration.Configuration;
import com.sun.grid.jgdi.configuration.Project;
import com.sun.grid.jgdi.configuration.ShareTree;
import com.sun.grid.jgdi.configuration.AdminHost;
import com.sun.grid.jgdi.configuration.Checkpoint;
import com.sun.grid.jgdi.configuration.ParallelEnvironment;
import com.sun.grid.jgdi.configuration.ComplexEntry;
import com.sun.grid.jgdi.configuration.ClusterQueue;
import com.sun.grid.jgdi.configuration.JobSchedulingInfo;
import com.sun.grid.jgdi.configuration.UserSet;
import com.sun.grid.jgdi.configuration.Calendar;
import com.sun.grid.jgdi.configuration.Operator;
import com.sun.grid.jgdi.configuration.Job;
import com.sun.grid.jgdi.configuration.ResourceQuotaSet;
import com.sun.grid.jgdi.configuration.EventClient;
import com.sun.grid.jgdi.configuration.User;


/**
 *  <p>The class <code>JGDI</code> is the central interface for communication with
 *  the SGE master.</p>
 *
 *  <p>An instanceof of the interface can be obtained via the {@link JGDIFactory}. 
 *  For each <code>JGDI</code> instance the <code>close</code> method has to
 *  called to give the native parts of the implementation a chance to release
 *  the resources.</p>
 *
 *  <p>Example:</p>
 *  <pre>
 *     String url = "bootstrap:///opt/sge@default:1026";
 *     String user = "sge_admin";
 *     String password = "secret";
 *
 *     JGDI jgdi = JGDIFactory.newInstance(url, user, password);
 *     ...
 *     jgdi.close();
 *    
 *  </pre>
 *
 *  <strong>Warning:</strong>  The JGDI interface will not be compatible with future Sun&trade; Grid Engine releases. 
 *
 *  @version 6.5
 *
 */
public interface JGDI extends JGDIBase {

   /**
    *   Update a <code>Hostgroup</code> object.
    *   @param obj   the <code>Hostgroup</code> object with the new values
    *   @throws JGDIException on any error on the GDI layer
    */
   public void updateHostgroup(Hostgroup obj) throws JGDIException;

   /**
    *   Update a <code>Hostgroup</code> object.
    *   @param obj      the <code>Hostgroup</code> object with the new values
    *   @param answers  the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void updateHostgroupWithAnswer(Hostgroup obj, List<JGDIAnswer> answers) throws JGDIException;

   /**
    *   Delete a <code>Hostgroup</code> object.
    *   @param obj  <code>Hostgroup</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteHostgroup(Hostgroup obj) throws JGDIException;
   
   /**
    *   Delete a <code>Hostgroup</code> object.
    *   @param obj       the <code>Hostgroup</code> object with the primary key information
    *   @param answers   the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteHostgroupWithAnswer(Hostgroup obj, List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Delete a <code>Hostgroup</code> object by its primary key
    *  @param HGRP_name   the HGRP_name of the <code>Hostgroup</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteHostgroup( String HGRP_name ) throws JGDIException;
   /**
    *   Delete a <code>Hostgroup</code> object by its primary key
    *  @param HGRP_name   the HGRP_name of the <code>Hostgroup</code> object
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteHostgroupWithAnswer( String HGRP_name , List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Delete several <code>Hostgroup</code> objects by their primary key
    *  @param HGRP_names   array of HGRP_name of the <code>Hostgroup</code> objects
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteHostgroupsWithAnswer( String[] HGRP_names 
    , List<JGDIAnswer> answers) throws JGDIException;
    
   
   /**
    *   Add a new <code>Hostgroup</code> object.
    *   @param  obj      the new <code>Hostgroup</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addHostgroup(Hostgroup obj) throws JGDIException;

   /**
    *   Add a new <code>Hostgroup</code> object.
    *   @param obj       the new <code>Hostgroup</code> object
    *   @param answers   the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addHostgroupWithAnswer(Hostgroup obj, List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Get the list of all defined <code>Hostgroup</code> objects.
    *   @return list of <code>Hostgroup</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List< Hostgroup > getHostgroupList() throws JGDIException;
   /**
    *   Get the list of all defined <code>Hostgroup</code> objects.
    *   @param answers  the <code>answer list</code> object    
    *   @return list of <code>Hostgroup</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List< Hostgroup > getHostgroupListWithAnswer(List<JGDIAnswer> answers) throws JGDIException;

   /**
    *  Get a Hostgroup by its primary key
    *
    *  @return the Hostgroup
    *  @param HGRP_name   the HGRP_name of the <code>Hostgroup</code> object
    *  @return the found <code>Hostgroup</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public Hostgroup getHostgroup( String HGRP_name ) throws JGDIException;

   /**
    *  Get a Hostgroup by its primary key
    *
    *  @return the Hostgroup
    *  @param HGRP_name   the HGRP_name of the <code>Hostgroup</code> object
   *  @param answers   the <code>answer list</code> object  
    *  @return the found <code>Hostgroup</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public Hostgroup getHostgroupWithAnswer( String HGRP_name , List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Delete a <code>SubmitHost</code> object.
    *   @param obj  <code>SubmitHost</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteSubmitHost(SubmitHost obj) throws JGDIException;
   
   /**
    *   Delete a <code>SubmitHost</code> object.
    *   @param obj       the <code>SubmitHost</code> object with the primary key information
    *   @param answers   the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteSubmitHostWithAnswer(SubmitHost obj, List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Delete a <code>SubmitHost</code> object by its primary key
    *  @param SH_name   the SH_name of the <code>SubmitHost</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteSubmitHost( String SH_name ) throws JGDIException;
   /**
    *   Delete a <code>SubmitHost</code> object by its primary key
    *  @param SH_name   the SH_name of the <code>SubmitHost</code> object
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteSubmitHostWithAnswer( String SH_name , List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Delete several <code>SubmitHost</code> objects by their primary key
    *  @param SH_names   array of SH_name of the <code>SubmitHost</code> objects
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteSubmitHostsWithAnswer( String[] SH_names 
    , List<JGDIAnswer> answers) throws JGDIException;
    
   
   /**
    *   Add a new <code>SubmitHost</code> object.
    *   @param  obj      the new <code>SubmitHost</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addSubmitHost(SubmitHost obj) throws JGDIException;

   /**
    *   Add a new <code>SubmitHost</code> object.
    *   @param obj       the new <code>SubmitHost</code> object
    *   @param answers   the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addSubmitHostWithAnswer(SubmitHost obj, List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Add a new <code>SubmitHost</code> object.
    *   @param  name the new <code>String</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addSubmitHost(String name) throws JGDIException;

   /**
    *   Add a new <code>SubmitHost</code> object.
    *   @param  name the new <code>String</code> object
    *   @param  answers the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addSubmitHostWithAnswer(String name, List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Get the list of all defined <code>SubmitHost</code> objects.
    *   @return list of <code>SubmitHost</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List< SubmitHost > getSubmitHostList() throws JGDIException;
   /**
    *   Get the list of all defined <code>SubmitHost</code> objects.
    *   @param answers  the <code>answer list</code> object    
    *   @return list of <code>SubmitHost</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List< SubmitHost > getSubmitHostListWithAnswer(List<JGDIAnswer> answers) throws JGDIException;

   /**
    *   Update a <code>ExecHost</code> object.
    *   @param obj   the <code>ExecHost</code> object with the new values
    *   @throws JGDIException on any error on the GDI layer
    */
   public void updateExecHost(ExecHost obj) throws JGDIException;

   /**
    *   Update a <code>ExecHost</code> object.
    *   @param obj      the <code>ExecHost</code> object with the new values
    *   @param answers  the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void updateExecHostWithAnswer(ExecHost obj, List<JGDIAnswer> answers) throws JGDIException;

   /**
    *   Delete a <code>ExecHost</code> object.
    *   @param obj  <code>ExecHost</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteExecHost(ExecHost obj) throws JGDIException;
   
   /**
    *   Delete a <code>ExecHost</code> object.
    *   @param obj       the <code>ExecHost</code> object with the primary key information
    *   @param answers   the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteExecHostWithAnswer(ExecHost obj, List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Delete a <code>ExecHost</code> object by its primary key
    *  @param EH_name   the EH_name of the <code>ExecHost</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteExecHost( String EH_name ) throws JGDIException;
   /**
    *   Delete a <code>ExecHost</code> object by its primary key
    *  @param EH_name   the EH_name of the <code>ExecHost</code> object
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteExecHostWithAnswer( String EH_name , List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Delete several <code>ExecHost</code> objects by their primary key
    *  @param EH_names   array of EH_name of the <code>ExecHost</code> objects
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteExecHostsWithAnswer( String[] EH_names 
    , List<JGDIAnswer> answers) throws JGDIException;
    
   
   /**
    *   Add a new <code>ExecHost</code> object.
    *   @param  obj      the new <code>ExecHost</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addExecHost(ExecHost obj) throws JGDIException;

   /**
    *   Add a new <code>ExecHost</code> object.
    *   @param obj       the new <code>ExecHost</code> object
    *   @param answers   the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addExecHostWithAnswer(ExecHost obj, List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Get the list of all defined <code>ExecHost</code> objects.
    *   @return list of <code>ExecHost</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List< ExecHost > getExecHostList() throws JGDIException;
   /**
    *   Get the list of all defined <code>ExecHost</code> objects.
    *   @param answers  the <code>answer list</code> object    
    *   @return list of <code>ExecHost</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List< ExecHost > getExecHostListWithAnswer(List<JGDIAnswer> answers) throws JGDIException;

   /**
    *  Get a ExecHost by its primary key
    *
    *  @return the ExecHost
    *  @param EH_name   the EH_name of the <code>ExecHost</code> object
    *  @return the found <code>ExecHost</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public ExecHost getExecHost( String EH_name ) throws JGDIException;

   /**
    *  Get a ExecHost by its primary key
    *
    *  @return the ExecHost
    *  @param EH_name   the EH_name of the <code>ExecHost</code> object
   *  @param answers   the <code>answer list</code> object  
    *  @return the found <code>ExecHost</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public ExecHost getExecHostWithAnswer( String EH_name , List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Delete a <code>Manager</code> object.
    *   @param obj  <code>Manager</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteManager(Manager obj) throws JGDIException;
   
   /**
    *   Delete a <code>Manager</code> object.
    *   @param obj       the <code>Manager</code> object with the primary key information
    *   @param answers   the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteManagerWithAnswer(Manager obj, List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Delete a <code>Manager</code> object by its primary key
    *  @param UM_name   the UM_name of the <code>Manager</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteManager( String UM_name ) throws JGDIException;
   /**
    *   Delete a <code>Manager</code> object by its primary key
    *  @param UM_name   the UM_name of the <code>Manager</code> object
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteManagerWithAnswer( String UM_name , List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Delete several <code>Manager</code> objects by their primary key
    *  @param UM_names   array of UM_name of the <code>Manager</code> objects
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteManagersWithAnswer( String[] UM_names 
    , List<JGDIAnswer> answers) throws JGDIException;
    
   
   /**
    *   Add a new <code>Manager</code> object.
    *   @param  obj      the new <code>Manager</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addManager(Manager obj) throws JGDIException;

   /**
    *   Add a new <code>Manager</code> object.
    *   @param obj       the new <code>Manager</code> object
    *   @param answers   the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addManagerWithAnswer(Manager obj, List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Add a new <code>Manager</code> object.
    *   @param  name the new <code>String</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addManager(String name) throws JGDIException;

   /**
    *   Add a new <code>Manager</code> object.
    *   @param  name the new <code>String</code> object
    *   @param  answers the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addManagerWithAnswer(String name, List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Get the list of all defined <code>Manager</code> objects.
    *   @return list of <code>Manager</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List< Manager > getManagerList() throws JGDIException;
   /**
    *   Get the list of all defined <code>Manager</code> objects.
    *   @param answers  the <code>answer list</code> object    
    *   @return list of <code>Manager</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List< Manager > getManagerListWithAnswer(List<JGDIAnswer> answers) throws JGDIException;

   /**
    *  Get a Manager by its primary key
    *
    *  @return the Manager
    *  @param UM_name   the UM_name of the <code>Manager</code> object
    *  @return the found <code>Manager</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public Manager getManager( String UM_name ) throws JGDIException;

   /**
    *  Get a Manager by its primary key
    *
    *  @return the Manager
    *  @param UM_name   the UM_name of the <code>Manager</code> object
   *  @param answers   the <code>answer list</code> object  
    *  @return the found <code>Manager</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public Manager getManagerWithAnswer( String UM_name , List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Delete a <code>AdvanceReservation</code> object.
    *   @param obj  <code>AdvanceReservation</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteAdvanceReservation(AdvanceReservation obj) throws JGDIException;
   
   /**
    *   Delete a <code>AdvanceReservation</code> object.
    *   @param obj       the <code>AdvanceReservation</code> object with the primary key information
    *   @param answers   the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteAdvanceReservationWithAnswer(AdvanceReservation obj, List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Delete a <code>AdvanceReservation</code> object by its primary key
    *  @param AR_id   the AR_id of the <code>AdvanceReservation</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteAdvanceReservation( int AR_id ) throws JGDIException;
   /**
    *   Delete a <code>AdvanceReservation</code> object by its primary key
    *  @param AR_id   the AR_id of the <code>AdvanceReservation</code> object
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteAdvanceReservationWithAnswer( int AR_id , List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Delete several <code>AdvanceReservation</code> objects by their primary key
    *  @param AR_ids   array of AR_id of the <code>AdvanceReservation</code> objects
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteAdvanceReservationsWithAnswer( String[] AR_ids 

    , boolean forced, UserFilter userFilter
    , List<JGDIAnswer> answers) throws JGDIException;
    
   
   /**
    *   Add a new <code>AdvanceReservation</code> object.
    *   @param  obj      the new <code>AdvanceReservation</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addAdvanceReservation(AdvanceReservation obj) throws JGDIException;

   /**
    *   Add a new <code>AdvanceReservation</code> object.
    *   @param obj       the new <code>AdvanceReservation</code> object
    *   @param answers   the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addAdvanceReservationWithAnswer(AdvanceReservation obj, List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Get the list of all defined <code>AdvanceReservation</code> objects.
    *   @return list of <code>AdvanceReservation</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List< AdvanceReservation > getAdvanceReservationList() throws JGDIException;
   /**
    *   Get the list of all defined <code>AdvanceReservation</code> objects.
    *   @param answers  the <code>answer list</code> object    
    *   @return list of <code>AdvanceReservation</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List< AdvanceReservation > getAdvanceReservationListWithAnswer(List<JGDIAnswer> answers) throws JGDIException;

   /**
    *  Get a AdvanceReservation by its primary key
    *
    *  @return the AdvanceReservation
    *  @param AR_id   the AR_id of the <code>AdvanceReservation</code> object
    *  @return the found <code>AdvanceReservation</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public AdvanceReservation getAdvanceReservation( int AR_id ) throws JGDIException;

   /**
    *  Get a AdvanceReservation by its primary key
    *
    *  @return the AdvanceReservation
    *  @param AR_id   the AR_id of the <code>AdvanceReservation</code> object
   *  @param answers   the <code>answer list</code> object  
    *  @return the found <code>AdvanceReservation</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public AdvanceReservation getAdvanceReservationWithAnswer( int AR_id , List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Update a <code>SchedConf</code> object.
    *   @param obj   the <code>SchedConf</code> object with the new values
    *   @throws JGDIException on any error on the GDI layer
    */
   public void updateSchedConf(SchedConf obj) throws JGDIException;

   /**
    *   Update a <code>SchedConf</code> object.
    *   @param obj      the <code>SchedConf</code> object with the new values
    *   @param answers  the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void updateSchedConfWithAnswer(SchedConf obj, List<JGDIAnswer> answers) throws JGDIException;

   /**
    *   Get the <code>SchedConf</code> object.
    *   @return the <code>SchedConf</code> object.
    *   @throws JGDIException on any error on the GDI layer
    */
   public SchedConf getSchedConf() throws JGDIException;

   /**
    *   Get the <code>SchedConf</code> object.
    *   @param answers  the <code>answer list</code> object
    *   @return the <code>SchedConf</code> object.
    *   @throws JGDIException on any error on the GDI layer
    */
   public SchedConf getSchedConfWithAnswer(List<JGDIAnswer> answers) throws JGDIException;

   /**
    *   Update a <code>Configuration</code> object.
    *   @param obj   the <code>Configuration</code> object with the new values
    *   @throws JGDIException on any error on the GDI layer
    */
   public void updateConfiguration(Configuration obj) throws JGDIException;

   /**
    *   Update a <code>Configuration</code> object.
    *   @param obj      the <code>Configuration</code> object with the new values
    *   @param answers  the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void updateConfigurationWithAnswer(Configuration obj, List<JGDIAnswer> answers) throws JGDIException;

   /**
    *   Delete a <code>Configuration</code> object.
    *   @param obj  <code>Configuration</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteConfiguration(Configuration obj) throws JGDIException;
   
   /**
    *   Delete a <code>Configuration</code> object.
    *   @param obj       the <code>Configuration</code> object with the primary key information
    *   @param answers   the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteConfigurationWithAnswer(Configuration obj, List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Delete a <code>Configuration</code> object by its primary key
    *  @param CONF_name   the CONF_name of the <code>Configuration</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteConfiguration( String CONF_name ) throws JGDIException;
   /**
    *   Delete a <code>Configuration</code> object by its primary key
    *  @param CONF_name   the CONF_name of the <code>Configuration</code> object
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteConfigurationWithAnswer( String CONF_name , List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Delete several <code>Configuration</code> objects by their primary key
    *  @param CONF_names   array of CONF_name of the <code>Configuration</code> objects
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteConfigurationsWithAnswer( String[] CONF_names 
    , List<JGDIAnswer> answers) throws JGDIException;
    
   
   /**
    *   Add a new <code>Configuration</code> object.
    *   @param  obj      the new <code>Configuration</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addConfiguration(Configuration obj) throws JGDIException;

   /**
    *   Add a new <code>Configuration</code> object.
    *   @param obj       the new <code>Configuration</code> object
    *   @param answers   the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addConfigurationWithAnswer(Configuration obj, List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Get the list of all defined <code>Configuration</code> objects.
    *   @return list of <code>Configuration</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List< Configuration > getConfigurationList() throws JGDIException;
   /**
    *   Get the list of all defined <code>Configuration</code> objects.
    *   @param answers  the <code>answer list</code> object    
    *   @return list of <code>Configuration</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List< Configuration > getConfigurationListWithAnswer(List<JGDIAnswer> answers) throws JGDIException;

   /**
    *  Get a Configuration by its primary key
    *
    *  @return the Configuration
    *  @param CONF_name   the CONF_name of the <code>Configuration</code> object
    *  @return the found <code>Configuration</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public Configuration getConfiguration( String CONF_name ) throws JGDIException;

   /**
    *  Get a Configuration by its primary key
    *
    *  @return the Configuration
    *  @param CONF_name   the CONF_name of the <code>Configuration</code> object
   *  @param answers   the <code>answer list</code> object  
    *  @return the found <code>Configuration</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public Configuration getConfigurationWithAnswer( String CONF_name , List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Update a <code>Project</code> object.
    *   @param obj   the <code>Project</code> object with the new values
    *   @throws JGDIException on any error on the GDI layer
    */
   public void updateProject(Project obj) throws JGDIException;

   /**
    *   Update a <code>Project</code> object.
    *   @param obj      the <code>Project</code> object with the new values
    *   @param answers  the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void updateProjectWithAnswer(Project obj, List<JGDIAnswer> answers) throws JGDIException;

   /**
    *   Delete a <code>Project</code> object.
    *   @param obj  <code>Project</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteProject(Project obj) throws JGDIException;
   
   /**
    *   Delete a <code>Project</code> object.
    *   @param obj       the <code>Project</code> object with the primary key information
    *   @param answers   the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteProjectWithAnswer(Project obj, List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Delete a <code>Project</code> object by its primary key
    *  @param PR_name   the PR_name of the <code>Project</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteProject( String PR_name ) throws JGDIException;
   /**
    *   Delete a <code>Project</code> object by its primary key
    *  @param PR_name   the PR_name of the <code>Project</code> object
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteProjectWithAnswer( String PR_name , List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Delete several <code>Project</code> objects by their primary key
    *  @param PR_names   array of PR_name of the <code>Project</code> objects
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteProjectsWithAnswer( String[] PR_names 
    , List<JGDIAnswer> answers) throws JGDIException;
    
   
   /**
    *   Add a new <code>Project</code> object.
    *   @param  obj      the new <code>Project</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addProject(Project obj) throws JGDIException;

   /**
    *   Add a new <code>Project</code> object.
    *   @param obj       the new <code>Project</code> object
    *   @param answers   the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addProjectWithAnswer(Project obj, List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Get the list of all defined <code>Project</code> objects.
    *   @return list of <code>Project</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List< Project > getProjectList() throws JGDIException;
   /**
    *   Get the list of all defined <code>Project</code> objects.
    *   @param answers  the <code>answer list</code> object    
    *   @return list of <code>Project</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List< Project > getProjectListWithAnswer(List<JGDIAnswer> answers) throws JGDIException;

   /**
    *  Get a Project by its primary key
    *
    *  @return the Project
    *  @param PR_name   the PR_name of the <code>Project</code> object
    *  @return the found <code>Project</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public Project getProject( String PR_name ) throws JGDIException;

   /**
    *  Get a Project by its primary key
    *
    *  @return the Project
    *  @param PR_name   the PR_name of the <code>Project</code> object
   *  @param answers   the <code>answer list</code> object  
    *  @return the found <code>Project</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public Project getProjectWithAnswer( String PR_name , List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Update a <code>ShareTree</code> object.
    *   @param obj   the <code>ShareTree</code> object with the new values
    *   @throws JGDIException on any error on the GDI layer
    */
   public void updateShareTree(ShareTree obj) throws JGDIException;

   /**
    *   Update a <code>ShareTree</code> object.
    *   @param obj      the <code>ShareTree</code> object with the new values
    *   @param answers  the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void updateShareTreeWithAnswer(ShareTree obj, List<JGDIAnswer> answers) throws JGDIException;

   /**
    *  Get a ShareTree by its primary key
    *
    *  @return the ShareTree
    *  @param STN_name   the STN_name of the <code>ShareTree</code> object
    *  @return the found <code>ShareTree</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public ShareTree getShareTree( String STN_name ) throws JGDIException;

   /**
    *  Get a ShareTree by its primary key
    *
    *  @return the ShareTree
    *  @param STN_name   the STN_name of the <code>ShareTree</code> object
   *  @param answers   the <code>answer list</code> object  
    *  @return the found <code>ShareTree</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public ShareTree getShareTreeWithAnswer( String STN_name , List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Delete a <code>AdminHost</code> object.
    *   @param obj  <code>AdminHost</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteAdminHost(AdminHost obj) throws JGDIException;
   
   /**
    *   Delete a <code>AdminHost</code> object.
    *   @param obj       the <code>AdminHost</code> object with the primary key information
    *   @param answers   the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteAdminHostWithAnswer(AdminHost obj, List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Delete a <code>AdminHost</code> object by its primary key
    *  @param AH_name   the AH_name of the <code>AdminHost</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteAdminHost( String AH_name ) throws JGDIException;
   /**
    *   Delete a <code>AdminHost</code> object by its primary key
    *  @param AH_name   the AH_name of the <code>AdminHost</code> object
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteAdminHostWithAnswer( String AH_name , List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Delete several <code>AdminHost</code> objects by their primary key
    *  @param AH_names   array of AH_name of the <code>AdminHost</code> objects
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteAdminHostsWithAnswer( String[] AH_names 
    , List<JGDIAnswer> answers) throws JGDIException;
    
   
   /**
    *   Add a new <code>AdminHost</code> object.
    *   @param  obj      the new <code>AdminHost</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addAdminHost(AdminHost obj) throws JGDIException;

   /**
    *   Add a new <code>AdminHost</code> object.
    *   @param obj       the new <code>AdminHost</code> object
    *   @param answers   the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addAdminHostWithAnswer(AdminHost obj, List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Add a new <code>AdminHost</code> object.
    *   @param  name the new <code>String</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addAdminHost(String name) throws JGDIException;

   /**
    *   Add a new <code>AdminHost</code> object.
    *   @param  name the new <code>String</code> object
    *   @param  answers the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addAdminHostWithAnswer(String name, List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Get the list of all defined <code>AdminHost</code> objects.
    *   @return list of <code>AdminHost</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List< AdminHost > getAdminHostList() throws JGDIException;
   /**
    *   Get the list of all defined <code>AdminHost</code> objects.
    *   @param answers  the <code>answer list</code> object    
    *   @return list of <code>AdminHost</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List< AdminHost > getAdminHostListWithAnswer(List<JGDIAnswer> answers) throws JGDIException;

   /**
    *   Update a <code>Checkpoint</code> object.
    *   @param obj   the <code>Checkpoint</code> object with the new values
    *   @throws JGDIException on any error on the GDI layer
    */
   public void updateCheckpoint(Checkpoint obj) throws JGDIException;

   /**
    *   Update a <code>Checkpoint</code> object.
    *   @param obj      the <code>Checkpoint</code> object with the new values
    *   @param answers  the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void updateCheckpointWithAnswer(Checkpoint obj, List<JGDIAnswer> answers) throws JGDIException;

   /**
    *   Delete a <code>Checkpoint</code> object.
    *   @param obj  <code>Checkpoint</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteCheckpoint(Checkpoint obj) throws JGDIException;
   
   /**
    *   Delete a <code>Checkpoint</code> object.
    *   @param obj       the <code>Checkpoint</code> object with the primary key information
    *   @param answers   the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteCheckpointWithAnswer(Checkpoint obj, List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Delete a <code>Checkpoint</code> object by its primary key
    *  @param CK_name   the CK_name of the <code>Checkpoint</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteCheckpoint( String CK_name ) throws JGDIException;
   /**
    *   Delete a <code>Checkpoint</code> object by its primary key
    *  @param CK_name   the CK_name of the <code>Checkpoint</code> object
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteCheckpointWithAnswer( String CK_name , List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Delete several <code>Checkpoint</code> objects by their primary key
    *  @param CK_names   array of CK_name of the <code>Checkpoint</code> objects
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteCheckpointsWithAnswer( String[] CK_names 
    , List<JGDIAnswer> answers) throws JGDIException;
    
   
   /**
    *   Add a new <code>Checkpoint</code> object.
    *   @param  obj      the new <code>Checkpoint</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addCheckpoint(Checkpoint obj) throws JGDIException;

   /**
    *   Add a new <code>Checkpoint</code> object.
    *   @param obj       the new <code>Checkpoint</code> object
    *   @param answers   the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addCheckpointWithAnswer(Checkpoint obj, List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Get the list of all defined <code>Checkpoint</code> objects.
    *   @return list of <code>Checkpoint</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List< Checkpoint > getCheckpointList() throws JGDIException;
   /**
    *   Get the list of all defined <code>Checkpoint</code> objects.
    *   @param answers  the <code>answer list</code> object    
    *   @return list of <code>Checkpoint</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List< Checkpoint > getCheckpointListWithAnswer(List<JGDIAnswer> answers) throws JGDIException;

   /**
    *  Get a Checkpoint by its primary key
    *
    *  @return the Checkpoint
    *  @param CK_name   the CK_name of the <code>Checkpoint</code> object
    *  @return the found <code>Checkpoint</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public Checkpoint getCheckpoint( String CK_name ) throws JGDIException;

   /**
    *  Get a Checkpoint by its primary key
    *
    *  @return the Checkpoint
    *  @param CK_name   the CK_name of the <code>Checkpoint</code> object
   *  @param answers   the <code>answer list</code> object  
    *  @return the found <code>Checkpoint</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public Checkpoint getCheckpointWithAnswer( String CK_name , List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Update a <code>ParallelEnvironment</code> object.
    *   @param obj   the <code>ParallelEnvironment</code> object with the new values
    *   @throws JGDIException on any error on the GDI layer
    */
   public void updateParallelEnvironment(ParallelEnvironment obj) throws JGDIException;

   /**
    *   Update a <code>ParallelEnvironment</code> object.
    *   @param obj      the <code>ParallelEnvironment</code> object with the new values
    *   @param answers  the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void updateParallelEnvironmentWithAnswer(ParallelEnvironment obj, List<JGDIAnswer> answers) throws JGDIException;

   /**
    *   Delete a <code>ParallelEnvironment</code> object.
    *   @param obj  <code>ParallelEnvironment</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteParallelEnvironment(ParallelEnvironment obj) throws JGDIException;
   
   /**
    *   Delete a <code>ParallelEnvironment</code> object.
    *   @param obj       the <code>ParallelEnvironment</code> object with the primary key information
    *   @param answers   the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteParallelEnvironmentWithAnswer(ParallelEnvironment obj, List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Delete a <code>ParallelEnvironment</code> object by its primary key
    *  @param PE_name   the PE_name of the <code>ParallelEnvironment</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteParallelEnvironment( String PE_name ) throws JGDIException;
   /**
    *   Delete a <code>ParallelEnvironment</code> object by its primary key
    *  @param PE_name   the PE_name of the <code>ParallelEnvironment</code> object
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteParallelEnvironmentWithAnswer( String PE_name , List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Delete several <code>ParallelEnvironment</code> objects by their primary key
    *  @param PE_names   array of PE_name of the <code>ParallelEnvironment</code> objects
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteParallelEnvironmentsWithAnswer( String[] PE_names 
    , List<JGDIAnswer> answers) throws JGDIException;
    
   
   /**
    *   Add a new <code>ParallelEnvironment</code> object.
    *   @param  obj      the new <code>ParallelEnvironment</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addParallelEnvironment(ParallelEnvironment obj) throws JGDIException;

   /**
    *   Add a new <code>ParallelEnvironment</code> object.
    *   @param obj       the new <code>ParallelEnvironment</code> object
    *   @param answers   the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addParallelEnvironmentWithAnswer(ParallelEnvironment obj, List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Get the list of all defined <code>ParallelEnvironment</code> objects.
    *   @return list of <code>ParallelEnvironment</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List< ParallelEnvironment > getParallelEnvironmentList() throws JGDIException;
   /**
    *   Get the list of all defined <code>ParallelEnvironment</code> objects.
    *   @param answers  the <code>answer list</code> object    
    *   @return list of <code>ParallelEnvironment</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List< ParallelEnvironment > getParallelEnvironmentListWithAnswer(List<JGDIAnswer> answers) throws JGDIException;

   /**
    *  Get a ParallelEnvironment by its primary key
    *
    *  @return the ParallelEnvironment
    *  @param PE_name   the PE_name of the <code>ParallelEnvironment</code> object
    *  @return the found <code>ParallelEnvironment</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public ParallelEnvironment getParallelEnvironment( String PE_name ) throws JGDIException;

   /**
    *  Get a ParallelEnvironment by its primary key
    *
    *  @return the ParallelEnvironment
    *  @param PE_name   the PE_name of the <code>ParallelEnvironment</code> object
   *  @param answers   the <code>answer list</code> object  
    *  @return the found <code>ParallelEnvironment</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public ParallelEnvironment getParallelEnvironmentWithAnswer( String PE_name , List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Update a <code>ComplexEntry</code> object.
    *   @param obj   the <code>ComplexEntry</code> object with the new values
    *   @throws JGDIException on any error on the GDI layer
    */
   public void updateComplexEntry(ComplexEntry obj) throws JGDIException;

   /**
    *   Update a <code>ComplexEntry</code> object.
    *   @param obj      the <code>ComplexEntry</code> object with the new values
    *   @param answers  the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void updateComplexEntryWithAnswer(ComplexEntry obj, List<JGDIAnswer> answers) throws JGDIException;

   /**
    *   Delete a <code>ComplexEntry</code> object.
    *   @param obj  <code>ComplexEntry</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteComplexEntry(ComplexEntry obj) throws JGDIException;
   
   /**
    *   Delete a <code>ComplexEntry</code> object.
    *   @param obj       the <code>ComplexEntry</code> object with the primary key information
    *   @param answers   the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteComplexEntryWithAnswer(ComplexEntry obj, List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Delete a <code>ComplexEntry</code> object by its primary key
    *  @param CE_name   the CE_name of the <code>ComplexEntry</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteComplexEntry( String CE_name ) throws JGDIException;
   /**
    *   Delete a <code>ComplexEntry</code> object by its primary key
    *  @param CE_name   the CE_name of the <code>ComplexEntry</code> object
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteComplexEntryWithAnswer( String CE_name , List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Delete several <code>ComplexEntry</code> objects by their primary key
    *  @param CE_names   array of CE_name of the <code>ComplexEntry</code> objects
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteComplexEntrysWithAnswer( String[] CE_names 
    , List<JGDIAnswer> answers) throws JGDIException;
    
   
   /**
    *   Add a new <code>ComplexEntry</code> object.
    *   @param  obj      the new <code>ComplexEntry</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addComplexEntry(ComplexEntry obj) throws JGDIException;

   /**
    *   Add a new <code>ComplexEntry</code> object.
    *   @param obj       the new <code>ComplexEntry</code> object
    *   @param answers   the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addComplexEntryWithAnswer(ComplexEntry obj, List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Get the list of all defined <code>ComplexEntry</code> objects.
    *   @return list of <code>ComplexEntry</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List< ComplexEntry > getComplexEntryList() throws JGDIException;
   /**
    *   Get the list of all defined <code>ComplexEntry</code> objects.
    *   @param answers  the <code>answer list</code> object    
    *   @return list of <code>ComplexEntry</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List< ComplexEntry > getComplexEntryListWithAnswer(List<JGDIAnswer> answers) throws JGDIException;

   /**
    *  Get a ComplexEntry by its primary key
    *
    *  @return the ComplexEntry
    *  @param CE_name   the CE_name of the <code>ComplexEntry</code> object
    *  @return the found <code>ComplexEntry</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public ComplexEntry getComplexEntry( String CE_name ) throws JGDIException;

   /**
    *  Get a ComplexEntry by its primary key
    *
    *  @return the ComplexEntry
    *  @param CE_name   the CE_name of the <code>ComplexEntry</code> object
   *  @param answers   the <code>answer list</code> object  
    *  @return the found <code>ComplexEntry</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public ComplexEntry getComplexEntryWithAnswer( String CE_name , List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Update a <code>ClusterQueue</code> object.
    *   @param obj   the <code>ClusterQueue</code> object with the new values
    *   @throws JGDIException on any error on the GDI layer
    */
   public void updateClusterQueue(ClusterQueue obj) throws JGDIException;

   /**
    *   Update a <code>ClusterQueue</code> object.
    *   @param obj      the <code>ClusterQueue</code> object with the new values
    *   @param answers  the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void updateClusterQueueWithAnswer(ClusterQueue obj, List<JGDIAnswer> answers) throws JGDIException;

   /**
    *   Delete a <code>ClusterQueue</code> object.
    *   @param obj  <code>ClusterQueue</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteClusterQueue(ClusterQueue obj) throws JGDIException;
   
   /**
    *   Delete a <code>ClusterQueue</code> object.
    *   @param obj       the <code>ClusterQueue</code> object with the primary key information
    *   @param answers   the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteClusterQueueWithAnswer(ClusterQueue obj, List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Delete a <code>ClusterQueue</code> object by its primary key
    *  @param CQ_name   the CQ_name of the <code>ClusterQueue</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteClusterQueue( String CQ_name ) throws JGDIException;
   /**
    *   Delete a <code>ClusterQueue</code> object by its primary key
    *  @param CQ_name   the CQ_name of the <code>ClusterQueue</code> object
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteClusterQueueWithAnswer( String CQ_name , List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Delete several <code>ClusterQueue</code> objects by their primary key
    *  @param CQ_names   array of CQ_name of the <code>ClusterQueue</code> objects
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteClusterQueuesWithAnswer( String[] CQ_names 
    , List<JGDIAnswer> answers) throws JGDIException;
    
   
   /**
    *   Add a new <code>ClusterQueue</code> object.
    *   @param  obj      the new <code>ClusterQueue</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addClusterQueue(ClusterQueue obj) throws JGDIException;

   /**
    *   Add a new <code>ClusterQueue</code> object.
    *   @param obj       the new <code>ClusterQueue</code> object
    *   @param answers   the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addClusterQueueWithAnswer(ClusterQueue obj, List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Get the list of all defined <code>ClusterQueue</code> objects.
    *   @return list of <code>ClusterQueue</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List< ClusterQueue > getClusterQueueList() throws JGDIException;
   /**
    *   Get the list of all defined <code>ClusterQueue</code> objects.
    *   @param answers  the <code>answer list</code> object    
    *   @return list of <code>ClusterQueue</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List< ClusterQueue > getClusterQueueListWithAnswer(List<JGDIAnswer> answers) throws JGDIException;

   /**
    *  Get a ClusterQueue by its primary key
    *
    *  @return the ClusterQueue
    *  @param CQ_name   the CQ_name of the <code>ClusterQueue</code> object
    *  @return the found <code>ClusterQueue</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public ClusterQueue getClusterQueue( String CQ_name ) throws JGDIException;

   /**
    *  Get a ClusterQueue by its primary key
    *
    *  @return the ClusterQueue
    *  @param CQ_name   the CQ_name of the <code>ClusterQueue</code> object
   *  @param answers   the <code>answer list</code> object  
    *  @return the found <code>ClusterQueue</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public ClusterQueue getClusterQueueWithAnswer( String CQ_name , List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Get the <code>JobSchedulingInfo</code> object.
    *   @return the <code>JobSchedulingInfo</code> object.
    *   @throws JGDIException on any error on the GDI layer
    */
   public JobSchedulingInfo getJobSchedulingInfo() throws JGDIException;

   /**
    *   Get the <code>JobSchedulingInfo</code> object.
    *   @param answers  the <code>answer list</code> object
    *   @return the <code>JobSchedulingInfo</code> object.
    *   @throws JGDIException on any error on the GDI layer
    */
   public JobSchedulingInfo getJobSchedulingInfoWithAnswer(List<JGDIAnswer> answers) throws JGDIException;

   /**
    *   Update a <code>UserSet</code> object.
    *   @param obj   the <code>UserSet</code> object with the new values
    *   @throws JGDIException on any error on the GDI layer
    */
   public void updateUserSet(UserSet obj) throws JGDIException;

   /**
    *   Update a <code>UserSet</code> object.
    *   @param obj      the <code>UserSet</code> object with the new values
    *   @param answers  the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void updateUserSetWithAnswer(UserSet obj, List<JGDIAnswer> answers) throws JGDIException;

   /**
    *   Delete a <code>UserSet</code> object.
    *   @param obj  <code>UserSet</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteUserSet(UserSet obj) throws JGDIException;
   
   /**
    *   Delete a <code>UserSet</code> object.
    *   @param obj       the <code>UserSet</code> object with the primary key information
    *   @param answers   the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteUserSetWithAnswer(UserSet obj, List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Delete a <code>UserSet</code> object by its primary key
    *  @param US_name   the US_name of the <code>UserSet</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteUserSet( String US_name ) throws JGDIException;
   /**
    *   Delete a <code>UserSet</code> object by its primary key
    *  @param US_name   the US_name of the <code>UserSet</code> object
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteUserSetWithAnswer( String US_name , List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Delete several <code>UserSet</code> objects by their primary key
    *  @param US_names   array of US_name of the <code>UserSet</code> objects
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteUserSetsWithAnswer( String[] US_names 
    , List<JGDIAnswer> answers) throws JGDIException;
    
   
   /**
    *   Add a new <code>UserSet</code> object.
    *   @param  obj      the new <code>UserSet</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addUserSet(UserSet obj) throws JGDIException;

   /**
    *   Add a new <code>UserSet</code> object.
    *   @param obj       the new <code>UserSet</code> object
    *   @param answers   the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addUserSetWithAnswer(UserSet obj, List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Get the list of all defined <code>UserSet</code> objects.
    *   @return list of <code>UserSet</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List< UserSet > getUserSetList() throws JGDIException;
   /**
    *   Get the list of all defined <code>UserSet</code> objects.
    *   @param answers  the <code>answer list</code> object    
    *   @return list of <code>UserSet</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List< UserSet > getUserSetListWithAnswer(List<JGDIAnswer> answers) throws JGDIException;

   /**
    *  Get a UserSet by its primary key
    *
    *  @return the UserSet
    *  @param US_name   the US_name of the <code>UserSet</code> object
    *  @return the found <code>UserSet</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public UserSet getUserSet( String US_name ) throws JGDIException;

   /**
    *  Get a UserSet by its primary key
    *
    *  @return the UserSet
    *  @param US_name   the US_name of the <code>UserSet</code> object
   *  @param answers   the <code>answer list</code> object  
    *  @return the found <code>UserSet</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public UserSet getUserSetWithAnswer( String US_name , List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Update a <code>Calendar</code> object.
    *   @param obj   the <code>Calendar</code> object with the new values
    *   @throws JGDIException on any error on the GDI layer
    */
   public void updateCalendar(Calendar obj) throws JGDIException;

   /**
    *   Update a <code>Calendar</code> object.
    *   @param obj      the <code>Calendar</code> object with the new values
    *   @param answers  the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void updateCalendarWithAnswer(Calendar obj, List<JGDIAnswer> answers) throws JGDIException;

   /**
    *   Delete a <code>Calendar</code> object.
    *   @param obj  <code>Calendar</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteCalendar(Calendar obj) throws JGDIException;
   
   /**
    *   Delete a <code>Calendar</code> object.
    *   @param obj       the <code>Calendar</code> object with the primary key information
    *   @param answers   the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteCalendarWithAnswer(Calendar obj, List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Delete a <code>Calendar</code> object by its primary key
    *  @param CAL_name   the CAL_name of the <code>Calendar</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteCalendar( String CAL_name ) throws JGDIException;
   /**
    *   Delete a <code>Calendar</code> object by its primary key
    *  @param CAL_name   the CAL_name of the <code>Calendar</code> object
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteCalendarWithAnswer( String CAL_name , List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Delete several <code>Calendar</code> objects by their primary key
    *  @param CAL_names   array of CAL_name of the <code>Calendar</code> objects
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteCalendarsWithAnswer( String[] CAL_names 
    , List<JGDIAnswer> answers) throws JGDIException;
    
   
   /**
    *   Add a new <code>Calendar</code> object.
    *   @param  obj      the new <code>Calendar</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addCalendar(Calendar obj) throws JGDIException;

   /**
    *   Add a new <code>Calendar</code> object.
    *   @param obj       the new <code>Calendar</code> object
    *   @param answers   the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addCalendarWithAnswer(Calendar obj, List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Get the list of all defined <code>Calendar</code> objects.
    *   @return list of <code>Calendar</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List< Calendar > getCalendarList() throws JGDIException;
   /**
    *   Get the list of all defined <code>Calendar</code> objects.
    *   @param answers  the <code>answer list</code> object    
    *   @return list of <code>Calendar</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List< Calendar > getCalendarListWithAnswer(List<JGDIAnswer> answers) throws JGDIException;

   /**
    *  Get a Calendar by its primary key
    *
    *  @return the Calendar
    *  @param CAL_name   the CAL_name of the <code>Calendar</code> object
    *  @return the found <code>Calendar</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public Calendar getCalendar( String CAL_name ) throws JGDIException;

   /**
    *  Get a Calendar by its primary key
    *
    *  @return the Calendar
    *  @param CAL_name   the CAL_name of the <code>Calendar</code> object
   *  @param answers   the <code>answer list</code> object  
    *  @return the found <code>Calendar</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public Calendar getCalendarWithAnswer( String CAL_name , List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Delete a <code>Operator</code> object.
    *   @param obj  <code>Operator</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteOperator(Operator obj) throws JGDIException;
   
   /**
    *   Delete a <code>Operator</code> object.
    *   @param obj       the <code>Operator</code> object with the primary key information
    *   @param answers   the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteOperatorWithAnswer(Operator obj, List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Delete a <code>Operator</code> object by its primary key
    *  @param UO_name   the UO_name of the <code>Operator</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteOperator( String UO_name ) throws JGDIException;
   /**
    *   Delete a <code>Operator</code> object by its primary key
    *  @param UO_name   the UO_name of the <code>Operator</code> object
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteOperatorWithAnswer( String UO_name , List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Delete several <code>Operator</code> objects by their primary key
    *  @param UO_names   array of UO_name of the <code>Operator</code> objects
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteOperatorsWithAnswer( String[] UO_names 
    , List<JGDIAnswer> answers) throws JGDIException;
    
   
   /**
    *   Add a new <code>Operator</code> object.
    *   @param  obj      the new <code>Operator</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addOperator(Operator obj) throws JGDIException;

   /**
    *   Add a new <code>Operator</code> object.
    *   @param obj       the new <code>Operator</code> object
    *   @param answers   the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addOperatorWithAnswer(Operator obj, List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Add a new <code>Operator</code> object.
    *   @param  name the new <code>String</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addOperator(String name) throws JGDIException;

   /**
    *   Add a new <code>Operator</code> object.
    *   @param  name the new <code>String</code> object
    *   @param  answers the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addOperatorWithAnswer(String name, List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Get the list of all defined <code>Operator</code> objects.
    *   @return list of <code>Operator</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List< Operator > getOperatorList() throws JGDIException;
   /**
    *   Get the list of all defined <code>Operator</code> objects.
    *   @param answers  the <code>answer list</code> object    
    *   @return list of <code>Operator</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List< Operator > getOperatorListWithAnswer(List<JGDIAnswer> answers) throws JGDIException;

   /**
    *  Get a Operator by its primary key
    *
    *  @return the Operator
    *  @param UO_name   the UO_name of the <code>Operator</code> object
    *  @return the found <code>Operator</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public Operator getOperator( String UO_name ) throws JGDIException;

   /**
    *  Get a Operator by its primary key
    *
    *  @return the Operator
    *  @param UO_name   the UO_name of the <code>Operator</code> object
   *  @param answers   the <code>answer list</code> object  
    *  @return the found <code>Operator</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public Operator getOperatorWithAnswer( String UO_name , List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Update a <code>Job</code> object.
    *   @param obj   the <code>Job</code> object with the new values
    *   @throws JGDIException on any error on the GDI layer
    */
   public void updateJob(Job obj) throws JGDIException;

   /**
    *   Update a <code>Job</code> object.
    *   @param obj      the <code>Job</code> object with the new values
    *   @param answers  the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void updateJobWithAnswer(Job obj, List<JGDIAnswer> answers) throws JGDIException;

   /**
    *   Delete a <code>Job</code> object.
    *   @param obj  <code>Job</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteJob(Job obj) throws JGDIException;
   
   /**
    *   Delete a <code>Job</code> object.
    *   @param obj       the <code>Job</code> object with the primary key information
    *   @param answers   the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteJobWithAnswer(Job obj, List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Delete a <code>Job</code> object by its primary key
    *  @param JB_job_number   the JB_job_number of the <code>Job</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteJob( int JB_job_number ) throws JGDIException;
   /**
    *   Delete a <code>Job</code> object by its primary key
    *  @param JB_job_number   the JB_job_number of the <code>Job</code> object
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteJobWithAnswer( int JB_job_number , List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Delete several <code>Job</code> objects by their primary key
    *  @param JB_job_numbers   array of JB_job_number of the <code>Job</code> objects
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteJobsWithAnswer( String[] JB_job_numbers 

    , boolean forced, UserFilter userFilter
    , List<JGDIAnswer> answers) throws JGDIException;
    
   
   /**
    *   Add a new <code>Job</code> object.
    *   @param  obj      the new <code>Job</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addJob(Job obj) throws JGDIException;

   /**
    *   Add a new <code>Job</code> object.
    *   @param obj       the new <code>Job</code> object
    *   @param answers   the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addJobWithAnswer(Job obj, List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Get the list of all defined <code>Job</code> objects.
    *   @return list of <code>Job</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List< Job > getJobList() throws JGDIException;
   /**
    *   Get the list of all defined <code>Job</code> objects.
    *   @param answers  the <code>answer list</code> object    
    *   @return list of <code>Job</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List< Job > getJobListWithAnswer(List<JGDIAnswer> answers) throws JGDIException;

   /**
    *  Get a Job by its primary key
    *
    *  @return the Job
    *  @param JB_job_number   the JB_job_number of the <code>Job</code> object
    *  @return the found <code>Job</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public Job getJob( int JB_job_number ) throws JGDIException;

   /**
    *  Get a Job by its primary key
    *
    *  @return the Job
    *  @param JB_job_number   the JB_job_number of the <code>Job</code> object
   *  @param answers   the <code>answer list</code> object  
    *  @return the found <code>Job</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public Job getJobWithAnswer( int JB_job_number , List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Update a <code>ResourceQuotaSet</code> object.
    *   @param obj   the <code>ResourceQuotaSet</code> object with the new values
    *   @throws JGDIException on any error on the GDI layer
    */
   public void updateResourceQuotaSet(ResourceQuotaSet obj) throws JGDIException;

   /**
    *   Update a <code>ResourceQuotaSet</code> object.
    *   @param obj      the <code>ResourceQuotaSet</code> object with the new values
    *   @param answers  the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void updateResourceQuotaSetWithAnswer(ResourceQuotaSet obj, List<JGDIAnswer> answers) throws JGDIException;

   /**
    *   Delete a <code>ResourceQuotaSet</code> object.
    *   @param obj  <code>ResourceQuotaSet</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteResourceQuotaSet(ResourceQuotaSet obj) throws JGDIException;
   
   /**
    *   Delete a <code>ResourceQuotaSet</code> object.
    *   @param obj       the <code>ResourceQuotaSet</code> object with the primary key information
    *   @param answers   the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteResourceQuotaSetWithAnswer(ResourceQuotaSet obj, List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Delete a <code>ResourceQuotaSet</code> object by its primary key
    *  @param RQS_name   the RQS_name of the <code>ResourceQuotaSet</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteResourceQuotaSet( String RQS_name ) throws JGDIException;
   /**
    *   Delete a <code>ResourceQuotaSet</code> object by its primary key
    *  @param RQS_name   the RQS_name of the <code>ResourceQuotaSet</code> object
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteResourceQuotaSetWithAnswer( String RQS_name , List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Delete several <code>ResourceQuotaSet</code> objects by their primary key
    *  @param RQS_names   array of RQS_name of the <code>ResourceQuotaSet</code> objects
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteResourceQuotaSetsWithAnswer( String[] RQS_names 
    , List<JGDIAnswer> answers) throws JGDIException;
    
   
   /**
    *   Add a new <code>ResourceQuotaSet</code> object.
    *   @param  obj      the new <code>ResourceQuotaSet</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addResourceQuotaSet(ResourceQuotaSet obj) throws JGDIException;

   /**
    *   Add a new <code>ResourceQuotaSet</code> object.
    *   @param obj       the new <code>ResourceQuotaSet</code> object
    *   @param answers   the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addResourceQuotaSetWithAnswer(ResourceQuotaSet obj, List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Get the list of all defined <code>ResourceQuotaSet</code> objects.
    *   @return list of <code>ResourceQuotaSet</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List< ResourceQuotaSet > getResourceQuotaSetList() throws JGDIException;
   /**
    *   Get the list of all defined <code>ResourceQuotaSet</code> objects.
    *   @param answers  the <code>answer list</code> object    
    *   @return list of <code>ResourceQuotaSet</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List< ResourceQuotaSet > getResourceQuotaSetListWithAnswer(List<JGDIAnswer> answers) throws JGDIException;

   /**
    *  Get a ResourceQuotaSet by its primary key
    *
    *  @return the ResourceQuotaSet
    *  @param RQS_name   the RQS_name of the <code>ResourceQuotaSet</code> object
    *  @return the found <code>ResourceQuotaSet</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public ResourceQuotaSet getResourceQuotaSet( String RQS_name ) throws JGDIException;

   /**
    *  Get a ResourceQuotaSet by its primary key
    *
    *  @return the ResourceQuotaSet
    *  @param RQS_name   the RQS_name of the <code>ResourceQuotaSet</code> object
   *  @param answers   the <code>answer list</code> object  
    *  @return the found <code>ResourceQuotaSet</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public ResourceQuotaSet getResourceQuotaSetWithAnswer( String RQS_name , List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Get the list of all defined <code>EventClient</code> objects.
    *   @return list of <code>EventClient</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List< EventClient > getEventClientList() throws JGDIException;
   /**
    *   Get the list of all defined <code>EventClient</code> objects.
    *   @param answers  the <code>answer list</code> object    
    *   @return list of <code>EventClient</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List< EventClient > getEventClientListWithAnswer(List<JGDIAnswer> answers) throws JGDIException;

   /**
    *   Update a <code>User</code> object.
    *   @param obj   the <code>User</code> object with the new values
    *   @throws JGDIException on any error on the GDI layer
    */
   public void updateUser(User obj) throws JGDIException;

   /**
    *   Update a <code>User</code> object.
    *   @param obj      the <code>User</code> object with the new values
    *   @param answers  the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void updateUserWithAnswer(User obj, List<JGDIAnswer> answers) throws JGDIException;

   /**
    *   Delete a <code>User</code> object.
    *   @param obj  <code>User</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteUser(User obj) throws JGDIException;
   
   /**
    *   Delete a <code>User</code> object.
    *   @param obj       the <code>User</code> object with the primary key information
    *   @param answers   the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteUserWithAnswer(User obj, List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Delete a <code>User</code> object by its primary key
    *  @param UU_name   the UU_name of the <code>User</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteUser( String UU_name ) throws JGDIException;
   /**
    *   Delete a <code>User</code> object by its primary key
    *  @param UU_name   the UU_name of the <code>User</code> object
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteUserWithAnswer( String UU_name , List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Delete several <code>User</code> objects by their primary key
    *  @param UU_names   array of UU_name of the <code>User</code> objects
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteUsersWithAnswer( String[] UU_names 
    , List<JGDIAnswer> answers) throws JGDIException;
    
   
   /**
    *   Add a new <code>User</code> object.
    *   @param  obj      the new <code>User</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addUser(User obj) throws JGDIException;

   /**
    *   Add a new <code>User</code> object.
    *   @param obj       the new <code>User</code> object
    *   @param answers   the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addUserWithAnswer(User obj, List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Get the list of all defined <code>User</code> objects.
    *   @return list of <code>User</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List< User > getUserList() throws JGDIException;
   /**
    *   Get the list of all defined <code>User</code> objects.
    *   @param answers  the <code>answer list</code> object    
    *   @return list of <code>User</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List< User > getUserListWithAnswer(List<JGDIAnswer> answers) throws JGDIException;

   /**
    *  Get a User by its primary key
    *
    *  @return the User
    *  @param UU_name   the UU_name of the <code>User</code> object
    *  @return the found <code>User</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public User getUser( String UU_name ) throws JGDIException;

   /**
    *  Get a User by its primary key
    *
    *  @return the User
    *  @param UU_name   the UU_name of the <code>User</code> object
   *  @param answers   the <code>answer list</code> object  
    *  @return the found <code>User</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public User getUserWithAnswer( String UU_name , List<JGDIAnswer> answers) throws JGDIException;


   
}
