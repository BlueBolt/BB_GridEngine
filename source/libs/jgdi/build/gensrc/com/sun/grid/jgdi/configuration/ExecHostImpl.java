/*___INFO__MARK_BEGIN__*/
/*************************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  the Sun Industry Standards Source License Version 1.2
 *
 *  Sun Microsystems Inc., March, 2001
 *
 *
 *  Sun Industry Standards Source License Version 1.2
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.2 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *   Copyright: 2001 by Sun Microsystems, Inc.
 *
 *   All Rights Reserved.
 *
 ************************************************************************/
/*___INFO__MARK_END__*/
/**
 *  Generated from javamodel_impl.jsp
 *  !!! DO NOT EDIT THIS FILE !!!
 */

package com.sun.grid.jgdi.configuration;

import javax.management.*;
import com.sun.grid.jgdi.configuration.GEObject;
import java.util.List;
import java.util.LinkedList;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.logging.Logger;
import java.util.logging.Level;

/**
 *  Java representation of the cull object EH_Type
 *  defined in sge_all_listsL.template
 *
 *  <p><strong>Warning:</strong>  The  ExecHostImpl class will 
 *  not be compatible with future Sun&trade; Grid Engine releases.</p>
 */
public class ExecHostImpl extends    GEObjectImpl implements ExecHost {


   /**
    *  Create a new instance of ExecHostImpl. The new instance
    *  will not be initialized with the default values.
    */
   public ExecHostImpl() {
      this(false);
   }
   
   /**
    *   Create a new instanceof
    *   @param  initWithDefaultValues if <code>true</code> the new instance will
    *                                 be initialized with the default values as defined
    *                                 in the cull definition.
    */
   public ExecHostImpl(boolean initWithDefaultValues) { 

      if (initWithDefaultValues) { 
       setName("template");    
    }

  } // end of default constructor
  
  // --- newInstance method with primary key field
  

   /**
    *  Create a new instance of ExecHostImpl
    */
   public ExecHostImpl(java.lang.String name ) {

   
         setName(name);

    }



    // Attribute name ------------------------------------------------
   
    /**
     *  Determine if the name attribute is set
     *  @return <code>true</code> if the name attribute is set
     */
    public boolean isSetName() {
   
        return  (m_name != null);

    }
   
    private java.lang.String m_name;

    /**
     *   Set the name attribute.
     *
     *   @param aName  the new value for the  name attribute
     */
    public void setName(java.lang.String aName) {   
        m_name = aName;

    }

    /**
     *  Get the value of the name attribute.
     *  @return the value of the name attribute
     */
    public java.lang.String getName() {
        return m_name;
    }


    // Attribute scalingList ------------------------------------------------

    // keyClassName for SGE_STRING = String

   
    private Map m_scaling;

    private void initScaling() {
        if (m_scaling == null) {
            m_scaling = new LinkedHashMap();
        }
    }
   
    /**
     *  <p>Put the attribute scaling for a key.</p>
     *
     *  @param key    the key
     *  @param value  the value
     */
    public void putScaling(String key, double value) {   
        initScaling();
        m_scaling.put(key,

                            new java.lang.Double(value)

                            );
    }

    /**
     *  <p>Get the default value of the attribute scaling.</p>
     *  @return the default value of the attribute scaling
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public double getDefaultScaling() {
        if (m_scaling == null) {
            throw new IllegalStateException("default value for attribute scaling not found");
        }
        java.lang.Double ret = (java.lang.Double)m_scaling.get("default");
        if (ret == null) {
            throw new IllegalStateException("default value for attribute scaling not found");
        }

        return ret.doubleValue();

    }
   
    /**
     *  <p>Get the scaling attribute for a key.</p>
     *  @param   key   the key
     *  @return  the scaling attribute for the host or the
     *           default value of  scaling
     */
    public double getScaling(String key) {
        initScaling();
        if (m_scaling.containsKey(key)) {      
            java.lang.Double ret = (java.lang.Double)m_scaling.get(key);
            if (ret != null) {

                return ret.doubleValue();

            } else {
                return 0.0;
            }
        } else {
            return getDefaultScaling();
        }
    }


    /**
     *  <p>remove the attribute scaling for a key.</p>
     *
     *  @param key tje key
     *  @return the value for the key or <code>null</code>
     *          if the value attribute was not defined for the key.
     */
    public java.lang.Double removeScaling(String key) {
        initScaling();
        return (java.lang.Double)m_scaling.remove(key);
    }

    /**
     *  <p>Remove the attribute scaling for all keys.</p>
     */
    public void removeAllScaling() {
        if (m_scaling != null) {
            m_scaling.clear();
        }
    }
   
    /**
     *  Get the set of keys which have the attribute scaling set.
     *  @return set of keys
     */
    public Set<String> getScalingKeys() {
        if (m_scaling == null) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(m_scaling.keySet());
        }
    }
   
    /**
     *  Get the number of keys which have the attribute scaling set.
     *  @return the number of keys which have the attribute scaling set.
     */
    public int getScalingCount() {
        if (m_scaling == null) {
            return 0;
        } else {
            return m_scaling.size();
        }
    }
   
    /**
     *  Determine if any scaling attribute is set
     *  @return <code>true</code> if the scaling attribute is set
     */
    public boolean isSetScaling () {
        return (m_scaling != null) && (!m_scaling.isEmpty());
    }
   
    /**
     *  Determine if any scaling attribute is for a key is set
     *  @param  key the key
     *  @return <code>true</code> if the scaling attribute is set
     */
    public boolean isSetScaling(String key) {
        return (m_scaling != null) && (m_scaling.get(key) != null);
    }
   


    // Attribute consumableConfigList ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.ComplexEntry > m_consumableConfigList;
   
    private void initConsumableConfig() {
        if (m_consumableConfigList == null) {
            m_consumableConfigList = new LinkedList< com.sun.grid.jgdi.configuration.ComplexEntry >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.ComplexEntry attribute.

     *   @param aconsumableConfig  the new com.sun.grid.jgdi.configuration.ComplexEntry attribute
     */
    public void addConsumableConfig(com.sun.grid.jgdi.configuration.ComplexEntry aconsumableConfig) {   
        initConsumableConfig();
        
        m_consumableConfigList.add(aconsumableConfig);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.ComplexEntry attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.ComplexEntry attribute
     *   @param aconsumableConfig  the new com.sun.grid.jgdi.configuration.ComplexEntry attribute
     */
    public void setConsumableConfig(int index, com.sun.grid.jgdi.configuration.ComplexEntry aconsumableConfig) {
        initConsumableConfig();
        m_consumableConfigList.set(index, aconsumableConfig);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.ComplexEntry attributes.
     */
    public void removeAllConsumableConfig() {
        if (m_consumableConfigList != null) {
            m_consumableConfigList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.ComplexEntry attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.ComplexEntry attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.ComplexEntry attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.ComplexEntry removeConsumableConfig(int index) {
        initConsumableConfig();
        return (com.sun.grid.jgdi.configuration.ComplexEntry)m_consumableConfigList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.ComplexEntry attribute.
     *  @param aconsumableConfig  the com.sun.grid.jgdi.configuration.ComplexEntry attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.ComplexEntry attribute has been removed
     */
    public boolean removeConsumableConfig(com.sun.grid.jgdi.configuration.ComplexEntry aconsumableConfig) {
        initConsumableConfig();
        return m_consumableConfigList.remove(aconsumableConfig);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.ComplexEntry attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.ComplexEntry attributes
     */
    public List< com.sun.grid.jgdi.configuration.ComplexEntry > getConsumableConfigList() {
        initConsumableConfig();
        return Collections.unmodifiableList(m_consumableConfigList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.ComplexEntry attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.ComplexEntry attributes.
     */
    public int getConsumableConfigCount() {
        if (m_consumableConfigList != null) {
            return m_consumableConfigList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.ComplexEntry attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.ComplexEntry attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.ComplexEntry attribute
     */
    public com.sun.grid.jgdi.configuration.ComplexEntry getConsumableConfig(int index) {
        initConsumableConfig();
        return (com.sun.grid.jgdi.configuration.ComplexEntry)m_consumableConfigList.get(index);
    }
   
    /**
     *  Determine if the consumableConfig attribute is set
     *  @return <code>true</code> if the consumableConfig attribute is set
     */
    public boolean isSetConsumableConfig () {
        return (m_consumableConfigList != null) && (!m_consumableConfigList.isEmpty());
    }
   

    // Attribute usageScalingList ------------------------------------------------

    // keyClassName for SGE_STRING = String

   
    private Map m_usageScaling;

    private void initUsageScaling() {
        if (m_usageScaling == null) {
            m_usageScaling = new LinkedHashMap();
        }
    }
   
    /**
     *  <p>Put the attribute usageScaling for a key.</p>
     *
     *  @param key    the key
     *  @param value  the value
     */
    public void putUsageScaling(String key, double value) {   
        initUsageScaling();
        m_usageScaling.put(key,

                            new java.lang.Double(value)

                            );
    }

    /**
     *  <p>Get the default value of the attribute usageScaling.</p>
     *  @return the default value of the attribute usageScaling
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public double getDefaultUsageScaling() {
        if (m_usageScaling == null) {
            throw new IllegalStateException("default value for attribute usageScaling not found");
        }
        java.lang.Double ret = (java.lang.Double)m_usageScaling.get("default");
        if (ret == null) {
            throw new IllegalStateException("default value for attribute usageScaling not found");
        }

        return ret.doubleValue();

    }
   
    /**
     *  <p>Get the usageScaling attribute for a key.</p>
     *  @param   key   the key
     *  @return  the usageScaling attribute for the host or the
     *           default value of  usageScaling
     */
    public double getUsageScaling(String key) {
        initUsageScaling();
        if (m_usageScaling.containsKey(key)) {      
            java.lang.Double ret = (java.lang.Double)m_usageScaling.get(key);
            if (ret != null) {

                return ret.doubleValue();

            } else {
                return 0.0;
            }
        } else {
            return getDefaultUsageScaling();
        }
    }


    /**
     *  <p>remove the attribute usageScaling for a key.</p>
     *
     *  @param key tje key
     *  @return the value for the key or <code>null</code>
     *          if the value attribute was not defined for the key.
     */
    public java.lang.Double removeUsageScaling(String key) {
        initUsageScaling();
        return (java.lang.Double)m_usageScaling.remove(key);
    }

    /**
     *  <p>Remove the attribute usageScaling for all keys.</p>
     */
    public void removeAllUsageScaling() {
        if (m_usageScaling != null) {
            m_usageScaling.clear();
        }
    }
   
    /**
     *  Get the set of keys which have the attribute usageScaling set.
     *  @return set of keys
     */
    public Set<String> getUsageScalingKeys() {
        if (m_usageScaling == null) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(m_usageScaling.keySet());
        }
    }
   
    /**
     *  Get the number of keys which have the attribute usageScaling set.
     *  @return the number of keys which have the attribute usageScaling set.
     */
    public int getUsageScalingCount() {
        if (m_usageScaling == null) {
            return 0;
        } else {
            return m_usageScaling.size();
        }
    }
   
    /**
     *  Determine if any usageScaling attribute is set
     *  @return <code>true</code> if the usageScaling attribute is set
     */
    public boolean isSetUsageScaling () {
        return (m_usageScaling != null) && (!m_usageScaling.isEmpty());
    }
   
    /**
     *  Determine if any usageScaling attribute is for a key is set
     *  @param  key the key
     *  @return <code>true</code> if the usageScaling attribute is set
     */
    public boolean isSetUsageScaling(String key) {
        return (m_usageScaling != null) && (m_usageScaling.get(key) != null);
    }
   


    // Attribute loadList ------------------------------------------------

    // keyClassName for SGE_STRING = String

   
    private Map m_load;

    private void initLoad() {
        if (m_load == null) {
            m_load = new LinkedHashMap();
        }
    }
   
    /**
     *  <p>Put the attribute load for a key.</p>
     *
     *  @param key    the key
     *  @param value  the value
     */
    public void putLoad(String key, String value) {   
        initLoad();
        m_load.put(key,

                            value

                            );
    }

    /**
     *  <p>Get the default value of the attribute load.</p>
     *  @return the default value of the attribute load
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultLoad() {
        if (m_load == null) {
            throw new IllegalStateException("default value for attribute load not found");
        }
        java.lang.String ret = (java.lang.String)m_load.get("default");
        if (ret == null) {
            throw new IllegalStateException("default value for attribute load not found");
        }

        return ret;

    }
   
    /**
     *  <p>Get the load attribute for a key.</p>
     *  @param   key   the key
     *  @return  the load attribute for the host or the
     *           default value of  load
     */
    public String getLoad(String key) {
        initLoad();
        if (m_load.containsKey(key)) {      
            java.lang.String ret = (java.lang.String)m_load.get(key);
            if (ret != null) {

                return ret;

            } else {
                return null;
            }
        } else {
            return getDefaultLoad();
        }
    }


    /**
     *  <p>remove the attribute load for a key.</p>
     *
     *  @param key tje key
     *  @return the value for the key or <code>null</code>
     *          if the value attribute was not defined for the key.
     */
    public java.lang.String removeLoad(String key) {
        initLoad();
        return (java.lang.String)m_load.remove(key);
    }

    /**
     *  <p>Remove the attribute load for all keys.</p>
     */
    public void removeAllLoad() {
        if (m_load != null) {
            m_load.clear();
        }
    }
   
    /**
     *  Get the set of keys which have the attribute load set.
     *  @return set of keys
     */
    public Set<String> getLoadKeys() {
        if (m_load == null) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(m_load.keySet());
        }
    }
   
    /**
     *  Get the number of keys which have the attribute load set.
     *  @return the number of keys which have the attribute load set.
     */
    public int getLoadCount() {
        if (m_load == null) {
            return 0;
        } else {
            return m_load.size();
        }
    }
   
    /**
     *  Determine if any load attribute is set
     *  @return <code>true</code> if the load attribute is set
     */
    public boolean isSetLoad () {
        return (m_load != null) && (!m_load.isEmpty());
    }
   
    /**
     *  Determine if any load attribute is for a key is set
     *  @param  key the key
     *  @return <code>true</code> if the load attribute is set
     */
    public boolean isSetLoad(String key) {
        return (m_load != null) && (m_load.get(key) != null);
    }
   


    // Attribute processors ------------------------------------------------

    private boolean isProcessorsSet;
   
    /**
     *  Determine if the processors attribute is set
     *  @return <code>true</code> if the processors attribute is set
     */
    public boolean isSetProcessors() {

        return isProcessorsSet;

    }
   
    private int m_processors;

    /**
     *   Set the processors attribute.
     *
     *   @param aProcessors  the new value for the  processors attribute
     */
    public void setProcessors(int aProcessors) {   
        m_processors = aProcessors;

        isProcessorsSet = true;

    }

    /**
     *  Get the value of the processors attribute.
     *  @return the value of the processors attribute
     */
    public int getProcessors() {
        return m_processors;
    }


    // Attribute acl ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.UserSet > m_aclList;
   
    private void initAcl() {
        if (m_aclList == null) {
            m_aclList = new LinkedList< com.sun.grid.jgdi.configuration.UserSet >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.UserSet attribute.

     *   @param aacl  the new com.sun.grid.jgdi.configuration.UserSet attribute
     */
    public void addAcl(com.sun.grid.jgdi.configuration.UserSet aacl) {   
        initAcl();
        
        m_aclList.add(aacl);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.UserSet attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.UserSet attribute
     *   @param aacl  the new com.sun.grid.jgdi.configuration.UserSet attribute
     */
    public void setAcl(int index, com.sun.grid.jgdi.configuration.UserSet aacl) {
        initAcl();
        m_aclList.set(index, aacl);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.UserSet attributes.
     */
    public void removeAllAcl() {
        if (m_aclList != null) {
            m_aclList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.UserSet attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.UserSet attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.UserSet attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.UserSet removeAcl(int index) {
        initAcl();
        return (com.sun.grid.jgdi.configuration.UserSet)m_aclList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.UserSet attribute.
     *  @param aacl  the com.sun.grid.jgdi.configuration.UserSet attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.UserSet attribute has been removed
     */
    public boolean removeAcl(com.sun.grid.jgdi.configuration.UserSet aacl) {
        initAcl();
        return m_aclList.remove(aacl);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.UserSet attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.UserSet attributes
     */
    public List< com.sun.grid.jgdi.configuration.UserSet > getAclList() {
        initAcl();
        return Collections.unmodifiableList(m_aclList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.UserSet attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.UserSet attributes.
     */
    public int getAclCount() {
        if (m_aclList != null) {
            return m_aclList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.UserSet attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.UserSet attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.UserSet attribute
     */
    public com.sun.grid.jgdi.configuration.UserSet getAcl(int index) {
        initAcl();
        return (com.sun.grid.jgdi.configuration.UserSet)m_aclList.get(index);
    }
   
    /**
     *  Determine if the acl attribute is set
     *  @return <code>true</code> if the acl attribute is set
     */
    public boolean isSetAcl () {
        return (m_aclList != null) && (!m_aclList.isEmpty());
    }
   

    // Attribute xacl ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.UserSet > m_xaclList;
   
    private void initXacl() {
        if (m_xaclList == null) {
            m_xaclList = new LinkedList< com.sun.grid.jgdi.configuration.UserSet >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.UserSet attribute.

     *   @param axacl  the new com.sun.grid.jgdi.configuration.UserSet attribute
     */
    public void addXacl(com.sun.grid.jgdi.configuration.UserSet axacl) {   
        initXacl();
        
        m_xaclList.add(axacl);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.UserSet attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.UserSet attribute
     *   @param axacl  the new com.sun.grid.jgdi.configuration.UserSet attribute
     */
    public void setXacl(int index, com.sun.grid.jgdi.configuration.UserSet axacl) {
        initXacl();
        m_xaclList.set(index, axacl);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.UserSet attributes.
     */
    public void removeAllXacl() {
        if (m_xaclList != null) {
            m_xaclList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.UserSet attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.UserSet attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.UserSet attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.UserSet removeXacl(int index) {
        initXacl();
        return (com.sun.grid.jgdi.configuration.UserSet)m_xaclList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.UserSet attribute.
     *  @param axacl  the com.sun.grid.jgdi.configuration.UserSet attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.UserSet attribute has been removed
     */
    public boolean removeXacl(com.sun.grid.jgdi.configuration.UserSet axacl) {
        initXacl();
        return m_xaclList.remove(axacl);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.UserSet attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.UserSet attributes
     */
    public List< com.sun.grid.jgdi.configuration.UserSet > getXaclList() {
        initXacl();
        return Collections.unmodifiableList(m_xaclList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.UserSet attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.UserSet attributes.
     */
    public int getXaclCount() {
        if (m_xaclList != null) {
            return m_xaclList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.UserSet attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.UserSet attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.UserSet attribute
     */
    public com.sun.grid.jgdi.configuration.UserSet getXacl(int index) {
        initXacl();
        return (com.sun.grid.jgdi.configuration.UserSet)m_xaclList.get(index);
    }
   
    /**
     *  Determine if the xacl attribute is set
     *  @return <code>true</code> if the xacl attribute is set
     */
    public boolean isSetXacl () {
        return (m_xaclList != null) && (!m_xaclList.isEmpty());
    }
   

    // Attribute prj ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.Project > m_prjList;
   
    private void initPrj() {
        if (m_prjList == null) {
            m_prjList = new LinkedList< com.sun.grid.jgdi.configuration.Project >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.Project attribute.

     *   @param aprj  the new com.sun.grid.jgdi.configuration.Project attribute
     */
    public void addPrj(com.sun.grid.jgdi.configuration.Project aprj) {   
        initPrj();
        
        m_prjList.add(aprj);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.Project attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.Project attribute
     *   @param aprj  the new com.sun.grid.jgdi.configuration.Project attribute
     */
    public void setPrj(int index, com.sun.grid.jgdi.configuration.Project aprj) {
        initPrj();
        m_prjList.set(index, aprj);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.Project attributes.
     */
    public void removeAllPrj() {
        if (m_prjList != null) {
            m_prjList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.Project attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.Project attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.Project attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.Project removePrj(int index) {
        initPrj();
        return (com.sun.grid.jgdi.configuration.Project)m_prjList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.Project attribute.
     *  @param aprj  the com.sun.grid.jgdi.configuration.Project attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.Project attribute has been removed
     */
    public boolean removePrj(com.sun.grid.jgdi.configuration.Project aprj) {
        initPrj();
        return m_prjList.remove(aprj);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.Project attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.Project attributes
     */
    public List< com.sun.grid.jgdi.configuration.Project > getPrjList() {
        initPrj();
        return Collections.unmodifiableList(m_prjList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.Project attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.Project attributes.
     */
    public int getPrjCount() {
        if (m_prjList != null) {
            return m_prjList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.Project attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.Project attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.Project attribute
     */
    public com.sun.grid.jgdi.configuration.Project getPrj(int index) {
        initPrj();
        return (com.sun.grid.jgdi.configuration.Project)m_prjList.get(index);
    }
   
    /**
     *  Determine if the prj attribute is set
     *  @return <code>true</code> if the prj attribute is set
     */
    public boolean isSetPrj () {
        return (m_prjList != null) && (!m_prjList.isEmpty());
    }
   

    // Attribute xprj ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.Project > m_xprjList;
   
    private void initXprj() {
        if (m_xprjList == null) {
            m_xprjList = new LinkedList< com.sun.grid.jgdi.configuration.Project >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.Project attribute.

     *   @param axprj  the new com.sun.grid.jgdi.configuration.Project attribute
     */
    public void addXprj(com.sun.grid.jgdi.configuration.Project axprj) {   
        initXprj();
        
        m_xprjList.add(axprj);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.Project attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.Project attribute
     *   @param axprj  the new com.sun.grid.jgdi.configuration.Project attribute
     */
    public void setXprj(int index, com.sun.grid.jgdi.configuration.Project axprj) {
        initXprj();
        m_xprjList.set(index, axprj);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.Project attributes.
     */
    public void removeAllXprj() {
        if (m_xprjList != null) {
            m_xprjList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.Project attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.Project attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.Project attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.Project removeXprj(int index) {
        initXprj();
        return (com.sun.grid.jgdi.configuration.Project)m_xprjList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.Project attribute.
     *  @param axprj  the com.sun.grid.jgdi.configuration.Project attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.Project attribute has been removed
     */
    public boolean removeXprj(com.sun.grid.jgdi.configuration.Project axprj) {
        initXprj();
        return m_xprjList.remove(axprj);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.Project attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.Project attributes
     */
    public List< com.sun.grid.jgdi.configuration.Project > getXprjList() {
        initXprj();
        return Collections.unmodifiableList(m_xprjList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.Project attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.Project attributes.
     */
    public int getXprjCount() {
        if (m_xprjList != null) {
            return m_xprjList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.Project attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.Project attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.Project attribute
     */
    public com.sun.grid.jgdi.configuration.Project getXprj(int index) {
        initXprj();
        return (com.sun.grid.jgdi.configuration.Project)m_xprjList.get(index);
    }
   
    /**
     *  Determine if the xprj attribute is set
     *  @return <code>true</code> if the xprj attribute is set
     */
    public boolean isSetXprj () {
        return (m_xprjList != null) && (!m_xprjList.isEmpty());
    }
   

    // Attribute reportVariables ------------------------------------------------

    private List< java.lang.String > m_reportVariablesList;
   
    private void initReportVariables() {
        if (m_reportVariablesList == null) {
            m_reportVariablesList = new LinkedList< java.lang.String >();
        }
    }

    /**
     *   Add a java.lang.String attribute.

     *   @param areportVariables  the new java.lang.String attribute
     */
    public void addReportVariables(java.lang.String areportVariables) {   
        initReportVariables();
        
        m_reportVariablesList.add(areportVariables);
        
    }
   
   
    /**
     *   Set a java.lang.String attribute.
     *   @param index   index of the java.lang.String attribute
     *   @param areportVariables  the new java.lang.String attribute
     */
    public void setReportVariables(int index, java.lang.String areportVariables) {
        initReportVariables();
        m_reportVariablesList.set(index, areportVariables);
    }

    /**
     *  Remove all java.lang.String attributes.
     */
    public void removeAllReportVariables() {
        if (m_reportVariablesList != null) {
            m_reportVariablesList.clear();
        }
    }

    /**
     *  Remote a java.lang.String attribute at an index.
     *  @param index  the index of the java.lang.String attribute which should be
     *                removed
     *  @return the removed java.lang.String attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public java.lang.String removeReportVariables(int index) {
        initReportVariables();
        return (java.lang.String)m_reportVariablesList.remove(index);
    }

    /**
     *  Remote a specific java.lang.String attribute.
     *  @param areportVariables  the java.lang.String attribute which should be
     *                         removed
     *  @return <code>true</code> if the java.lang.String attribute has been removed
     */
    public boolean removeReportVariables(java.lang.String areportVariables) {
        initReportVariables();
        return m_reportVariablesList.remove(areportVariables);
    }
   
    /**
     *   Get a unmodifiable list of all java.lang.String attributes.
     *
     *   @return Unmodifiable list with all java.lang.String attributes
     */
    public List< java.lang.String > getReportVariablesList() {
        initReportVariables();
        return Collections.unmodifiableList(m_reportVariablesList);
    }

    /**
     *  Get the number of java.lang.String attributes.
     *
     *  @return The number of java.lang.String attributes.
     */
    public int getReportVariablesCount() {
        if (m_reportVariablesList != null) {
            return m_reportVariablesList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a java.lang.String attribute at an index.
     *  @param index  the index of the java.lang.String attribute which should be
     *                removed
     *  @return the java.lang.String attribute
     */
    public java.lang.String getReportVariables(int index) {
        initReportVariables();
        return (java.lang.String)m_reportVariablesList.get(index);
    }
   
    /**
     *  Determine if the reportVariables attribute is set
     *  @return <code>true</code> if the reportVariables attribute is set
     */
    public boolean isSetReportVariables () {
        return (m_reportVariablesList != null) && (!m_reportVariablesList.isEmpty());
    }
   



    /**
     *  Is the primary key information equal to the primary key information
     *  of <code>obj</code>.
     *
     *  @param obj   the compared object
     *  @return <code>true</code> if the primary key information is equal to the
     *          primary key informations of <code>obj</code>.
     */
    public boolean equals(Object obj) {

        return (obj instanceof ExecHostImpl && getName().equals(((com.sun.grid.jgdi.configuration.ExecHost)obj).getName()));

    }

    
    
    public boolean equalsCompletely(Object obj) {
        Logger logger = Logger.getLogger(getClass().getName());
        if (obj instanceof  ExecHostImpl) {
            com.sun.grid.jgdi.configuration.ExecHost obj1 = (com.sun.grid.jgdi.configuration.ExecHost)obj;

            {
                java.lang.String value1 = getName();
                java.lang.String value2 = obj1.getName();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute EH_name of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes EH_name are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }
           
            {
                Set scalingSet1 = getScalingKeys();
                Set scalingSet2 = obj1.getScalingKeys();
                if (scalingSet1.size() != scalingSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("maps scaling has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getScalingKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    double value1 = getScaling(key);
                    double value2 = obj1.getScaling(key);             

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes HS_value are not equal");
                }
                return false;
            }

                }
            }

            {
                int consumableConfigCount = getConsumableConfigCount();
                if (consumableConfigCount != obj1.getConsumableConfigCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists consumableConfig has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < consumableConfigCount; i++) {
                    com.sun.grid.jgdi.configuration.ComplexEntry value1 = getConsumableConfig(i);
                    com.sun.grid.jgdi.configuration.ComplexEntry value2 = obj1.getConsumableConfig(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute EH_consumable_config_list of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

                } // end of for
            }
           
            {
                Set usageScalingSet1 = getUsageScalingKeys();
                Set usageScalingSet2 = obj1.getUsageScalingKeys();
                if (usageScalingSet1.size() != usageScalingSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("maps usageScaling has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getUsageScalingKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    double value1 = getUsageScaling(key);
                    double value2 = obj1.getUsageScaling(key);             

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes HS_value are not equal");
                }
                return false;
            }

                }
            }

            {
                int aclCount = getAclCount();
                if (aclCount != obj1.getAclCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists acl has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < aclCount; i++) {
                    com.sun.grid.jgdi.configuration.UserSet value1 = getAcl(i);
                    com.sun.grid.jgdi.configuration.UserSet value2 = obj1.getAcl(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute EH_acl of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

                } // end of for
            }

            {
                int xaclCount = getXaclCount();
                if (xaclCount != obj1.getXaclCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists xacl has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < xaclCount; i++) {
                    com.sun.grid.jgdi.configuration.UserSet value1 = getXacl(i);
                    com.sun.grid.jgdi.configuration.UserSet value2 = obj1.getXacl(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute EH_xacl of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

                } // end of for
            }

            {
                int prjCount = getPrjCount();
                if (prjCount != obj1.getPrjCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists prj has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < prjCount; i++) {
                    com.sun.grid.jgdi.configuration.Project value1 = getPrj(i);
                    com.sun.grid.jgdi.configuration.Project value2 = obj1.getPrj(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute EH_prj of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

                } // end of for
            }

            {
                int xprjCount = getXprjCount();
                if (xprjCount != obj1.getXprjCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists xprj has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < xprjCount; i++) {
                    com.sun.grid.jgdi.configuration.Project value1 = getXprj(i);
                    com.sun.grid.jgdi.configuration.Project value2 = obj1.getXprj(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute EH_xprj of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

                } // end of for
            }

            {
                int reportVariablesCount = getReportVariablesCount();
                if (reportVariablesCount != obj1.getReportVariablesCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists reportVariables has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < reportVariablesCount; i++) {
                    java.lang.String value1 = getReportVariables(i);
                    java.lang.String value2 = obj1.getReportVariables(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute EH_report_variables of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes EH_report_variables are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

                } // end of for
            }

            return true;
        } else {
            return true;
        }
    }
  
    public java.lang.String toString() {
        StringBuilder ret = new StringBuilder();
        ret.append("ExecHostImpl(");

        ret.append(getName());

        ret.append(")");
        return ret.toString();
    }



    public java.lang.String dump() {
        StringBuilder sb = new StringBuilder();

            {
                java.lang.String value = getName();
                sb.append("Name = " + value + "\n");
            }

            for (java.lang.String key : getScalingKeys()) {
                double value = getScaling(key);
                
                sb.append("Scaling[" + key + "] = " + value + "\n");
                
            }

            int consumableConfigCount = getConsumableConfigCount();
            for (int i = 0; i < consumableConfigCount; i++) {
                com.sun.grid.jgdi.configuration.ComplexEntry value = getConsumableConfig(i);
                
                sb.append("ConsumableConfig[" + i + "] = " + value.dump() + "\n");
                
            } // end of for

            for (java.lang.String key : getUsageScalingKeys()) {
                double value = getUsageScaling(key);
                
                sb.append("UsageScaling[" + key + "] = " + value + "\n");
                
            }

            int aclCount = getAclCount();
            for (int i = 0; i < aclCount; i++) {
                com.sun.grid.jgdi.configuration.UserSet value = getAcl(i);
                
                sb.append("Acl[" + i + "] = " + value.dump() + "\n");
                
            } // end of for

            int xaclCount = getXaclCount();
            for (int i = 0; i < xaclCount; i++) {
                com.sun.grid.jgdi.configuration.UserSet value = getXacl(i);
                
                sb.append("Xacl[" + i + "] = " + value.dump() + "\n");
                
            } // end of for

            int prjCount = getPrjCount();
            for (int i = 0; i < prjCount; i++) {
                com.sun.grid.jgdi.configuration.Project value = getPrj(i);
                
                sb.append("Prj[" + i + "] = " + value.dump() + "\n");
                
            } // end of for

            int xprjCount = getXprjCount();
            for (int i = 0; i < xprjCount; i++) {
                com.sun.grid.jgdi.configuration.Project value = getXprj(i);
                
                sb.append("Xprj[" + i + "] = " + value.dump() + "\n");
                
            } // end of for

            int reportVariablesCount = getReportVariablesCount();
            for (int i = 0; i < reportVariablesCount; i++) {
                java.lang.String value = getReportVariables(i);
                
                sb.append("ReportVariables[" + i + "] = " + value + "\n");
                
            } // end of for

        return sb.toString();
    }    

 
}
