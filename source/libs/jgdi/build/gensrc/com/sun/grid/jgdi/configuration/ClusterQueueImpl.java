/*___INFO__MARK_BEGIN__*/
/*************************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  the Sun Industry Standards Source License Version 1.2
 *
 *  Sun Microsystems Inc., March, 2001
 *
 *
 *  Sun Industry Standards Source License Version 1.2
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.2 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *   Copyright: 2001 by Sun Microsystems, Inc.
 *
 *   All Rights Reserved.
 *
 ************************************************************************/
/*___INFO__MARK_END__*/
/**
 *  Generated from javamodel_impl.jsp
 *  !!! DO NOT EDIT THIS FILE !!!
 */

package com.sun.grid.jgdi.configuration;

import javax.management.*;
import com.sun.grid.jgdi.configuration.GEObject;
import java.util.List;
import java.util.LinkedList;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.logging.Logger;
import java.util.logging.Level;

/**
 *  Java representation of the cull object CQ_Type
 *  defined in sge_all_listsL.template
 *
 *  <p><strong>Warning:</strong>  The  ClusterQueueImpl class will 
 *  not be compatible with future Sun&trade; Grid Engine releases.</p>
 */
public class ClusterQueueImpl extends    GEObjectImpl implements ClusterQueue {


   /**
    *  Create a new instance of ClusterQueueImpl. The new instance
    *  will not be initialized with the default values.
    */
   public ClusterQueueImpl() {
      this(false);
   }
   
   /**
    *   Create a new instanceof
    *   @param  initWithDefaultValues if <code>true</code> the new instance will
    *                                 be initialized with the default values as defined
    *                                 in the cull definition.
    */
   public ClusterQueueImpl(boolean initWithDefaultValues) { 

      if (initWithDefaultValues) { 
       setName("template");
       putSeqNo("@/", 0);

       putNsuspend("@/", 1);

       putJobSlots("@/", 1);

       putRerun("@/", false);

       putSFsize("@/", "INFINITY");

       putHFsize("@/", "INFINITY");

       putSData("@/", "INFINITY");

       putHData("@/", "INFINITY");

       putSStack("@/", "INFINITY");

       putHStack("@/", "INFINITY");

       putSCore("@/", "INFINITY");

       putHCore("@/", "INFINITY");

       putSRss("@/", "INFINITY");

       putHRss("@/", "INFINITY");

       putSVmem("@/", "INFINITY");

       putHVmem("@/", "INFINITY");

       putSRt("@/", "INFINITY");

       putHRt("@/", "INFINITY");

       putSCpu("@/", "INFINITY");

       putHCpu("@/", "INFINITY");

       putSuspendInterval("@/", "00:05:00");

       putMinCpuInterval("@/", "00:05:00");

       putNotify("@/", "00:00:60");

       putTmpdir("@/", "/tmp");

       putShell("@/", "/bin/csh");

       putCalendar("@/", null);

       putPriority("@/", "0");

       putProcessors("@/", "UNDEFINED");

       putProlog("@/", null);

       putEpilog("@/", null);

       putShellStartMode("@/", "posix_compliant");

       putStarterMethod("@/", null);

       putSuspendMethod("@/", null);

       putResumeMethod("@/", null);

       putTerminateMethod("@/", null);

       putInitialState("@/", "default");

                     addDefaultPe("make");

                     addDefaultCkpt(null);

                     addDefaultOwner(null);

                     addDefaultAcl(null);

                     addDefaultXacl(null);

                     addDefaultProjects(null);

                     addDefaultXprojects(null);

                     ComplexEntryImpl c = new com.sun.grid.jgdi.configuration.ComplexEntryImpl("np_load_avg");
                     c.setStringval("1.75");
                     addDefaultLoadThresholds(c);

                     addDefaultSuspendThresholds(null);

                     addDefaultConsumableConfig(null);

                     addDefaultSubordinate(null);

       putQtype("@/", 3);
    
    }

  } // end of default constructor
  
  // --- newInstance method with primary key field
  

   /**
    *  Create a new instance of ClusterQueueImpl
    */
   public ClusterQueueImpl(java.lang.String name ) {

   
         setName(name);

    }



    // Attribute name ------------------------------------------------
   
    /**
     *  Determine if the name attribute is set
     *  @return <code>true</code> if the name attribute is set
     */
    public boolean isSetName() {
   
        return  (m_name != null);

    }
   
    private java.lang.String m_name;

    /**
     *   Set the name attribute.
     *
     *   @param aName  the new value for the  name attribute
     */
    public void setName(java.lang.String aName) {   
        m_name = aName;

    }

    /**
     *  Get the value of the name attribute.
     *  @return the value of the name attribute
     */
    public java.lang.String getName() {
        return m_name;
    }


    // Attribute hostlist ------------------------------------------------

    private List< java.lang.String > m_hostlistList;
   
    private void initHostlist() {
        if (m_hostlistList == null) {
            m_hostlistList = new LinkedList< java.lang.String >();
        }
    }

    /**
     *   Add a java.lang.String attribute.

     *   @param ahostlist  the new java.lang.String attribute
     */
    public void addHostlist(java.lang.String ahostlist) {   
        initHostlist();
        
        m_hostlistList.add(ahostlist);
        
    }
   
   
    /**
     *   Set a java.lang.String attribute.
     *   @param index   index of the java.lang.String attribute
     *   @param ahostlist  the new java.lang.String attribute
     */
    public void setHostlist(int index, java.lang.String ahostlist) {
        initHostlist();
        m_hostlistList.set(index, ahostlist);
    }

    /**
     *  Remove all java.lang.String attributes.
     */
    public void removeAllHostlist() {
        if (m_hostlistList != null) {
            m_hostlistList.clear();
        }
    }

    /**
     *  Remote a java.lang.String attribute at an index.
     *  @param index  the index of the java.lang.String attribute which should be
     *                removed
     *  @return the removed java.lang.String attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public java.lang.String removeHostlist(int index) {
        initHostlist();
        return (java.lang.String)m_hostlistList.remove(index);
    }

    /**
     *  Remote a specific java.lang.String attribute.
     *  @param ahostlist  the java.lang.String attribute which should be
     *                         removed
     *  @return <code>true</code> if the java.lang.String attribute has been removed
     */
    public boolean removeHostlist(java.lang.String ahostlist) {
        initHostlist();
        return m_hostlistList.remove(ahostlist);
    }
   
    /**
     *   Get a unmodifiable list of all java.lang.String attributes.
     *
     *   @return Unmodifiable list with all java.lang.String attributes
     */
    public List< java.lang.String > getHostlistList() {
        initHostlist();
        return Collections.unmodifiableList(m_hostlistList);
    }

    /**
     *  Get the number of java.lang.String attributes.
     *
     *  @return The number of java.lang.String attributes.
     */
    public int getHostlistCount() {
        if (m_hostlistList != null) {
            return m_hostlistList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a java.lang.String attribute at an index.
     *  @param index  the index of the java.lang.String attribute which should be
     *                removed
     *  @return the java.lang.String attribute
     */
    public java.lang.String getHostlist(int index) {
        initHostlist();
        return (java.lang.String)m_hostlistList.get(index);
    }
   
    /**
     *  Determine if the hostlist attribute is set
     *  @return <code>true</code> if the hostlist attribute is set
     */
    public boolean isSetHostlist () {
        return (m_hostlistList != null) && (!m_hostlistList.isEmpty());
    }
   

    // Attribute qinstances ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.QueueInstance > m_qinstancesList;
   
    private void initQinstances() {
        if (m_qinstancesList == null) {
            m_qinstancesList = new LinkedList< com.sun.grid.jgdi.configuration.QueueInstance >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.QueueInstance attribute.

     *   @param aqinstances  the new com.sun.grid.jgdi.configuration.QueueInstance attribute
     */
    public void addQinstances(com.sun.grid.jgdi.configuration.QueueInstance aqinstances) {   
        initQinstances();
        
        m_qinstancesList.add(aqinstances);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.QueueInstance attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.QueueInstance attribute
     *   @param aqinstances  the new com.sun.grid.jgdi.configuration.QueueInstance attribute
     */
    public void setQinstances(int index, com.sun.grid.jgdi.configuration.QueueInstance aqinstances) {
        initQinstances();
        m_qinstancesList.set(index, aqinstances);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.QueueInstance attributes.
     */
    public void removeAllQinstances() {
        if (m_qinstancesList != null) {
            m_qinstancesList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.QueueInstance attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.QueueInstance attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.QueueInstance attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.QueueInstance removeQinstances(int index) {
        initQinstances();
        return (com.sun.grid.jgdi.configuration.QueueInstance)m_qinstancesList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.QueueInstance attribute.
     *  @param aqinstances  the com.sun.grid.jgdi.configuration.QueueInstance attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.QueueInstance attribute has been removed
     */
    public boolean removeQinstances(com.sun.grid.jgdi.configuration.QueueInstance aqinstances) {
        initQinstances();
        return m_qinstancesList.remove(aqinstances);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.QueueInstance attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.QueueInstance attributes
     */
    public List< com.sun.grid.jgdi.configuration.QueueInstance > getQinstancesList() {
        initQinstances();
        return Collections.unmodifiableList(m_qinstancesList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.QueueInstance attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.QueueInstance attributes.
     */
    public int getQinstancesCount() {
        if (m_qinstancesList != null) {
            return m_qinstancesList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.QueueInstance attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.QueueInstance attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.QueueInstance attribute
     */
    public com.sun.grid.jgdi.configuration.QueueInstance getQinstances(int index) {
        initQinstances();
        return (com.sun.grid.jgdi.configuration.QueueInstance)m_qinstancesList.get(index);
    }
   
    /**
     *  Determine if the qinstances attribute is set
     *  @return <code>true</code> if the qinstances attribute is set
     */
    public boolean isSetQinstances () {
        return (m_qinstancesList != null) && (!m_qinstancesList.isEmpty());
    }
   

    // Attribute seqNo ------------------------------------------------

    // keyClassName for SGE_HOST = String

   
    private Map m_seqNo;

    private void initSeqNo() {
        if (m_seqNo == null) {
            m_seqNo = new LinkedHashMap();
        }
    }
   
    /**
     *  <p>Put the attribute seqNo for a hostname.</p>
     *
     *  @param hostname    the hostname
     *  @param seqNo  the seqNo
     */
    public void putSeqNo(String hostname, int seqNo) {   
        initSeqNo();
        m_seqNo.put(hostname,

                            new java.lang.Integer(seqNo)

                            );
    }

    /**
     *  <p>Get the default value of the attribute seqNo.</p>
     *  @return the default value of the attribute seqNo
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public int getDefaultSeqNo() {
        if (m_seqNo == null) {
            throw new IllegalStateException("default value for attribute seqNo not found");
        }
        java.lang.Integer ret = (java.lang.Integer)m_seqNo.get("@/");
        if (ret == null) {
            throw new IllegalStateException("default value for attribute seqNo not found");
        }

        return ret.intValue();

    }
   
    /**
     *  <p>Get the seqNo attribute for a hostname.</p>
     *  @param   hostname   the hostname
     *  @return  the seqNo attribute for the host or the
     *           default value of  seqNo
     */
    public int getSeqNo(String hostname) {
        initSeqNo();
        if (m_seqNo.containsKey(hostname)) {      
            java.lang.Integer ret = (java.lang.Integer)m_seqNo.get(hostname);
            if (ret != null) {

                return ret.intValue();

            } else {
                return 0;
            }
        } else {
            return getDefaultSeqNo();
        }
    }

    /**
     *  Set <code>seqNo</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param seqNo  the seqNo attribute
     */
    public void setDefaultSeqNo(int seqNo) {
        putSeqNo("@/", seqNo);
    }


    /**
     *  <p>remove the attribute seqNo for a hostname.</p>
     *
     *  @param hostname tje hostname
     *  @return the seqNo for the hostname or <code>null</code>
     *          if the seqNo attribute was not defined for the hostname.
     */
    public java.lang.Integer removeSeqNo(String hostname) {
        initSeqNo();
        return (java.lang.Integer)m_seqNo.remove(hostname);
    }

    /**
     *  <p>Remove the attribute seqNo for all hostnames.</p>
     */
    public void removeAllSeqNo() {
        if (m_seqNo != null) {
            m_seqNo.clear();
        }
    }
   
    /**
     *  Get the set of hostnames which have the attribute seqNo set.
     *  @return set of hostnames
     */
    public Set<String> getSeqNoKeys() {
        if (m_seqNo == null) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(m_seqNo.keySet());
        }
    }
   
    /**
     *  Get the number of hostnames which have the attribute seqNo set.
     *  @return the number of hostnames which have the attribute seqNo set.
     */
    public int getSeqNoCount() {
        if (m_seqNo == null) {
            return 0;
        } else {
            return m_seqNo.size();
        }
    }
   
    /**
     *  Determine if any seqNo attribute is set
     *  @return <code>true</code> if the seqNo attribute is set
     */
    public boolean isSetSeqNo () {
        return (m_seqNo != null) && (!m_seqNo.isEmpty());
    }
   
    /**
     *  Determine if any seqNo attribute is for a hostname is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the seqNo attribute is set
     */
    public boolean isSetSeqNo(String hostname) {
        return (m_seqNo != null) && (m_seqNo.get(hostname) != null);
    }
   


    // Attribute nsuspend ------------------------------------------------

    // keyClassName for SGE_HOST = String

   
    private Map m_nsuspend;

    private void initNsuspend() {
        if (m_nsuspend == null) {
            m_nsuspend = new LinkedHashMap();
        }
    }
   
    /**
     *  <p>Put the attribute nsuspend for a hostname.</p>
     *
     *  @param hostname    the hostname
     *  @param nsuspend  the nsuspend
     */
    public void putNsuspend(String hostname, int nsuspend) {   
        initNsuspend();
        m_nsuspend.put(hostname,

                            new java.lang.Integer(nsuspend)

                            );
    }

    /**
     *  <p>Get the default value of the attribute nsuspend.</p>
     *  @return the default value of the attribute nsuspend
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public int getDefaultNsuspend() {
        if (m_nsuspend == null) {
            throw new IllegalStateException("default value for attribute nsuspend not found");
        }
        java.lang.Integer ret = (java.lang.Integer)m_nsuspend.get("@/");
        if (ret == null) {
            throw new IllegalStateException("default value for attribute nsuspend not found");
        }

        return ret.intValue();

    }
   
    /**
     *  <p>Get the nsuspend attribute for a hostname.</p>
     *  @param   hostname   the hostname
     *  @return  the nsuspend attribute for the host or the
     *           default value of  nsuspend
     */
    public int getNsuspend(String hostname) {
        initNsuspend();
        if (m_nsuspend.containsKey(hostname)) {      
            java.lang.Integer ret = (java.lang.Integer)m_nsuspend.get(hostname);
            if (ret != null) {

                return ret.intValue();

            } else {
                return 0;
            }
        } else {
            return getDefaultNsuspend();
        }
    }

    /**
     *  Set <code>nsuspend</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param nsuspend  the nsuspend attribute
     */
    public void setDefaultNsuspend(int nsuspend) {
        putNsuspend("@/", nsuspend);
    }


    /**
     *  <p>remove the attribute nsuspend for a hostname.</p>
     *
     *  @param hostname tje hostname
     *  @return the nsuspend for the hostname or <code>null</code>
     *          if the nsuspend attribute was not defined for the hostname.
     */
    public java.lang.Integer removeNsuspend(String hostname) {
        initNsuspend();
        return (java.lang.Integer)m_nsuspend.remove(hostname);
    }

    /**
     *  <p>Remove the attribute nsuspend for all hostnames.</p>
     */
    public void removeAllNsuspend() {
        if (m_nsuspend != null) {
            m_nsuspend.clear();
        }
    }
   
    /**
     *  Get the set of hostnames which have the attribute nsuspend set.
     *  @return set of hostnames
     */
    public Set<String> getNsuspendKeys() {
        if (m_nsuspend == null) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(m_nsuspend.keySet());
        }
    }
   
    /**
     *  Get the number of hostnames which have the attribute nsuspend set.
     *  @return the number of hostnames which have the attribute nsuspend set.
     */
    public int getNsuspendCount() {
        if (m_nsuspend == null) {
            return 0;
        } else {
            return m_nsuspend.size();
        }
    }
   
    /**
     *  Determine if any nsuspend attribute is set
     *  @return <code>true</code> if the nsuspend attribute is set
     */
    public boolean isSetNsuspend () {
        return (m_nsuspend != null) && (!m_nsuspend.isEmpty());
    }
   
    /**
     *  Determine if any nsuspend attribute is for a hostname is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the nsuspend attribute is set
     */
    public boolean isSetNsuspend(String hostname) {
        return (m_nsuspend != null) && (m_nsuspend.get(hostname) != null);
    }
   


    // Attribute jobSlots ------------------------------------------------

    // keyClassName for SGE_HOST = String

   
    private Map m_jobSlots;

    private void initJobSlots() {
        if (m_jobSlots == null) {
            m_jobSlots = new LinkedHashMap();
        }
    }
   
    /**
     *  <p>Put the attribute jobSlots for a hostname.</p>
     *
     *  @param hostname    the hostname
     *  @param jobSlots  the jobSlots
     */
    public void putJobSlots(String hostname, int jobSlots) {   
        initJobSlots();
        m_jobSlots.put(hostname,

                            new java.lang.Integer(jobSlots)

                            );
    }

    /**
     *  <p>Get the default value of the attribute jobSlots.</p>
     *  @return the default value of the attribute jobSlots
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public int getDefaultJobSlots() {
        if (m_jobSlots == null) {
            throw new IllegalStateException("default value for attribute jobSlots not found");
        }
        java.lang.Integer ret = (java.lang.Integer)m_jobSlots.get("@/");
        if (ret == null) {
            throw new IllegalStateException("default value for attribute jobSlots not found");
        }

        return ret.intValue();

    }
   
    /**
     *  <p>Get the jobSlots attribute for a hostname.</p>
     *  @param   hostname   the hostname
     *  @return  the jobSlots attribute for the host or the
     *           default value of  jobSlots
     */
    public int getJobSlots(String hostname) {
        initJobSlots();
        if (m_jobSlots.containsKey(hostname)) {      
            java.lang.Integer ret = (java.lang.Integer)m_jobSlots.get(hostname);
            if (ret != null) {

                return ret.intValue();

            } else {
                return 0;
            }
        } else {
            return getDefaultJobSlots();
        }
    }

    /**
     *  Set <code>jobSlots</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param jobSlots  the jobSlots attribute
     */
    public void setDefaultJobSlots(int jobSlots) {
        putJobSlots("@/", jobSlots);
    }


    /**
     *  <p>remove the attribute jobSlots for a hostname.</p>
     *
     *  @param hostname tje hostname
     *  @return the jobSlots for the hostname or <code>null</code>
     *          if the jobSlots attribute was not defined for the hostname.
     */
    public java.lang.Integer removeJobSlots(String hostname) {
        initJobSlots();
        return (java.lang.Integer)m_jobSlots.remove(hostname);
    }

    /**
     *  <p>Remove the attribute jobSlots for all hostnames.</p>
     */
    public void removeAllJobSlots() {
        if (m_jobSlots != null) {
            m_jobSlots.clear();
        }
    }
   
    /**
     *  Get the set of hostnames which have the attribute jobSlots set.
     *  @return set of hostnames
     */
    public Set<String> getJobSlotsKeys() {
        if (m_jobSlots == null) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(m_jobSlots.keySet());
        }
    }
   
    /**
     *  Get the number of hostnames which have the attribute jobSlots set.
     *  @return the number of hostnames which have the attribute jobSlots set.
     */
    public int getJobSlotsCount() {
        if (m_jobSlots == null) {
            return 0;
        } else {
            return m_jobSlots.size();
        }
    }
   
    /**
     *  Determine if any jobSlots attribute is set
     *  @return <code>true</code> if the jobSlots attribute is set
     */
    public boolean isSetJobSlots () {
        return (m_jobSlots != null) && (!m_jobSlots.isEmpty());
    }
   
    /**
     *  Determine if any jobSlots attribute is for a hostname is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the jobSlots attribute is set
     */
    public boolean isSetJobSlots(String hostname) {
        return (m_jobSlots != null) && (m_jobSlots.get(hostname) != null);
    }
   


    // Attribute rerun ------------------------------------------------

    // keyClassName for SGE_HOST = String

   
    private Map m_rerun;

    private void initRerun() {
        if (m_rerun == null) {
            m_rerun = new LinkedHashMap();
        }
    }
   
    /**
     *  <p>Put the attribute rerun for a hostname.</p>
     *
     *  @param hostname    the hostname
     *  @param rerun  the rerun
     */
    public void putRerun(String hostname, boolean rerun) {   
        initRerun();
        m_rerun.put(hostname,

                            new java.lang.Boolean(rerun)

                            );
    }

    /**
     *  <p>Get the default value of the attribute rerun.</p>
     *  @return the default value of the attribute rerun
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public boolean getDefaultRerun() {
        if (m_rerun == null) {
            throw new IllegalStateException("default value for attribute rerun not found");
        }
        java.lang.Boolean ret = (java.lang.Boolean)m_rerun.get("@/");
        if (ret == null) {
            throw new IllegalStateException("default value for attribute rerun not found");
        }

        return ret.booleanValue();

    }
   
    /**
     *  <p>Get the rerun attribute for a hostname.</p>
     *  @param   hostname   the hostname
     *  @return  the rerun attribute for the host or the
     *           default value of  rerun
     */
    public boolean getRerun(String hostname) {
        initRerun();
        if (m_rerun.containsKey(hostname)) {      
            java.lang.Boolean ret = (java.lang.Boolean)m_rerun.get(hostname);
            if (ret != null) {

                return ret.booleanValue();

            } else {
                return false;
            }
        } else {
            return getDefaultRerun();
        }
    }

    /**
     *  Set <code>rerun</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param rerun  the rerun attribute
     */
    public void setDefaultRerun(boolean rerun) {
        putRerun("@/", rerun);
    }


    /**
     *  <p>remove the attribute rerun for a hostname.</p>
     *
     *  @param hostname tje hostname
     *  @return the rerun for the hostname or <code>null</code>
     *          if the rerun attribute was not defined for the hostname.
     */
    public java.lang.Boolean removeRerun(String hostname) {
        initRerun();
        return (java.lang.Boolean)m_rerun.remove(hostname);
    }

    /**
     *  <p>Remove the attribute rerun for all hostnames.</p>
     */
    public void removeAllRerun() {
        if (m_rerun != null) {
            m_rerun.clear();
        }
    }
   
    /**
     *  Get the set of hostnames which have the attribute rerun set.
     *  @return set of hostnames
     */
    public Set<String> getRerunKeys() {
        if (m_rerun == null) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(m_rerun.keySet());
        }
    }
   
    /**
     *  Get the number of hostnames which have the attribute rerun set.
     *  @return the number of hostnames which have the attribute rerun set.
     */
    public int getRerunCount() {
        if (m_rerun == null) {
            return 0;
        } else {
            return m_rerun.size();
        }
    }
   
    /**
     *  Determine if any rerun attribute is set
     *  @return <code>true</code> if the rerun attribute is set
     */
    public boolean isSetRerun () {
        return (m_rerun != null) && (!m_rerun.isEmpty());
    }
   
    /**
     *  Determine if any rerun attribute is for a hostname is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the rerun attribute is set
     */
    public boolean isSetRerun(String hostname) {
        return (m_rerun != null) && (m_rerun.get(hostname) != null);
    }
   


    // Attribute sFsize ------------------------------------------------

    // keyClassName for SGE_HOST = String

   
    private Map m_sFsize;

    private void initSFsize() {
        if (m_sFsize == null) {
            m_sFsize = new LinkedHashMap();
        }
    }
   
    /**
     *  <p>Put the attribute sFsize for a hostname.</p>
     *
     *  @param hostname    the hostname
     *  @param sFSize  the sFSize
     */
    public void putSFsize(String hostname, String sFSize) {   
        initSFsize();
        m_sFsize.put(hostname,

                            sFSize

                            );
    }

    /**
     *  <p>Get the default value of the attribute sFsize.</p>
     *  @return the default value of the attribute sFsize
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultSFsize() {
        if (m_sFsize == null) {
            throw new IllegalStateException("default value for attribute sFsize not found");
        }
        java.lang.String ret = (java.lang.String)m_sFsize.get("@/");
        if (ret == null) {
            throw new IllegalStateException("default value for attribute sFsize not found");
        }

        return ret;

    }
   
    /**
     *  <p>Get the sFsize attribute for a hostname.</p>
     *  @param   hostname   the hostname
     *  @return  the sFsize attribute for the host or the
     *           default value of  sFsize
     */
    public String getSFsize(String hostname) {
        initSFsize();
        if (m_sFsize.containsKey(hostname)) {      
            java.lang.String ret = (java.lang.String)m_sFsize.get(hostname);
            if (ret != null) {

                return ret;

            } else {
                return null;
            }
        } else {
            return getDefaultSFsize();
        }
    }

    /**
     *  Set <code>sFSize</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param sFSize  the sFSize attribute
     */
    public void setDefaultSFsize(String sFSize) {
        putSFsize("@/", sFSize);
    }


    /**
     *  <p>remove the attribute sFsize for a hostname.</p>
     *
     *  @param hostname tje hostname
     *  @return the sFSize for the hostname or <code>null</code>
     *          if the sFSize attribute was not defined for the hostname.
     */
    public java.lang.String removeSFsize(String hostname) {
        initSFsize();
        return (java.lang.String)m_sFsize.remove(hostname);
    }

    /**
     *  <p>Remove the attribute sFsize for all hostnames.</p>
     */
    public void removeAllSFsize() {
        if (m_sFsize != null) {
            m_sFsize.clear();
        }
    }
   
    /**
     *  Get the set of hostnames which have the attribute sFsize set.
     *  @return set of hostnames
     */
    public Set<String> getSFsizeKeys() {
        if (m_sFsize == null) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(m_sFsize.keySet());
        }
    }
   
    /**
     *  Get the number of hostnames which have the attribute sFsize set.
     *  @return the number of hostnames which have the attribute sFsize set.
     */
    public int getSFsizeCount() {
        if (m_sFsize == null) {
            return 0;
        } else {
            return m_sFsize.size();
        }
    }
   
    /**
     *  Determine if any sFsize attribute is set
     *  @return <code>true</code> if the sFsize attribute is set
     */
    public boolean isSetSFsize () {
        return (m_sFsize != null) && (!m_sFsize.isEmpty());
    }
   
    /**
     *  Determine if any sFsize attribute is for a hostname is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the sFsize attribute is set
     */
    public boolean isSetSFsize(String hostname) {
        return (m_sFsize != null) && (m_sFsize.get(hostname) != null);
    }
   


    // Attribute hFsize ------------------------------------------------

    // keyClassName for SGE_HOST = String

   
    private Map m_hFsize;

    private void initHFsize() {
        if (m_hFsize == null) {
            m_hFsize = new LinkedHashMap();
        }
    }
   
    /**
     *  <p>Put the attribute hFsize for a hostname.</p>
     *
     *  @param hostname    the hostname
     *  @param hFSize  the hFSize
     */
    public void putHFsize(String hostname, String hFSize) {   
        initHFsize();
        m_hFsize.put(hostname,

                            hFSize

                            );
    }

    /**
     *  <p>Get the default value of the attribute hFsize.</p>
     *  @return the default value of the attribute hFsize
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultHFsize() {
        if (m_hFsize == null) {
            throw new IllegalStateException("default value for attribute hFsize not found");
        }
        java.lang.String ret = (java.lang.String)m_hFsize.get("@/");
        if (ret == null) {
            throw new IllegalStateException("default value for attribute hFsize not found");
        }

        return ret;

    }
   
    /**
     *  <p>Get the hFsize attribute for a hostname.</p>
     *  @param   hostname   the hostname
     *  @return  the hFsize attribute for the host or the
     *           default value of  hFsize
     */
    public String getHFsize(String hostname) {
        initHFsize();
        if (m_hFsize.containsKey(hostname)) {      
            java.lang.String ret = (java.lang.String)m_hFsize.get(hostname);
            if (ret != null) {

                return ret;

            } else {
                return null;
            }
        } else {
            return getDefaultHFsize();
        }
    }

    /**
     *  Set <code>hFSize</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param hFSize  the hFSize attribute
     */
    public void setDefaultHFsize(String hFSize) {
        putHFsize("@/", hFSize);
    }


    /**
     *  <p>remove the attribute hFsize for a hostname.</p>
     *
     *  @param hostname tje hostname
     *  @return the hFSize for the hostname or <code>null</code>
     *          if the hFSize attribute was not defined for the hostname.
     */
    public java.lang.String removeHFsize(String hostname) {
        initHFsize();
        return (java.lang.String)m_hFsize.remove(hostname);
    }

    /**
     *  <p>Remove the attribute hFsize for all hostnames.</p>
     */
    public void removeAllHFsize() {
        if (m_hFsize != null) {
            m_hFsize.clear();
        }
    }
   
    /**
     *  Get the set of hostnames which have the attribute hFsize set.
     *  @return set of hostnames
     */
    public Set<String> getHFsizeKeys() {
        if (m_hFsize == null) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(m_hFsize.keySet());
        }
    }
   
    /**
     *  Get the number of hostnames which have the attribute hFsize set.
     *  @return the number of hostnames which have the attribute hFsize set.
     */
    public int getHFsizeCount() {
        if (m_hFsize == null) {
            return 0;
        } else {
            return m_hFsize.size();
        }
    }
   
    /**
     *  Determine if any hFsize attribute is set
     *  @return <code>true</code> if the hFsize attribute is set
     */
    public boolean isSetHFsize () {
        return (m_hFsize != null) && (!m_hFsize.isEmpty());
    }
   
    /**
     *  Determine if any hFsize attribute is for a hostname is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the hFsize attribute is set
     */
    public boolean isSetHFsize(String hostname) {
        return (m_hFsize != null) && (m_hFsize.get(hostname) != null);
    }
   


    // Attribute sData ------------------------------------------------

    // keyClassName for SGE_HOST = String

   
    private Map m_sData;

    private void initSData() {
        if (m_sData == null) {
            m_sData = new LinkedHashMap();
        }
    }
   
    /**
     *  <p>Put the attribute sData for a hostname.</p>
     *
     *  @param hostname    the hostname
     *  @param sData  the sData
     */
    public void putSData(String hostname, String sData) {   
        initSData();
        m_sData.put(hostname,

                            sData

                            );
    }

    /**
     *  <p>Get the default value of the attribute sData.</p>
     *  @return the default value of the attribute sData
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultSData() {
        if (m_sData == null) {
            throw new IllegalStateException("default value for attribute sData not found");
        }
        java.lang.String ret = (java.lang.String)m_sData.get("@/");
        if (ret == null) {
            throw new IllegalStateException("default value for attribute sData not found");
        }

        return ret;

    }
   
    /**
     *  <p>Get the sData attribute for a hostname.</p>
     *  @param   hostname   the hostname
     *  @return  the sData attribute for the host or the
     *           default value of  sData
     */
    public String getSData(String hostname) {
        initSData();
        if (m_sData.containsKey(hostname)) {      
            java.lang.String ret = (java.lang.String)m_sData.get(hostname);
            if (ret != null) {

                return ret;

            } else {
                return null;
            }
        } else {
            return getDefaultSData();
        }
    }

    /**
     *  Set <code>sData</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param sData  the sData attribute
     */
    public void setDefaultSData(String sData) {
        putSData("@/", sData);
    }


    /**
     *  <p>remove the attribute sData for a hostname.</p>
     *
     *  @param hostname tje hostname
     *  @return the sData for the hostname or <code>null</code>
     *          if the sData attribute was not defined for the hostname.
     */
    public java.lang.String removeSData(String hostname) {
        initSData();
        return (java.lang.String)m_sData.remove(hostname);
    }

    /**
     *  <p>Remove the attribute sData for all hostnames.</p>
     */
    public void removeAllSData() {
        if (m_sData != null) {
            m_sData.clear();
        }
    }
   
    /**
     *  Get the set of hostnames which have the attribute sData set.
     *  @return set of hostnames
     */
    public Set<String> getSDataKeys() {
        if (m_sData == null) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(m_sData.keySet());
        }
    }
   
    /**
     *  Get the number of hostnames which have the attribute sData set.
     *  @return the number of hostnames which have the attribute sData set.
     */
    public int getSDataCount() {
        if (m_sData == null) {
            return 0;
        } else {
            return m_sData.size();
        }
    }
   
    /**
     *  Determine if any sData attribute is set
     *  @return <code>true</code> if the sData attribute is set
     */
    public boolean isSetSData () {
        return (m_sData != null) && (!m_sData.isEmpty());
    }
   
    /**
     *  Determine if any sData attribute is for a hostname is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the sData attribute is set
     */
    public boolean isSetSData(String hostname) {
        return (m_sData != null) && (m_sData.get(hostname) != null);
    }
   


    // Attribute hData ------------------------------------------------

    // keyClassName for SGE_HOST = String

   
    private Map m_hData;

    private void initHData() {
        if (m_hData == null) {
            m_hData = new LinkedHashMap();
        }
    }
   
    /**
     *  <p>Put the attribute hData for a hostname.</p>
     *
     *  @param hostname    the hostname
     *  @param hData  the hData
     */
    public void putHData(String hostname, String hData) {   
        initHData();
        m_hData.put(hostname,

                            hData

                            );
    }

    /**
     *  <p>Get the default value of the attribute hData.</p>
     *  @return the default value of the attribute hData
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultHData() {
        if (m_hData == null) {
            throw new IllegalStateException("default value for attribute hData not found");
        }
        java.lang.String ret = (java.lang.String)m_hData.get("@/");
        if (ret == null) {
            throw new IllegalStateException("default value for attribute hData not found");
        }

        return ret;

    }
   
    /**
     *  <p>Get the hData attribute for a hostname.</p>
     *  @param   hostname   the hostname
     *  @return  the hData attribute for the host or the
     *           default value of  hData
     */
    public String getHData(String hostname) {
        initHData();
        if (m_hData.containsKey(hostname)) {      
            java.lang.String ret = (java.lang.String)m_hData.get(hostname);
            if (ret != null) {

                return ret;

            } else {
                return null;
            }
        } else {
            return getDefaultHData();
        }
    }

    /**
     *  Set <code>hData</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param hData  the hData attribute
     */
    public void setDefaultHData(String hData) {
        putHData("@/", hData);
    }


    /**
     *  <p>remove the attribute hData for a hostname.</p>
     *
     *  @param hostname tje hostname
     *  @return the hData for the hostname or <code>null</code>
     *          if the hData attribute was not defined for the hostname.
     */
    public java.lang.String removeHData(String hostname) {
        initHData();
        return (java.lang.String)m_hData.remove(hostname);
    }

    /**
     *  <p>Remove the attribute hData for all hostnames.</p>
     */
    public void removeAllHData() {
        if (m_hData != null) {
            m_hData.clear();
        }
    }
   
    /**
     *  Get the set of hostnames which have the attribute hData set.
     *  @return set of hostnames
     */
    public Set<String> getHDataKeys() {
        if (m_hData == null) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(m_hData.keySet());
        }
    }
   
    /**
     *  Get the number of hostnames which have the attribute hData set.
     *  @return the number of hostnames which have the attribute hData set.
     */
    public int getHDataCount() {
        if (m_hData == null) {
            return 0;
        } else {
            return m_hData.size();
        }
    }
   
    /**
     *  Determine if any hData attribute is set
     *  @return <code>true</code> if the hData attribute is set
     */
    public boolean isSetHData () {
        return (m_hData != null) && (!m_hData.isEmpty());
    }
   
    /**
     *  Determine if any hData attribute is for a hostname is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the hData attribute is set
     */
    public boolean isSetHData(String hostname) {
        return (m_hData != null) && (m_hData.get(hostname) != null);
    }
   


    // Attribute sStack ------------------------------------------------

    // keyClassName for SGE_HOST = String

   
    private Map m_sStack;

    private void initSStack() {
        if (m_sStack == null) {
            m_sStack = new LinkedHashMap();
        }
    }
   
    /**
     *  <p>Put the attribute sStack for a hostname.</p>
     *
     *  @param hostname    the hostname
     *  @param sStack  the sStack
     */
    public void putSStack(String hostname, String sStack) {   
        initSStack();
        m_sStack.put(hostname,

                            sStack

                            );
    }

    /**
     *  <p>Get the default value of the attribute sStack.</p>
     *  @return the default value of the attribute sStack
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultSStack() {
        if (m_sStack == null) {
            throw new IllegalStateException("default value for attribute sStack not found");
        }
        java.lang.String ret = (java.lang.String)m_sStack.get("@/");
        if (ret == null) {
            throw new IllegalStateException("default value for attribute sStack not found");
        }

        return ret;

    }
   
    /**
     *  <p>Get the sStack attribute for a hostname.</p>
     *  @param   hostname   the hostname
     *  @return  the sStack attribute for the host or the
     *           default value of  sStack
     */
    public String getSStack(String hostname) {
        initSStack();
        if (m_sStack.containsKey(hostname)) {      
            java.lang.String ret = (java.lang.String)m_sStack.get(hostname);
            if (ret != null) {

                return ret;

            } else {
                return null;
            }
        } else {
            return getDefaultSStack();
        }
    }

    /**
     *  Set <code>sStack</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param sStack  the sStack attribute
     */
    public void setDefaultSStack(String sStack) {
        putSStack("@/", sStack);
    }


    /**
     *  <p>remove the attribute sStack for a hostname.</p>
     *
     *  @param hostname tje hostname
     *  @return the sStack for the hostname or <code>null</code>
     *          if the sStack attribute was not defined for the hostname.
     */
    public java.lang.String removeSStack(String hostname) {
        initSStack();
        return (java.lang.String)m_sStack.remove(hostname);
    }

    /**
     *  <p>Remove the attribute sStack for all hostnames.</p>
     */
    public void removeAllSStack() {
        if (m_sStack != null) {
            m_sStack.clear();
        }
    }
   
    /**
     *  Get the set of hostnames which have the attribute sStack set.
     *  @return set of hostnames
     */
    public Set<String> getSStackKeys() {
        if (m_sStack == null) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(m_sStack.keySet());
        }
    }
   
    /**
     *  Get the number of hostnames which have the attribute sStack set.
     *  @return the number of hostnames which have the attribute sStack set.
     */
    public int getSStackCount() {
        if (m_sStack == null) {
            return 0;
        } else {
            return m_sStack.size();
        }
    }
   
    /**
     *  Determine if any sStack attribute is set
     *  @return <code>true</code> if the sStack attribute is set
     */
    public boolean isSetSStack () {
        return (m_sStack != null) && (!m_sStack.isEmpty());
    }
   
    /**
     *  Determine if any sStack attribute is for a hostname is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the sStack attribute is set
     */
    public boolean isSetSStack(String hostname) {
        return (m_sStack != null) && (m_sStack.get(hostname) != null);
    }
   


    // Attribute hStack ------------------------------------------------

    // keyClassName for SGE_HOST = String

   
    private Map m_hStack;

    private void initHStack() {
        if (m_hStack == null) {
            m_hStack = new LinkedHashMap();
        }
    }
   
    /**
     *  <p>Put the attribute hStack for a hostname.</p>
     *
     *  @param hostname    the hostname
     *  @param hStack  the hStack
     */
    public void putHStack(String hostname, String hStack) {   
        initHStack();
        m_hStack.put(hostname,

                            hStack

                            );
    }

    /**
     *  <p>Get the default value of the attribute hStack.</p>
     *  @return the default value of the attribute hStack
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultHStack() {
        if (m_hStack == null) {
            throw new IllegalStateException("default value for attribute hStack not found");
        }
        java.lang.String ret = (java.lang.String)m_hStack.get("@/");
        if (ret == null) {
            throw new IllegalStateException("default value for attribute hStack not found");
        }

        return ret;

    }
   
    /**
     *  <p>Get the hStack attribute for a hostname.</p>
     *  @param   hostname   the hostname
     *  @return  the hStack attribute for the host or the
     *           default value of  hStack
     */
    public String getHStack(String hostname) {
        initHStack();
        if (m_hStack.containsKey(hostname)) {      
            java.lang.String ret = (java.lang.String)m_hStack.get(hostname);
            if (ret != null) {

                return ret;

            } else {
                return null;
            }
        } else {
            return getDefaultHStack();
        }
    }

    /**
     *  Set <code>hStack</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param hStack  the hStack attribute
     */
    public void setDefaultHStack(String hStack) {
        putHStack("@/", hStack);
    }


    /**
     *  <p>remove the attribute hStack for a hostname.</p>
     *
     *  @param hostname tje hostname
     *  @return the hStack for the hostname or <code>null</code>
     *          if the hStack attribute was not defined for the hostname.
     */
    public java.lang.String removeHStack(String hostname) {
        initHStack();
        return (java.lang.String)m_hStack.remove(hostname);
    }

    /**
     *  <p>Remove the attribute hStack for all hostnames.</p>
     */
    public void removeAllHStack() {
        if (m_hStack != null) {
            m_hStack.clear();
        }
    }
   
    /**
     *  Get the set of hostnames which have the attribute hStack set.
     *  @return set of hostnames
     */
    public Set<String> getHStackKeys() {
        if (m_hStack == null) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(m_hStack.keySet());
        }
    }
   
    /**
     *  Get the number of hostnames which have the attribute hStack set.
     *  @return the number of hostnames which have the attribute hStack set.
     */
    public int getHStackCount() {
        if (m_hStack == null) {
            return 0;
        } else {
            return m_hStack.size();
        }
    }
   
    /**
     *  Determine if any hStack attribute is set
     *  @return <code>true</code> if the hStack attribute is set
     */
    public boolean isSetHStack () {
        return (m_hStack != null) && (!m_hStack.isEmpty());
    }
   
    /**
     *  Determine if any hStack attribute is for a hostname is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the hStack attribute is set
     */
    public boolean isSetHStack(String hostname) {
        return (m_hStack != null) && (m_hStack.get(hostname) != null);
    }
   


    // Attribute sCore ------------------------------------------------

    // keyClassName for SGE_HOST = String

   
    private Map m_sCore;

    private void initSCore() {
        if (m_sCore == null) {
            m_sCore = new LinkedHashMap();
        }
    }
   
    /**
     *  <p>Put the attribute sCore for a hostname.</p>
     *
     *  @param hostname    the hostname
     *  @param sCore  the sCore
     */
    public void putSCore(String hostname, String sCore) {   
        initSCore();
        m_sCore.put(hostname,

                            sCore

                            );
    }

    /**
     *  <p>Get the default value of the attribute sCore.</p>
     *  @return the default value of the attribute sCore
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultSCore() {
        if (m_sCore == null) {
            throw new IllegalStateException("default value for attribute sCore not found");
        }
        java.lang.String ret = (java.lang.String)m_sCore.get("@/");
        if (ret == null) {
            throw new IllegalStateException("default value for attribute sCore not found");
        }

        return ret;

    }
   
    /**
     *  <p>Get the sCore attribute for a hostname.</p>
     *  @param   hostname   the hostname
     *  @return  the sCore attribute for the host or the
     *           default value of  sCore
     */
    public String getSCore(String hostname) {
        initSCore();
        if (m_sCore.containsKey(hostname)) {      
            java.lang.String ret = (java.lang.String)m_sCore.get(hostname);
            if (ret != null) {

                return ret;

            } else {
                return null;
            }
        } else {
            return getDefaultSCore();
        }
    }

    /**
     *  Set <code>sCore</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param sCore  the sCore attribute
     */
    public void setDefaultSCore(String sCore) {
        putSCore("@/", sCore);
    }


    /**
     *  <p>remove the attribute sCore for a hostname.</p>
     *
     *  @param hostname tje hostname
     *  @return the sCore for the hostname or <code>null</code>
     *          if the sCore attribute was not defined for the hostname.
     */
    public java.lang.String removeSCore(String hostname) {
        initSCore();
        return (java.lang.String)m_sCore.remove(hostname);
    }

    /**
     *  <p>Remove the attribute sCore for all hostnames.</p>
     */
    public void removeAllSCore() {
        if (m_sCore != null) {
            m_sCore.clear();
        }
    }
   
    /**
     *  Get the set of hostnames which have the attribute sCore set.
     *  @return set of hostnames
     */
    public Set<String> getSCoreKeys() {
        if (m_sCore == null) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(m_sCore.keySet());
        }
    }
   
    /**
     *  Get the number of hostnames which have the attribute sCore set.
     *  @return the number of hostnames which have the attribute sCore set.
     */
    public int getSCoreCount() {
        if (m_sCore == null) {
            return 0;
        } else {
            return m_sCore.size();
        }
    }
   
    /**
     *  Determine if any sCore attribute is set
     *  @return <code>true</code> if the sCore attribute is set
     */
    public boolean isSetSCore () {
        return (m_sCore != null) && (!m_sCore.isEmpty());
    }
   
    /**
     *  Determine if any sCore attribute is for a hostname is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the sCore attribute is set
     */
    public boolean isSetSCore(String hostname) {
        return (m_sCore != null) && (m_sCore.get(hostname) != null);
    }
   


    // Attribute hCore ------------------------------------------------

    // keyClassName for SGE_HOST = String

   
    private Map m_hCore;

    private void initHCore() {
        if (m_hCore == null) {
            m_hCore = new LinkedHashMap();
        }
    }
   
    /**
     *  <p>Put the attribute hCore for a hostname.</p>
     *
     *  @param hostname    the hostname
     *  @param hCore  the hCore
     */
    public void putHCore(String hostname, String hCore) {   
        initHCore();
        m_hCore.put(hostname,

                            hCore

                            );
    }

    /**
     *  <p>Get the default value of the attribute hCore.</p>
     *  @return the default value of the attribute hCore
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultHCore() {
        if (m_hCore == null) {
            throw new IllegalStateException("default value for attribute hCore not found");
        }
        java.lang.String ret = (java.lang.String)m_hCore.get("@/");
        if (ret == null) {
            throw new IllegalStateException("default value for attribute hCore not found");
        }

        return ret;

    }
   
    /**
     *  <p>Get the hCore attribute for a hostname.</p>
     *  @param   hostname   the hostname
     *  @return  the hCore attribute for the host or the
     *           default value of  hCore
     */
    public String getHCore(String hostname) {
        initHCore();
        if (m_hCore.containsKey(hostname)) {      
            java.lang.String ret = (java.lang.String)m_hCore.get(hostname);
            if (ret != null) {

                return ret;

            } else {
                return null;
            }
        } else {
            return getDefaultHCore();
        }
    }

    /**
     *  Set <code>hCore</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param hCore  the hCore attribute
     */
    public void setDefaultHCore(String hCore) {
        putHCore("@/", hCore);
    }


    /**
     *  <p>remove the attribute hCore for a hostname.</p>
     *
     *  @param hostname tje hostname
     *  @return the hCore for the hostname or <code>null</code>
     *          if the hCore attribute was not defined for the hostname.
     */
    public java.lang.String removeHCore(String hostname) {
        initHCore();
        return (java.lang.String)m_hCore.remove(hostname);
    }

    /**
     *  <p>Remove the attribute hCore for all hostnames.</p>
     */
    public void removeAllHCore() {
        if (m_hCore != null) {
            m_hCore.clear();
        }
    }
   
    /**
     *  Get the set of hostnames which have the attribute hCore set.
     *  @return set of hostnames
     */
    public Set<String> getHCoreKeys() {
        if (m_hCore == null) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(m_hCore.keySet());
        }
    }
   
    /**
     *  Get the number of hostnames which have the attribute hCore set.
     *  @return the number of hostnames which have the attribute hCore set.
     */
    public int getHCoreCount() {
        if (m_hCore == null) {
            return 0;
        } else {
            return m_hCore.size();
        }
    }
   
    /**
     *  Determine if any hCore attribute is set
     *  @return <code>true</code> if the hCore attribute is set
     */
    public boolean isSetHCore () {
        return (m_hCore != null) && (!m_hCore.isEmpty());
    }
   
    /**
     *  Determine if any hCore attribute is for a hostname is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the hCore attribute is set
     */
    public boolean isSetHCore(String hostname) {
        return (m_hCore != null) && (m_hCore.get(hostname) != null);
    }
   


    // Attribute sRss ------------------------------------------------

    // keyClassName for SGE_HOST = String

   
    private Map m_sRss;

    private void initSRss() {
        if (m_sRss == null) {
            m_sRss = new LinkedHashMap();
        }
    }
   
    /**
     *  <p>Put the attribute sRss for a hostname.</p>
     *
     *  @param hostname    the hostname
     *  @param sRss  the sRss
     */
    public void putSRss(String hostname, String sRss) {   
        initSRss();
        m_sRss.put(hostname,

                            sRss

                            );
    }

    /**
     *  <p>Get the default value of the attribute sRss.</p>
     *  @return the default value of the attribute sRss
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultSRss() {
        if (m_sRss == null) {
            throw new IllegalStateException("default value for attribute sRss not found");
        }
        java.lang.String ret = (java.lang.String)m_sRss.get("@/");
        if (ret == null) {
            throw new IllegalStateException("default value for attribute sRss not found");
        }

        return ret;

    }
   
    /**
     *  <p>Get the sRss attribute for a hostname.</p>
     *  @param   hostname   the hostname
     *  @return  the sRss attribute for the host or the
     *           default value of  sRss
     */
    public String getSRss(String hostname) {
        initSRss();
        if (m_sRss.containsKey(hostname)) {      
            java.lang.String ret = (java.lang.String)m_sRss.get(hostname);
            if (ret != null) {

                return ret;

            } else {
                return null;
            }
        } else {
            return getDefaultSRss();
        }
    }

    /**
     *  Set <code>sRss</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param sRss  the sRss attribute
     */
    public void setDefaultSRss(String sRss) {
        putSRss("@/", sRss);
    }


    /**
     *  <p>remove the attribute sRss for a hostname.</p>
     *
     *  @param hostname tje hostname
     *  @return the sRss for the hostname or <code>null</code>
     *          if the sRss attribute was not defined for the hostname.
     */
    public java.lang.String removeSRss(String hostname) {
        initSRss();
        return (java.lang.String)m_sRss.remove(hostname);
    }

    /**
     *  <p>Remove the attribute sRss for all hostnames.</p>
     */
    public void removeAllSRss() {
        if (m_sRss != null) {
            m_sRss.clear();
        }
    }
   
    /**
     *  Get the set of hostnames which have the attribute sRss set.
     *  @return set of hostnames
     */
    public Set<String> getSRssKeys() {
        if (m_sRss == null) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(m_sRss.keySet());
        }
    }
   
    /**
     *  Get the number of hostnames which have the attribute sRss set.
     *  @return the number of hostnames which have the attribute sRss set.
     */
    public int getSRssCount() {
        if (m_sRss == null) {
            return 0;
        } else {
            return m_sRss.size();
        }
    }
   
    /**
     *  Determine if any sRss attribute is set
     *  @return <code>true</code> if the sRss attribute is set
     */
    public boolean isSetSRss () {
        return (m_sRss != null) && (!m_sRss.isEmpty());
    }
   
    /**
     *  Determine if any sRss attribute is for a hostname is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the sRss attribute is set
     */
    public boolean isSetSRss(String hostname) {
        return (m_sRss != null) && (m_sRss.get(hostname) != null);
    }
   


    // Attribute hRss ------------------------------------------------

    // keyClassName for SGE_HOST = String

   
    private Map m_hRss;

    private void initHRss() {
        if (m_hRss == null) {
            m_hRss = new LinkedHashMap();
        }
    }
   
    /**
     *  <p>Put the attribute hRss for a hostname.</p>
     *
     *  @param hostname    the hostname
     *  @param hRss  the hRss
     */
    public void putHRss(String hostname, String hRss) {   
        initHRss();
        m_hRss.put(hostname,

                            hRss

                            );
    }

    /**
     *  <p>Get the default value of the attribute hRss.</p>
     *  @return the default value of the attribute hRss
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultHRss() {
        if (m_hRss == null) {
            throw new IllegalStateException("default value for attribute hRss not found");
        }
        java.lang.String ret = (java.lang.String)m_hRss.get("@/");
        if (ret == null) {
            throw new IllegalStateException("default value for attribute hRss not found");
        }

        return ret;

    }
   
    /**
     *  <p>Get the hRss attribute for a hostname.</p>
     *  @param   hostname   the hostname
     *  @return  the hRss attribute for the host or the
     *           default value of  hRss
     */
    public String getHRss(String hostname) {
        initHRss();
        if (m_hRss.containsKey(hostname)) {      
            java.lang.String ret = (java.lang.String)m_hRss.get(hostname);
            if (ret != null) {

                return ret;

            } else {
                return null;
            }
        } else {
            return getDefaultHRss();
        }
    }

    /**
     *  Set <code>hRss</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param hRss  the hRss attribute
     */
    public void setDefaultHRss(String hRss) {
        putHRss("@/", hRss);
    }


    /**
     *  <p>remove the attribute hRss for a hostname.</p>
     *
     *  @param hostname tje hostname
     *  @return the hRss for the hostname or <code>null</code>
     *          if the hRss attribute was not defined for the hostname.
     */
    public java.lang.String removeHRss(String hostname) {
        initHRss();
        return (java.lang.String)m_hRss.remove(hostname);
    }

    /**
     *  <p>Remove the attribute hRss for all hostnames.</p>
     */
    public void removeAllHRss() {
        if (m_hRss != null) {
            m_hRss.clear();
        }
    }
   
    /**
     *  Get the set of hostnames which have the attribute hRss set.
     *  @return set of hostnames
     */
    public Set<String> getHRssKeys() {
        if (m_hRss == null) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(m_hRss.keySet());
        }
    }
   
    /**
     *  Get the number of hostnames which have the attribute hRss set.
     *  @return the number of hostnames which have the attribute hRss set.
     */
    public int getHRssCount() {
        if (m_hRss == null) {
            return 0;
        } else {
            return m_hRss.size();
        }
    }
   
    /**
     *  Determine if any hRss attribute is set
     *  @return <code>true</code> if the hRss attribute is set
     */
    public boolean isSetHRss () {
        return (m_hRss != null) && (!m_hRss.isEmpty());
    }
   
    /**
     *  Determine if any hRss attribute is for a hostname is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the hRss attribute is set
     */
    public boolean isSetHRss(String hostname) {
        return (m_hRss != null) && (m_hRss.get(hostname) != null);
    }
   


    // Attribute sVmem ------------------------------------------------

    // keyClassName for SGE_HOST = String

   
    private Map m_sVmem;

    private void initSVmem() {
        if (m_sVmem == null) {
            m_sVmem = new LinkedHashMap();
        }
    }
   
    /**
     *  <p>Put the attribute sVmem for a hostname.</p>
     *
     *  @param hostname    the hostname
     *  @param sVmem  the sVmem
     */
    public void putSVmem(String hostname, String sVmem) {   
        initSVmem();
        m_sVmem.put(hostname,

                            sVmem

                            );
    }

    /**
     *  <p>Get the default value of the attribute sVmem.</p>
     *  @return the default value of the attribute sVmem
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultSVmem() {
        if (m_sVmem == null) {
            throw new IllegalStateException("default value for attribute sVmem not found");
        }
        java.lang.String ret = (java.lang.String)m_sVmem.get("@/");
        if (ret == null) {
            throw new IllegalStateException("default value for attribute sVmem not found");
        }

        return ret;

    }
   
    /**
     *  <p>Get the sVmem attribute for a hostname.</p>
     *  @param   hostname   the hostname
     *  @return  the sVmem attribute for the host or the
     *           default value of  sVmem
     */
    public String getSVmem(String hostname) {
        initSVmem();
        if (m_sVmem.containsKey(hostname)) {      
            java.lang.String ret = (java.lang.String)m_sVmem.get(hostname);
            if (ret != null) {

                return ret;

            } else {
                return null;
            }
        } else {
            return getDefaultSVmem();
        }
    }

    /**
     *  Set <code>sVmem</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param sVmem  the sVmem attribute
     */
    public void setDefaultSVmem(String sVmem) {
        putSVmem("@/", sVmem);
    }


    /**
     *  <p>remove the attribute sVmem for a hostname.</p>
     *
     *  @param hostname tje hostname
     *  @return the sVmem for the hostname or <code>null</code>
     *          if the sVmem attribute was not defined for the hostname.
     */
    public java.lang.String removeSVmem(String hostname) {
        initSVmem();
        return (java.lang.String)m_sVmem.remove(hostname);
    }

    /**
     *  <p>Remove the attribute sVmem for all hostnames.</p>
     */
    public void removeAllSVmem() {
        if (m_sVmem != null) {
            m_sVmem.clear();
        }
    }
   
    /**
     *  Get the set of hostnames which have the attribute sVmem set.
     *  @return set of hostnames
     */
    public Set<String> getSVmemKeys() {
        if (m_sVmem == null) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(m_sVmem.keySet());
        }
    }
   
    /**
     *  Get the number of hostnames which have the attribute sVmem set.
     *  @return the number of hostnames which have the attribute sVmem set.
     */
    public int getSVmemCount() {
        if (m_sVmem == null) {
            return 0;
        } else {
            return m_sVmem.size();
        }
    }
   
    /**
     *  Determine if any sVmem attribute is set
     *  @return <code>true</code> if the sVmem attribute is set
     */
    public boolean isSetSVmem () {
        return (m_sVmem != null) && (!m_sVmem.isEmpty());
    }
   
    /**
     *  Determine if any sVmem attribute is for a hostname is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the sVmem attribute is set
     */
    public boolean isSetSVmem(String hostname) {
        return (m_sVmem != null) && (m_sVmem.get(hostname) != null);
    }
   


    // Attribute hVmem ------------------------------------------------

    // keyClassName for SGE_HOST = String

   
    private Map m_hVmem;

    private void initHVmem() {
        if (m_hVmem == null) {
            m_hVmem = new LinkedHashMap();
        }
    }
   
    /**
     *  <p>Put the attribute hVmem for a hostname.</p>
     *
     *  @param hostname    the hostname
     *  @param hVmem  the hVmem
     */
    public void putHVmem(String hostname, String hVmem) {   
        initHVmem();
        m_hVmem.put(hostname,

                            hVmem

                            );
    }

    /**
     *  <p>Get the default value of the attribute hVmem.</p>
     *  @return the default value of the attribute hVmem
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultHVmem() {
        if (m_hVmem == null) {
            throw new IllegalStateException("default value for attribute hVmem not found");
        }
        java.lang.String ret = (java.lang.String)m_hVmem.get("@/");
        if (ret == null) {
            throw new IllegalStateException("default value for attribute hVmem not found");
        }

        return ret;

    }
   
    /**
     *  <p>Get the hVmem attribute for a hostname.</p>
     *  @param   hostname   the hostname
     *  @return  the hVmem attribute for the host or the
     *           default value of  hVmem
     */
    public String getHVmem(String hostname) {
        initHVmem();
        if (m_hVmem.containsKey(hostname)) {      
            java.lang.String ret = (java.lang.String)m_hVmem.get(hostname);
            if (ret != null) {

                return ret;

            } else {
                return null;
            }
        } else {
            return getDefaultHVmem();
        }
    }

    /**
     *  Set <code>hVmem</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param hVmem  the hVmem attribute
     */
    public void setDefaultHVmem(String hVmem) {
        putHVmem("@/", hVmem);
    }


    /**
     *  <p>remove the attribute hVmem for a hostname.</p>
     *
     *  @param hostname tje hostname
     *  @return the hVmem for the hostname or <code>null</code>
     *          if the hVmem attribute was not defined for the hostname.
     */
    public java.lang.String removeHVmem(String hostname) {
        initHVmem();
        return (java.lang.String)m_hVmem.remove(hostname);
    }

    /**
     *  <p>Remove the attribute hVmem for all hostnames.</p>
     */
    public void removeAllHVmem() {
        if (m_hVmem != null) {
            m_hVmem.clear();
        }
    }
   
    /**
     *  Get the set of hostnames which have the attribute hVmem set.
     *  @return set of hostnames
     */
    public Set<String> getHVmemKeys() {
        if (m_hVmem == null) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(m_hVmem.keySet());
        }
    }
   
    /**
     *  Get the number of hostnames which have the attribute hVmem set.
     *  @return the number of hostnames which have the attribute hVmem set.
     */
    public int getHVmemCount() {
        if (m_hVmem == null) {
            return 0;
        } else {
            return m_hVmem.size();
        }
    }
   
    /**
     *  Determine if any hVmem attribute is set
     *  @return <code>true</code> if the hVmem attribute is set
     */
    public boolean isSetHVmem () {
        return (m_hVmem != null) && (!m_hVmem.isEmpty());
    }
   
    /**
     *  Determine if any hVmem attribute is for a hostname is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the hVmem attribute is set
     */
    public boolean isSetHVmem(String hostname) {
        return (m_hVmem != null) && (m_hVmem.get(hostname) != null);
    }
   


    // Attribute sRt ------------------------------------------------

    // keyClassName for SGE_HOST = String

   
    private Map m_sRt;

    private void initSRt() {
        if (m_sRt == null) {
            m_sRt = new LinkedHashMap();
        }
    }
   
    /**
     *  <p>Put the attribute sRt for a hostname.</p>
     *
     *  @param hostname    the hostname
     *  @param sRt  the sRt
     */
    public void putSRt(String hostname, String sRt) {   
        initSRt();
        m_sRt.put(hostname,

                            sRt

                            );
    }

    /**
     *  <p>Get the default value of the attribute sRt.</p>
     *  @return the default value of the attribute sRt
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultSRt() {
        if (m_sRt == null) {
            throw new IllegalStateException("default value for attribute sRt not found");
        }
        java.lang.String ret = (java.lang.String)m_sRt.get("@/");
        if (ret == null) {
            throw new IllegalStateException("default value for attribute sRt not found");
        }

        return ret;

    }
   
    /**
     *  <p>Get the sRt attribute for a hostname.</p>
     *  @param   hostname   the hostname
     *  @return  the sRt attribute for the host or the
     *           default value of  sRt
     */
    public String getSRt(String hostname) {
        initSRt();
        if (m_sRt.containsKey(hostname)) {      
            java.lang.String ret = (java.lang.String)m_sRt.get(hostname);
            if (ret != null) {

                return ret;

            } else {
                return null;
            }
        } else {
            return getDefaultSRt();
        }
    }

    /**
     *  Set <code>sRt</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param sRt  the sRt attribute
     */
    public void setDefaultSRt(String sRt) {
        putSRt("@/", sRt);
    }


    /**
     *  <p>remove the attribute sRt for a hostname.</p>
     *
     *  @param hostname tje hostname
     *  @return the sRt for the hostname or <code>null</code>
     *          if the sRt attribute was not defined for the hostname.
     */
    public java.lang.String removeSRt(String hostname) {
        initSRt();
        return (java.lang.String)m_sRt.remove(hostname);
    }

    /**
     *  <p>Remove the attribute sRt for all hostnames.</p>
     */
    public void removeAllSRt() {
        if (m_sRt != null) {
            m_sRt.clear();
        }
    }
   
    /**
     *  Get the set of hostnames which have the attribute sRt set.
     *  @return set of hostnames
     */
    public Set<String> getSRtKeys() {
        if (m_sRt == null) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(m_sRt.keySet());
        }
    }
   
    /**
     *  Get the number of hostnames which have the attribute sRt set.
     *  @return the number of hostnames which have the attribute sRt set.
     */
    public int getSRtCount() {
        if (m_sRt == null) {
            return 0;
        } else {
            return m_sRt.size();
        }
    }
   
    /**
     *  Determine if any sRt attribute is set
     *  @return <code>true</code> if the sRt attribute is set
     */
    public boolean isSetSRt () {
        return (m_sRt != null) && (!m_sRt.isEmpty());
    }
   
    /**
     *  Determine if any sRt attribute is for a hostname is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the sRt attribute is set
     */
    public boolean isSetSRt(String hostname) {
        return (m_sRt != null) && (m_sRt.get(hostname) != null);
    }
   


    // Attribute hRt ------------------------------------------------

    // keyClassName for SGE_HOST = String

   
    private Map m_hRt;

    private void initHRt() {
        if (m_hRt == null) {
            m_hRt = new LinkedHashMap();
        }
    }
   
    /**
     *  <p>Put the attribute hRt for a hostname.</p>
     *
     *  @param hostname    the hostname
     *  @param hRt  the hRt
     */
    public void putHRt(String hostname, String hRt) {   
        initHRt();
        m_hRt.put(hostname,

                            hRt

                            );
    }

    /**
     *  <p>Get the default value of the attribute hRt.</p>
     *  @return the default value of the attribute hRt
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultHRt() {
        if (m_hRt == null) {
            throw new IllegalStateException("default value for attribute hRt not found");
        }
        java.lang.String ret = (java.lang.String)m_hRt.get("@/");
        if (ret == null) {
            throw new IllegalStateException("default value for attribute hRt not found");
        }

        return ret;

    }
   
    /**
     *  <p>Get the hRt attribute for a hostname.</p>
     *  @param   hostname   the hostname
     *  @return  the hRt attribute for the host or the
     *           default value of  hRt
     */
    public String getHRt(String hostname) {
        initHRt();
        if (m_hRt.containsKey(hostname)) {      
            java.lang.String ret = (java.lang.String)m_hRt.get(hostname);
            if (ret != null) {

                return ret;

            } else {
                return null;
            }
        } else {
            return getDefaultHRt();
        }
    }

    /**
     *  Set <code>hRt</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param hRt  the hRt attribute
     */
    public void setDefaultHRt(String hRt) {
        putHRt("@/", hRt);
    }


    /**
     *  <p>remove the attribute hRt for a hostname.</p>
     *
     *  @param hostname tje hostname
     *  @return the hRt for the hostname or <code>null</code>
     *          if the hRt attribute was not defined for the hostname.
     */
    public java.lang.String removeHRt(String hostname) {
        initHRt();
        return (java.lang.String)m_hRt.remove(hostname);
    }

    /**
     *  <p>Remove the attribute hRt for all hostnames.</p>
     */
    public void removeAllHRt() {
        if (m_hRt != null) {
            m_hRt.clear();
        }
    }
   
    /**
     *  Get the set of hostnames which have the attribute hRt set.
     *  @return set of hostnames
     */
    public Set<String> getHRtKeys() {
        if (m_hRt == null) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(m_hRt.keySet());
        }
    }
   
    /**
     *  Get the number of hostnames which have the attribute hRt set.
     *  @return the number of hostnames which have the attribute hRt set.
     */
    public int getHRtCount() {
        if (m_hRt == null) {
            return 0;
        } else {
            return m_hRt.size();
        }
    }
   
    /**
     *  Determine if any hRt attribute is set
     *  @return <code>true</code> if the hRt attribute is set
     */
    public boolean isSetHRt () {
        return (m_hRt != null) && (!m_hRt.isEmpty());
    }
   
    /**
     *  Determine if any hRt attribute is for a hostname is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the hRt attribute is set
     */
    public boolean isSetHRt(String hostname) {
        return (m_hRt != null) && (m_hRt.get(hostname) != null);
    }
   


    // Attribute sCpu ------------------------------------------------

    // keyClassName for SGE_HOST = String

   
    private Map m_sCpu;

    private void initSCpu() {
        if (m_sCpu == null) {
            m_sCpu = new LinkedHashMap();
        }
    }
   
    /**
     *  <p>Put the attribute sCpu for a hostname.</p>
     *
     *  @param hostname    the hostname
     *  @param sCpu  the sCpu
     */
    public void putSCpu(String hostname, String sCpu) {   
        initSCpu();
        m_sCpu.put(hostname,

                            sCpu

                            );
    }

    /**
     *  <p>Get the default value of the attribute sCpu.</p>
     *  @return the default value of the attribute sCpu
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultSCpu() {
        if (m_sCpu == null) {
            throw new IllegalStateException("default value for attribute sCpu not found");
        }
        java.lang.String ret = (java.lang.String)m_sCpu.get("@/");
        if (ret == null) {
            throw new IllegalStateException("default value for attribute sCpu not found");
        }

        return ret;

    }
   
    /**
     *  <p>Get the sCpu attribute for a hostname.</p>
     *  @param   hostname   the hostname
     *  @return  the sCpu attribute for the host or the
     *           default value of  sCpu
     */
    public String getSCpu(String hostname) {
        initSCpu();
        if (m_sCpu.containsKey(hostname)) {      
            java.lang.String ret = (java.lang.String)m_sCpu.get(hostname);
            if (ret != null) {

                return ret;

            } else {
                return null;
            }
        } else {
            return getDefaultSCpu();
        }
    }

    /**
     *  Set <code>sCpu</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param sCpu  the sCpu attribute
     */
    public void setDefaultSCpu(String sCpu) {
        putSCpu("@/", sCpu);
    }


    /**
     *  <p>remove the attribute sCpu for a hostname.</p>
     *
     *  @param hostname tje hostname
     *  @return the sCpu for the hostname or <code>null</code>
     *          if the sCpu attribute was not defined for the hostname.
     */
    public java.lang.String removeSCpu(String hostname) {
        initSCpu();
        return (java.lang.String)m_sCpu.remove(hostname);
    }

    /**
     *  <p>Remove the attribute sCpu for all hostnames.</p>
     */
    public void removeAllSCpu() {
        if (m_sCpu != null) {
            m_sCpu.clear();
        }
    }
   
    /**
     *  Get the set of hostnames which have the attribute sCpu set.
     *  @return set of hostnames
     */
    public Set<String> getSCpuKeys() {
        if (m_sCpu == null) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(m_sCpu.keySet());
        }
    }
   
    /**
     *  Get the number of hostnames which have the attribute sCpu set.
     *  @return the number of hostnames which have the attribute sCpu set.
     */
    public int getSCpuCount() {
        if (m_sCpu == null) {
            return 0;
        } else {
            return m_sCpu.size();
        }
    }
   
    /**
     *  Determine if any sCpu attribute is set
     *  @return <code>true</code> if the sCpu attribute is set
     */
    public boolean isSetSCpu () {
        return (m_sCpu != null) && (!m_sCpu.isEmpty());
    }
   
    /**
     *  Determine if any sCpu attribute is for a hostname is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the sCpu attribute is set
     */
    public boolean isSetSCpu(String hostname) {
        return (m_sCpu != null) && (m_sCpu.get(hostname) != null);
    }
   


    // Attribute hCpu ------------------------------------------------

    // keyClassName for SGE_HOST = String

   
    private Map m_hCpu;

    private void initHCpu() {
        if (m_hCpu == null) {
            m_hCpu = new LinkedHashMap();
        }
    }
   
    /**
     *  <p>Put the attribute hCpu for a hostname.</p>
     *
     *  @param hostname    the hostname
     *  @param hCpu  the hCpu
     */
    public void putHCpu(String hostname, String hCpu) {   
        initHCpu();
        m_hCpu.put(hostname,

                            hCpu

                            );
    }

    /**
     *  <p>Get the default value of the attribute hCpu.</p>
     *  @return the default value of the attribute hCpu
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultHCpu() {
        if (m_hCpu == null) {
            throw new IllegalStateException("default value for attribute hCpu not found");
        }
        java.lang.String ret = (java.lang.String)m_hCpu.get("@/");
        if (ret == null) {
            throw new IllegalStateException("default value for attribute hCpu not found");
        }

        return ret;

    }
   
    /**
     *  <p>Get the hCpu attribute for a hostname.</p>
     *  @param   hostname   the hostname
     *  @return  the hCpu attribute for the host or the
     *           default value of  hCpu
     */
    public String getHCpu(String hostname) {
        initHCpu();
        if (m_hCpu.containsKey(hostname)) {      
            java.lang.String ret = (java.lang.String)m_hCpu.get(hostname);
            if (ret != null) {

                return ret;

            } else {
                return null;
            }
        } else {
            return getDefaultHCpu();
        }
    }

    /**
     *  Set <code>hCpu</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param hCpu  the hCpu attribute
     */
    public void setDefaultHCpu(String hCpu) {
        putHCpu("@/", hCpu);
    }


    /**
     *  <p>remove the attribute hCpu for a hostname.</p>
     *
     *  @param hostname tje hostname
     *  @return the hCpu for the hostname or <code>null</code>
     *          if the hCpu attribute was not defined for the hostname.
     */
    public java.lang.String removeHCpu(String hostname) {
        initHCpu();
        return (java.lang.String)m_hCpu.remove(hostname);
    }

    /**
     *  <p>Remove the attribute hCpu for all hostnames.</p>
     */
    public void removeAllHCpu() {
        if (m_hCpu != null) {
            m_hCpu.clear();
        }
    }
   
    /**
     *  Get the set of hostnames which have the attribute hCpu set.
     *  @return set of hostnames
     */
    public Set<String> getHCpuKeys() {
        if (m_hCpu == null) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(m_hCpu.keySet());
        }
    }
   
    /**
     *  Get the number of hostnames which have the attribute hCpu set.
     *  @return the number of hostnames which have the attribute hCpu set.
     */
    public int getHCpuCount() {
        if (m_hCpu == null) {
            return 0;
        } else {
            return m_hCpu.size();
        }
    }
   
    /**
     *  Determine if any hCpu attribute is set
     *  @return <code>true</code> if the hCpu attribute is set
     */
    public boolean isSetHCpu () {
        return (m_hCpu != null) && (!m_hCpu.isEmpty());
    }
   
    /**
     *  Determine if any hCpu attribute is for a hostname is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the hCpu attribute is set
     */
    public boolean isSetHCpu(String hostname) {
        return (m_hCpu != null) && (m_hCpu.get(hostname) != null);
    }
   


    // Attribute suspendInterval ------------------------------------------------

    // keyClassName for SGE_HOST = String

   
    private Map m_suspendInterval;

    private void initSuspendInterval() {
        if (m_suspendInterval == null) {
            m_suspendInterval = new LinkedHashMap();
        }
    }
   
    /**
     *  <p>Put the attribute suspendInterval for a hostname.</p>
     *
     *  @param hostname    the hostname
     *  @param suspendInterval  the suspendInterval
     */
    public void putSuspendInterval(String hostname, String suspendInterval) {   
        initSuspendInterval();
        m_suspendInterval.put(hostname,

                            suspendInterval

                            );
    }

    /**
     *  <p>Get the default value of the attribute suspendInterval.</p>
     *  @return the default value of the attribute suspendInterval
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultSuspendInterval() {
        if (m_suspendInterval == null) {
            throw new IllegalStateException("default value for attribute suspendInterval not found");
        }
        java.lang.String ret = (java.lang.String)m_suspendInterval.get("@/");
        if (ret == null) {
            throw new IllegalStateException("default value for attribute suspendInterval not found");
        }

        return ret;

    }
   
    /**
     *  <p>Get the suspendInterval attribute for a hostname.</p>
     *  @param   hostname   the hostname
     *  @return  the suspendInterval attribute for the host or the
     *           default value of  suspendInterval
     */
    public String getSuspendInterval(String hostname) {
        initSuspendInterval();
        if (m_suspendInterval.containsKey(hostname)) {      
            java.lang.String ret = (java.lang.String)m_suspendInterval.get(hostname);
            if (ret != null) {

                return ret;

            } else {
                return null;
            }
        } else {
            return getDefaultSuspendInterval();
        }
    }

    /**
     *  Set <code>suspendInterval</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param suspendInterval  the suspendInterval attribute
     */
    public void setDefaultSuspendInterval(String suspendInterval) {
        putSuspendInterval("@/", suspendInterval);
    }


    /**
     *  <p>remove the attribute suspendInterval for a hostname.</p>
     *
     *  @param hostname tje hostname
     *  @return the suspendInterval for the hostname or <code>null</code>
     *          if the suspendInterval attribute was not defined for the hostname.
     */
    public java.lang.String removeSuspendInterval(String hostname) {
        initSuspendInterval();
        return (java.lang.String)m_suspendInterval.remove(hostname);
    }

    /**
     *  <p>Remove the attribute suspendInterval for all hostnames.</p>
     */
    public void removeAllSuspendInterval() {
        if (m_suspendInterval != null) {
            m_suspendInterval.clear();
        }
    }
   
    /**
     *  Get the set of hostnames which have the attribute suspendInterval set.
     *  @return set of hostnames
     */
    public Set<String> getSuspendIntervalKeys() {
        if (m_suspendInterval == null) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(m_suspendInterval.keySet());
        }
    }
   
    /**
     *  Get the number of hostnames which have the attribute suspendInterval set.
     *  @return the number of hostnames which have the attribute suspendInterval set.
     */
    public int getSuspendIntervalCount() {
        if (m_suspendInterval == null) {
            return 0;
        } else {
            return m_suspendInterval.size();
        }
    }
   
    /**
     *  Determine if any suspendInterval attribute is set
     *  @return <code>true</code> if the suspendInterval attribute is set
     */
    public boolean isSetSuspendInterval () {
        return (m_suspendInterval != null) && (!m_suspendInterval.isEmpty());
    }
   
    /**
     *  Determine if any suspendInterval attribute is for a hostname is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the suspendInterval attribute is set
     */
    public boolean isSetSuspendInterval(String hostname) {
        return (m_suspendInterval != null) && (m_suspendInterval.get(hostname) != null);
    }
   


    // Attribute minCpuInterval ------------------------------------------------

    // keyClassName for SGE_HOST = String

   
    private Map m_minCpuInterval;

    private void initMinCpuInterval() {
        if (m_minCpuInterval == null) {
            m_minCpuInterval = new LinkedHashMap();
        }
    }
   
    /**
     *  <p>Put the attribute minCpuInterval for a hostname.</p>
     *
     *  @param hostname    the hostname
     *  @param minCpuInterval  the minCpuInterval
     */
    public void putMinCpuInterval(String hostname, String minCpuInterval) {   
        initMinCpuInterval();
        m_minCpuInterval.put(hostname,

                            minCpuInterval

                            );
    }

    /**
     *  <p>Get the default value of the attribute minCpuInterval.</p>
     *  @return the default value of the attribute minCpuInterval
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultMinCpuInterval() {
        if (m_minCpuInterval == null) {
            throw new IllegalStateException("default value for attribute minCpuInterval not found");
        }
        java.lang.String ret = (java.lang.String)m_minCpuInterval.get("@/");
        if (ret == null) {
            throw new IllegalStateException("default value for attribute minCpuInterval not found");
        }

        return ret;

    }
   
    /**
     *  <p>Get the minCpuInterval attribute for a hostname.</p>
     *  @param   hostname   the hostname
     *  @return  the minCpuInterval attribute for the host or the
     *           default value of  minCpuInterval
     */
    public String getMinCpuInterval(String hostname) {
        initMinCpuInterval();
        if (m_minCpuInterval.containsKey(hostname)) {      
            java.lang.String ret = (java.lang.String)m_minCpuInterval.get(hostname);
            if (ret != null) {

                return ret;

            } else {
                return null;
            }
        } else {
            return getDefaultMinCpuInterval();
        }
    }

    /**
     *  Set <code>minCpuInterval</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param minCpuInterval  the minCpuInterval attribute
     */
    public void setDefaultMinCpuInterval(String minCpuInterval) {
        putMinCpuInterval("@/", minCpuInterval);
    }


    /**
     *  <p>remove the attribute minCpuInterval for a hostname.</p>
     *
     *  @param hostname tje hostname
     *  @return the minCpuInterval for the hostname or <code>null</code>
     *          if the minCpuInterval attribute was not defined for the hostname.
     */
    public java.lang.String removeMinCpuInterval(String hostname) {
        initMinCpuInterval();
        return (java.lang.String)m_minCpuInterval.remove(hostname);
    }

    /**
     *  <p>Remove the attribute minCpuInterval for all hostnames.</p>
     */
    public void removeAllMinCpuInterval() {
        if (m_minCpuInterval != null) {
            m_minCpuInterval.clear();
        }
    }
   
    /**
     *  Get the set of hostnames which have the attribute minCpuInterval set.
     *  @return set of hostnames
     */
    public Set<String> getMinCpuIntervalKeys() {
        if (m_minCpuInterval == null) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(m_minCpuInterval.keySet());
        }
    }
   
    /**
     *  Get the number of hostnames which have the attribute minCpuInterval set.
     *  @return the number of hostnames which have the attribute minCpuInterval set.
     */
    public int getMinCpuIntervalCount() {
        if (m_minCpuInterval == null) {
            return 0;
        } else {
            return m_minCpuInterval.size();
        }
    }
   
    /**
     *  Determine if any minCpuInterval attribute is set
     *  @return <code>true</code> if the minCpuInterval attribute is set
     */
    public boolean isSetMinCpuInterval () {
        return (m_minCpuInterval != null) && (!m_minCpuInterval.isEmpty());
    }
   
    /**
     *  Determine if any minCpuInterval attribute is for a hostname is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the minCpuInterval attribute is set
     */
    public boolean isSetMinCpuInterval(String hostname) {
        return (m_minCpuInterval != null) && (m_minCpuInterval.get(hostname) != null);
    }
   


    // Attribute notify ------------------------------------------------

    // keyClassName for SGE_HOST = String

   
    private Map m_notify;

    private void initNotify() {
        if (m_notify == null) {
            m_notify = new LinkedHashMap();
        }
    }
   
    /**
     *  <p>Put the attribute notify for a hostname.</p>
     *
     *  @param hostname    the hostname
     *  @param notify  the notify
     */
    public void putNotify(String hostname, String notify) {   
        initNotify();
        m_notify.put(hostname,

                            notify

                            );
    }

    /**
     *  <p>Get the default value of the attribute notify.</p>
     *  @return the default value of the attribute notify
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultNotify() {
        if (m_notify == null) {
            throw new IllegalStateException("default value for attribute notify not found");
        }
        java.lang.String ret = (java.lang.String)m_notify.get("@/");
        if (ret == null) {
            throw new IllegalStateException("default value for attribute notify not found");
        }

        return ret;

    }
   
    /**
     *  <p>Get the notify attribute for a hostname.</p>
     *  @param   hostname   the hostname
     *  @return  the notify attribute for the host or the
     *           default value of  notify
     */
    public String getNotify(String hostname) {
        initNotify();
        if (m_notify.containsKey(hostname)) {      
            java.lang.String ret = (java.lang.String)m_notify.get(hostname);
            if (ret != null) {

                return ret;

            } else {
                return null;
            }
        } else {
            return getDefaultNotify();
        }
    }

    /**
     *  Set <code>notify</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param notify  the notify attribute
     */
    public void setDefaultNotify(String notify) {
        putNotify("@/", notify);
    }


    /**
     *  <p>remove the attribute notify for a hostname.</p>
     *
     *  @param hostname tje hostname
     *  @return the notify for the hostname or <code>null</code>
     *          if the notify attribute was not defined for the hostname.
     */
    public java.lang.String removeNotify(String hostname) {
        initNotify();
        return (java.lang.String)m_notify.remove(hostname);
    }

    /**
     *  <p>Remove the attribute notify for all hostnames.</p>
     */
    public void removeAllNotify() {
        if (m_notify != null) {
            m_notify.clear();
        }
    }
   
    /**
     *  Get the set of hostnames which have the attribute notify set.
     *  @return set of hostnames
     */
    public Set<String> getNotifyKeys() {
        if (m_notify == null) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(m_notify.keySet());
        }
    }
   
    /**
     *  Get the number of hostnames which have the attribute notify set.
     *  @return the number of hostnames which have the attribute notify set.
     */
    public int getNotifyCount() {
        if (m_notify == null) {
            return 0;
        } else {
            return m_notify.size();
        }
    }
   
    /**
     *  Determine if any notify attribute is set
     *  @return <code>true</code> if the notify attribute is set
     */
    public boolean isSetNotify () {
        return (m_notify != null) && (!m_notify.isEmpty());
    }
   
    /**
     *  Determine if any notify attribute is for a hostname is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the notify attribute is set
     */
    public boolean isSetNotify(String hostname) {
        return (m_notify != null) && (m_notify.get(hostname) != null);
    }
   


    // Attribute tmpdir ------------------------------------------------

    // keyClassName for SGE_HOST = String

   
    private Map m_tmpdir;

    private void initTmpdir() {
        if (m_tmpdir == null) {
            m_tmpdir = new LinkedHashMap();
        }
    }
   
    /**
     *  <p>Put the attribute tmpdir for a hostname.</p>
     *
     *  @param hostname    the hostname
     *  @param tmpDir  the tmpDir
     */
    public void putTmpdir(String hostname, String tmpDir) {   
        initTmpdir();
        m_tmpdir.put(hostname,

                            tmpDir

                            );
    }

    /**
     *  <p>Get the default value of the attribute tmpdir.</p>
     *  @return the default value of the attribute tmpdir
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultTmpdir() {
        if (m_tmpdir == null) {
            throw new IllegalStateException("default value for attribute tmpdir not found");
        }
        java.lang.String ret = (java.lang.String)m_tmpdir.get("@/");
        if (ret == null) {
            throw new IllegalStateException("default value for attribute tmpdir not found");
        }

        return ret;

    }
   
    /**
     *  <p>Get the tmpdir attribute for a hostname.</p>
     *  @param   hostname   the hostname
     *  @return  the tmpdir attribute for the host or the
     *           default value of  tmpdir
     */
    public String getTmpdir(String hostname) {
        initTmpdir();
        if (m_tmpdir.containsKey(hostname)) {      
            java.lang.String ret = (java.lang.String)m_tmpdir.get(hostname);
            if (ret != null) {

                return ret;

            } else {
                return null;
            }
        } else {
            return getDefaultTmpdir();
        }
    }

    /**
     *  Set <code>tmpDir</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param tmpDir  the tmpDir attribute
     */
    public void setDefaultTmpdir(String tmpDir) {
        putTmpdir("@/", tmpDir);
    }


    /**
     *  <p>remove the attribute tmpdir for a hostname.</p>
     *
     *  @param hostname tje hostname
     *  @return the tmpDir for the hostname or <code>null</code>
     *          if the tmpDir attribute was not defined for the hostname.
     */
    public java.lang.String removeTmpdir(String hostname) {
        initTmpdir();
        return (java.lang.String)m_tmpdir.remove(hostname);
    }

    /**
     *  <p>Remove the attribute tmpdir for all hostnames.</p>
     */
    public void removeAllTmpdir() {
        if (m_tmpdir != null) {
            m_tmpdir.clear();
        }
    }
   
    /**
     *  Get the set of hostnames which have the attribute tmpdir set.
     *  @return set of hostnames
     */
    public Set<String> getTmpdirKeys() {
        if (m_tmpdir == null) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(m_tmpdir.keySet());
        }
    }
   
    /**
     *  Get the number of hostnames which have the attribute tmpdir set.
     *  @return the number of hostnames which have the attribute tmpdir set.
     */
    public int getTmpdirCount() {
        if (m_tmpdir == null) {
            return 0;
        } else {
            return m_tmpdir.size();
        }
    }
   
    /**
     *  Determine if any tmpdir attribute is set
     *  @return <code>true</code> if the tmpdir attribute is set
     */
    public boolean isSetTmpdir () {
        return (m_tmpdir != null) && (!m_tmpdir.isEmpty());
    }
   
    /**
     *  Determine if any tmpdir attribute is for a hostname is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the tmpdir attribute is set
     */
    public boolean isSetTmpdir(String hostname) {
        return (m_tmpdir != null) && (m_tmpdir.get(hostname) != null);
    }
   


    // Attribute shell ------------------------------------------------

    // keyClassName for SGE_HOST = String

   
    private Map m_shell;

    private void initShell() {
        if (m_shell == null) {
            m_shell = new LinkedHashMap();
        }
    }
   
    /**
     *  <p>Put the attribute shell for a hostname.</p>
     *
     *  @param hostname    the hostname
     *  @param shell  the shell
     */
    public void putShell(String hostname, String shell) {   
        initShell();
        m_shell.put(hostname,

                            shell

                            );
    }

    /**
     *  <p>Get the default value of the attribute shell.</p>
     *  @return the default value of the attribute shell
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultShell() {
        if (m_shell == null) {
            throw new IllegalStateException("default value for attribute shell not found");
        }
        java.lang.String ret = (java.lang.String)m_shell.get("@/");
        if (ret == null) {
            throw new IllegalStateException("default value for attribute shell not found");
        }

        return ret;

    }
   
    /**
     *  <p>Get the shell attribute for a hostname.</p>
     *  @param   hostname   the hostname
     *  @return  the shell attribute for the host or the
     *           default value of  shell
     */
    public String getShell(String hostname) {
        initShell();
        if (m_shell.containsKey(hostname)) {      
            java.lang.String ret = (java.lang.String)m_shell.get(hostname);
            if (ret != null) {

                return ret;

            } else {
                return null;
            }
        } else {
            return getDefaultShell();
        }
    }

    /**
     *  Set <code>shell</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param shell  the shell attribute
     */
    public void setDefaultShell(String shell) {
        putShell("@/", shell);
    }


    /**
     *  <p>remove the attribute shell for a hostname.</p>
     *
     *  @param hostname tje hostname
     *  @return the shell for the hostname or <code>null</code>
     *          if the shell attribute was not defined for the hostname.
     */
    public java.lang.String removeShell(String hostname) {
        initShell();
        return (java.lang.String)m_shell.remove(hostname);
    }

    /**
     *  <p>Remove the attribute shell for all hostnames.</p>
     */
    public void removeAllShell() {
        if (m_shell != null) {
            m_shell.clear();
        }
    }
   
    /**
     *  Get the set of hostnames which have the attribute shell set.
     *  @return set of hostnames
     */
    public Set<String> getShellKeys() {
        if (m_shell == null) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(m_shell.keySet());
        }
    }
   
    /**
     *  Get the number of hostnames which have the attribute shell set.
     *  @return the number of hostnames which have the attribute shell set.
     */
    public int getShellCount() {
        if (m_shell == null) {
            return 0;
        } else {
            return m_shell.size();
        }
    }
   
    /**
     *  Determine if any shell attribute is set
     *  @return <code>true</code> if the shell attribute is set
     */
    public boolean isSetShell () {
        return (m_shell != null) && (!m_shell.isEmpty());
    }
   
    /**
     *  Determine if any shell attribute is for a hostname is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the shell attribute is set
     */
    public boolean isSetShell(String hostname) {
        return (m_shell != null) && (m_shell.get(hostname) != null);
    }
   


    // Attribute calendar ------------------------------------------------

    // keyClassName for SGE_HOST = String

   
    private Map m_calendar;

    private void initCalendar() {
        if (m_calendar == null) {
            m_calendar = new LinkedHashMap();
        }
    }
   
    /**
     *  <p>Put the attribute calendar for a hostname.</p>
     *
     *  @param hostname    the hostname
     *  @param calendar  the calendar
     */
    public void putCalendar(String hostname, String calendar) {   
        initCalendar();
        m_calendar.put(hostname,

                            calendar

                            );
    }

    /**
     *  <p>Get the default value of the attribute calendar.</p>
     *  @return the default value of the attribute calendar
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultCalendar() {
        if (m_calendar == null) {
            throw new IllegalStateException("default value for attribute calendar not found");
        }
        java.lang.String ret = (java.lang.String)m_calendar.get("@/");
        if (ret == null) {
            throw new IllegalStateException("default value for attribute calendar not found");
        }

        return ret;

    }
   
    /**
     *  <p>Get the calendar attribute for a hostname.</p>
     *  @param   hostname   the hostname
     *  @return  the calendar attribute for the host or the
     *           default value of  calendar
     */
    public String getCalendar(String hostname) {
        initCalendar();
        if (m_calendar.containsKey(hostname)) {      
            java.lang.String ret = (java.lang.String)m_calendar.get(hostname);
            if (ret != null) {

                return ret;

            } else {
                return null;
            }
        } else {
            return getDefaultCalendar();
        }
    }

    /**
     *  Set <code>calendar</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param calendar  the calendar attribute
     */
    public void setDefaultCalendar(String calendar) {
        putCalendar("@/", calendar);
    }


    /**
     *  <p>remove the attribute calendar for a hostname.</p>
     *
     *  @param hostname tje hostname
     *  @return the calendar for the hostname or <code>null</code>
     *          if the calendar attribute was not defined for the hostname.
     */
    public java.lang.String removeCalendar(String hostname) {
        initCalendar();
        return (java.lang.String)m_calendar.remove(hostname);
    }

    /**
     *  <p>Remove the attribute calendar for all hostnames.</p>
     */
    public void removeAllCalendar() {
        if (m_calendar != null) {
            m_calendar.clear();
        }
    }
   
    /**
     *  Get the set of hostnames which have the attribute calendar set.
     *  @return set of hostnames
     */
    public Set<String> getCalendarKeys() {
        if (m_calendar == null) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(m_calendar.keySet());
        }
    }
   
    /**
     *  Get the number of hostnames which have the attribute calendar set.
     *  @return the number of hostnames which have the attribute calendar set.
     */
    public int getCalendarCount() {
        if (m_calendar == null) {
            return 0;
        } else {
            return m_calendar.size();
        }
    }
   
    /**
     *  Determine if any calendar attribute is set
     *  @return <code>true</code> if the calendar attribute is set
     */
    public boolean isSetCalendar () {
        return (m_calendar != null) && (!m_calendar.isEmpty());
    }
   
    /**
     *  Determine if any calendar attribute is for a hostname is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the calendar attribute is set
     */
    public boolean isSetCalendar(String hostname) {
        return (m_calendar != null) && (m_calendar.get(hostname) != null);
    }
   


    // Attribute priority ------------------------------------------------

    // keyClassName for SGE_HOST = String

   
    private Map m_priority;

    private void initPriority() {
        if (m_priority == null) {
            m_priority = new LinkedHashMap();
        }
    }
   
    /**
     *  <p>Put the attribute priority for a hostname.</p>
     *
     *  @param hostname    the hostname
     *  @param priority  the priority
     */
    public void putPriority(String hostname, String priority) {   
        initPriority();
        m_priority.put(hostname,

                            priority

                            );
    }

    /**
     *  <p>Get the default value of the attribute priority.</p>
     *  @return the default value of the attribute priority
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultPriority() {
        if (m_priority == null) {
            throw new IllegalStateException("default value for attribute priority not found");
        }
        java.lang.String ret = (java.lang.String)m_priority.get("@/");
        if (ret == null) {
            throw new IllegalStateException("default value for attribute priority not found");
        }

        return ret;

    }
   
    /**
     *  <p>Get the priority attribute for a hostname.</p>
     *  @param   hostname   the hostname
     *  @return  the priority attribute for the host or the
     *           default value of  priority
     */
    public String getPriority(String hostname) {
        initPriority();
        if (m_priority.containsKey(hostname)) {      
            java.lang.String ret = (java.lang.String)m_priority.get(hostname);
            if (ret != null) {

                return ret;

            } else {
                return null;
            }
        } else {
            return getDefaultPriority();
        }
    }

    /**
     *  Set <code>priority</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param priority  the priority attribute
     */
    public void setDefaultPriority(String priority) {
        putPriority("@/", priority);
    }


    /**
     *  <p>remove the attribute priority for a hostname.</p>
     *
     *  @param hostname tje hostname
     *  @return the priority for the hostname or <code>null</code>
     *          if the priority attribute was not defined for the hostname.
     */
    public java.lang.String removePriority(String hostname) {
        initPriority();
        return (java.lang.String)m_priority.remove(hostname);
    }

    /**
     *  <p>Remove the attribute priority for all hostnames.</p>
     */
    public void removeAllPriority() {
        if (m_priority != null) {
            m_priority.clear();
        }
    }
   
    /**
     *  Get the set of hostnames which have the attribute priority set.
     *  @return set of hostnames
     */
    public Set<String> getPriorityKeys() {
        if (m_priority == null) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(m_priority.keySet());
        }
    }
   
    /**
     *  Get the number of hostnames which have the attribute priority set.
     *  @return the number of hostnames which have the attribute priority set.
     */
    public int getPriorityCount() {
        if (m_priority == null) {
            return 0;
        } else {
            return m_priority.size();
        }
    }
   
    /**
     *  Determine if any priority attribute is set
     *  @return <code>true</code> if the priority attribute is set
     */
    public boolean isSetPriority () {
        return (m_priority != null) && (!m_priority.isEmpty());
    }
   
    /**
     *  Determine if any priority attribute is for a hostname is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the priority attribute is set
     */
    public boolean isSetPriority(String hostname) {
        return (m_priority != null) && (m_priority.get(hostname) != null);
    }
   


    // Attribute processors ------------------------------------------------

    // keyClassName for SGE_HOST = String

   
    private Map m_processors;

    private void initProcessors() {
        if (m_processors == null) {
            m_processors = new LinkedHashMap();
        }
    }
   
    /**
     *  <p>Put the attribute processors for a hostname.</p>
     *
     *  @param hostname    the hostname
     *  @param processors  the processors
     */
    public void putProcessors(String hostname, String processors) {   
        initProcessors();
        m_processors.put(hostname,

                            processors

                            );
    }

    /**
     *  <p>Get the default value of the attribute processors.</p>
     *  @return the default value of the attribute processors
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultProcessors() {
        if (m_processors == null) {
            throw new IllegalStateException("default value for attribute processors not found");
        }
        java.lang.String ret = (java.lang.String)m_processors.get("@/");
        if (ret == null) {
            throw new IllegalStateException("default value for attribute processors not found");
        }

        return ret;

    }
   
    /**
     *  <p>Get the processors attribute for a hostname.</p>
     *  @param   hostname   the hostname
     *  @return  the processors attribute for the host or the
     *           default value of  processors
     */
    public String getProcessors(String hostname) {
        initProcessors();
        if (m_processors.containsKey(hostname)) {      
            java.lang.String ret = (java.lang.String)m_processors.get(hostname);
            if (ret != null) {

                return ret;

            } else {
                return null;
            }
        } else {
            return getDefaultProcessors();
        }
    }

    /**
     *  Set <code>processors</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param processors  the processors attribute
     */
    public void setDefaultProcessors(String processors) {
        putProcessors("@/", processors);
    }


    /**
     *  <p>remove the attribute processors for a hostname.</p>
     *
     *  @param hostname tje hostname
     *  @return the processors for the hostname or <code>null</code>
     *          if the processors attribute was not defined for the hostname.
     */
    public java.lang.String removeProcessors(String hostname) {
        initProcessors();
        return (java.lang.String)m_processors.remove(hostname);
    }

    /**
     *  <p>Remove the attribute processors for all hostnames.</p>
     */
    public void removeAllProcessors() {
        if (m_processors != null) {
            m_processors.clear();
        }
    }
   
    /**
     *  Get the set of hostnames which have the attribute processors set.
     *  @return set of hostnames
     */
    public Set<String> getProcessorsKeys() {
        if (m_processors == null) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(m_processors.keySet());
        }
    }
   
    /**
     *  Get the number of hostnames which have the attribute processors set.
     *  @return the number of hostnames which have the attribute processors set.
     */
    public int getProcessorsCount() {
        if (m_processors == null) {
            return 0;
        } else {
            return m_processors.size();
        }
    }
   
    /**
     *  Determine if any processors attribute is set
     *  @return <code>true</code> if the processors attribute is set
     */
    public boolean isSetProcessors () {
        return (m_processors != null) && (!m_processors.isEmpty());
    }
   
    /**
     *  Determine if any processors attribute is for a hostname is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the processors attribute is set
     */
    public boolean isSetProcessors(String hostname) {
        return (m_processors != null) && (m_processors.get(hostname) != null);
    }
   


    // Attribute prolog ------------------------------------------------

    // keyClassName for SGE_HOST = String

   
    private Map m_prolog;

    private void initProlog() {
        if (m_prolog == null) {
            m_prolog = new LinkedHashMap();
        }
    }
   
    /**
     *  <p>Put the attribute prolog for a hostname.</p>
     *
     *  @param hostname    the hostname
     *  @param prolog  the prolog
     */
    public void putProlog(String hostname, String prolog) {   
        initProlog();
        m_prolog.put(hostname,

                            prolog

                            );
    }

    /**
     *  <p>Get the default value of the attribute prolog.</p>
     *  @return the default value of the attribute prolog
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultProlog() {
        if (m_prolog == null) {
            throw new IllegalStateException("default value for attribute prolog not found");
        }
        java.lang.String ret = (java.lang.String)m_prolog.get("@/");
        if (ret == null) {
            throw new IllegalStateException("default value for attribute prolog not found");
        }

        return ret;

    }
   
    /**
     *  <p>Get the prolog attribute for a hostname.</p>
     *  @param   hostname   the hostname
     *  @return  the prolog attribute for the host or the
     *           default value of  prolog
     */
    public String getProlog(String hostname) {
        initProlog();
        if (m_prolog.containsKey(hostname)) {      
            java.lang.String ret = (java.lang.String)m_prolog.get(hostname);
            if (ret != null) {

                return ret;

            } else {
                return null;
            }
        } else {
            return getDefaultProlog();
        }
    }

    /**
     *  Set <code>prolog</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param prolog  the prolog attribute
     */
    public void setDefaultProlog(String prolog) {
        putProlog("@/", prolog);
    }


    /**
     *  <p>remove the attribute prolog for a hostname.</p>
     *
     *  @param hostname tje hostname
     *  @return the prolog for the hostname or <code>null</code>
     *          if the prolog attribute was not defined for the hostname.
     */
    public java.lang.String removeProlog(String hostname) {
        initProlog();
        return (java.lang.String)m_prolog.remove(hostname);
    }

    /**
     *  <p>Remove the attribute prolog for all hostnames.</p>
     */
    public void removeAllProlog() {
        if (m_prolog != null) {
            m_prolog.clear();
        }
    }
   
    /**
     *  Get the set of hostnames which have the attribute prolog set.
     *  @return set of hostnames
     */
    public Set<String> getPrologKeys() {
        if (m_prolog == null) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(m_prolog.keySet());
        }
    }
   
    /**
     *  Get the number of hostnames which have the attribute prolog set.
     *  @return the number of hostnames which have the attribute prolog set.
     */
    public int getPrologCount() {
        if (m_prolog == null) {
            return 0;
        } else {
            return m_prolog.size();
        }
    }
   
    /**
     *  Determine if any prolog attribute is set
     *  @return <code>true</code> if the prolog attribute is set
     */
    public boolean isSetProlog () {
        return (m_prolog != null) && (!m_prolog.isEmpty());
    }
   
    /**
     *  Determine if any prolog attribute is for a hostname is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the prolog attribute is set
     */
    public boolean isSetProlog(String hostname) {
        return (m_prolog != null) && (m_prolog.get(hostname) != null);
    }
   


    // Attribute epilog ------------------------------------------------

    // keyClassName for SGE_HOST = String

   
    private Map m_epilog;

    private void initEpilog() {
        if (m_epilog == null) {
            m_epilog = new LinkedHashMap();
        }
    }
   
    /**
     *  <p>Put the attribute epilog for a hostname.</p>
     *
     *  @param hostname    the hostname
     *  @param epilog  the epilog
     */
    public void putEpilog(String hostname, String epilog) {   
        initEpilog();
        m_epilog.put(hostname,

                            epilog

                            );
    }

    /**
     *  <p>Get the default value of the attribute epilog.</p>
     *  @return the default value of the attribute epilog
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultEpilog() {
        if (m_epilog == null) {
            throw new IllegalStateException("default value for attribute epilog not found");
        }
        java.lang.String ret = (java.lang.String)m_epilog.get("@/");
        if (ret == null) {
            throw new IllegalStateException("default value for attribute epilog not found");
        }

        return ret;

    }
   
    /**
     *  <p>Get the epilog attribute for a hostname.</p>
     *  @param   hostname   the hostname
     *  @return  the epilog attribute for the host or the
     *           default value of  epilog
     */
    public String getEpilog(String hostname) {
        initEpilog();
        if (m_epilog.containsKey(hostname)) {      
            java.lang.String ret = (java.lang.String)m_epilog.get(hostname);
            if (ret != null) {

                return ret;

            } else {
                return null;
            }
        } else {
            return getDefaultEpilog();
        }
    }

    /**
     *  Set <code>epilog</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param epilog  the epilog attribute
     */
    public void setDefaultEpilog(String epilog) {
        putEpilog("@/", epilog);
    }


    /**
     *  <p>remove the attribute epilog for a hostname.</p>
     *
     *  @param hostname tje hostname
     *  @return the epilog for the hostname or <code>null</code>
     *          if the epilog attribute was not defined for the hostname.
     */
    public java.lang.String removeEpilog(String hostname) {
        initEpilog();
        return (java.lang.String)m_epilog.remove(hostname);
    }

    /**
     *  <p>Remove the attribute epilog for all hostnames.</p>
     */
    public void removeAllEpilog() {
        if (m_epilog != null) {
            m_epilog.clear();
        }
    }
   
    /**
     *  Get the set of hostnames which have the attribute epilog set.
     *  @return set of hostnames
     */
    public Set<String> getEpilogKeys() {
        if (m_epilog == null) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(m_epilog.keySet());
        }
    }
   
    /**
     *  Get the number of hostnames which have the attribute epilog set.
     *  @return the number of hostnames which have the attribute epilog set.
     */
    public int getEpilogCount() {
        if (m_epilog == null) {
            return 0;
        } else {
            return m_epilog.size();
        }
    }
   
    /**
     *  Determine if any epilog attribute is set
     *  @return <code>true</code> if the epilog attribute is set
     */
    public boolean isSetEpilog () {
        return (m_epilog != null) && (!m_epilog.isEmpty());
    }
   
    /**
     *  Determine if any epilog attribute is for a hostname is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the epilog attribute is set
     */
    public boolean isSetEpilog(String hostname) {
        return (m_epilog != null) && (m_epilog.get(hostname) != null);
    }
   


    // Attribute shellStartMode ------------------------------------------------

    // keyClassName for SGE_HOST = String

   
    private Map m_shellStartMode;

    private void initShellStartMode() {
        if (m_shellStartMode == null) {
            m_shellStartMode = new LinkedHashMap();
        }
    }
   
    /**
     *  <p>Put the attribute shellStartMode for a hostname.</p>
     *
     *  @param hostname    the hostname
     *  @param shellStartMode  the shellStartMode
     */
    public void putShellStartMode(String hostname, String shellStartMode) {   
        initShellStartMode();
        m_shellStartMode.put(hostname,

                            shellStartMode

                            );
    }

    /**
     *  <p>Get the default value of the attribute shellStartMode.</p>
     *  @return the default value of the attribute shellStartMode
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultShellStartMode() {
        if (m_shellStartMode == null) {
            throw new IllegalStateException("default value for attribute shellStartMode not found");
        }
        java.lang.String ret = (java.lang.String)m_shellStartMode.get("@/");
        if (ret == null) {
            throw new IllegalStateException("default value for attribute shellStartMode not found");
        }

        return ret;

    }
   
    /**
     *  <p>Get the shellStartMode attribute for a hostname.</p>
     *  @param   hostname   the hostname
     *  @return  the shellStartMode attribute for the host or the
     *           default value of  shellStartMode
     */
    public String getShellStartMode(String hostname) {
        initShellStartMode();
        if (m_shellStartMode.containsKey(hostname)) {      
            java.lang.String ret = (java.lang.String)m_shellStartMode.get(hostname);
            if (ret != null) {

                return ret;

            } else {
                return null;
            }
        } else {
            return getDefaultShellStartMode();
        }
    }

    /**
     *  Set <code>shellStartMode</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param shellStartMode  the shellStartMode attribute
     */
    public void setDefaultShellStartMode(String shellStartMode) {
        putShellStartMode("@/", shellStartMode);
    }


    /**
     *  <p>remove the attribute shellStartMode for a hostname.</p>
     *
     *  @param hostname tje hostname
     *  @return the shellStartMode for the hostname or <code>null</code>
     *          if the shellStartMode attribute was not defined for the hostname.
     */
    public java.lang.String removeShellStartMode(String hostname) {
        initShellStartMode();
        return (java.lang.String)m_shellStartMode.remove(hostname);
    }

    /**
     *  <p>Remove the attribute shellStartMode for all hostnames.</p>
     */
    public void removeAllShellStartMode() {
        if (m_shellStartMode != null) {
            m_shellStartMode.clear();
        }
    }
   
    /**
     *  Get the set of hostnames which have the attribute shellStartMode set.
     *  @return set of hostnames
     */
    public Set<String> getShellStartModeKeys() {
        if (m_shellStartMode == null) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(m_shellStartMode.keySet());
        }
    }
   
    /**
     *  Get the number of hostnames which have the attribute shellStartMode set.
     *  @return the number of hostnames which have the attribute shellStartMode set.
     */
    public int getShellStartModeCount() {
        if (m_shellStartMode == null) {
            return 0;
        } else {
            return m_shellStartMode.size();
        }
    }
   
    /**
     *  Determine if any shellStartMode attribute is set
     *  @return <code>true</code> if the shellStartMode attribute is set
     */
    public boolean isSetShellStartMode () {
        return (m_shellStartMode != null) && (!m_shellStartMode.isEmpty());
    }
   
    /**
     *  Determine if any shellStartMode attribute is for a hostname is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the shellStartMode attribute is set
     */
    public boolean isSetShellStartMode(String hostname) {
        return (m_shellStartMode != null) && (m_shellStartMode.get(hostname) != null);
    }
   


    // Attribute starterMethod ------------------------------------------------

    // keyClassName for SGE_HOST = String

   
    private Map m_starterMethod;

    private void initStarterMethod() {
        if (m_starterMethod == null) {
            m_starterMethod = new LinkedHashMap();
        }
    }
   
    /**
     *  <p>Put the attribute starterMethod for a hostname.</p>
     *
     *  @param hostname    the hostname
     *  @param starterMethod  the starterMethod
     */
    public void putStarterMethod(String hostname, String starterMethod) {   
        initStarterMethod();
        m_starterMethod.put(hostname,

                            starterMethod

                            );
    }

    /**
     *  <p>Get the default value of the attribute starterMethod.</p>
     *  @return the default value of the attribute starterMethod
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultStarterMethod() {
        if (m_starterMethod == null) {
            throw new IllegalStateException("default value for attribute starterMethod not found");
        }
        java.lang.String ret = (java.lang.String)m_starterMethod.get("@/");
        if (ret == null) {
            throw new IllegalStateException("default value for attribute starterMethod not found");
        }

        return ret;

    }
   
    /**
     *  <p>Get the starterMethod attribute for a hostname.</p>
     *  @param   hostname   the hostname
     *  @return  the starterMethod attribute for the host or the
     *           default value of  starterMethod
     */
    public String getStarterMethod(String hostname) {
        initStarterMethod();
        if (m_starterMethod.containsKey(hostname)) {      
            java.lang.String ret = (java.lang.String)m_starterMethod.get(hostname);
            if (ret != null) {

                return ret;

            } else {
                return null;
            }
        } else {
            return getDefaultStarterMethod();
        }
    }

    /**
     *  Set <code>starterMethod</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param starterMethod  the starterMethod attribute
     */
    public void setDefaultStarterMethod(String starterMethod) {
        putStarterMethod("@/", starterMethod);
    }


    /**
     *  <p>remove the attribute starterMethod for a hostname.</p>
     *
     *  @param hostname tje hostname
     *  @return the starterMethod for the hostname or <code>null</code>
     *          if the starterMethod attribute was not defined for the hostname.
     */
    public java.lang.String removeStarterMethod(String hostname) {
        initStarterMethod();
        return (java.lang.String)m_starterMethod.remove(hostname);
    }

    /**
     *  <p>Remove the attribute starterMethod for all hostnames.</p>
     */
    public void removeAllStarterMethod() {
        if (m_starterMethod != null) {
            m_starterMethod.clear();
        }
    }
   
    /**
     *  Get the set of hostnames which have the attribute starterMethod set.
     *  @return set of hostnames
     */
    public Set<String> getStarterMethodKeys() {
        if (m_starterMethod == null) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(m_starterMethod.keySet());
        }
    }
   
    /**
     *  Get the number of hostnames which have the attribute starterMethod set.
     *  @return the number of hostnames which have the attribute starterMethod set.
     */
    public int getStarterMethodCount() {
        if (m_starterMethod == null) {
            return 0;
        } else {
            return m_starterMethod.size();
        }
    }
   
    /**
     *  Determine if any starterMethod attribute is set
     *  @return <code>true</code> if the starterMethod attribute is set
     */
    public boolean isSetStarterMethod () {
        return (m_starterMethod != null) && (!m_starterMethod.isEmpty());
    }
   
    /**
     *  Determine if any starterMethod attribute is for a hostname is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the starterMethod attribute is set
     */
    public boolean isSetStarterMethod(String hostname) {
        return (m_starterMethod != null) && (m_starterMethod.get(hostname) != null);
    }
   


    // Attribute suspendMethod ------------------------------------------------

    // keyClassName for SGE_HOST = String

   
    private Map m_suspendMethod;

    private void initSuspendMethod() {
        if (m_suspendMethod == null) {
            m_suspendMethod = new LinkedHashMap();
        }
    }
   
    /**
     *  <p>Put the attribute suspendMethod for a hostname.</p>
     *
     *  @param hostname    the hostname
     *  @param suspendMethod  the suspendMethod
     */
    public void putSuspendMethod(String hostname, String suspendMethod) {   
        initSuspendMethod();
        m_suspendMethod.put(hostname,

                            suspendMethod

                            );
    }

    /**
     *  <p>Get the default value of the attribute suspendMethod.</p>
     *  @return the default value of the attribute suspendMethod
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultSuspendMethod() {
        if (m_suspendMethod == null) {
            throw new IllegalStateException("default value for attribute suspendMethod not found");
        }
        java.lang.String ret = (java.lang.String)m_suspendMethod.get("@/");
        if (ret == null) {
            throw new IllegalStateException("default value for attribute suspendMethod not found");
        }

        return ret;

    }
   
    /**
     *  <p>Get the suspendMethod attribute for a hostname.</p>
     *  @param   hostname   the hostname
     *  @return  the suspendMethod attribute for the host or the
     *           default value of  suspendMethod
     */
    public String getSuspendMethod(String hostname) {
        initSuspendMethod();
        if (m_suspendMethod.containsKey(hostname)) {      
            java.lang.String ret = (java.lang.String)m_suspendMethod.get(hostname);
            if (ret != null) {

                return ret;

            } else {
                return null;
            }
        } else {
            return getDefaultSuspendMethod();
        }
    }

    /**
     *  Set <code>suspendMethod</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param suspendMethod  the suspendMethod attribute
     */
    public void setDefaultSuspendMethod(String suspendMethod) {
        putSuspendMethod("@/", suspendMethod);
    }


    /**
     *  <p>remove the attribute suspendMethod for a hostname.</p>
     *
     *  @param hostname tje hostname
     *  @return the suspendMethod for the hostname or <code>null</code>
     *          if the suspendMethod attribute was not defined for the hostname.
     */
    public java.lang.String removeSuspendMethod(String hostname) {
        initSuspendMethod();
        return (java.lang.String)m_suspendMethod.remove(hostname);
    }

    /**
     *  <p>Remove the attribute suspendMethod for all hostnames.</p>
     */
    public void removeAllSuspendMethod() {
        if (m_suspendMethod != null) {
            m_suspendMethod.clear();
        }
    }
   
    /**
     *  Get the set of hostnames which have the attribute suspendMethod set.
     *  @return set of hostnames
     */
    public Set<String> getSuspendMethodKeys() {
        if (m_suspendMethod == null) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(m_suspendMethod.keySet());
        }
    }
   
    /**
     *  Get the number of hostnames which have the attribute suspendMethod set.
     *  @return the number of hostnames which have the attribute suspendMethod set.
     */
    public int getSuspendMethodCount() {
        if (m_suspendMethod == null) {
            return 0;
        } else {
            return m_suspendMethod.size();
        }
    }
   
    /**
     *  Determine if any suspendMethod attribute is set
     *  @return <code>true</code> if the suspendMethod attribute is set
     */
    public boolean isSetSuspendMethod () {
        return (m_suspendMethod != null) && (!m_suspendMethod.isEmpty());
    }
   
    /**
     *  Determine if any suspendMethod attribute is for a hostname is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the suspendMethod attribute is set
     */
    public boolean isSetSuspendMethod(String hostname) {
        return (m_suspendMethod != null) && (m_suspendMethod.get(hostname) != null);
    }
   


    // Attribute resumeMethod ------------------------------------------------

    // keyClassName for SGE_HOST = String

   
    private Map m_resumeMethod;

    private void initResumeMethod() {
        if (m_resumeMethod == null) {
            m_resumeMethod = new LinkedHashMap();
        }
    }
   
    /**
     *  <p>Put the attribute resumeMethod for a hostname.</p>
     *
     *  @param hostname    the hostname
     *  @param resumeMethod  the resumeMethod
     */
    public void putResumeMethod(String hostname, String resumeMethod) {   
        initResumeMethod();
        m_resumeMethod.put(hostname,

                            resumeMethod

                            );
    }

    /**
     *  <p>Get the default value of the attribute resumeMethod.</p>
     *  @return the default value of the attribute resumeMethod
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultResumeMethod() {
        if (m_resumeMethod == null) {
            throw new IllegalStateException("default value for attribute resumeMethod not found");
        }
        java.lang.String ret = (java.lang.String)m_resumeMethod.get("@/");
        if (ret == null) {
            throw new IllegalStateException("default value for attribute resumeMethod not found");
        }

        return ret;

    }
   
    /**
     *  <p>Get the resumeMethod attribute for a hostname.</p>
     *  @param   hostname   the hostname
     *  @return  the resumeMethod attribute for the host or the
     *           default value of  resumeMethod
     */
    public String getResumeMethod(String hostname) {
        initResumeMethod();
        if (m_resumeMethod.containsKey(hostname)) {      
            java.lang.String ret = (java.lang.String)m_resumeMethod.get(hostname);
            if (ret != null) {

                return ret;

            } else {
                return null;
            }
        } else {
            return getDefaultResumeMethod();
        }
    }

    /**
     *  Set <code>resumeMethod</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param resumeMethod  the resumeMethod attribute
     */
    public void setDefaultResumeMethod(String resumeMethod) {
        putResumeMethod("@/", resumeMethod);
    }


    /**
     *  <p>remove the attribute resumeMethod for a hostname.</p>
     *
     *  @param hostname tje hostname
     *  @return the resumeMethod for the hostname or <code>null</code>
     *          if the resumeMethod attribute was not defined for the hostname.
     */
    public java.lang.String removeResumeMethod(String hostname) {
        initResumeMethod();
        return (java.lang.String)m_resumeMethod.remove(hostname);
    }

    /**
     *  <p>Remove the attribute resumeMethod for all hostnames.</p>
     */
    public void removeAllResumeMethod() {
        if (m_resumeMethod != null) {
            m_resumeMethod.clear();
        }
    }
   
    /**
     *  Get the set of hostnames which have the attribute resumeMethod set.
     *  @return set of hostnames
     */
    public Set<String> getResumeMethodKeys() {
        if (m_resumeMethod == null) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(m_resumeMethod.keySet());
        }
    }
   
    /**
     *  Get the number of hostnames which have the attribute resumeMethod set.
     *  @return the number of hostnames which have the attribute resumeMethod set.
     */
    public int getResumeMethodCount() {
        if (m_resumeMethod == null) {
            return 0;
        } else {
            return m_resumeMethod.size();
        }
    }
   
    /**
     *  Determine if any resumeMethod attribute is set
     *  @return <code>true</code> if the resumeMethod attribute is set
     */
    public boolean isSetResumeMethod () {
        return (m_resumeMethod != null) && (!m_resumeMethod.isEmpty());
    }
   
    /**
     *  Determine if any resumeMethod attribute is for a hostname is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the resumeMethod attribute is set
     */
    public boolean isSetResumeMethod(String hostname) {
        return (m_resumeMethod != null) && (m_resumeMethod.get(hostname) != null);
    }
   


    // Attribute terminateMethod ------------------------------------------------

    // keyClassName for SGE_HOST = String

   
    private Map m_terminateMethod;

    private void initTerminateMethod() {
        if (m_terminateMethod == null) {
            m_terminateMethod = new LinkedHashMap();
        }
    }
   
    /**
     *  <p>Put the attribute terminateMethod for a hostname.</p>
     *
     *  @param hostname    the hostname
     *  @param terminateMethod  the terminateMethod
     */
    public void putTerminateMethod(String hostname, String terminateMethod) {   
        initTerminateMethod();
        m_terminateMethod.put(hostname,

                            terminateMethod

                            );
    }

    /**
     *  <p>Get the default value of the attribute terminateMethod.</p>
     *  @return the default value of the attribute terminateMethod
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultTerminateMethod() {
        if (m_terminateMethod == null) {
            throw new IllegalStateException("default value for attribute terminateMethod not found");
        }
        java.lang.String ret = (java.lang.String)m_terminateMethod.get("@/");
        if (ret == null) {
            throw new IllegalStateException("default value for attribute terminateMethod not found");
        }

        return ret;

    }
   
    /**
     *  <p>Get the terminateMethod attribute for a hostname.</p>
     *  @param   hostname   the hostname
     *  @return  the terminateMethod attribute for the host or the
     *           default value of  terminateMethod
     */
    public String getTerminateMethod(String hostname) {
        initTerminateMethod();
        if (m_terminateMethod.containsKey(hostname)) {      
            java.lang.String ret = (java.lang.String)m_terminateMethod.get(hostname);
            if (ret != null) {

                return ret;

            } else {
                return null;
            }
        } else {
            return getDefaultTerminateMethod();
        }
    }

    /**
     *  Set <code>terminateMethod</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param terminateMethod  the terminateMethod attribute
     */
    public void setDefaultTerminateMethod(String terminateMethod) {
        putTerminateMethod("@/", terminateMethod);
    }


    /**
     *  <p>remove the attribute terminateMethod for a hostname.</p>
     *
     *  @param hostname tje hostname
     *  @return the terminateMethod for the hostname or <code>null</code>
     *          if the terminateMethod attribute was not defined for the hostname.
     */
    public java.lang.String removeTerminateMethod(String hostname) {
        initTerminateMethod();
        return (java.lang.String)m_terminateMethod.remove(hostname);
    }

    /**
     *  <p>Remove the attribute terminateMethod for all hostnames.</p>
     */
    public void removeAllTerminateMethod() {
        if (m_terminateMethod != null) {
            m_terminateMethod.clear();
        }
    }
   
    /**
     *  Get the set of hostnames which have the attribute terminateMethod set.
     *  @return set of hostnames
     */
    public Set<String> getTerminateMethodKeys() {
        if (m_terminateMethod == null) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(m_terminateMethod.keySet());
        }
    }
   
    /**
     *  Get the number of hostnames which have the attribute terminateMethod set.
     *  @return the number of hostnames which have the attribute terminateMethod set.
     */
    public int getTerminateMethodCount() {
        if (m_terminateMethod == null) {
            return 0;
        } else {
            return m_terminateMethod.size();
        }
    }
   
    /**
     *  Determine if any terminateMethod attribute is set
     *  @return <code>true</code> if the terminateMethod attribute is set
     */
    public boolean isSetTerminateMethod () {
        return (m_terminateMethod != null) && (!m_terminateMethod.isEmpty());
    }
   
    /**
     *  Determine if any terminateMethod attribute is for a hostname is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the terminateMethod attribute is set
     */
    public boolean isSetTerminateMethod(String hostname) {
        return (m_terminateMethod != null) && (m_terminateMethod.get(hostname) != null);
    }
   


    // Attribute initialState ------------------------------------------------

    // keyClassName for SGE_HOST = String

   
    private Map m_initialState;

    private void initInitialState() {
        if (m_initialState == null) {
            m_initialState = new LinkedHashMap();
        }
    }
   
    /**
     *  <p>Put the attribute initialState for a hostname.</p>
     *
     *  @param hostname    the hostname
     *  @param initialState  the initialState
     */
    public void putInitialState(String hostname, String initialState) {   
        initInitialState();
        m_initialState.put(hostname,

                            initialState

                            );
    }

    /**
     *  <p>Get the default value of the attribute initialState.</p>
     *  @return the default value of the attribute initialState
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultInitialState() {
        if (m_initialState == null) {
            throw new IllegalStateException("default value for attribute initialState not found");
        }
        java.lang.String ret = (java.lang.String)m_initialState.get("@/");
        if (ret == null) {
            throw new IllegalStateException("default value for attribute initialState not found");
        }

        return ret;

    }
   
    /**
     *  <p>Get the initialState attribute for a hostname.</p>
     *  @param   hostname   the hostname
     *  @return  the initialState attribute for the host or the
     *           default value of  initialState
     */
    public String getInitialState(String hostname) {
        initInitialState();
        if (m_initialState.containsKey(hostname)) {      
            java.lang.String ret = (java.lang.String)m_initialState.get(hostname);
            if (ret != null) {

                return ret;

            } else {
                return null;
            }
        } else {
            return getDefaultInitialState();
        }
    }

    /**
     *  Set <code>initialState</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param initialState  the initialState attribute
     */
    public void setDefaultInitialState(String initialState) {
        putInitialState("@/", initialState);
    }


    /**
     *  <p>remove the attribute initialState for a hostname.</p>
     *
     *  @param hostname tje hostname
     *  @return the initialState for the hostname or <code>null</code>
     *          if the initialState attribute was not defined for the hostname.
     */
    public java.lang.String removeInitialState(String hostname) {
        initInitialState();
        return (java.lang.String)m_initialState.remove(hostname);
    }

    /**
     *  <p>Remove the attribute initialState for all hostnames.</p>
     */
    public void removeAllInitialState() {
        if (m_initialState != null) {
            m_initialState.clear();
        }
    }
   
    /**
     *  Get the set of hostnames which have the attribute initialState set.
     *  @return set of hostnames
     */
    public Set<String> getInitialStateKeys() {
        if (m_initialState == null) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(m_initialState.keySet());
        }
    }
   
    /**
     *  Get the number of hostnames which have the attribute initialState set.
     *  @return the number of hostnames which have the attribute initialState set.
     */
    public int getInitialStateCount() {
        if (m_initialState == null) {
            return 0;
        } else {
            return m_initialState.size();
        }
    }
   
    /**
     *  Determine if any initialState attribute is set
     *  @return <code>true</code> if the initialState attribute is set
     */
    public boolean isSetInitialState () {
        return (m_initialState != null) && (!m_initialState.isEmpty());
    }
   
    /**
     *  Determine if any initialState attribute is for a hostname is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the initialState attribute is set
     */
    public boolean isSetInitialState(String hostname) {
        return (m_initialState != null) && (m_initialState.get(hostname) != null);
    }
   


    // Attribute peList ------------------------------------------------

    private Map m_pe;
    
    private void initPe() {
        if (m_pe == null) {
            m_pe = new LinkedHashMap();
        }
    }
   
    /**
     *  Get the value of a hostname at an index.
     *  @param hostname the hostname
     *  @param index the index
     */
    public String getPe(String hostname, int index) {
        initPe();
        List list = (List)m_pe.get(hostname);
        if (list == null || index < 0 || index >= list.size()) {
            throw new IllegalArgumentException("No pe for " + hostname + "[" + index + "] set");
        }
        String ret = (String)list.get(index);

        return ret;

    }
   
    /**
     *  Get the number of values for a hostname
     *  @param hostname the hostname
     */
    public int getPeCount(String hostname) {
       if (m_pe != null) {
            List list = (List)m_pe.get(hostname);
            if (list != null) {
                return list.size();
            }
        }
        return 0;
    }
   
    /**
     *  Add a pe attribute to a hostname.
     *
     *  @param hostname  the hostname
     *  @param pe the pe attribute
     */
    public void addPe(String hostname, String pe) {
        initPe();
        List list = (List)m_pe.get(hostname);
        if (list == null) {
            list = new LinkedList();
            m_pe.put(hostname, list);
        }

        list.add(pe);      
   
    }

    /**
     *  Initialize <code>pe</code> attribute for a <code>hostname</code> 
     *  with an empty list.
     *
     *  @param hostname  the hostname
     */
    public void addEmptyPe(String hostname) {
        initPe();
        List list = (List)m_pe.get(hostname);
        if (list == null) {
            list = new LinkedList();
            m_pe.put(hostname, list);
        }
    }
   
    /**
     *  Set a pe attribute for a hostname.
     *
     *  @param hostname  the hostname
     *  @param index  index of the pe attribute
     *  @param pe  the pe attribute
     */
    public void setPe(String hostname, int index, String pe) {
        initPe();
        List list = (List)m_pe.get(hostname);
        if (list == null) {
            list = new LinkedList();
            m_pe.put(hostname, list);
        }

        list.set(index, pe);      
   
    }
   
    /**
     *  Remove a pe attribute for a hostname.
     *
     *  @param hostname  the hostname
     *  @param index the index of the pe attribute
     *  @return the remove pe attribute of <code>null</code>
     *          if the attribute has not been found
     */
    public Object removePeAt(String hostname, int index) {
        if (m_pe != null) {
            List list = (List)m_pe.get(hostname);
            if (list != null) {
                return list.remove(index);
            }
        }
        return null;
    }
   
    /**
     *  Remove a pe attribute for a hostname.
     *
     *  @param hostname  the hostname
     *  @param pe the pe) attribute
     *  @return <code>true</code> if the attribute has been removed
     */
    public boolean removePe(String hostname, String pe) {
        if (m_pe != null) {
            List list = (List)m_pe.get(hostname);
            if (list != null) {

                return list.remove(pe);      
      
            }   
        }
        return false;
    }
   
    /**
     *  Remove all pe) attributes.
     */
    public void removeAllPe() {
        if (m_pe != null) {
            m_pe.clear();
        }
    }
   
    /**
     *  Remove all pe) attributes for a hostname.
     *
     *  @param hostname the hostname
     */   
    public void removeAllPe(String hostname) {
        if (m_pe != null) {
            List list = (List)m_pe.get(hostname);
            if (list != null) {
                list.clear();
            }
        }
    }
   
    /**
     *   Get a unmodifiable set of stored pe attribute keys.
     *   @return unmodifiable set of stored pe attribute keys
     */
    public Set<String> getPeKeys() {
        if (m_pe != null) {
            return Collections.unmodifiableSet(m_pe.keySet());
        } else {
            return Collections.EMPTY_SET;
        }      
    }
   
    /**
     *  Determine if the pe is set
     */
    public boolean isSetPe() {
        return (m_pe != null) && (!m_pe.isEmpty());
    }
   
    /**
     *  Get a unmodifiable list of pe attributes
     *  @param hostname the key
     *  @return unmodifiable list of pe attributes
     */
    public List getPeList(String hostname) {
        if (m_pe != null) {
            List list = (List)m_pe.get(hostname);
            if (list != null) {
                return Collections.unmodifiableList(list);
            }
        }
        return Collections.EMPTY_LIST;
    }
   
    // default methods
   
    /**
     *  <p>Get the default value of the attribute pe.
     *  (@/)</p>
     *  @return the default value of the attribute pe
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultPe(int index) {
        return getPe("@/", index);
    }
   
    /**
     *  Get the number of values for  the default <code>hostname</code>
     *  (@/).
     */
    public int getDefaultPeCount() {
        return getPeCount("@/");
    }
   
    /**
     *  Add <code>pe</code> attribute to 
     *  the default <code>hostname</code>  (@/).
     *
     *  @param pe the pe attribute
     */
    public void addDefaultPe(String pe) {
        addPe("@/", pe);
    }
   
    /**
     *  Set <code>pe</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param index  index of the pe attribute
     *  @param pe  the pe attribute
     */
    public void setDefaultPe(int index, String pe) {
        setPe("@/", index, pe);
    }
   
    /**
     *  Remove <code>pe</code> attribute for the
     *  default <code>hostname</code> (@/).
     *
     *  @param hostname  the hostname
     *  @param index the index of the pe attribute
     *  @return the remove pe attribute of <code>null</code>
     *          if the attribute has not been found
     */
    public Object removeDefaultPeAt(String hostname, int index) {
        return removePeAt("@/", index);
    }
   
    /**
     *  Remove <code>pe</code> attribute from the
     *  default <code>hostname</code> (@/).
     *
     *  @param pe the pe) attribute
     *  @return <code>true</code> if the attribute has been removed
     */
    public boolean removeDefaultPe(String hostname, String pe) {
        return removePe("@/", pe);
    }

    /**
     *  Remove all pe) attributes from 
     *  the default <code>hostname</code> (@/).
     */
    public void removeAllDefaultPe() {
        removeAllPe("@/");
    }
   
    

    // Attribute ckptList ------------------------------------------------

    private Map m_ckpt;
    
    private void initCkpt() {
        if (m_ckpt == null) {
            m_ckpt = new LinkedHashMap();
        }
    }
   
    /**
     *  Get the value of a hostname at an index.
     *  @param hostname the hostname
     *  @param index the index
     */
    public String getCkpt(String hostname, int index) {
        initCkpt();
        List list = (List)m_ckpt.get(hostname);
        if (list == null || index < 0 || index >= list.size()) {
            throw new IllegalArgumentException("No ckpt for " + hostname + "[" + index + "] set");
        }
        String ret = (String)list.get(index);

        return ret;

    }
   
    /**
     *  Get the number of values for a hostname
     *  @param hostname the hostname
     */
    public int getCkptCount(String hostname) {
       if (m_ckpt != null) {
            List list = (List)m_ckpt.get(hostname);
            if (list != null) {
                return list.size();
            }
        }
        return 0;
    }
   
    /**
     *  Add a checkpoint attribute to a hostname.
     *
     *  @param hostname  the hostname
     *  @param checkpoint the checkpoint attribute
     */
    public void addCkpt(String hostname, String checkpoint) {
        initCkpt();
        List list = (List)m_ckpt.get(hostname);
        if (list == null) {
            list = new LinkedList();
            m_ckpt.put(hostname, list);
        }

        list.add(checkpoint);      
   
    }

    /**
     *  Initialize <code>checkpoint</code> attribute for a <code>hostname</code> 
     *  with an empty list.
     *
     *  @param hostname  the hostname
     */
    public void addEmptyCkpt(String hostname) {
        initCkpt();
        List list = (List)m_ckpt.get(hostname);
        if (list == null) {
            list = new LinkedList();
            m_ckpt.put(hostname, list);
        }
    }
   
    /**
     *  Set a checkpoint attribute for a hostname.
     *
     *  @param hostname  the hostname
     *  @param index  index of the checkpoint attribute
     *  @param checkpoint  the checkpoint attribute
     */
    public void setCkpt(String hostname, int index, String checkpoint) {
        initCkpt();
        List list = (List)m_ckpt.get(hostname);
        if (list == null) {
            list = new LinkedList();
            m_ckpt.put(hostname, list);
        }

        list.set(index, checkpoint);      
   
    }
   
    /**
     *  Remove a checkpoint attribute for a hostname.
     *
     *  @param hostname  the hostname
     *  @param index the index of the checkpoint attribute
     *  @return the remove checkpoint attribute of <code>null</code>
     *          if the attribute has not been found
     */
    public Object removeCkptAt(String hostname, int index) {
        if (m_ckpt != null) {
            List list = (List)m_ckpt.get(hostname);
            if (list != null) {
                return list.remove(index);
            }
        }
        return null;
    }
   
    /**
     *  Remove a checkpoint attribute for a hostname.
     *
     *  @param hostname  the hostname
     *  @param checkpoint the checkpoint) attribute
     *  @return <code>true</code> if the attribute has been removed
     */
    public boolean removeCkpt(String hostname, String checkpoint) {
        if (m_ckpt != null) {
            List list = (List)m_ckpt.get(hostname);
            if (list != null) {

                return list.remove(checkpoint);      
      
            }   
        }
        return false;
    }
   
    /**
     *  Remove all checkpoint) attributes.
     */
    public void removeAllCkpt() {
        if (m_ckpt != null) {
            m_ckpt.clear();
        }
    }
   
    /**
     *  Remove all checkpoint) attributes for a hostname.
     *
     *  @param hostname the hostname
     */   
    public void removeAllCkpt(String hostname) {
        if (m_ckpt != null) {
            List list = (List)m_ckpt.get(hostname);
            if (list != null) {
                list.clear();
            }
        }
    }
   
    /**
     *   Get a unmodifiable set of stored ckpt attribute keys.
     *   @return unmodifiable set of stored ckpt attribute keys
     */
    public Set<String> getCkptKeys() {
        if (m_ckpt != null) {
            return Collections.unmodifiableSet(m_ckpt.keySet());
        } else {
            return Collections.EMPTY_SET;
        }      
    }
   
    /**
     *  Determine if the ckpt is set
     */
    public boolean isSetCkpt() {
        return (m_ckpt != null) && (!m_ckpt.isEmpty());
    }
   
    /**
     *  Get a unmodifiable list of ckpt attributes
     *  @param hostname the key
     *  @return unmodifiable list of ckpt attributes
     */
    public List getCkptList(String hostname) {
        if (m_ckpt != null) {
            List list = (List)m_ckpt.get(hostname);
            if (list != null) {
                return Collections.unmodifiableList(list);
            }
        }
        return Collections.EMPTY_LIST;
    }
   
    // default methods
   
    /**
     *  <p>Get the default value of the attribute ckpt.
     *  (@/)</p>
     *  @return the default value of the attribute ckpt
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultCkpt(int index) {
        return getCkpt("@/", index);
    }
   
    /**
     *  Get the number of values for  the default <code>hostname</code>
     *  (@/).
     */
    public int getDefaultCkptCount() {
        return getCkptCount("@/");
    }
   
    /**
     *  Add <code>checkpoint</code> attribute to 
     *  the default <code>hostname</code>  (@/).
     *
     *  @param checkpoint the checkpoint attribute
     */
    public void addDefaultCkpt(String checkpoint) {
        addCkpt("@/", checkpoint);
    }
   
    /**
     *  Set <code>checkpoint</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param index  index of the checkpoint attribute
     *  @param checkpoint  the checkpoint attribute
     */
    public void setDefaultCkpt(int index, String checkpoint) {
        setCkpt("@/", index, checkpoint);
    }
   
    /**
     *  Remove <code>checkpoint</code> attribute for the
     *  default <code>hostname</code> (@/).
     *
     *  @param hostname  the hostname
     *  @param index the index of the checkpoint attribute
     *  @return the remove checkpoint attribute of <code>null</code>
     *          if the attribute has not been found
     */
    public Object removeDefaultCkptAt(String hostname, int index) {
        return removeCkptAt("@/", index);
    }
   
    /**
     *  Remove <code>checkpoint</code> attribute from the
     *  default <code>hostname</code> (@/).
     *
     *  @param checkpoint the checkpoint) attribute
     *  @return <code>true</code> if the attribute has been removed
     */
    public boolean removeDefaultCkpt(String hostname, String checkpoint) {
        return removeCkpt("@/", checkpoint);
    }

    /**
     *  Remove all checkpoint) attributes from 
     *  the default <code>hostname</code> (@/).
     */
    public void removeAllDefaultCkpt() {
        removeAllCkpt("@/");
    }
   
    

    // Attribute ownerList ------------------------------------------------

    private Map m_owner;
    
    private void initOwner() {
        if (m_owner == null) {
            m_owner = new LinkedHashMap();
        }
    }
   
    /**
     *  Get the value of a hostname at an index.
     *  @param hostname the hostname
     *  @param index the index
     */
    public UserSet getOwner(String hostname, int index) {
        initOwner();
        List list = (List)m_owner.get(hostname);
        if (list == null || index < 0 || index >= list.size()) {
            throw new IllegalArgumentException("No owner for " + hostname + "[" + index + "] set");
        }
        UserSet ret = (UserSet)list.get(index);

        return ret;

    }
   
    /**
     *  Get the number of values for a hostname
     *  @param hostname the hostname
     */
    public int getOwnerCount(String hostname) {
       if (m_owner != null) {
            List list = (List)m_owner.get(hostname);
            if (list != null) {
                return list.size();
            }
        }
        return 0;
    }
   
    /**
     *  Add a owner attribute to a hostname.
     *
     *  @param hostname  the hostname
     *  @param owner the owner attribute
     */
    public void addOwner(String hostname, UserSet owner) {
        initOwner();
        List list = (List)m_owner.get(hostname);
        if (list == null) {
            list = new LinkedList();
            m_owner.put(hostname, list);
        }

        list.add(owner);      
   
    }

    /**
     *  Initialize <code>owner</code> attribute for a <code>hostname</code> 
     *  with an empty list.
     *
     *  @param hostname  the hostname
     */
    public void addEmptyOwner(String hostname) {
        initOwner();
        List list = (List)m_owner.get(hostname);
        if (list == null) {
            list = new LinkedList();
            m_owner.put(hostname, list);
        }
    }
   
    /**
     *  Set a owner attribute for a hostname.
     *
     *  @param hostname  the hostname
     *  @param index  index of the owner attribute
     *  @param owner  the owner attribute
     */
    public void setOwner(String hostname, int index, UserSet owner) {
        initOwner();
        List list = (List)m_owner.get(hostname);
        if (list == null) {
            list = new LinkedList();
            m_owner.put(hostname, list);
        }

        list.set(index, owner);      
   
    }
   
    /**
     *  Remove a owner attribute for a hostname.
     *
     *  @param hostname  the hostname
     *  @param index the index of the owner attribute
     *  @return the remove owner attribute of <code>null</code>
     *          if the attribute has not been found
     */
    public Object removeOwnerAt(String hostname, int index) {
        if (m_owner != null) {
            List list = (List)m_owner.get(hostname);
            if (list != null) {
                return list.remove(index);
            }
        }
        return null;
    }
   
    /**
     *  Remove a owner attribute for a hostname.
     *
     *  @param hostname  the hostname
     *  @param owner the owner) attribute
     *  @return <code>true</code> if the attribute has been removed
     */
    public boolean removeOwner(String hostname, UserSet owner) {
        if (m_owner != null) {
            List list = (List)m_owner.get(hostname);
            if (list != null) {

                return list.remove(owner);      
      
            }   
        }
        return false;
    }
   
    /**
     *  Remove all owner) attributes.
     */
    public void removeAllOwner() {
        if (m_owner != null) {
            m_owner.clear();
        }
    }
   
    /**
     *  Remove all owner) attributes for a hostname.
     *
     *  @param hostname the hostname
     */   
    public void removeAllOwner(String hostname) {
        if (m_owner != null) {
            List list = (List)m_owner.get(hostname);
            if (list != null) {
                list.clear();
            }
        }
    }
   
    /**
     *   Get a unmodifiable set of stored owner attribute keys.
     *   @return unmodifiable set of stored owner attribute keys
     */
    public Set<String> getOwnerKeys() {
        if (m_owner != null) {
            return Collections.unmodifiableSet(m_owner.keySet());
        } else {
            return Collections.EMPTY_SET;
        }      
    }
   
    /**
     *  Determine if the owner is set
     */
    public boolean isSetOwner() {
        return (m_owner != null) && (!m_owner.isEmpty());
    }
   
    /**
     *  Get a unmodifiable list of owner attributes
     *  @param hostname the key
     *  @return unmodifiable list of owner attributes
     */
    public List getOwnerList(String hostname) {
        if (m_owner != null) {
            List list = (List)m_owner.get(hostname);
            if (list != null) {
                return Collections.unmodifiableList(list);
            }
        }
        return Collections.EMPTY_LIST;
    }
   
    // default methods
   
    /**
     *  <p>Get the default value of the attribute owner.
     *  (@/)</p>
     *  @return the default value of the attribute owner
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public UserSet getDefaultOwner(int index) {
        return getOwner("@/", index);
    }
   
    /**
     *  Get the number of values for  the default <code>hostname</code>
     *  (@/).
     */
    public int getDefaultOwnerCount() {
        return getOwnerCount("@/");
    }
   
    /**
     *  Add <code>owner</code> attribute to 
     *  the default <code>hostname</code>  (@/).
     *
     *  @param owner the owner attribute
     */
    public void addDefaultOwner(UserSet owner) {
        addOwner("@/", owner);
    }
   
    /**
     *  Set <code>owner</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param index  index of the owner attribute
     *  @param owner  the owner attribute
     */
    public void setDefaultOwner(int index, UserSet owner) {
        setOwner("@/", index, owner);
    }
   
    /**
     *  Remove <code>owner</code> attribute for the
     *  default <code>hostname</code> (@/).
     *
     *  @param hostname  the hostname
     *  @param index the index of the owner attribute
     *  @return the remove owner attribute of <code>null</code>
     *          if the attribute has not been found
     */
    public Object removeDefaultOwnerAt(String hostname, int index) {
        return removeOwnerAt("@/", index);
    }
   
    /**
     *  Remove <code>owner</code> attribute from the
     *  default <code>hostname</code> (@/).
     *
     *  @param owner the owner) attribute
     *  @return <code>true</code> if the attribute has been removed
     */
    public boolean removeDefaultOwner(String hostname, UserSet owner) {
        return removeOwner("@/", owner);
    }

    /**
     *  Remove all owner) attributes from 
     *  the default <code>hostname</code> (@/).
     */
    public void removeAllDefaultOwner() {
        removeAllOwner("@/");
    }
   
    

    // Attribute acl ------------------------------------------------

    private Map m_acl;
    
    private void initAcl() {
        if (m_acl == null) {
            m_acl = new LinkedHashMap();
        }
    }
   
    /**
     *  Get the value of a hostname at an index.
     *  @param hostname the hostname
     *  @param index the index
     */
    public UserSet getAcl(String hostname, int index) {
        initAcl();
        List list = (List)m_acl.get(hostname);
        if (list == null || index < 0 || index >= list.size()) {
            throw new IllegalArgumentException("No acl for " + hostname + "[" + index + "] set");
        }
        UserSet ret = (UserSet)list.get(index);

        return ret;

    }
   
    /**
     *  Get the number of values for a hostname
     *  @param hostname the hostname
     */
    public int getAclCount(String hostname) {
       if (m_acl != null) {
            List list = (List)m_acl.get(hostname);
            if (list != null) {
                return list.size();
            }
        }
        return 0;
    }
   
    /**
     *  Add a acl attribute to a hostname.
     *
     *  @param hostname  the hostname
     *  @param acl the acl attribute
     */
    public void addAcl(String hostname, UserSet acl) {
        initAcl();
        List list = (List)m_acl.get(hostname);
        if (list == null) {
            list = new LinkedList();
            m_acl.put(hostname, list);
        }

        list.add(acl);      
   
    }

    /**
     *  Initialize <code>acl</code> attribute for a <code>hostname</code> 
     *  with an empty list.
     *
     *  @param hostname  the hostname
     */
    public void addEmptyAcl(String hostname) {
        initAcl();
        List list = (List)m_acl.get(hostname);
        if (list == null) {
            list = new LinkedList();
            m_acl.put(hostname, list);
        }
    }
   
    /**
     *  Set a acl attribute for a hostname.
     *
     *  @param hostname  the hostname
     *  @param index  index of the acl attribute
     *  @param acl  the acl attribute
     */
    public void setAcl(String hostname, int index, UserSet acl) {
        initAcl();
        List list = (List)m_acl.get(hostname);
        if (list == null) {
            list = new LinkedList();
            m_acl.put(hostname, list);
        }

        list.set(index, acl);      
   
    }
   
    /**
     *  Remove a acl attribute for a hostname.
     *
     *  @param hostname  the hostname
     *  @param index the index of the acl attribute
     *  @return the remove acl attribute of <code>null</code>
     *          if the attribute has not been found
     */
    public Object removeAclAt(String hostname, int index) {
        if (m_acl != null) {
            List list = (List)m_acl.get(hostname);
            if (list != null) {
                return list.remove(index);
            }
        }
        return null;
    }
   
    /**
     *  Remove a acl attribute for a hostname.
     *
     *  @param hostname  the hostname
     *  @param acl the acl) attribute
     *  @return <code>true</code> if the attribute has been removed
     */
    public boolean removeAcl(String hostname, UserSet acl) {
        if (m_acl != null) {
            List list = (List)m_acl.get(hostname);
            if (list != null) {

                return list.remove(acl);      
      
            }   
        }
        return false;
    }
   
    /**
     *  Remove all acl) attributes.
     */
    public void removeAllAcl() {
        if (m_acl != null) {
            m_acl.clear();
        }
    }
   
    /**
     *  Remove all acl) attributes for a hostname.
     *
     *  @param hostname the hostname
     */   
    public void removeAllAcl(String hostname) {
        if (m_acl != null) {
            List list = (List)m_acl.get(hostname);
            if (list != null) {
                list.clear();
            }
        }
    }
   
    /**
     *   Get a unmodifiable set of stored acl attribute keys.
     *   @return unmodifiable set of stored acl attribute keys
     */
    public Set<String> getAclKeys() {
        if (m_acl != null) {
            return Collections.unmodifiableSet(m_acl.keySet());
        } else {
            return Collections.EMPTY_SET;
        }      
    }
   
    /**
     *  Determine if the acl is set
     */
    public boolean isSetAcl() {
        return (m_acl != null) && (!m_acl.isEmpty());
    }
   
    /**
     *  Get a unmodifiable list of acl attributes
     *  @param hostname the key
     *  @return unmodifiable list of acl attributes
     */
    public List getAclList(String hostname) {
        if (m_acl != null) {
            List list = (List)m_acl.get(hostname);
            if (list != null) {
                return Collections.unmodifiableList(list);
            }
        }
        return Collections.EMPTY_LIST;
    }
   
    // default methods
   
    /**
     *  <p>Get the default value of the attribute acl.
     *  (@/)</p>
     *  @return the default value of the attribute acl
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public UserSet getDefaultAcl(int index) {
        return getAcl("@/", index);
    }
   
    /**
     *  Get the number of values for  the default <code>hostname</code>
     *  (@/).
     */
    public int getDefaultAclCount() {
        return getAclCount("@/");
    }
   
    /**
     *  Add <code>acl</code> attribute to 
     *  the default <code>hostname</code>  (@/).
     *
     *  @param acl the acl attribute
     */
    public void addDefaultAcl(UserSet acl) {
        addAcl("@/", acl);
    }
   
    /**
     *  Set <code>acl</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param index  index of the acl attribute
     *  @param acl  the acl attribute
     */
    public void setDefaultAcl(int index, UserSet acl) {
        setAcl("@/", index, acl);
    }
   
    /**
     *  Remove <code>acl</code> attribute for the
     *  default <code>hostname</code> (@/).
     *
     *  @param hostname  the hostname
     *  @param index the index of the acl attribute
     *  @return the remove acl attribute of <code>null</code>
     *          if the attribute has not been found
     */
    public Object removeDefaultAclAt(String hostname, int index) {
        return removeAclAt("@/", index);
    }
   
    /**
     *  Remove <code>acl</code> attribute from the
     *  default <code>hostname</code> (@/).
     *
     *  @param acl the acl) attribute
     *  @return <code>true</code> if the attribute has been removed
     */
    public boolean removeDefaultAcl(String hostname, UserSet acl) {
        return removeAcl("@/", acl);
    }

    /**
     *  Remove all acl) attributes from 
     *  the default <code>hostname</code> (@/).
     */
    public void removeAllDefaultAcl() {
        removeAllAcl("@/");
    }
   
    

    // Attribute xacl ------------------------------------------------

    private Map m_xacl;
    
    private void initXacl() {
        if (m_xacl == null) {
            m_xacl = new LinkedHashMap();
        }
    }
   
    /**
     *  Get the value of a hostname at an index.
     *  @param hostname the hostname
     *  @param index the index
     */
    public UserSet getXacl(String hostname, int index) {
        initXacl();
        List list = (List)m_xacl.get(hostname);
        if (list == null || index < 0 || index >= list.size()) {
            throw new IllegalArgumentException("No xacl for " + hostname + "[" + index + "] set");
        }
        UserSet ret = (UserSet)list.get(index);

        return ret;

    }
   
    /**
     *  Get the number of values for a hostname
     *  @param hostname the hostname
     */
    public int getXaclCount(String hostname) {
       if (m_xacl != null) {
            List list = (List)m_xacl.get(hostname);
            if (list != null) {
                return list.size();
            }
        }
        return 0;
    }
   
    /**
     *  Add a acl attribute to a hostname.
     *
     *  @param hostname  the hostname
     *  @param acl the acl attribute
     */
    public void addXacl(String hostname, UserSet acl) {
        initXacl();
        List list = (List)m_xacl.get(hostname);
        if (list == null) {
            list = new LinkedList();
            m_xacl.put(hostname, list);
        }

        list.add(acl);      
   
    }

    /**
     *  Initialize <code>acl</code> attribute for a <code>hostname</code> 
     *  with an empty list.
     *
     *  @param hostname  the hostname
     */
    public void addEmptyXacl(String hostname) {
        initXacl();
        List list = (List)m_xacl.get(hostname);
        if (list == null) {
            list = new LinkedList();
            m_xacl.put(hostname, list);
        }
    }
   
    /**
     *  Set a acl attribute for a hostname.
     *
     *  @param hostname  the hostname
     *  @param index  index of the acl attribute
     *  @param acl  the acl attribute
     */
    public void setXacl(String hostname, int index, UserSet acl) {
        initXacl();
        List list = (List)m_xacl.get(hostname);
        if (list == null) {
            list = new LinkedList();
            m_xacl.put(hostname, list);
        }

        list.set(index, acl);      
   
    }
   
    /**
     *  Remove a acl attribute for a hostname.
     *
     *  @param hostname  the hostname
     *  @param index the index of the acl attribute
     *  @return the remove acl attribute of <code>null</code>
     *          if the attribute has not been found
     */
    public Object removeXaclAt(String hostname, int index) {
        if (m_xacl != null) {
            List list = (List)m_xacl.get(hostname);
            if (list != null) {
                return list.remove(index);
            }
        }
        return null;
    }
   
    /**
     *  Remove a acl attribute for a hostname.
     *
     *  @param hostname  the hostname
     *  @param acl the acl) attribute
     *  @return <code>true</code> if the attribute has been removed
     */
    public boolean removeXacl(String hostname, UserSet acl) {
        if (m_xacl != null) {
            List list = (List)m_xacl.get(hostname);
            if (list != null) {

                return list.remove(acl);      
      
            }   
        }
        return false;
    }
   
    /**
     *  Remove all acl) attributes.
     */
    public void removeAllXacl() {
        if (m_xacl != null) {
            m_xacl.clear();
        }
    }
   
    /**
     *  Remove all acl) attributes for a hostname.
     *
     *  @param hostname the hostname
     */   
    public void removeAllXacl(String hostname) {
        if (m_xacl != null) {
            List list = (List)m_xacl.get(hostname);
            if (list != null) {
                list.clear();
            }
        }
    }
   
    /**
     *   Get a unmodifiable set of stored xacl attribute keys.
     *   @return unmodifiable set of stored xacl attribute keys
     */
    public Set<String> getXaclKeys() {
        if (m_xacl != null) {
            return Collections.unmodifiableSet(m_xacl.keySet());
        } else {
            return Collections.EMPTY_SET;
        }      
    }
   
    /**
     *  Determine if the xacl is set
     */
    public boolean isSetXacl() {
        return (m_xacl != null) && (!m_xacl.isEmpty());
    }
   
    /**
     *  Get a unmodifiable list of xacl attributes
     *  @param hostname the key
     *  @return unmodifiable list of xacl attributes
     */
    public List getXaclList(String hostname) {
        if (m_xacl != null) {
            List list = (List)m_xacl.get(hostname);
            if (list != null) {
                return Collections.unmodifiableList(list);
            }
        }
        return Collections.EMPTY_LIST;
    }
   
    // default methods
   
    /**
     *  <p>Get the default value of the attribute xacl.
     *  (@/)</p>
     *  @return the default value of the attribute xacl
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public UserSet getDefaultXacl(int index) {
        return getXacl("@/", index);
    }
   
    /**
     *  Get the number of values for  the default <code>hostname</code>
     *  (@/).
     */
    public int getDefaultXaclCount() {
        return getXaclCount("@/");
    }
   
    /**
     *  Add <code>acl</code> attribute to 
     *  the default <code>hostname</code>  (@/).
     *
     *  @param acl the acl attribute
     */
    public void addDefaultXacl(UserSet acl) {
        addXacl("@/", acl);
    }
   
    /**
     *  Set <code>acl</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param index  index of the acl attribute
     *  @param acl  the acl attribute
     */
    public void setDefaultXacl(int index, UserSet acl) {
        setXacl("@/", index, acl);
    }
   
    /**
     *  Remove <code>acl</code> attribute for the
     *  default <code>hostname</code> (@/).
     *
     *  @param hostname  the hostname
     *  @param index the index of the acl attribute
     *  @return the remove acl attribute of <code>null</code>
     *          if the attribute has not been found
     */
    public Object removeDefaultXaclAt(String hostname, int index) {
        return removeXaclAt("@/", index);
    }
   
    /**
     *  Remove <code>acl</code> attribute from the
     *  default <code>hostname</code> (@/).
     *
     *  @param acl the acl) attribute
     *  @return <code>true</code> if the attribute has been removed
     */
    public boolean removeDefaultXacl(String hostname, UserSet acl) {
        return removeXacl("@/", acl);
    }

    /**
     *  Remove all acl) attributes from 
     *  the default <code>hostname</code> (@/).
     */
    public void removeAllDefaultXacl() {
        removeAllXacl("@/");
    }
   
    

    // Attribute projects ------------------------------------------------

    private Map m_projects;
    
    private void initProjects() {
        if (m_projects == null) {
            m_projects = new LinkedHashMap();
        }
    }
   
    /**
     *  Get the value of a hostname at an index.
     *  @param hostname the hostname
     *  @param index the index
     */
    public Project getProjects(String hostname, int index) {
        initProjects();
        List list = (List)m_projects.get(hostname);
        if (list == null || index < 0 || index >= list.size()) {
            throw new IllegalArgumentException("No projects for " + hostname + "[" + index + "] set");
        }
        Project ret = (Project)list.get(index);

        return ret;

    }
   
    /**
     *  Get the number of values for a hostname
     *  @param hostname the hostname
     */
    public int getProjectsCount(String hostname) {
       if (m_projects != null) {
            List list = (List)m_projects.get(hostname);
            if (list != null) {
                return list.size();
            }
        }
        return 0;
    }
   
    /**
     *  Add a project attribute to a hostname.
     *
     *  @param hostname  the hostname
     *  @param project the project attribute
     */
    public void addProjects(String hostname, Project project) {
        initProjects();
        List list = (List)m_projects.get(hostname);
        if (list == null) {
            list = new LinkedList();
            m_projects.put(hostname, list);
        }

        list.add(project);      
   
    }

    /**
     *  Initialize <code>project</code> attribute for a <code>hostname</code> 
     *  with an empty list.
     *
     *  @param hostname  the hostname
     */
    public void addEmptyProjects(String hostname) {
        initProjects();
        List list = (List)m_projects.get(hostname);
        if (list == null) {
            list = new LinkedList();
            m_projects.put(hostname, list);
        }
    }
   
    /**
     *  Set a project attribute for a hostname.
     *
     *  @param hostname  the hostname
     *  @param index  index of the project attribute
     *  @param project  the project attribute
     */
    public void setProjects(String hostname, int index, Project project) {
        initProjects();
        List list = (List)m_projects.get(hostname);
        if (list == null) {
            list = new LinkedList();
            m_projects.put(hostname, list);
        }

        list.set(index, project);      
   
    }
   
    /**
     *  Remove a project attribute for a hostname.
     *
     *  @param hostname  the hostname
     *  @param index the index of the project attribute
     *  @return the remove project attribute of <code>null</code>
     *          if the attribute has not been found
     */
    public Object removeProjectsAt(String hostname, int index) {
        if (m_projects != null) {
            List list = (List)m_projects.get(hostname);
            if (list != null) {
                return list.remove(index);
            }
        }
        return null;
    }
   
    /**
     *  Remove a project attribute for a hostname.
     *
     *  @param hostname  the hostname
     *  @param project the project) attribute
     *  @return <code>true</code> if the attribute has been removed
     */
    public boolean removeProjects(String hostname, Project project) {
        if (m_projects != null) {
            List list = (List)m_projects.get(hostname);
            if (list != null) {

                return list.remove(project);      
      
            }   
        }
        return false;
    }
   
    /**
     *  Remove all project) attributes.
     */
    public void removeAllProjects() {
        if (m_projects != null) {
            m_projects.clear();
        }
    }
   
    /**
     *  Remove all project) attributes for a hostname.
     *
     *  @param hostname the hostname
     */   
    public void removeAllProjects(String hostname) {
        if (m_projects != null) {
            List list = (List)m_projects.get(hostname);
            if (list != null) {
                list.clear();
            }
        }
    }
   
    /**
     *   Get a unmodifiable set of stored projects attribute keys.
     *   @return unmodifiable set of stored projects attribute keys
     */
    public Set<String> getProjectsKeys() {
        if (m_projects != null) {
            return Collections.unmodifiableSet(m_projects.keySet());
        } else {
            return Collections.EMPTY_SET;
        }      
    }
   
    /**
     *  Determine if the projects is set
     */
    public boolean isSetProjects() {
        return (m_projects != null) && (!m_projects.isEmpty());
    }
   
    /**
     *  Get a unmodifiable list of projects attributes
     *  @param hostname the key
     *  @return unmodifiable list of projects attributes
     */
    public List getProjectsList(String hostname) {
        if (m_projects != null) {
            List list = (List)m_projects.get(hostname);
            if (list != null) {
                return Collections.unmodifiableList(list);
            }
        }
        return Collections.EMPTY_LIST;
    }
   
    // default methods
   
    /**
     *  <p>Get the default value of the attribute projects.
     *  (@/)</p>
     *  @return the default value of the attribute projects
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public Project getDefaultProjects(int index) {
        return getProjects("@/", index);
    }
   
    /**
     *  Get the number of values for  the default <code>hostname</code>
     *  (@/).
     */
    public int getDefaultProjectsCount() {
        return getProjectsCount("@/");
    }
   
    /**
     *  Add <code>project</code> attribute to 
     *  the default <code>hostname</code>  (@/).
     *
     *  @param project the project attribute
     */
    public void addDefaultProjects(Project project) {
        addProjects("@/", project);
    }
   
    /**
     *  Set <code>project</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param index  index of the project attribute
     *  @param project  the project attribute
     */
    public void setDefaultProjects(int index, Project project) {
        setProjects("@/", index, project);
    }
   
    /**
     *  Remove <code>project</code> attribute for the
     *  default <code>hostname</code> (@/).
     *
     *  @param hostname  the hostname
     *  @param index the index of the project attribute
     *  @return the remove project attribute of <code>null</code>
     *          if the attribute has not been found
     */
    public Object removeDefaultProjectsAt(String hostname, int index) {
        return removeProjectsAt("@/", index);
    }
   
    /**
     *  Remove <code>project</code> attribute from the
     *  default <code>hostname</code> (@/).
     *
     *  @param project the project) attribute
     *  @return <code>true</code> if the attribute has been removed
     */
    public boolean removeDefaultProjects(String hostname, Project project) {
        return removeProjects("@/", project);
    }

    /**
     *  Remove all project) attributes from 
     *  the default <code>hostname</code> (@/).
     */
    public void removeAllDefaultProjects() {
        removeAllProjects("@/");
    }
   
    

    // Attribute xprojects ------------------------------------------------

    private Map m_xprojects;
    
    private void initXprojects() {
        if (m_xprojects == null) {
            m_xprojects = new LinkedHashMap();
        }
    }
   
    /**
     *  Get the value of a hostname at an index.
     *  @param hostname the hostname
     *  @param index the index
     */
    public Project getXprojects(String hostname, int index) {
        initXprojects();
        List list = (List)m_xprojects.get(hostname);
        if (list == null || index < 0 || index >= list.size()) {
            throw new IllegalArgumentException("No xprojects for " + hostname + "[" + index + "] set");
        }
        Project ret = (Project)list.get(index);

        return ret;

    }
   
    /**
     *  Get the number of values for a hostname
     *  @param hostname the hostname
     */
    public int getXprojectsCount(String hostname) {
       if (m_xprojects != null) {
            List list = (List)m_xprojects.get(hostname);
            if (list != null) {
                return list.size();
            }
        }
        return 0;
    }
   
    /**
     *  Add a project attribute to a hostname.
     *
     *  @param hostname  the hostname
     *  @param project the project attribute
     */
    public void addXprojects(String hostname, Project project) {
        initXprojects();
        List list = (List)m_xprojects.get(hostname);
        if (list == null) {
            list = new LinkedList();
            m_xprojects.put(hostname, list);
        }

        list.add(project);      
   
    }

    /**
     *  Initialize <code>project</code> attribute for a <code>hostname</code> 
     *  with an empty list.
     *
     *  @param hostname  the hostname
     */
    public void addEmptyXprojects(String hostname) {
        initXprojects();
        List list = (List)m_xprojects.get(hostname);
        if (list == null) {
            list = new LinkedList();
            m_xprojects.put(hostname, list);
        }
    }
   
    /**
     *  Set a project attribute for a hostname.
     *
     *  @param hostname  the hostname
     *  @param index  index of the project attribute
     *  @param project  the project attribute
     */
    public void setXprojects(String hostname, int index, Project project) {
        initXprojects();
        List list = (List)m_xprojects.get(hostname);
        if (list == null) {
            list = new LinkedList();
            m_xprojects.put(hostname, list);
        }

        list.set(index, project);      
   
    }
   
    /**
     *  Remove a project attribute for a hostname.
     *
     *  @param hostname  the hostname
     *  @param index the index of the project attribute
     *  @return the remove project attribute of <code>null</code>
     *          if the attribute has not been found
     */
    public Object removeXprojectsAt(String hostname, int index) {
        if (m_xprojects != null) {
            List list = (List)m_xprojects.get(hostname);
            if (list != null) {
                return list.remove(index);
            }
        }
        return null;
    }
   
    /**
     *  Remove a project attribute for a hostname.
     *
     *  @param hostname  the hostname
     *  @param project the project) attribute
     *  @return <code>true</code> if the attribute has been removed
     */
    public boolean removeXprojects(String hostname, Project project) {
        if (m_xprojects != null) {
            List list = (List)m_xprojects.get(hostname);
            if (list != null) {

                return list.remove(project);      
      
            }   
        }
        return false;
    }
   
    /**
     *  Remove all project) attributes.
     */
    public void removeAllXprojects() {
        if (m_xprojects != null) {
            m_xprojects.clear();
        }
    }
   
    /**
     *  Remove all project) attributes for a hostname.
     *
     *  @param hostname the hostname
     */   
    public void removeAllXprojects(String hostname) {
        if (m_xprojects != null) {
            List list = (List)m_xprojects.get(hostname);
            if (list != null) {
                list.clear();
            }
        }
    }
   
    /**
     *   Get a unmodifiable set of stored xprojects attribute keys.
     *   @return unmodifiable set of stored xprojects attribute keys
     */
    public Set<String> getXprojectsKeys() {
        if (m_xprojects != null) {
            return Collections.unmodifiableSet(m_xprojects.keySet());
        } else {
            return Collections.EMPTY_SET;
        }      
    }
   
    /**
     *  Determine if the xprojects is set
     */
    public boolean isSetXprojects() {
        return (m_xprojects != null) && (!m_xprojects.isEmpty());
    }
   
    /**
     *  Get a unmodifiable list of xprojects attributes
     *  @param hostname the key
     *  @return unmodifiable list of xprojects attributes
     */
    public List getXprojectsList(String hostname) {
        if (m_xprojects != null) {
            List list = (List)m_xprojects.get(hostname);
            if (list != null) {
                return Collections.unmodifiableList(list);
            }
        }
        return Collections.EMPTY_LIST;
    }
   
    // default methods
   
    /**
     *  <p>Get the default value of the attribute xprojects.
     *  (@/)</p>
     *  @return the default value of the attribute xprojects
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public Project getDefaultXprojects(int index) {
        return getXprojects("@/", index);
    }
   
    /**
     *  Get the number of values for  the default <code>hostname</code>
     *  (@/).
     */
    public int getDefaultXprojectsCount() {
        return getXprojectsCount("@/");
    }
   
    /**
     *  Add <code>project</code> attribute to 
     *  the default <code>hostname</code>  (@/).
     *
     *  @param project the project attribute
     */
    public void addDefaultXprojects(Project project) {
        addXprojects("@/", project);
    }
   
    /**
     *  Set <code>project</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param index  index of the project attribute
     *  @param project  the project attribute
     */
    public void setDefaultXprojects(int index, Project project) {
        setXprojects("@/", index, project);
    }
   
    /**
     *  Remove <code>project</code> attribute for the
     *  default <code>hostname</code> (@/).
     *
     *  @param hostname  the hostname
     *  @param index the index of the project attribute
     *  @return the remove project attribute of <code>null</code>
     *          if the attribute has not been found
     */
    public Object removeDefaultXprojectsAt(String hostname, int index) {
        return removeXprojectsAt("@/", index);
    }
   
    /**
     *  Remove <code>project</code> attribute from the
     *  default <code>hostname</code> (@/).
     *
     *  @param project the project) attribute
     *  @return <code>true</code> if the attribute has been removed
     */
    public boolean removeDefaultXprojects(String hostname, Project project) {
        return removeXprojects("@/", project);
    }

    /**
     *  Remove all project) attributes from 
     *  the default <code>hostname</code> (@/).
     */
    public void removeAllDefaultXprojects() {
        removeAllXprojects("@/");
    }
   
    

    // Attribute loadThresholds ------------------------------------------------

    private Map m_loadThresholds;
    
    private void initLoadThresholds() {
        if (m_loadThresholds == null) {
            m_loadThresholds = new LinkedHashMap();
        }
    }
   
    /**
     *  Get the value of a hostname at an index.
     *  @param hostname the hostname
     *  @param index the index
     */
    public ComplexEntry getLoadThresholds(String hostname, int index) {
        initLoadThresholds();
        List list = (List)m_loadThresholds.get(hostname);
        if (list == null || index < 0 || index >= list.size()) {
            throw new IllegalArgumentException("No loadThresholds for " + hostname + "[" + index + "] set");
        }
        ComplexEntry ret = (ComplexEntry)list.get(index);

        return ret;

    }
   
    /**
     *  Get the number of values for a hostname
     *  @param hostname the hostname
     */
    public int getLoadThresholdsCount(String hostname) {
       if (m_loadThresholds != null) {
            List list = (List)m_loadThresholds.get(hostname);
            if (list != null) {
                return list.size();
            }
        }
        return 0;
    }
   
    /**
     *  Add a loadThreshold attribute to a hostname.
     *
     *  @param hostname  the hostname
     *  @param loadThreshold the loadThreshold attribute
     */
    public void addLoadThresholds(String hostname, ComplexEntry loadThreshold) {
        initLoadThresholds();
        List list = (List)m_loadThresholds.get(hostname);
        if (list == null) {
            list = new LinkedList();
            m_loadThresholds.put(hostname, list);
        }

        list.add(loadThreshold);      
   
    }

    /**
     *  Initialize <code>loadThreshold</code> attribute for a <code>hostname</code> 
     *  with an empty list.
     *
     *  @param hostname  the hostname
     */
    public void addEmptyLoadThresholds(String hostname) {
        initLoadThresholds();
        List list = (List)m_loadThresholds.get(hostname);
        if (list == null) {
            list = new LinkedList();
            m_loadThresholds.put(hostname, list);
        }
    }
   
    /**
     *  Set a loadThreshold attribute for a hostname.
     *
     *  @param hostname  the hostname
     *  @param index  index of the loadThreshold attribute
     *  @param loadThreshold  the loadThreshold attribute
     */
    public void setLoadThresholds(String hostname, int index, ComplexEntry loadThreshold) {
        initLoadThresholds();
        List list = (List)m_loadThresholds.get(hostname);
        if (list == null) {
            list = new LinkedList();
            m_loadThresholds.put(hostname, list);
        }

        list.set(index, loadThreshold);      
   
    }
   
    /**
     *  Remove a loadThreshold attribute for a hostname.
     *
     *  @param hostname  the hostname
     *  @param index the index of the loadThreshold attribute
     *  @return the remove loadThreshold attribute of <code>null</code>
     *          if the attribute has not been found
     */
    public Object removeLoadThresholdsAt(String hostname, int index) {
        if (m_loadThresholds != null) {
            List list = (List)m_loadThresholds.get(hostname);
            if (list != null) {
                return list.remove(index);
            }
        }
        return null;
    }
   
    /**
     *  Remove a loadThreshold attribute for a hostname.
     *
     *  @param hostname  the hostname
     *  @param loadThreshold the loadThreshold) attribute
     *  @return <code>true</code> if the attribute has been removed
     */
    public boolean removeLoadThresholds(String hostname, ComplexEntry loadThreshold) {
        if (m_loadThresholds != null) {
            List list = (List)m_loadThresholds.get(hostname);
            if (list != null) {

                return list.remove(loadThreshold);      
      
            }   
        }
        return false;
    }
   
    /**
     *  Remove all loadThreshold) attributes.
     */
    public void removeAllLoadThresholds() {
        if (m_loadThresholds != null) {
            m_loadThresholds.clear();
        }
    }
   
    /**
     *  Remove all loadThreshold) attributes for a hostname.
     *
     *  @param hostname the hostname
     */   
    public void removeAllLoadThresholds(String hostname) {
        if (m_loadThresholds != null) {
            List list = (List)m_loadThresholds.get(hostname);
            if (list != null) {
                list.clear();
            }
        }
    }
   
    /**
     *   Get a unmodifiable set of stored loadThresholds attribute keys.
     *   @return unmodifiable set of stored loadThresholds attribute keys
     */
    public Set<String> getLoadThresholdsKeys() {
        if (m_loadThresholds != null) {
            return Collections.unmodifiableSet(m_loadThresholds.keySet());
        } else {
            return Collections.EMPTY_SET;
        }      
    }
   
    /**
     *  Determine if the loadThresholds is set
     */
    public boolean isSetLoadThresholds() {
        return (m_loadThresholds != null) && (!m_loadThresholds.isEmpty());
    }
   
    /**
     *  Get a unmodifiable list of loadThresholds attributes
     *  @param hostname the key
     *  @return unmodifiable list of loadThresholds attributes
     */
    public List getLoadThresholdsList(String hostname) {
        if (m_loadThresholds != null) {
            List list = (List)m_loadThresholds.get(hostname);
            if (list != null) {
                return Collections.unmodifiableList(list);
            }
        }
        return Collections.EMPTY_LIST;
    }
   
    // default methods
   
    /**
     *  <p>Get the default value of the attribute loadThresholds.
     *  (@/)</p>
     *  @return the default value of the attribute loadThresholds
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public ComplexEntry getDefaultLoadThresholds(int index) {
        return getLoadThresholds("@/", index);
    }
   
    /**
     *  Get the number of values for  the default <code>hostname</code>
     *  (@/).
     */
    public int getDefaultLoadThresholdsCount() {
        return getLoadThresholdsCount("@/");
    }
   
    /**
     *  Add <code>loadThreshold</code> attribute to 
     *  the default <code>hostname</code>  (@/).
     *
     *  @param loadThreshold the loadThreshold attribute
     */
    public void addDefaultLoadThresholds(ComplexEntry loadThreshold) {
        addLoadThresholds("@/", loadThreshold);
    }
   
    /**
     *  Set <code>loadThreshold</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param index  index of the loadThreshold attribute
     *  @param loadThreshold  the loadThreshold attribute
     */
    public void setDefaultLoadThresholds(int index, ComplexEntry loadThreshold) {
        setLoadThresholds("@/", index, loadThreshold);
    }
   
    /**
     *  Remove <code>loadThreshold</code> attribute for the
     *  default <code>hostname</code> (@/).
     *
     *  @param hostname  the hostname
     *  @param index the index of the loadThreshold attribute
     *  @return the remove loadThreshold attribute of <code>null</code>
     *          if the attribute has not been found
     */
    public Object removeDefaultLoadThresholdsAt(String hostname, int index) {
        return removeLoadThresholdsAt("@/", index);
    }
   
    /**
     *  Remove <code>loadThreshold</code> attribute from the
     *  default <code>hostname</code> (@/).
     *
     *  @param loadThreshold the loadThreshold) attribute
     *  @return <code>true</code> if the attribute has been removed
     */
    public boolean removeDefaultLoadThresholds(String hostname, ComplexEntry loadThreshold) {
        return removeLoadThresholds("@/", loadThreshold);
    }

    /**
     *  Remove all loadThreshold) attributes from 
     *  the default <code>hostname</code> (@/).
     */
    public void removeAllDefaultLoadThresholds() {
        removeAllLoadThresholds("@/");
    }
   
    

    // Attribute suspendThresholds ------------------------------------------------

    private Map m_suspendThresholds;
    
    private void initSuspendThresholds() {
        if (m_suspendThresholds == null) {
            m_suspendThresholds = new LinkedHashMap();
        }
    }
   
    /**
     *  Get the value of a hostname at an index.
     *  @param hostname the hostname
     *  @param index the index
     */
    public ComplexEntry getSuspendThresholds(String hostname, int index) {
        initSuspendThresholds();
        List list = (List)m_suspendThresholds.get(hostname);
        if (list == null || index < 0 || index >= list.size()) {
            throw new IllegalArgumentException("No suspendThresholds for " + hostname + "[" + index + "] set");
        }
        ComplexEntry ret = (ComplexEntry)list.get(index);

        return ret;

    }
   
    /**
     *  Get the number of values for a hostname
     *  @param hostname the hostname
     */
    public int getSuspendThresholdsCount(String hostname) {
       if (m_suspendThresholds != null) {
            List list = (List)m_suspendThresholds.get(hostname);
            if (list != null) {
                return list.size();
            }
        }
        return 0;
    }
   
    /**
     *  Add a suspendThreshold attribute to a hostname.
     *
     *  @param hostname  the hostname
     *  @param suspendThreshold the suspendThreshold attribute
     */
    public void addSuspendThresholds(String hostname, ComplexEntry suspendThreshold) {
        initSuspendThresholds();
        List list = (List)m_suspendThresholds.get(hostname);
        if (list == null) {
            list = new LinkedList();
            m_suspendThresholds.put(hostname, list);
        }

        list.add(suspendThreshold);      
   
    }

    /**
     *  Initialize <code>suspendThreshold</code> attribute for a <code>hostname</code> 
     *  with an empty list.
     *
     *  @param hostname  the hostname
     */
    public void addEmptySuspendThresholds(String hostname) {
        initSuspendThresholds();
        List list = (List)m_suspendThresholds.get(hostname);
        if (list == null) {
            list = new LinkedList();
            m_suspendThresholds.put(hostname, list);
        }
    }
   
    /**
     *  Set a suspendThreshold attribute for a hostname.
     *
     *  @param hostname  the hostname
     *  @param index  index of the suspendThreshold attribute
     *  @param suspendThreshold  the suspendThreshold attribute
     */
    public void setSuspendThresholds(String hostname, int index, ComplexEntry suspendThreshold) {
        initSuspendThresholds();
        List list = (List)m_suspendThresholds.get(hostname);
        if (list == null) {
            list = new LinkedList();
            m_suspendThresholds.put(hostname, list);
        }

        list.set(index, suspendThreshold);      
   
    }
   
    /**
     *  Remove a suspendThreshold attribute for a hostname.
     *
     *  @param hostname  the hostname
     *  @param index the index of the suspendThreshold attribute
     *  @return the remove suspendThreshold attribute of <code>null</code>
     *          if the attribute has not been found
     */
    public Object removeSuspendThresholdsAt(String hostname, int index) {
        if (m_suspendThresholds != null) {
            List list = (List)m_suspendThresholds.get(hostname);
            if (list != null) {
                return list.remove(index);
            }
        }
        return null;
    }
   
    /**
     *  Remove a suspendThreshold attribute for a hostname.
     *
     *  @param hostname  the hostname
     *  @param suspendThreshold the suspendThreshold) attribute
     *  @return <code>true</code> if the attribute has been removed
     */
    public boolean removeSuspendThresholds(String hostname, ComplexEntry suspendThreshold) {
        if (m_suspendThresholds != null) {
            List list = (List)m_suspendThresholds.get(hostname);
            if (list != null) {

                return list.remove(suspendThreshold);      
      
            }   
        }
        return false;
    }
   
    /**
     *  Remove all suspendThreshold) attributes.
     */
    public void removeAllSuspendThresholds() {
        if (m_suspendThresholds != null) {
            m_suspendThresholds.clear();
        }
    }
   
    /**
     *  Remove all suspendThreshold) attributes for a hostname.
     *
     *  @param hostname the hostname
     */   
    public void removeAllSuspendThresholds(String hostname) {
        if (m_suspendThresholds != null) {
            List list = (List)m_suspendThresholds.get(hostname);
            if (list != null) {
                list.clear();
            }
        }
    }
   
    /**
     *   Get a unmodifiable set of stored suspendThresholds attribute keys.
     *   @return unmodifiable set of stored suspendThresholds attribute keys
     */
    public Set<String> getSuspendThresholdsKeys() {
        if (m_suspendThresholds != null) {
            return Collections.unmodifiableSet(m_suspendThresholds.keySet());
        } else {
            return Collections.EMPTY_SET;
        }      
    }
   
    /**
     *  Determine if the suspendThresholds is set
     */
    public boolean isSetSuspendThresholds() {
        return (m_suspendThresholds != null) && (!m_suspendThresholds.isEmpty());
    }
   
    /**
     *  Get a unmodifiable list of suspendThresholds attributes
     *  @param hostname the key
     *  @return unmodifiable list of suspendThresholds attributes
     */
    public List getSuspendThresholdsList(String hostname) {
        if (m_suspendThresholds != null) {
            List list = (List)m_suspendThresholds.get(hostname);
            if (list != null) {
                return Collections.unmodifiableList(list);
            }
        }
        return Collections.EMPTY_LIST;
    }
   
    // default methods
   
    /**
     *  <p>Get the default value of the attribute suspendThresholds.
     *  (@/)</p>
     *  @return the default value of the attribute suspendThresholds
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public ComplexEntry getDefaultSuspendThresholds(int index) {
        return getSuspendThresholds("@/", index);
    }
   
    /**
     *  Get the number of values for  the default <code>hostname</code>
     *  (@/).
     */
    public int getDefaultSuspendThresholdsCount() {
        return getSuspendThresholdsCount("@/");
    }
   
    /**
     *  Add <code>suspendThreshold</code> attribute to 
     *  the default <code>hostname</code>  (@/).
     *
     *  @param suspendThreshold the suspendThreshold attribute
     */
    public void addDefaultSuspendThresholds(ComplexEntry suspendThreshold) {
        addSuspendThresholds("@/", suspendThreshold);
    }
   
    /**
     *  Set <code>suspendThreshold</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param index  index of the suspendThreshold attribute
     *  @param suspendThreshold  the suspendThreshold attribute
     */
    public void setDefaultSuspendThresholds(int index, ComplexEntry suspendThreshold) {
        setSuspendThresholds("@/", index, suspendThreshold);
    }
   
    /**
     *  Remove <code>suspendThreshold</code> attribute for the
     *  default <code>hostname</code> (@/).
     *
     *  @param hostname  the hostname
     *  @param index the index of the suspendThreshold attribute
     *  @return the remove suspendThreshold attribute of <code>null</code>
     *          if the attribute has not been found
     */
    public Object removeDefaultSuspendThresholdsAt(String hostname, int index) {
        return removeSuspendThresholdsAt("@/", index);
    }
   
    /**
     *  Remove <code>suspendThreshold</code> attribute from the
     *  default <code>hostname</code> (@/).
     *
     *  @param suspendThreshold the suspendThreshold) attribute
     *  @return <code>true</code> if the attribute has been removed
     */
    public boolean removeDefaultSuspendThresholds(String hostname, ComplexEntry suspendThreshold) {
        return removeSuspendThresholds("@/", suspendThreshold);
    }

    /**
     *  Remove all suspendThreshold) attributes from 
     *  the default <code>hostname</code> (@/).
     */
    public void removeAllDefaultSuspendThresholds() {
        removeAllSuspendThresholds("@/");
    }
   
    

    // Attribute consumableConfigList ------------------------------------------------

    private Map m_consumableConfig;
    
    private void initConsumableConfig() {
        if (m_consumableConfig == null) {
            m_consumableConfig = new LinkedHashMap();
        }
    }
   
    /**
     *  Get the value of a hostname at an index.
     *  @param hostname the hostname
     *  @param index the index
     */
    public ComplexEntry getConsumableConfig(String hostname, int index) {
        initConsumableConfig();
        List list = (List)m_consumableConfig.get(hostname);
        if (list == null || index < 0 || index >= list.size()) {
            throw new IllegalArgumentException("No consumableConfig for " + hostname + "[" + index + "] set");
        }
        ComplexEntry ret = (ComplexEntry)list.get(index);

        return ret;

    }
   
    /**
     *  Get the number of values for a hostname
     *  @param hostname the hostname
     */
    public int getConsumableConfigCount(String hostname) {
       if (m_consumableConfig != null) {
            List list = (List)m_consumableConfig.get(hostname);
            if (list != null) {
                return list.size();
            }
        }
        return 0;
    }
   
    /**
     *  Add a consumable attribute to a hostname.
     *
     *  @param hostname  the hostname
     *  @param consumable the consumable attribute
     */
    public void addConsumableConfig(String hostname, ComplexEntry consumable) {
        initConsumableConfig();
        List list = (List)m_consumableConfig.get(hostname);
        if (list == null) {
            list = new LinkedList();
            m_consumableConfig.put(hostname, list);
        }

        list.add(consumable);      
   
    }

    /**
     *  Initialize <code>consumable</code> attribute for a <code>hostname</code> 
     *  with an empty list.
     *
     *  @param hostname  the hostname
     */
    public void addEmptyConsumableConfig(String hostname) {
        initConsumableConfig();
        List list = (List)m_consumableConfig.get(hostname);
        if (list == null) {
            list = new LinkedList();
            m_consumableConfig.put(hostname, list);
        }
    }
   
    /**
     *  Set a consumable attribute for a hostname.
     *
     *  @param hostname  the hostname
     *  @param index  index of the consumable attribute
     *  @param consumable  the consumable attribute
     */
    public void setConsumableConfig(String hostname, int index, ComplexEntry consumable) {
        initConsumableConfig();
        List list = (List)m_consumableConfig.get(hostname);
        if (list == null) {
            list = new LinkedList();
            m_consumableConfig.put(hostname, list);
        }

        list.set(index, consumable);      
   
    }
   
    /**
     *  Remove a consumable attribute for a hostname.
     *
     *  @param hostname  the hostname
     *  @param index the index of the consumable attribute
     *  @return the remove consumable attribute of <code>null</code>
     *          if the attribute has not been found
     */
    public Object removeConsumableConfigAt(String hostname, int index) {
        if (m_consumableConfig != null) {
            List list = (List)m_consumableConfig.get(hostname);
            if (list != null) {
                return list.remove(index);
            }
        }
        return null;
    }
   
    /**
     *  Remove a consumable attribute for a hostname.
     *
     *  @param hostname  the hostname
     *  @param consumable the consumable) attribute
     *  @return <code>true</code> if the attribute has been removed
     */
    public boolean removeConsumableConfig(String hostname, ComplexEntry consumable) {
        if (m_consumableConfig != null) {
            List list = (List)m_consumableConfig.get(hostname);
            if (list != null) {

                return list.remove(consumable);      
      
            }   
        }
        return false;
    }
   
    /**
     *  Remove all consumable) attributes.
     */
    public void removeAllConsumableConfig() {
        if (m_consumableConfig != null) {
            m_consumableConfig.clear();
        }
    }
   
    /**
     *  Remove all consumable) attributes for a hostname.
     *
     *  @param hostname the hostname
     */   
    public void removeAllConsumableConfig(String hostname) {
        if (m_consumableConfig != null) {
            List list = (List)m_consumableConfig.get(hostname);
            if (list != null) {
                list.clear();
            }
        }
    }
   
    /**
     *   Get a unmodifiable set of stored consumableConfig attribute keys.
     *   @return unmodifiable set of stored consumableConfig attribute keys
     */
    public Set<String> getConsumableConfigKeys() {
        if (m_consumableConfig != null) {
            return Collections.unmodifiableSet(m_consumableConfig.keySet());
        } else {
            return Collections.EMPTY_SET;
        }      
    }
   
    /**
     *  Determine if the consumableConfig is set
     */
    public boolean isSetConsumableConfig() {
        return (m_consumableConfig != null) && (!m_consumableConfig.isEmpty());
    }
   
    /**
     *  Get a unmodifiable list of consumableConfig attributes
     *  @param hostname the key
     *  @return unmodifiable list of consumableConfig attributes
     */
    public List getConsumableConfigList(String hostname) {
        if (m_consumableConfig != null) {
            List list = (List)m_consumableConfig.get(hostname);
            if (list != null) {
                return Collections.unmodifiableList(list);
            }
        }
        return Collections.EMPTY_LIST;
    }
   
    // default methods
   
    /**
     *  <p>Get the default value of the attribute consumableConfig.
     *  (@/)</p>
     *  @return the default value of the attribute consumableConfig
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public ComplexEntry getDefaultConsumableConfig(int index) {
        return getConsumableConfig("@/", index);
    }
   
    /**
     *  Get the number of values for  the default <code>hostname</code>
     *  (@/).
     */
    public int getDefaultConsumableConfigCount() {
        return getConsumableConfigCount("@/");
    }
   
    /**
     *  Add <code>consumable</code> attribute to 
     *  the default <code>hostname</code>  (@/).
     *
     *  @param consumable the consumable attribute
     */
    public void addDefaultConsumableConfig(ComplexEntry consumable) {
        addConsumableConfig("@/", consumable);
    }
   
    /**
     *  Set <code>consumable</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param index  index of the consumable attribute
     *  @param consumable  the consumable attribute
     */
    public void setDefaultConsumableConfig(int index, ComplexEntry consumable) {
        setConsumableConfig("@/", index, consumable);
    }
   
    /**
     *  Remove <code>consumable</code> attribute for the
     *  default <code>hostname</code> (@/).
     *
     *  @param hostname  the hostname
     *  @param index the index of the consumable attribute
     *  @return the remove consumable attribute of <code>null</code>
     *          if the attribute has not been found
     */
    public Object removeDefaultConsumableConfigAt(String hostname, int index) {
        return removeConsumableConfigAt("@/", index);
    }
   
    /**
     *  Remove <code>consumable</code> attribute from the
     *  default <code>hostname</code> (@/).
     *
     *  @param consumable the consumable) attribute
     *  @return <code>true</code> if the attribute has been removed
     */
    public boolean removeDefaultConsumableConfig(String hostname, ComplexEntry consumable) {
        return removeConsumableConfig("@/", consumable);
    }

    /**
     *  Remove all consumable) attributes from 
     *  the default <code>hostname</code> (@/).
     */
    public void removeAllDefaultConsumableConfig() {
        removeAllConsumableConfig("@/");
    }
   
    

    // Attribute subordinateList ------------------------------------------------

    private Map m_subordinate;
    
    private void initSubordinate() {
        if (m_subordinate == null) {
            m_subordinate = new LinkedHashMap();
        }
    }
   
    /**
     *  Get the value of a hostname at an index.
     *  @param hostname the hostname
     *  @param index the index
     */
    public Subordinate getSubordinate(String hostname, int index) {
        initSubordinate();
        List list = (List)m_subordinate.get(hostname);
        if (list == null || index < 0 || index >= list.size()) {
            throw new IllegalArgumentException("No subordinate for " + hostname + "[" + index + "] set");
        }
        Subordinate ret = (Subordinate)list.get(index);

        return ret;

    }
   
    /**
     *  Get the number of values for a hostname
     *  @param hostname the hostname
     */
    public int getSubordinateCount(String hostname) {
       if (m_subordinate != null) {
            List list = (List)m_subordinate.get(hostname);
            if (list != null) {
                return list.size();
            }
        }
        return 0;
    }
   
    /**
     *  Add a subordinate attribute to a hostname.
     *
     *  @param hostname  the hostname
     *  @param subordinate the subordinate attribute
     */
    public void addSubordinate(String hostname, Subordinate subordinate) {
        initSubordinate();
        List list = (List)m_subordinate.get(hostname);
        if (list == null) {
            list = new LinkedList();
            m_subordinate.put(hostname, list);
        }

        list.add(subordinate);      
   
    }

    /**
     *  Initialize <code>subordinate</code> attribute for a <code>hostname</code> 
     *  with an empty list.
     *
     *  @param hostname  the hostname
     */
    public void addEmptySubordinate(String hostname) {
        initSubordinate();
        List list = (List)m_subordinate.get(hostname);
        if (list == null) {
            list = new LinkedList();
            m_subordinate.put(hostname, list);
        }
    }
   
    /**
     *  Set a subordinate attribute for a hostname.
     *
     *  @param hostname  the hostname
     *  @param index  index of the subordinate attribute
     *  @param subordinate  the subordinate attribute
     */
    public void setSubordinate(String hostname, int index, Subordinate subordinate) {
        initSubordinate();
        List list = (List)m_subordinate.get(hostname);
        if (list == null) {
            list = new LinkedList();
            m_subordinate.put(hostname, list);
        }

        list.set(index, subordinate);      
   
    }
   
    /**
     *  Remove a subordinate attribute for a hostname.
     *
     *  @param hostname  the hostname
     *  @param index the index of the subordinate attribute
     *  @return the remove subordinate attribute of <code>null</code>
     *          if the attribute has not been found
     */
    public Object removeSubordinateAt(String hostname, int index) {
        if (m_subordinate != null) {
            List list = (List)m_subordinate.get(hostname);
            if (list != null) {
                return list.remove(index);
            }
        }
        return null;
    }
   
    /**
     *  Remove a subordinate attribute for a hostname.
     *
     *  @param hostname  the hostname
     *  @param subordinate the subordinate) attribute
     *  @return <code>true</code> if the attribute has been removed
     */
    public boolean removeSubordinate(String hostname, Subordinate subordinate) {
        if (m_subordinate != null) {
            List list = (List)m_subordinate.get(hostname);
            if (list != null) {

                return list.remove(subordinate);      
      
            }   
        }
        return false;
    }
   
    /**
     *  Remove all subordinate) attributes.
     */
    public void removeAllSubordinate() {
        if (m_subordinate != null) {
            m_subordinate.clear();
        }
    }
   
    /**
     *  Remove all subordinate) attributes for a hostname.
     *
     *  @param hostname the hostname
     */   
    public void removeAllSubordinate(String hostname) {
        if (m_subordinate != null) {
            List list = (List)m_subordinate.get(hostname);
            if (list != null) {
                list.clear();
            }
        }
    }
   
    /**
     *   Get a unmodifiable set of stored subordinate attribute keys.
     *   @return unmodifiable set of stored subordinate attribute keys
     */
    public Set<String> getSubordinateKeys() {
        if (m_subordinate != null) {
            return Collections.unmodifiableSet(m_subordinate.keySet());
        } else {
            return Collections.EMPTY_SET;
        }      
    }
   
    /**
     *  Determine if the subordinate is set
     */
    public boolean isSetSubordinate() {
        return (m_subordinate != null) && (!m_subordinate.isEmpty());
    }
   
    /**
     *  Get a unmodifiable list of subordinate attributes
     *  @param hostname the key
     *  @return unmodifiable list of subordinate attributes
     */
    public List getSubordinateList(String hostname) {
        if (m_subordinate != null) {
            List list = (List)m_subordinate.get(hostname);
            if (list != null) {
                return Collections.unmodifiableList(list);
            }
        }
        return Collections.EMPTY_LIST;
    }
   
    // default methods
   
    /**
     *  <p>Get the default value of the attribute subordinate.
     *  (@/)</p>
     *  @return the default value of the attribute subordinate
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public Subordinate getDefaultSubordinate(int index) {
        return getSubordinate("@/", index);
    }
   
    /**
     *  Get the number of values for  the default <code>hostname</code>
     *  (@/).
     */
    public int getDefaultSubordinateCount() {
        return getSubordinateCount("@/");
    }
   
    /**
     *  Add <code>subordinate</code> attribute to 
     *  the default <code>hostname</code>  (@/).
     *
     *  @param subordinate the subordinate attribute
     */
    public void addDefaultSubordinate(Subordinate subordinate) {
        addSubordinate("@/", subordinate);
    }
   
    /**
     *  Set <code>subordinate</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param index  index of the subordinate attribute
     *  @param subordinate  the subordinate attribute
     */
    public void setDefaultSubordinate(int index, Subordinate subordinate) {
        setSubordinate("@/", index, subordinate);
    }
   
    /**
     *  Remove <code>subordinate</code> attribute for the
     *  default <code>hostname</code> (@/).
     *
     *  @param hostname  the hostname
     *  @param index the index of the subordinate attribute
     *  @return the remove subordinate attribute of <code>null</code>
     *          if the attribute has not been found
     */
    public Object removeDefaultSubordinateAt(String hostname, int index) {
        return removeSubordinateAt("@/", index);
    }
   
    /**
     *  Remove <code>subordinate</code> attribute from the
     *  default <code>hostname</code> (@/).
     *
     *  @param subordinate the subordinate) attribute
     *  @return <code>true</code> if the attribute has been removed
     */
    public boolean removeDefaultSubordinate(String hostname, Subordinate subordinate) {
        return removeSubordinate("@/", subordinate);
    }

    /**
     *  Remove all subordinate) attributes from 
     *  the default <code>hostname</code> (@/).
     */
    public void removeAllDefaultSubordinate() {
        removeAllSubordinate("@/");
    }
   
    

    // Attribute qtype ------------------------------------------------

    // keyClassName for SGE_HOST = String

   
    private Map m_qtype;

    private void initQtype() {
        if (m_qtype == null) {
            m_qtype = new LinkedHashMap();
        }
    }
   
    /**
     *  <p>Put the attribute qtype for a hostname.</p>
     *
     *  @param hostname    the hostname
     *  @param qType  the qType
     */
    public void putQtype(String hostname, int qType) {   
        initQtype();
        m_qtype.put(hostname,

                            new java.lang.Integer(qType)

                            );
    }

    /**
     *  <p>Get the default value of the attribute qtype.</p>
     *  @return the default value of the attribute qtype
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public int getDefaultQtype() {
        if (m_qtype == null) {
            throw new IllegalStateException("default value for attribute qtype not found");
        }
        java.lang.Integer ret = (java.lang.Integer)m_qtype.get("@/");
        if (ret == null) {
            throw new IllegalStateException("default value for attribute qtype not found");
        }

        return ret.intValue();

    }
   
    /**
     *  <p>Get the qtype attribute for a hostname.</p>
     *  @param   hostname   the hostname
     *  @return  the qtype attribute for the host or the
     *           default value of  qtype
     */
    public int getQtype(String hostname) {
        initQtype();
        if (m_qtype.containsKey(hostname)) {      
            java.lang.Integer ret = (java.lang.Integer)m_qtype.get(hostname);
            if (ret != null) {

                return ret.intValue();

            } else {
                return 0;
            }
        } else {
            return getDefaultQtype();
        }
    }

    /**
     *  Set <code>qType</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param qType  the qType attribute
     */
    public void setDefaultQtype(int qType) {
        putQtype("@/", qType);
    }


    /**
     *  <p>remove the attribute qtype for a hostname.</p>
     *
     *  @param hostname tje hostname
     *  @return the qType for the hostname or <code>null</code>
     *          if the qType attribute was not defined for the hostname.
     */
    public java.lang.Integer removeQtype(String hostname) {
        initQtype();
        return (java.lang.Integer)m_qtype.remove(hostname);
    }

    /**
     *  <p>Remove the attribute qtype for all hostnames.</p>
     */
    public void removeAllQtype() {
        if (m_qtype != null) {
            m_qtype.clear();
        }
    }
   
    /**
     *  Get the set of hostnames which have the attribute qtype set.
     *  @return set of hostnames
     */
    public Set<String> getQtypeKeys() {
        if (m_qtype == null) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(m_qtype.keySet());
        }
    }
   
    /**
     *  Get the number of hostnames which have the attribute qtype set.
     *  @return the number of hostnames which have the attribute qtype set.
     */
    public int getQtypeCount() {
        if (m_qtype == null) {
            return 0;
        } else {
            return m_qtype.size();
        }
    }
   
    /**
     *  Determine if any qtype attribute is set
     *  @return <code>true</code> if the qtype attribute is set
     */
    public boolean isSetQtype () {
        return (m_qtype != null) && (!m_qtype.isEmpty());
    }
   
    /**
     *  Determine if any qtype attribute is for a hostname is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the qtype attribute is set
     */
    public boolean isSetQtype(String hostname) {
        return (m_qtype != null) && (m_qtype.get(hostname) != null);
    }
   


    // Attribute tag ------------------------------------------------

    private boolean isTagSet;
   
    /**
     *  Determine if the tag attribute is set
     *  @return <code>true</code> if the tag attribute is set
     */
    public boolean isSetTag() {

        return isTagSet;

    }
   
    private int m_tag;

    /**
     *   Set the tag attribute.
     *
     *   @param aTag  the new value for the  tag attribute
     */
    public void setTag(int aTag) {   
        m_tag = aTag;

        isTagSet = true;

    }

    /**
     *  Get the value of the tag attribute.
     *  @return the value of the tag attribute
     */
    public int getTag() {
        return m_tag;
    }




    /**
     *  Is the primary key information equal to the primary key information
     *  of <code>obj</code>.
     *
     *  @param obj   the compared object
     *  @return <code>true</code> if the primary key information is equal to the
     *          primary key informations of <code>obj</code>.
     */
    public boolean equals(Object obj) {

        return (obj instanceof ClusterQueueImpl && getName().equals(((com.sun.grid.jgdi.configuration.ClusterQueue)obj).getName()));

    }

    
    
    public boolean equalsCompletely(Object obj) {
        Logger logger = Logger.getLogger(getClass().getName());
        if (obj instanceof  ClusterQueueImpl) {
            com.sun.grid.jgdi.configuration.ClusterQueue obj1 = (com.sun.grid.jgdi.configuration.ClusterQueue)obj;

            {
                java.lang.String value1 = getName();
                java.lang.String value2 = obj1.getName();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute CQ_name of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes CQ_name are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                int hostlistCount = getHostlistCount();
                if (hostlistCount != obj1.getHostlistCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists hostlist has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < hostlistCount; i++) {
                    java.lang.String value1 = getHostlist(i);
                    java.lang.String value2 = obj1.getHostlist(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute CQ_hostlist of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes CQ_hostlist are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

                } // end of for
            }
           
            {
                Set seqNoSet1 = getSeqNoKeys();
                Set seqNoSet2 = obj1.getSeqNoKeys();
                if (seqNoSet1.size() != seqNoSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("maps seqNo has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getSeqNoKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    int value1 = getSeqNo(key);
                    int value2 = obj1.getSeqNo(key);             

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes AULNG_value are not equal");
                }
                return false;
            }

                }
            }
           
            {
                Set nsuspendSet1 = getNsuspendKeys();
                Set nsuspendSet2 = obj1.getNsuspendKeys();
                if (nsuspendSet1.size() != nsuspendSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("maps nsuspend has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getNsuspendKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    int value1 = getNsuspend(key);
                    int value2 = obj1.getNsuspend(key);             

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes AULNG_value are not equal");
                }
                return false;
            }

                }
            }
           
            {
                Set jobSlotsSet1 = getJobSlotsKeys();
                Set jobSlotsSet2 = obj1.getJobSlotsKeys();
                if (jobSlotsSet1.size() != jobSlotsSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("maps jobSlots has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getJobSlotsKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    int value1 = getJobSlots(key);
                    int value2 = obj1.getJobSlots(key);             

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes AULNG_value are not equal");
                }
                return false;
            }

                }
            }
           
            {
                Set rerunSet1 = getRerunKeys();
                Set rerunSet2 = obj1.getRerunKeys();
                if (rerunSet1.size() != rerunSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("maps rerun has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getRerunKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    boolean value1 = getRerun(key);
                    boolean value2 = obj1.getRerun(key);             

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes ABOOL_value are not equal");
                }
                return false;
            }

                }
            }
           
            {
                Set sFsizeSet1 = getSFsizeKeys();
                Set sFsizeSet2 = obj1.getSFsizeKeys();
                if (sFsizeSet1.size() != sFsizeSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("maps sFsize has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getSFsizeKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    java.lang.String value1 = getSFsize(key);
                    java.lang.String value2 = obj1.getSFsize(key);             

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute AMEM_value of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes AMEM_value are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

                }
            }
           
            {
                Set hFsizeSet1 = getHFsizeKeys();
                Set hFsizeSet2 = obj1.getHFsizeKeys();
                if (hFsizeSet1.size() != hFsizeSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("maps hFsize has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getHFsizeKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    java.lang.String value1 = getHFsize(key);
                    java.lang.String value2 = obj1.getHFsize(key);             

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute AMEM_value of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes AMEM_value are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

                }
            }
           
            {
                Set sDataSet1 = getSDataKeys();
                Set sDataSet2 = obj1.getSDataKeys();
                if (sDataSet1.size() != sDataSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("maps sData has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getSDataKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    java.lang.String value1 = getSData(key);
                    java.lang.String value2 = obj1.getSData(key);             

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute AMEM_value of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes AMEM_value are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

                }
            }
           
            {
                Set hDataSet1 = getHDataKeys();
                Set hDataSet2 = obj1.getHDataKeys();
                if (hDataSet1.size() != hDataSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("maps hData has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getHDataKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    java.lang.String value1 = getHData(key);
                    java.lang.String value2 = obj1.getHData(key);             

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute AMEM_value of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes AMEM_value are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

                }
            }
           
            {
                Set sStackSet1 = getSStackKeys();
                Set sStackSet2 = obj1.getSStackKeys();
                if (sStackSet1.size() != sStackSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("maps sStack has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getSStackKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    java.lang.String value1 = getSStack(key);
                    java.lang.String value2 = obj1.getSStack(key);             

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute AMEM_value of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes AMEM_value are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

                }
            }
           
            {
                Set hStackSet1 = getHStackKeys();
                Set hStackSet2 = obj1.getHStackKeys();
                if (hStackSet1.size() != hStackSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("maps hStack has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getHStackKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    java.lang.String value1 = getHStack(key);
                    java.lang.String value2 = obj1.getHStack(key);             

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute AMEM_value of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes AMEM_value are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

                }
            }
           
            {
                Set sCoreSet1 = getSCoreKeys();
                Set sCoreSet2 = obj1.getSCoreKeys();
                if (sCoreSet1.size() != sCoreSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("maps sCore has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getSCoreKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    java.lang.String value1 = getSCore(key);
                    java.lang.String value2 = obj1.getSCore(key);             

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute AMEM_value of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes AMEM_value are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

                }
            }
           
            {
                Set hCoreSet1 = getHCoreKeys();
                Set hCoreSet2 = obj1.getHCoreKeys();
                if (hCoreSet1.size() != hCoreSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("maps hCore has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getHCoreKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    java.lang.String value1 = getHCore(key);
                    java.lang.String value2 = obj1.getHCore(key);             

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute AMEM_value of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes AMEM_value are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

                }
            }
           
            {
                Set sRssSet1 = getSRssKeys();
                Set sRssSet2 = obj1.getSRssKeys();
                if (sRssSet1.size() != sRssSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("maps sRss has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getSRssKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    java.lang.String value1 = getSRss(key);
                    java.lang.String value2 = obj1.getSRss(key);             

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute AMEM_value of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes AMEM_value are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

                }
            }
           
            {
                Set hRssSet1 = getHRssKeys();
                Set hRssSet2 = obj1.getHRssKeys();
                if (hRssSet1.size() != hRssSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("maps hRss has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getHRssKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    java.lang.String value1 = getHRss(key);
                    java.lang.String value2 = obj1.getHRss(key);             

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute AMEM_value of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes AMEM_value are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

                }
            }
           
            {
                Set sVmemSet1 = getSVmemKeys();
                Set sVmemSet2 = obj1.getSVmemKeys();
                if (sVmemSet1.size() != sVmemSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("maps sVmem has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getSVmemKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    java.lang.String value1 = getSVmem(key);
                    java.lang.String value2 = obj1.getSVmem(key);             

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute AMEM_value of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes AMEM_value are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

                }
            }
           
            {
                Set hVmemSet1 = getHVmemKeys();
                Set hVmemSet2 = obj1.getHVmemKeys();
                if (hVmemSet1.size() != hVmemSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("maps hVmem has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getHVmemKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    java.lang.String value1 = getHVmem(key);
                    java.lang.String value2 = obj1.getHVmem(key);             

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute AMEM_value of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes AMEM_value are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

                }
            }
           
            {
                Set sRtSet1 = getSRtKeys();
                Set sRtSet2 = obj1.getSRtKeys();
                if (sRtSet1.size() != sRtSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("maps sRt has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getSRtKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    java.lang.String value1 = getSRt(key);
                    java.lang.String value2 = obj1.getSRt(key);             

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute ATIME_value of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes ATIME_value are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

                }
            }
           
            {
                Set hRtSet1 = getHRtKeys();
                Set hRtSet2 = obj1.getHRtKeys();
                if (hRtSet1.size() != hRtSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("maps hRt has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getHRtKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    java.lang.String value1 = getHRt(key);
                    java.lang.String value2 = obj1.getHRt(key);             

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute ATIME_value of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes ATIME_value are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

                }
            }
           
            {
                Set sCpuSet1 = getSCpuKeys();
                Set sCpuSet2 = obj1.getSCpuKeys();
                if (sCpuSet1.size() != sCpuSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("maps sCpu has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getSCpuKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    java.lang.String value1 = getSCpu(key);
                    java.lang.String value2 = obj1.getSCpu(key);             

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute ATIME_value of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes ATIME_value are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

                }
            }
           
            {
                Set hCpuSet1 = getHCpuKeys();
                Set hCpuSet2 = obj1.getHCpuKeys();
                if (hCpuSet1.size() != hCpuSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("maps hCpu has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getHCpuKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    java.lang.String value1 = getHCpu(key);
                    java.lang.String value2 = obj1.getHCpu(key);             

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute ATIME_value of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes ATIME_value are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

                }
            }
           
            {
                Set suspendIntervalSet1 = getSuspendIntervalKeys();
                Set suspendIntervalSet2 = obj1.getSuspendIntervalKeys();
                if (suspendIntervalSet1.size() != suspendIntervalSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("maps suspendInterval has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getSuspendIntervalKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    java.lang.String value1 = getSuspendInterval(key);
                    java.lang.String value2 = obj1.getSuspendInterval(key);             

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute AINTER_value of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes AINTER_value are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

                }
            }
           
            {
                Set minCpuIntervalSet1 = getMinCpuIntervalKeys();
                Set minCpuIntervalSet2 = obj1.getMinCpuIntervalKeys();
                if (minCpuIntervalSet1.size() != minCpuIntervalSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("maps minCpuInterval has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getMinCpuIntervalKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    java.lang.String value1 = getMinCpuInterval(key);
                    java.lang.String value2 = obj1.getMinCpuInterval(key);             

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute AINTER_value of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes AINTER_value are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

                }
            }
           
            {
                Set notifySet1 = getNotifyKeys();
                Set notifySet2 = obj1.getNotifyKeys();
                if (notifySet1.size() != notifySet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("maps notify has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getNotifyKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    java.lang.String value1 = getNotify(key);
                    java.lang.String value2 = obj1.getNotify(key);             

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute AINTER_value of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes AINTER_value are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

                }
            }
           
            {
                Set tmpdirSet1 = getTmpdirKeys();
                Set tmpdirSet2 = obj1.getTmpdirKeys();
                if (tmpdirSet1.size() != tmpdirSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("maps tmpdir has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getTmpdirKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    java.lang.String value1 = getTmpdir(key);
                    java.lang.String value2 = obj1.getTmpdir(key);             

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute ASTR_value of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes ASTR_value are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

                }
            }
           
            {
                Set shellSet1 = getShellKeys();
                Set shellSet2 = obj1.getShellKeys();
                if (shellSet1.size() != shellSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("maps shell has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getShellKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    java.lang.String value1 = getShell(key);
                    java.lang.String value2 = obj1.getShell(key);             

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute ASTR_value of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes ASTR_value are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

                }
            }
           
            {
                Set calendarSet1 = getCalendarKeys();
                Set calendarSet2 = obj1.getCalendarKeys();
                if (calendarSet1.size() != calendarSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("maps calendar has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getCalendarKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    java.lang.String value1 = getCalendar(key);
                    java.lang.String value2 = obj1.getCalendar(key);             

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute ASTR_value of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes ASTR_value are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

                }
            }
           
            {
                Set prioritySet1 = getPriorityKeys();
                Set prioritySet2 = obj1.getPriorityKeys();
                if (prioritySet1.size() != prioritySet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("maps priority has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getPriorityKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    java.lang.String value1 = getPriority(key);
                    java.lang.String value2 = obj1.getPriority(key);             

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute ASTR_value of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes ASTR_value are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

                }
            }
           
            {
                Set processorsSet1 = getProcessorsKeys();
                Set processorsSet2 = obj1.getProcessorsKeys();
                if (processorsSet1.size() != processorsSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("maps processors has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getProcessorsKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    java.lang.String value1 = getProcessors(key);
                    java.lang.String value2 = obj1.getProcessors(key);             

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute ASTR_value of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes ASTR_value are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

                }
            }
           
            {
                Set prologSet1 = getPrologKeys();
                Set prologSet2 = obj1.getPrologKeys();
                if (prologSet1.size() != prologSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("maps prolog has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getPrologKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    java.lang.String value1 = getProlog(key);
                    java.lang.String value2 = obj1.getProlog(key);             

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute ASTR_value of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes ASTR_value are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

                }
            }
           
            {
                Set epilogSet1 = getEpilogKeys();
                Set epilogSet2 = obj1.getEpilogKeys();
                if (epilogSet1.size() != epilogSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("maps epilog has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getEpilogKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    java.lang.String value1 = getEpilog(key);
                    java.lang.String value2 = obj1.getEpilog(key);             

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute ASTR_value of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes ASTR_value are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

                }
            }
           
            {
                Set shellStartModeSet1 = getShellStartModeKeys();
                Set shellStartModeSet2 = obj1.getShellStartModeKeys();
                if (shellStartModeSet1.size() != shellStartModeSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("maps shellStartMode has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getShellStartModeKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    java.lang.String value1 = getShellStartMode(key);
                    java.lang.String value2 = obj1.getShellStartMode(key);             

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute ASTR_value of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes ASTR_value are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

                }
            }
           
            {
                Set starterMethodSet1 = getStarterMethodKeys();
                Set starterMethodSet2 = obj1.getStarterMethodKeys();
                if (starterMethodSet1.size() != starterMethodSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("maps starterMethod has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getStarterMethodKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    java.lang.String value1 = getStarterMethod(key);
                    java.lang.String value2 = obj1.getStarterMethod(key);             

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute ASTR_value of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes ASTR_value are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

                }
            }
           
            {
                Set suspendMethodSet1 = getSuspendMethodKeys();
                Set suspendMethodSet2 = obj1.getSuspendMethodKeys();
                if (suspendMethodSet1.size() != suspendMethodSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("maps suspendMethod has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getSuspendMethodKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    java.lang.String value1 = getSuspendMethod(key);
                    java.lang.String value2 = obj1.getSuspendMethod(key);             

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute ASTR_value of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes ASTR_value are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

                }
            }
           
            {
                Set resumeMethodSet1 = getResumeMethodKeys();
                Set resumeMethodSet2 = obj1.getResumeMethodKeys();
                if (resumeMethodSet1.size() != resumeMethodSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("maps resumeMethod has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getResumeMethodKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    java.lang.String value1 = getResumeMethod(key);
                    java.lang.String value2 = obj1.getResumeMethod(key);             

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute ASTR_value of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes ASTR_value are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

                }
            }
           
            {
                Set terminateMethodSet1 = getTerminateMethodKeys();
                Set terminateMethodSet2 = obj1.getTerminateMethodKeys();
                if (terminateMethodSet1.size() != terminateMethodSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("maps terminateMethod has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getTerminateMethodKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    java.lang.String value1 = getTerminateMethod(key);
                    java.lang.String value2 = obj1.getTerminateMethod(key);             

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute ASTR_value of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes ASTR_value are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

                }
            }
           
            {
                Set initialStateSet1 = getInitialStateKeys();
                Set initialStateSet2 = obj1.getInitialStateKeys();
                if (initialStateSet1.size() != initialStateSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("maps initialState has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getInitialStateKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    java.lang.String value1 = getInitialState(key);
                    java.lang.String value2 = obj1.getInitialState(key);             

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute ASTR_value of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes ASTR_value are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

                }
            }
        
            {
                Set peSet1 = getPeKeys();
                Set peSet2 = obj1.getPeKeys();
          
                if (peSet1.size() != peSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("map lists pe has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getPeKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    int count = getPeCount(key);
                    if (count != obj1.getPeCount(key)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("map list pe is different list size for key " + key);
                    }
                    return false;
                }
                for (int i = 0; i < count; i++) {
                    java.lang.String value1 = getPe(key, i);
                    java.lang.String value2 = obj1.getPe(key, i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute ASTRLIST_value of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes ASTRLIST_value are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

                }
            }
        }
        
            {
                Set ckptSet1 = getCkptKeys();
                Set ckptSet2 = obj1.getCkptKeys();
          
                if (ckptSet1.size() != ckptSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("map lists ckpt has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getCkptKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    int count = getCkptCount(key);
                    if (count != obj1.getCkptCount(key)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("map list ckpt is different list size for key " + key);
                    }
                    return false;
                }
                for (int i = 0; i < count; i++) {
                    java.lang.String value1 = getCkpt(key, i);
                    java.lang.String value2 = obj1.getCkpt(key, i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute ASTRLIST_value of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes ASTRLIST_value are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

                }
            }
        }
        
            {
                Set ownerSet1 = getOwnerKeys();
                Set ownerSet2 = obj1.getOwnerKeys();
          
                if (ownerSet1.size() != ownerSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("map lists owner has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getOwnerKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    int count = getOwnerCount(key);
                    if (count != obj1.getOwnerCount(key)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("map list owner is different list size for key " + key);
                    }
                    return false;
                }
                for (int i = 0; i < count; i++) {
                    com.sun.grid.jgdi.configuration.UserSet value1 = getOwner(key, i);
                    com.sun.grid.jgdi.configuration.UserSet value2 = obj1.getOwner(key, i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute AUSRLIST_value of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

                }
            }
        }
        
            {
                Set aclSet1 = getAclKeys();
                Set aclSet2 = obj1.getAclKeys();
          
                if (aclSet1.size() != aclSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("map lists acl has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getAclKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    int count = getAclCount(key);
                    if (count != obj1.getAclCount(key)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("map list acl is different list size for key " + key);
                    }
                    return false;
                }
                for (int i = 0; i < count; i++) {
                    com.sun.grid.jgdi.configuration.UserSet value1 = getAcl(key, i);
                    com.sun.grid.jgdi.configuration.UserSet value2 = obj1.getAcl(key, i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute AUSRLIST_value of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

                }
            }
        }
        
            {
                Set xaclSet1 = getXaclKeys();
                Set xaclSet2 = obj1.getXaclKeys();
          
                if (xaclSet1.size() != xaclSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("map lists xacl has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getXaclKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    int count = getXaclCount(key);
                    if (count != obj1.getXaclCount(key)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("map list xacl is different list size for key " + key);
                    }
                    return false;
                }
                for (int i = 0; i < count; i++) {
                    com.sun.grid.jgdi.configuration.UserSet value1 = getXacl(key, i);
                    com.sun.grid.jgdi.configuration.UserSet value2 = obj1.getXacl(key, i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute AUSRLIST_value of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

                }
            }
        }
        
            {
                Set projectsSet1 = getProjectsKeys();
                Set projectsSet2 = obj1.getProjectsKeys();
          
                if (projectsSet1.size() != projectsSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("map lists projects has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getProjectsKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    int count = getProjectsCount(key);
                    if (count != obj1.getProjectsCount(key)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("map list projects is different list size for key " + key);
                    }
                    return false;
                }
                for (int i = 0; i < count; i++) {
                    com.sun.grid.jgdi.configuration.Project value1 = getProjects(key, i);
                    com.sun.grid.jgdi.configuration.Project value2 = obj1.getProjects(key, i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute APRJLIST_value of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

                }
            }
        }
        
            {
                Set xprojectsSet1 = getXprojectsKeys();
                Set xprojectsSet2 = obj1.getXprojectsKeys();
          
                if (xprojectsSet1.size() != xprojectsSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("map lists xprojects has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getXprojectsKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    int count = getXprojectsCount(key);
                    if (count != obj1.getXprojectsCount(key)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("map list xprojects is different list size for key " + key);
                    }
                    return false;
                }
                for (int i = 0; i < count; i++) {
                    com.sun.grid.jgdi.configuration.Project value1 = getXprojects(key, i);
                    com.sun.grid.jgdi.configuration.Project value2 = obj1.getXprojects(key, i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute APRJLIST_value of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

                }
            }
        }
        
            {
                Set loadThresholdsSet1 = getLoadThresholdsKeys();
                Set loadThresholdsSet2 = obj1.getLoadThresholdsKeys();
          
                if (loadThresholdsSet1.size() != loadThresholdsSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("map lists loadThresholds has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getLoadThresholdsKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    int count = getLoadThresholdsCount(key);
                    if (count != obj1.getLoadThresholdsCount(key)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("map list loadThresholds is different list size for key " + key);
                    }
                    return false;
                }
                for (int i = 0; i < count; i++) {
                    com.sun.grid.jgdi.configuration.ComplexEntry value1 = getLoadThresholds(key, i);
                    com.sun.grid.jgdi.configuration.ComplexEntry value2 = obj1.getLoadThresholds(key, i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute ACELIST_value of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

                }
            }
        }
        
            {
                Set suspendThresholdsSet1 = getSuspendThresholdsKeys();
                Set suspendThresholdsSet2 = obj1.getSuspendThresholdsKeys();
          
                if (suspendThresholdsSet1.size() != suspendThresholdsSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("map lists suspendThresholds has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getSuspendThresholdsKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    int count = getSuspendThresholdsCount(key);
                    if (count != obj1.getSuspendThresholdsCount(key)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("map list suspendThresholds is different list size for key " + key);
                    }
                    return false;
                }
                for (int i = 0; i < count; i++) {
                    com.sun.grid.jgdi.configuration.ComplexEntry value1 = getSuspendThresholds(key, i);
                    com.sun.grid.jgdi.configuration.ComplexEntry value2 = obj1.getSuspendThresholds(key, i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute ACELIST_value of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

                }
            }
        }
        
            {
                Set consumableConfigSet1 = getConsumableConfigKeys();
                Set consumableConfigSet2 = obj1.getConsumableConfigKeys();
          
                if (consumableConfigSet1.size() != consumableConfigSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("map lists consumableConfig has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getConsumableConfigKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    int count = getConsumableConfigCount(key);
                    if (count != obj1.getConsumableConfigCount(key)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("map list consumableConfig is different list size for key " + key);
                    }
                    return false;
                }
                for (int i = 0; i < count; i++) {
                    com.sun.grid.jgdi.configuration.ComplexEntry value1 = getConsumableConfig(key, i);
                    com.sun.grid.jgdi.configuration.ComplexEntry value2 = obj1.getConsumableConfig(key, i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute ACELIST_value of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

                }
            }
        }
        
            {
                Set subordinateSet1 = getSubordinateKeys();
                Set subordinateSet2 = obj1.getSubordinateKeys();
          
                if (subordinateSet1.size() != subordinateSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("map lists subordinate has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getSubordinateKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    int count = getSubordinateCount(key);
                    if (count != obj1.getSubordinateCount(key)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("map list subordinate is different list size for key " + key);
                    }
                    return false;
                }
                for (int i = 0; i < count; i++) {
                    com.sun.grid.jgdi.configuration.Subordinate value1 = getSubordinate(key, i);
                    com.sun.grid.jgdi.configuration.Subordinate value2 = obj1.getSubordinate(key, i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute ASOLIST_value of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

                }
            }
        }
           
            {
                Set qtypeSet1 = getQtypeKeys();
                Set qtypeSet2 = obj1.getQtypeKeys();
                if (qtypeSet1.size() != qtypeSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("maps qtype has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getQtypeKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    int value1 = getQtype(key);
                    int value2 = obj1.getQtype(key);             

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes AQTLIST_value are not equal");
                }
                return false;
            }

                }
            }

            {
                int value1 = getTag();
                int value2 = obj1.getTag();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes CQ_tag are not equal");
                }
                return false;
            }

            }

            return true;
        } else {
            return true;
        }
    }
  
    public java.lang.String toString() {
        StringBuilder ret = new StringBuilder();
        ret.append("ClusterQueueImpl(");

        ret.append(getName());

        ret.append(")");
        return ret.toString();
    }



    public java.lang.String dump() {
        StringBuilder sb = new StringBuilder();

            {
                java.lang.String value = getName();
                sb.append("Name = " + value + "\n");
            }

            int hostlistCount = getHostlistCount();
            for (int i = 0; i < hostlistCount; i++) {
                java.lang.String value = getHostlist(i);
                
                sb.append("Hostlist[" + i + "] = " + value + "\n");
                
            } // end of for

            for (java.lang.String key : getSeqNoKeys()) {
                int value = getSeqNo(key);
                
                sb.append("SeqNo[" + key + "] = " + value + "\n");
                
            }

            for (java.lang.String key : getNsuspendKeys()) {
                int value = getNsuspend(key);
                
                sb.append("Nsuspend[" + key + "] = " + value + "\n");
                
            }

            for (java.lang.String key : getJobSlotsKeys()) {
                int value = getJobSlots(key);
                
                sb.append("JobSlots[" + key + "] = " + value + "\n");
                
            }

            for (java.lang.String key : getRerunKeys()) {
                boolean value = getRerun(key);
                
                sb.append("Rerun[" + key + "] = " + value + "\n");
                
            }

            for (java.lang.String key : getSFsizeKeys()) {
                java.lang.String value = getSFsize(key);
                
                sb.append("SFsize[" + key + "] = " + value + "\n");
                
            }

            for (java.lang.String key : getHFsizeKeys()) {
                java.lang.String value = getHFsize(key);
                
                sb.append("HFsize[" + key + "] = " + value + "\n");
                
            }

            for (java.lang.String key : getSDataKeys()) {
                java.lang.String value = getSData(key);
                
                sb.append("SData[" + key + "] = " + value + "\n");
                
            }

            for (java.lang.String key : getHDataKeys()) {
                java.lang.String value = getHData(key);
                
                sb.append("HData[" + key + "] = " + value + "\n");
                
            }

            for (java.lang.String key : getSStackKeys()) {
                java.lang.String value = getSStack(key);
                
                sb.append("SStack[" + key + "] = " + value + "\n");
                
            }

            for (java.lang.String key : getHStackKeys()) {
                java.lang.String value = getHStack(key);
                
                sb.append("HStack[" + key + "] = " + value + "\n");
                
            }

            for (java.lang.String key : getSCoreKeys()) {
                java.lang.String value = getSCore(key);
                
                sb.append("SCore[" + key + "] = " + value + "\n");
                
            }

            for (java.lang.String key : getHCoreKeys()) {
                java.lang.String value = getHCore(key);
                
                sb.append("HCore[" + key + "] = " + value + "\n");
                
            }

            for (java.lang.String key : getSRssKeys()) {
                java.lang.String value = getSRss(key);
                
                sb.append("SRss[" + key + "] = " + value + "\n");
                
            }

            for (java.lang.String key : getHRssKeys()) {
                java.lang.String value = getHRss(key);
                
                sb.append("HRss[" + key + "] = " + value + "\n");
                
            }

            for (java.lang.String key : getSVmemKeys()) {
                java.lang.String value = getSVmem(key);
                
                sb.append("SVmem[" + key + "] = " + value + "\n");
                
            }

            for (java.lang.String key : getHVmemKeys()) {
                java.lang.String value = getHVmem(key);
                
                sb.append("HVmem[" + key + "] = " + value + "\n");
                
            }

            for (java.lang.String key : getSRtKeys()) {
                java.lang.String value = getSRt(key);
                
                sb.append("SRt[" + key + "] = " + value + "\n");
                
            }

            for (java.lang.String key : getHRtKeys()) {
                java.lang.String value = getHRt(key);
                
                sb.append("HRt[" + key + "] = " + value + "\n");
                
            }

            for (java.lang.String key : getSCpuKeys()) {
                java.lang.String value = getSCpu(key);
                
                sb.append("SCpu[" + key + "] = " + value + "\n");
                
            }

            for (java.lang.String key : getHCpuKeys()) {
                java.lang.String value = getHCpu(key);
                
                sb.append("HCpu[" + key + "] = " + value + "\n");
                
            }

            for (java.lang.String key : getSuspendIntervalKeys()) {
                java.lang.String value = getSuspendInterval(key);
                
                sb.append("SuspendInterval[" + key + "] = " + value + "\n");
                
            }

            for (java.lang.String key : getMinCpuIntervalKeys()) {
                java.lang.String value = getMinCpuInterval(key);
                
                sb.append("MinCpuInterval[" + key + "] = " + value + "\n");
                
            }

            for (java.lang.String key : getNotifyKeys()) {
                java.lang.String value = getNotify(key);
                
                sb.append("Notify[" + key + "] = " + value + "\n");
                
            }

            for (java.lang.String key : getTmpdirKeys()) {
                java.lang.String value = getTmpdir(key);
                
                sb.append("Tmpdir[" + key + "] = " + value + "\n");
                
            }

            for (java.lang.String key : getShellKeys()) {
                java.lang.String value = getShell(key);
                
                sb.append("Shell[" + key + "] = " + value + "\n");
                
            }

            for (java.lang.String key : getCalendarKeys()) {
                java.lang.String value = getCalendar(key);
                
                sb.append("Calendar[" + key + "] = " + value + "\n");
                
            }

            for (java.lang.String key : getPriorityKeys()) {
                java.lang.String value = getPriority(key);
                
                sb.append("Priority[" + key + "] = " + value + "\n");
                
            }

            for (java.lang.String key : getProcessorsKeys()) {
                java.lang.String value = getProcessors(key);
                
                sb.append("Processors[" + key + "] = " + value + "\n");
                
            }

            for (java.lang.String key : getPrologKeys()) {
                java.lang.String value = getProlog(key);
                
                sb.append("Prolog[" + key + "] = " + value + "\n");
                
            }

            for (java.lang.String key : getEpilogKeys()) {
                java.lang.String value = getEpilog(key);
                
                sb.append("Epilog[" + key + "] = " + value + "\n");
                
            }

            for (java.lang.String key : getShellStartModeKeys()) {
                java.lang.String value = getShellStartMode(key);
                
                sb.append("ShellStartMode[" + key + "] = " + value + "\n");
                
            }

            for (java.lang.String key : getStarterMethodKeys()) {
                java.lang.String value = getStarterMethod(key);
                
                sb.append("StarterMethod[" + key + "] = " + value + "\n");
                
            }

            for (java.lang.String key : getSuspendMethodKeys()) {
                java.lang.String value = getSuspendMethod(key);
                
                sb.append("SuspendMethod[" + key + "] = " + value + "\n");
                
            }

            for (java.lang.String key : getResumeMethodKeys()) {
                java.lang.String value = getResumeMethod(key);
                
                sb.append("ResumeMethod[" + key + "] = " + value + "\n");
                
            }

            for (java.lang.String key : getTerminateMethodKeys()) {
                java.lang.String value = getTerminateMethod(key);
                
                sb.append("TerminateMethod[" + key + "] = " + value + "\n");
                
            }

            for (java.lang.String key : getInitialStateKeys()) {
                java.lang.String value = getInitialState(key);
                
                sb.append("InitialState[" + key + "] = " + value + "\n");
                
            }
        
            for (java.lang.String key : getPeKeys()) {
                int count = getPeCount(key);
                for (int i = 0; i < count; i++) {
                    java.lang.String value = getPe(key, i);
                    
                    sb.append("Pe[" + key + "," + i + "] = " + value + "\n");
                    
                }
            }
        
            for (java.lang.String key : getCkptKeys()) {
                int count = getCkptCount(key);
                for (int i = 0; i < count; i++) {
                    java.lang.String value = getCkpt(key, i);
                    
                    sb.append("Ckpt[" + key + "," + i + "] = " + value + "\n");
                    
                }
            }
        
            for (java.lang.String key : getOwnerKeys()) {
                int count = getOwnerCount(key);
                for (int i = 0; i < count; i++) {
                    com.sun.grid.jgdi.configuration.UserSet value = getOwner(key, i);
                    
                    sb.append("Owner[" + key + "," + i + "] = " + value.dump() + "\n");
                    
                }
            }
        
            for (java.lang.String key : getAclKeys()) {
                int count = getAclCount(key);
                for (int i = 0; i < count; i++) {
                    com.sun.grid.jgdi.configuration.UserSet value = getAcl(key, i);
                    
                    sb.append("Acl[" + key + "," + i + "] = " + value.dump() + "\n");
                    
                }
            }
        
            for (java.lang.String key : getXaclKeys()) {
                int count = getXaclCount(key);
                for (int i = 0; i < count; i++) {
                    com.sun.grid.jgdi.configuration.UserSet value = getXacl(key, i);
                    
                    sb.append("Xacl[" + key + "," + i + "] = " + value.dump() + "\n");
                    
                }
            }
        
            for (java.lang.String key : getProjectsKeys()) {
                int count = getProjectsCount(key);
                for (int i = 0; i < count; i++) {
                    com.sun.grid.jgdi.configuration.Project value = getProjects(key, i);
                    
                    sb.append("Projects[" + key + "," + i + "] = " + value.dump() + "\n");
                    
                }
            }
        
            for (java.lang.String key : getXprojectsKeys()) {
                int count = getXprojectsCount(key);
                for (int i = 0; i < count; i++) {
                    com.sun.grid.jgdi.configuration.Project value = getXprojects(key, i);
                    
                    sb.append("Xprojects[" + key + "," + i + "] = " + value.dump() + "\n");
                    
                }
            }
        
            for (java.lang.String key : getLoadThresholdsKeys()) {
                int count = getLoadThresholdsCount(key);
                for (int i = 0; i < count; i++) {
                    com.sun.grid.jgdi.configuration.ComplexEntry value = getLoadThresholds(key, i);
                    
                    sb.append("LoadThresholds[" + key + "," + i + "] = " + value.dump() + "\n");
                    
                }
            }
        
            for (java.lang.String key : getSuspendThresholdsKeys()) {
                int count = getSuspendThresholdsCount(key);
                for (int i = 0; i < count; i++) {
                    com.sun.grid.jgdi.configuration.ComplexEntry value = getSuspendThresholds(key, i);
                    
                    sb.append("SuspendThresholds[" + key + "," + i + "] = " + value.dump() + "\n");
                    
                }
            }
        
            for (java.lang.String key : getConsumableConfigKeys()) {
                int count = getConsumableConfigCount(key);
                for (int i = 0; i < count; i++) {
                    com.sun.grid.jgdi.configuration.ComplexEntry value = getConsumableConfig(key, i);
                    
                    sb.append("ConsumableConfig[" + key + "," + i + "] = " + value.dump() + "\n");
                    
                }
            }
        
            for (java.lang.String key : getSubordinateKeys()) {
                int count = getSubordinateCount(key);
                for (int i = 0; i < count; i++) {
                    com.sun.grid.jgdi.configuration.Subordinate value = getSubordinate(key, i);
                    
                    sb.append("Subordinate[" + key + "," + i + "] = " + value.dump() + "\n");
                    
                }
            }

            for (java.lang.String key : getQtypeKeys()) {
                int value = getQtype(key);
                
                sb.append("Qtype[" + key + "] = " + value + "\n");
                
            }

            {
                int value = getTag();
                sb.append("Tag = " + value + "\n");
            }

        return sb.toString();
    }    

 
}
