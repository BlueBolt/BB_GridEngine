/*___INFO__MARK_BEGIN__*/
/*************************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  the Sun Industry Standards Source License Version 1.2
 *
 *  Sun Microsystems Inc., March, 2001
 *
 *
 *  Sun Industry Standards Source License Version 1.2
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.2 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *   Copyright: 2001 by Sun Microsystems, Inc.
 *
 *   All Rights Reserved.
 *
 ************************************************************************/
/*___INFO__MARK_END__*/
/**
 *  Generated from javamodel_impl.jsp
 *  !!! DO NOT EDIT THIS FILE !!!
 */

package com.sun.grid.jgdi.configuration;

import javax.management.*;
import com.sun.grid.jgdi.configuration.GEObject;
import java.util.List;
import java.util.LinkedList;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.logging.Logger;
import java.util.logging.Level;

/**
 *  Java representation of the cull object ET_Type
 *  defined in sge_all_listsL.template
 *
 *  <p><strong>Warning:</strong>  The  EventImpl class will 
 *  not be compatible with future Sun&trade; Grid Engine releases.</p>
 */
public class EventImpl extends    GEObjectImpl implements Event {


   /**
    *  Create a new instance of EventImpl. The new instance
    *  will not be initialized with the default values.
    */
   public EventImpl() {
      this(false);
   }
   
   /**
    *   Create a new instanceof
    *   @param  initWithDefaultValues if <code>true</code> the new instance will
    *                                 be initialized with the default values as defined
    *                                 in the cull definition.
    */
   public EventImpl(boolean initWithDefaultValues) { 

      if (initWithDefaultValues) {     
    }

  } // end of default constructor
  
  // --- newInstance method with primary key field
  



    // Attribute number ------------------------------------------------

    private boolean isNumberSet;
   
    /**
     *  Determine if the number attribute is set
     *  @return <code>true</code> if the number attribute is set
     */
    public boolean isSetNumber() {

        return isNumberSet;

    }
   
    private int m_number;

    /**
     *   Set the number attribute.
     *
     *   @param aNumber  the new value for the  number attribute
     */
    public void setNumber(int aNumber) {   
        m_number = aNumber;

        isNumberSet = true;

    }

    /**
     *  Get the value of the number attribute.
     *  @return the value of the number attribute
     */
    public int getNumber() {
        return m_number;
    }


    // Attribute timestamp ------------------------------------------------

    private boolean isTimestampSet;
   
    /**
     *  Determine if the timestamp attribute is set
     *  @return <code>true</code> if the timestamp attribute is set
     */
    public boolean isSetTimestamp() {

        return isTimestampSet;

    }
   
    private int m_timestamp;

    /**
     *   Set the timestamp attribute.
     *
     *   @param aTimestamp  the new value for the  timestamp attribute
     */
    public void setTimestamp(int aTimestamp) {   
        m_timestamp = aTimestamp;

        isTimestampSet = true;

    }

    /**
     *  Get the value of the timestamp attribute.
     *  @return the value of the timestamp attribute
     */
    public int getTimestamp() {
        return m_timestamp;
    }


    // Attribute type ------------------------------------------------

    private boolean isTypeSet;
   
    /**
     *  Determine if the type attribute is set
     *  @return <code>true</code> if the type attribute is set
     */
    public boolean isSetType() {

        return isTypeSet;

    }
   
    private int m_type;

    /**
     *   Set the type attribute.
     *
     *   @param aType  the new value for the  type attribute
     */
    public void setType(int aType) {   
        m_type = aType;

        isTypeSet = true;

    }

    /**
     *  Get the value of the type attribute.
     *  @return the value of the type attribute
     */
    public int getType() {
        return m_type;
    }


    // Attribute intkey ------------------------------------------------

    private boolean isIntkeySet;
   
    /**
     *  Determine if the intkey attribute is set
     *  @return <code>true</code> if the intkey attribute is set
     */
    public boolean isSetIntkey() {

        return isIntkeySet;

    }
   
    private int m_intkey;

    /**
     *   Set the intkey attribute.
     *
     *   @param aIntkey  the new value for the  intkey attribute
     */
    public void setIntkey(int aIntkey) {   
        m_intkey = aIntkey;

        isIntkeySet = true;

    }

    /**
     *  Get the value of the intkey attribute.
     *  @return the value of the intkey attribute
     */
    public int getIntkey() {
        return m_intkey;
    }


    // Attribute intkey2 ------------------------------------------------

    private boolean isIntkey2Set;
   
    /**
     *  Determine if the intkey2 attribute is set
     *  @return <code>true</code> if the intkey2 attribute is set
     */
    public boolean isSetIntkey2() {

        return isIntkey2Set;

    }
   
    private int m_intkey2;

    /**
     *   Set the intkey2 attribute.
     *
     *   @param aIntkey2  the new value for the  intkey2 attribute
     */
    public void setIntkey2(int aIntkey2) {   
        m_intkey2 = aIntkey2;

        isIntkey2Set = true;

    }

    /**
     *  Get the value of the intkey2 attribute.
     *  @return the value of the intkey2 attribute
     */
    public int getIntkey2() {
        return m_intkey2;
    }


    // Attribute strkey ------------------------------------------------
   
    /**
     *  Determine if the strkey attribute is set
     *  @return <code>true</code> if the strkey attribute is set
     */
    public boolean isSetStrkey() {
   
        return  (m_strkey != null);

    }
   
    private java.lang.String m_strkey;

    /**
     *   Set the strkey attribute.
     *
     *   @param aStrkey  the new value for the  strkey attribute
     */
    public void setStrkey(java.lang.String aStrkey) {   
        m_strkey = aStrkey;

    }

    /**
     *  Get the value of the strkey attribute.
     *  @return the value of the strkey attribute
     */
    public java.lang.String getStrkey() {
        return m_strkey;
    }


    // Attribute strkey2 ------------------------------------------------
   
    /**
     *  Determine if the strkey2 attribute is set
     *  @return <code>true</code> if the strkey2 attribute is set
     */
    public boolean isSetStrkey2() {
   
        return  (m_strkey2 != null);

    }
   
    private java.lang.String m_strkey2;

    /**
     *   Set the strkey2 attribute.
     *
     *   @param aStrkey2  the new value for the  strkey2 attribute
     */
    public void setStrkey2(java.lang.String aStrkey2) {   
        m_strkey2 = aStrkey2;

    }

    /**
     *  Get the value of the strkey2 attribute.
     *  @return the value of the strkey2 attribute
     */
    public java.lang.String getStrkey2() {
        return m_strkey2;
    }




    /**
     *  Is the primary key information equal to the primary key information
     *  of <code>obj</code>.
     *
     *  @param obj   the compared object
     *  @return <code>true</code> if the primary key information is equal to the
     *          primary key informations of <code>obj</code>.
     */
    public boolean equals(Object obj) {
            
            return obj instanceof EventImpl;

    }

    
    
    public boolean equalsCompletely(Object obj) {
        Logger logger = Logger.getLogger(getClass().getName());
        if (obj instanceof  EventImpl) {
            com.sun.grid.jgdi.configuration.Event obj1 = (com.sun.grid.jgdi.configuration.Event)obj;

            {
                int value1 = getNumber();
                int value2 = obj1.getNumber();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes ET_number are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getTimestamp();
                int value2 = obj1.getTimestamp();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes ET_timestamp are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getType();
                int value2 = obj1.getType();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes ET_type are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getIntkey();
                int value2 = obj1.getIntkey();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes ET_intkey are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getIntkey2();
                int value2 = obj1.getIntkey2();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes ET_intkey2 are not equal");
                }
                return false;
            }

            }

            {
                java.lang.String value1 = getStrkey();
                java.lang.String value2 = obj1.getStrkey();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute ET_strkey of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes ET_strkey are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                java.lang.String value1 = getStrkey2();
                java.lang.String value2 = obj1.getStrkey2();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute ET_strkey2 of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes ET_strkey2 are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            return true;
        } else {
            return true;
        }
    }
  
    public java.lang.String toString() {
        StringBuilder ret = new StringBuilder();
        ret.append("EventImpl(");

        ret.append(")");
        return ret.toString();
    }



    public java.lang.String dump() {
        StringBuilder sb = new StringBuilder();

            {
                int value = getNumber();
                sb.append("Number = " + value + "\n");
            }

            {
                int value = getTimestamp();
                sb.append("Timestamp = " + value + "\n");
            }

            {
                int value = getType();
                sb.append("Type = " + value + "\n");
            }

            {
                int value = getIntkey();
                sb.append("Intkey = " + value + "\n");
            }

            {
                int value = getIntkey2();
                sb.append("Intkey2 = " + value + "\n");
            }

            {
                java.lang.String value = getStrkey();
                sb.append("Strkey = " + value + "\n");
            }

            {
                java.lang.String value = getStrkey2();
                sb.append("Strkey2 = " + value + "\n");
            }

        return sb.toString();
    }    

 
}
