/*___INFO__MARK_BEGIN__*/
/*************************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  the Sun Industry Standards Source License Version 1.2
 *
 *  Sun Microsystems Inc., March, 2001
 *
 *
 *  Sun Industry Standards Source License Version 1.2
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.2 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *   Copyright: 2001 by Sun Microsystems, Inc.
 *
 *   All Rights Reserved.
 *
 ************************************************************************/
/*___INFO__MARK_END__*/
/**
 *  Generated from javadescriptor.jsp
 *  !!! DO NOT EDIT THIS FILE !!!
 */

package com.sun.grid.jgdi.configuration.reflect;

import com.sun.grid.jgdi.configuration.*;
import com.sun.grid.jgdi.CullConstants;

/**
 *  Java descriptor of the cull object SC_Type
 *  defined in sge_all_listsL.template
 */
public class SchedConfDescriptor extends  GEObjectDescriptor {

   public SchedConfDescriptor() {
      this(SchedConfImpl.class, "SC_Type" );
      setImplClass(SchedConfImpl.class);
   }
      
   protected SchedConfDescriptor(Class type, String name) {
      super(type, name);
     
      PropertyDescriptor propDescr = null;

      propDescr = addSimple("algorithm", String.class, "SGE_STRING_D", CullConstants.SC_algorithm, false, false, true); 

      propDescr = addSimple("scheduleInterval", String.class, "SGE_STRING_D", CullConstants.SC_schedule_interval, false, false, true); 

      propDescr = addSimple("maxujobs", Integer.TYPE, "SGE_ULONG_D", CullConstants.SC_maxujobs, false, false, true); 

      propDescr = addSimple("queueSortMethod", Integer.TYPE, "SGE_ULONG_D", CullConstants.SC_queue_sort_method, false, false, true); 

      propDescr = addList("jobLoadAdjustments", ComplexEntry.class, "CE_Type", CullConstants.SC_job_load_adjustments, true, false, true);

      propDescr = addSimple("loadAdjustmentDecayTime", String.class, "SGE_STRING_D", CullConstants.SC_load_adjustment_decay_time, false, false, true); 

      propDescr = addSimple("loadFormula", String.class, "SGE_STRING_D", CullConstants.SC_load_formula, false, false, true); 

      propDescr = addSimple("scheddJobInfo", String.class, "SGE_STRING_D", CullConstants.SC_schedd_job_info, false, false, true); 

      propDescr = addSimple("flushSubmitSec", Integer.TYPE, "SGE_ULONG_D", CullConstants.SC_flush_submit_sec, false, false, true); 

      propDescr = addSimple("flushFinishSec", Integer.TYPE, "SGE_ULONG_D", CullConstants.SC_flush_finish_sec, false, false, true); 

      propDescr = addSimple("params", String.class, "SGE_STRING_D", CullConstants.SC_params, false, false, true); 

      propDescr = addSimple("reprioritizeInterval", String.class, "SGE_STRING_D", CullConstants.SC_reprioritize_interval, false, false, true); 

      propDescr = addSimple("halftime", Integer.TYPE, "SGE_ULONG_D", CullConstants.SC_halftime, false, false, true); 

      // keyAttr = UA_name (type = SGE_STRING)
      // valueAttr = UA_value (type = SGE_DOUBLE)
      propDescr = addMap("usageWeight", Double.TYPE, "UA_Type", String.class,
             CullConstants.SC_usage_weight_list, CullConstants.UA_name, CullConstants.UA_value,
             null, false, true);

      propDescr = addSimple("compensationFactor", Double.TYPE, "SGE_DOUBLE_D", CullConstants.SC_compensation_factor, false, false, true); 

      propDescr = addSimple("weightUser", Double.TYPE, "SGE_DOUBLE_D", CullConstants.SC_weight_user, false, false, true); 

      propDescr = addSimple("weightProject", Double.TYPE, "SGE_DOUBLE_D", CullConstants.SC_weight_project, false, false, true); 

      propDescr = addSimple("weightDepartment", Double.TYPE, "SGE_DOUBLE_D", CullConstants.SC_weight_department, false, false, true); 

      propDescr = addSimple("weightJob", Double.TYPE, "SGE_DOUBLE_D", CullConstants.SC_weight_job, false, false, true); 

      propDescr = addSimple("weightTicketsFunctional", Integer.TYPE, "SGE_ULONG_D", CullConstants.SC_weight_tickets_functional, false, false, true); 

      propDescr = addSimple("weightTicketsShare", Integer.TYPE, "SGE_ULONG_D", CullConstants.SC_weight_tickets_share, false, false, true); 

      propDescr = addSimple("weightTicketsOverride", Integer.TYPE, "SGE_ULONG_D", CullConstants.SC_weight_tickets_override, false, false, true); 

      propDescr = addSimple("shareOverrideTickets", Boolean.TYPE, "SGE_BOOL", CullConstants.SC_share_override_tickets, false, false, true); 

      propDescr = addSimple("shareFunctionalShares", Boolean.TYPE, "SGE_BOOL", CullConstants.SC_share_functional_shares, false, false, true); 

      propDescr = addSimple("maxFunctionalJobsToSchedule", Integer.TYPE, "SGE_ULONG_D", CullConstants.SC_max_functional_jobs_to_schedule, false, false, true); 

      propDescr = addSimple("reportPjobTickets", Boolean.TYPE, "SGE_BOOL", CullConstants.SC_report_pjob_tickets, false, false, true); 

      propDescr = addSimple("maxPendingTasksPerJob", Integer.TYPE, "SGE_ULONG_D", CullConstants.SC_max_pending_tasks_per_job, false, false, true); 

      propDescr = addSimple("halflifeDecayList", String.class, "SGE_STRING_D", CullConstants.SC_halflife_decay_list, false, false, true); 

      propDescr = addSimple("policyHierarchy", String.class, "SGE_STRING_D", CullConstants.SC_policy_hierarchy, false, false, true); 

      propDescr = addSimple("weightTicket", Double.TYPE, "SGE_DOUBLE_D", CullConstants.SC_weight_ticket, false, false, true); 

      propDescr = addSimple("weightWaitingTime", Double.TYPE, "SGE_DOUBLE_D", CullConstants.SC_weight_waiting_time, false, false, true); 

      propDescr = addSimple("weightDeadline", Double.TYPE, "SGE_DOUBLE_D", CullConstants.SC_weight_deadline, false, false, true); 

      propDescr = addSimple("weightUrgency", Double.TYPE, "SGE_DOUBLE_D", CullConstants.SC_weight_urgency, false, false, true); 

      propDescr = addSimple("weightPriority", Double.TYPE, "SGE_DOUBLE_D", CullConstants.SC_weight_priority, false, false, true); 

      propDescr = addSimple("maxReservation", Integer.TYPE, "SGE_ULONG_D", CullConstants.SC_max_reservation, false, false, true); 

      propDescr = addSimple("defaultDuration", String.class, "SGE_STRING_D", CullConstants.SC_default_duration, false, false, true); 

   }
   
   public void validate(Object obj) throws InvalidObjectException {
   
      if (!(obj instanceof SchedConf)) {
         throw new InvalidObjectException(obj, "obj is not an instanceof SchedConf");
      }

      SchedConf cullObj = (SchedConf)obj;
      InvalidObjectException exc = null;

       if (exc != null) {
           throw exc;
       }

   }
}
