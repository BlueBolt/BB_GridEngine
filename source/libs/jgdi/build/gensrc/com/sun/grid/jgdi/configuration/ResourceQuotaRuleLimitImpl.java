/*___INFO__MARK_BEGIN__*/
/*************************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  the Sun Industry Standards Source License Version 1.2
 *
 *  Sun Microsystems Inc., March, 2001
 *
 *
 *  Sun Industry Standards Source License Version 1.2
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.2 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *   Copyright: 2001 by Sun Microsystems, Inc.
 *
 *   All Rights Reserved.
 *
 ************************************************************************/
/*___INFO__MARK_END__*/
/**
 *  Generated from javamodel_impl.jsp
 *  !!! DO NOT EDIT THIS FILE !!!
 */

package com.sun.grid.jgdi.configuration;

import javax.management.*;
import com.sun.grid.jgdi.configuration.GEObject;
import java.util.List;
import java.util.LinkedList;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.logging.Logger;
import java.util.logging.Level;

/**
 *  Java representation of the cull object RQRL_Type
 *  defined in sge_all_listsL.template
 *
 *  <p><strong>Warning:</strong>  The  ResourceQuotaRuleLimitImpl class will 
 *  not be compatible with future Sun&trade; Grid Engine releases.</p>
 */
public class ResourceQuotaRuleLimitImpl extends    GEObjectImpl implements ResourceQuotaRuleLimit {


   /**
    *  Create a new instance of ResourceQuotaRuleLimitImpl. The new instance
    *  will not be initialized with the default values.
    */
   public ResourceQuotaRuleLimitImpl() {
      this(false);
   }
   
   /**
    *   Create a new instanceof
    *   @param  initWithDefaultValues if <code>true</code> the new instance will
    *                                 be initialized with the default values as defined
    *                                 in the cull definition.
    */
   public ResourceQuotaRuleLimitImpl(boolean initWithDefaultValues) { 

      if (initWithDefaultValues) {     
    }

  } // end of default constructor
  
  // --- newInstance method with primary key field
  

   /**
    *  Create a new instance of ResourceQuotaRuleLimitImpl
    */
   public ResourceQuotaRuleLimitImpl(java.lang.String name ) {

   
         setName(name);

    }



    // Attribute name ------------------------------------------------
   
    /**
     *  Determine if the name attribute is set
     *  @return <code>true</code> if the name attribute is set
     */
    public boolean isSetName() {
   
        return  (m_name != null);

    }
   
    private java.lang.String m_name;

    /**
     *   Set the name attribute.
     *
     *   @param aName  the new value for the  name attribute
     */
    public void setName(java.lang.String aName) {   
        m_name = aName;

    }

    /**
     *  Get the value of the name attribute.
     *  @return the value of the name attribute
     */
    public java.lang.String getName() {
        return m_name;
    }


    // Attribute value ------------------------------------------------
   
    /**
     *  Determine if the value attribute is set
     *  @return <code>true</code> if the value attribute is set
     */
    public boolean isSetValue() {
   
        return  (m_value != null);

    }
   
    private java.lang.String m_value;

    /**
     *   Set the value attribute.
     *
     *   @param aValue  the new value for the  value attribute
     */
    public void setValue(java.lang.String aValue) {   
        m_value = aValue;

    }

    /**
     *  Get the value of the value attribute.
     *  @return the value of the value attribute
     */
    public java.lang.String getValue() {
        return m_value;
    }


    // Attribute type ------------------------------------------------

    private boolean isTypeSet;
   
    /**
     *  Determine if the type attribute is set
     *  @return <code>true</code> if the type attribute is set
     */
    public boolean isSetType() {

        return isTypeSet;

    }
   
    private int m_type;

    /**
     *   Set the type attribute.
     *
     *   @param aType  the new value for the  type attribute
     */
    public void setType(int aType) {   
        m_type = aType;

        isTypeSet = true;

    }

    /**
     *  Get the value of the type attribute.
     *  @return the value of the type attribute
     */
    public int getType() {
        return m_type;
    }


    // Attribute dvalue ------------------------------------------------

    private boolean isDvalueSet;
   
    /**
     *  Determine if the dvalue attribute is set
     *  @return <code>true</code> if the dvalue attribute is set
     */
    public boolean isSetDvalue() {

        return isDvalueSet;

    }
   
    private double m_dvalue;

    /**
     *   Set the dvalue attribute.
     *
     *   @param aDvalue  the new value for the  dvalue attribute
     */
    public void setDvalue(double aDvalue) {   
        m_dvalue = aDvalue;

        isDvalueSet = true;

    }

    /**
     *  Get the value of the dvalue attribute.
     *  @return the value of the dvalue attribute
     */
    public double getDvalue() {
        return m_dvalue;
    }


    // Attribute usage ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.ResourceUtilization > m_usageList;
   
    private void initUsage() {
        if (m_usageList == null) {
            m_usageList = new LinkedList< com.sun.grid.jgdi.configuration.ResourceUtilization >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.ResourceUtilization attribute.

     *   @param ausage  the new com.sun.grid.jgdi.configuration.ResourceUtilization attribute
     */
    public void addUsage(com.sun.grid.jgdi.configuration.ResourceUtilization ausage) {   
        initUsage();
        
        m_usageList.add(ausage);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.ResourceUtilization attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.ResourceUtilization attribute
     *   @param ausage  the new com.sun.grid.jgdi.configuration.ResourceUtilization attribute
     */
    public void setUsage(int index, com.sun.grid.jgdi.configuration.ResourceUtilization ausage) {
        initUsage();
        m_usageList.set(index, ausage);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.ResourceUtilization attributes.
     */
    public void removeAllUsage() {
        if (m_usageList != null) {
            m_usageList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.ResourceUtilization attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.ResourceUtilization attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.ResourceUtilization attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.ResourceUtilization removeUsage(int index) {
        initUsage();
        return (com.sun.grid.jgdi.configuration.ResourceUtilization)m_usageList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.ResourceUtilization attribute.
     *  @param ausage  the com.sun.grid.jgdi.configuration.ResourceUtilization attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.ResourceUtilization attribute has been removed
     */
    public boolean removeUsage(com.sun.grid.jgdi.configuration.ResourceUtilization ausage) {
        initUsage();
        return m_usageList.remove(ausage);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.ResourceUtilization attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.ResourceUtilization attributes
     */
    public List< com.sun.grid.jgdi.configuration.ResourceUtilization > getUsageList() {
        initUsage();
        return Collections.unmodifiableList(m_usageList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.ResourceUtilization attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.ResourceUtilization attributes.
     */
    public int getUsageCount() {
        if (m_usageList != null) {
            return m_usageList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.ResourceUtilization attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.ResourceUtilization attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.ResourceUtilization attribute
     */
    public com.sun.grid.jgdi.configuration.ResourceUtilization getUsage(int index) {
        initUsage();
        return (com.sun.grid.jgdi.configuration.ResourceUtilization)m_usageList.get(index);
    }
   
    /**
     *  Determine if the usage attribute is set
     *  @return <code>true</code> if the usage attribute is set
     */
    public boolean isSetUsage () {
        return (m_usageList != null) && (!m_usageList.isEmpty());
    }
   

    // Attribute dynamic ------------------------------------------------

    private boolean isDynamicSet;
   
    /**
     *  Determine if the dynamic attribute is set
     *  @return <code>true</code> if the dynamic attribute is set
     */
    public boolean isSetDynamic() {

        return isDynamicSet;

    }
   
    private boolean m_dynamic;

    /**
     *   Set the dynamic attribute.
     *
     *   @param aDynamic  the new value for the  dynamic attribute
     */
    public void setDynamic(boolean aDynamic) {   
        m_dynamic = aDynamic;

        isDynamicSet = true;

    }

    /**
     *  Get the value of the dynamic attribute.
     *  @return the value of the dynamic attribute
     */
    public boolean isDynamic() {
        return m_dynamic;
    }




    /**
     *  Is the primary key information equal to the primary key information
     *  of <code>obj</code>.
     *
     *  @param obj   the compared object
     *  @return <code>true</code> if the primary key information is equal to the
     *          primary key informations of <code>obj</code>.
     */
    public boolean equals(Object obj) {

        return (obj instanceof ResourceQuotaRuleLimitImpl && getName().equals(((com.sun.grid.jgdi.configuration.ResourceQuotaRuleLimit)obj).getName()));

    }

    
    
    public boolean equalsCompletely(Object obj) {
        Logger logger = Logger.getLogger(getClass().getName());
        if (obj instanceof  ResourceQuotaRuleLimitImpl) {
            com.sun.grid.jgdi.configuration.ResourceQuotaRuleLimit obj1 = (com.sun.grid.jgdi.configuration.ResourceQuotaRuleLimit)obj;

            {
                java.lang.String value1 = getName();
                java.lang.String value2 = obj1.getName();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute RQRL_name of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes RQRL_name are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                java.lang.String value1 = getValue();
                java.lang.String value2 = obj1.getValue();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute RQRL_value of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes RQRL_value are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            return true;
        } else {
            return true;
        }
    }
  
    public java.lang.String toString() {
        StringBuilder ret = new StringBuilder();
        ret.append("ResourceQuotaRuleLimitImpl(");

        ret.append(getName());

        ret.append(")");
        return ret.toString();
    }



    public java.lang.String dump() {
        StringBuilder sb = new StringBuilder();

            {
                java.lang.String value = getName();
                sb.append("Name = " + value + "\n");
            }

            {
                java.lang.String value = getValue();
                sb.append("Value = " + value + "\n");
            }

        return sb.toString();
    }    

 
}
