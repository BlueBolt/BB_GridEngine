/*___INFO__MARK_BEGIN__*/
/*************************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  the Sun Industry Standards Source License Version 1.2
 *
 *  Sun Microsystems Inc., March, 2001
 *
 *
 *  Sun Industry Standards Source License Version 1.2
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.2 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *   Copyright: 2001 by Sun Microsystems, Inc.
 *
 *   All Rights Reserved.
 *
 ************************************************************************/
/*___INFO__MARK_END__*/
/**
 *  Generated from javadescriptor.jsp
 *  !!! DO NOT EDIT THIS FILE !!!
 */

package com.sun.grid.jgdi.configuration.reflect;

import com.sun.grid.jgdi.configuration.*;
import com.sun.grid.jgdi.CullConstants;

/**
 *  Java descriptor of the cull object QU_Type
 *  defined in sge_all_listsL.template
 */
public class QueueInstanceDescriptor extends  GEObjectDescriptor {

   public QueueInstanceDescriptor() {
      this(QueueInstanceImpl.class, "QU_Type" );
      setImplClass(QueueInstanceImpl.class);
   }
      
   protected QueueInstanceDescriptor(Class type, String name) {
      super(type, name);
     
      PropertyDescriptor propDescr = null;

      propDescr = addSimple("qhostname", String.class, "SGE_HOST", CullConstants.QU_qhostname, false, true, false); 

      propDescr = addSimple("qname", String.class, "SGE_STRING", CullConstants.QU_qname, false, true, false); 

      propDescr = addSimple("fullName", String.class, "SGE_STRING", CullConstants.QU_full_name, true, true, false); 

      propDescr = addSimple("tag", Integer.TYPE, "SGE_ULONG", CullConstants.QU_tag, false, true, false); 

      propDescr = addSimple("availableAt", Integer.TYPE, "SGE_ULONG", CullConstants.QU_available_at, false, true, false); 

      propDescr = addSimple("seqNo", Integer.TYPE, "SGE_ULONG", CullConstants.QU_seq_no, false, true, false); 

      propDescr = addSimple("nsuspend", Integer.TYPE, "SGE_ULONG", CullConstants.QU_nsuspend, false, true, false); 

      propDescr = addSimple("qtype", Integer.TYPE, "SGE_ULONG", CullConstants.QU_qtype, false, true, false); 

      propDescr = addSimple("jobSlots", Integer.TYPE, "SGE_ULONG", CullConstants.QU_job_slots, false, true, false); 

      propDescr = addSimple("tmpdir", String.class, "SGE_STRING", CullConstants.QU_tmpdir, false, true, false); 

      propDescr = addSimple("shell", String.class, "SGE_STRING", CullConstants.QU_shell, false, true, false); 

      propDescr = addSimple("calendar", String.class, "SGE_STRING", CullConstants.QU_calendar, false, true, false); 

      propDescr = addSimple("priority", String.class, "SGE_STRING", CullConstants.QU_priority, false, true, false); 

      propDescr = addSimple("processors", String.class, "SGE_STRING", CullConstants.QU_processors, false, true, false); 

      propDescr = addSimple("prolog", String.class, "SGE_STRING", CullConstants.QU_prolog, false, true, false); 

      propDescr = addSimple("epilog", String.class, "SGE_STRING", CullConstants.QU_epilog, false, true, false); 

      propDescr = addSimple("shellStartMode", String.class, "SGE_STRING", CullConstants.QU_shell_start_mode, false, true, false); 

      propDescr = addSimple("starterMethod", String.class, "SGE_STRING", CullConstants.QU_starter_method, false, true, false); 

      propDescr = addSimple("suspendMethod", String.class, "SGE_STRING", CullConstants.QU_suspend_method, false, true, false); 

      propDescr = addSimple("resumeMethod", String.class, "SGE_STRING", CullConstants.QU_resume_method, false, true, false); 

      propDescr = addSimple("terminateMethod", String.class, "SGE_STRING", CullConstants.QU_terminate_method, false, true, false); 

      propDescr = addSimple("initialState", String.class, "SGE_STRING", CullConstants.QU_initial_state, false, true, false); 

      propDescr = addSimple("rerun", Boolean.TYPE, "SGE_BOOL", CullConstants.QU_rerun, false, true, false); 

      propDescr = addSimple("sRt", String.class, "SGE_STRING", CullConstants.QU_s_rt, false, true, false); 

      propDescr = addSimple("hRt", String.class, "SGE_STRING", CullConstants.QU_h_rt, false, true, false); 

      propDescr = addSimple("sCpu", String.class, "SGE_STRING", CullConstants.QU_s_cpu, false, true, false); 

      propDescr = addSimple("hCpu", String.class, "SGE_STRING", CullConstants.QU_h_cpu, false, true, false); 

      propDescr = addSimple("sFsize", String.class, "SGE_STRING", CullConstants.QU_s_fsize, false, true, false); 

      propDescr = addSimple("hFsize", String.class, "SGE_STRING", CullConstants.QU_h_fsize, false, true, false); 

      propDescr = addSimple("sData", String.class, "SGE_STRING", CullConstants.QU_s_data, false, true, false); 

      propDescr = addSimple("hData", String.class, "SGE_STRING", CullConstants.QU_h_data, false, true, false); 

      propDescr = addSimple("sStack", String.class, "SGE_STRING", CullConstants.QU_s_stack, false, true, false); 

      propDescr = addSimple("hStack", String.class, "SGE_STRING", CullConstants.QU_h_stack, false, true, false); 

      propDescr = addSimple("sCore", String.class, "SGE_STRING", CullConstants.QU_s_core, false, true, false); 

      propDescr = addSimple("hCore", String.class, "SGE_STRING", CullConstants.QU_h_core, false, true, false); 

      propDescr = addSimple("sRss", String.class, "SGE_STRING", CullConstants.QU_s_rss, false, true, false); 

      propDescr = addSimple("hRss", String.class, "SGE_STRING", CullConstants.QU_h_rss, false, true, false); 

      propDescr = addSimple("sVmem", String.class, "SGE_STRING", CullConstants.QU_s_vmem, false, true, false); 

      propDescr = addSimple("hVmem", String.class, "SGE_STRING", CullConstants.QU_h_vmem, false, true, false); 

      propDescr = addSimple("suspendInterval", String.class, "SGE_STRING", CullConstants.QU_suspend_interval, false, true, false); 

      propDescr = addSimple("minCpuInterval", String.class, "SGE_STRING", CullConstants.QU_min_cpu_interval, false, true, false); 

      propDescr = addSimple("notify", String.class, "SGE_STRING", CullConstants.QU_notify, false, true, false); 

      propDescr = addList("ckpt", String.class, "ST_Type", CullConstants.QU_ckpt_list, true, true, false);

         propDescr.setHasCullWrapper(true);
         propDescr.setCullContentField(CullConstants.ST_name);

      propDescr = addList("pe", String.class, "ST_Type", CullConstants.QU_pe_list, true, true, false);

         propDescr.setHasCullWrapper(true);
         propDescr.setCullContentField(CullConstants.ST_name);

      propDescr = addList("owner", UserSet.class, "US_Type", CullConstants.QU_owner_list, true, true, false);

      propDescr = addList("acl", UserSet.class, "US_Type", CullConstants.QU_acl, true, true, false);

      propDescr = addList("xacl", UserSet.class, "US_Type", CullConstants.QU_xacl, true, true, false);

      propDescr = addList("projects", Project.class, "PR_Type", CullConstants.QU_projects, true, true, false);

      propDescr = addList("xprojects", Project.class, "PR_Type", CullConstants.QU_xprojects, true, true, false);

      propDescr = addList("consumableConfig", ComplexEntry.class, "CE_Type", CullConstants.QU_consumable_config_list, true, true, false);

      propDescr = addList("loadThresholds", ComplexEntry.class, "CE_Type", CullConstants.QU_load_thresholds, true, true, false);

      propDescr = addList("suspendThresholds", ComplexEntry.class, "CE_Type", CullConstants.QU_suspend_thresholds, true, true, false);

      propDescr = addList("subordinate", Subordinate.class, "SO_Type", CullConstants.QU_subordinate_list, true, true, false);

      propDescr = addSimple("tagged4schedule", Integer.TYPE, "SGE_ULONG", CullConstants.QU_tagged4schedule, false, true, false); 

      propDescr = addSimple("cacheVersion", Integer.TYPE, "SGE_ULONG", CullConstants.QU_cache_version, false, true, false); 

      propDescr = addSimple("pendingSignal", Integer.TYPE, "SGE_ULONG", CullConstants.QU_pending_signal, false, true, false); 

      propDescr = addSimple("pendingSignalDeliveryTime", Integer.TYPE, "SGE_ULONG", CullConstants.QU_pending_signal_delivery_time, false, true, false); 

      propDescr = addSimple("version", Integer.TYPE, "SGE_ULONG", CullConstants.QU_version, false, true, false); 

      propDescr = addSimple("suspendedOnSubordinate", Integer.TYPE, "SGE_ULONG", CullConstants.QU_suspended_on_subordinate, false, true, false); 

      propDescr = addSimple("lastSuspendThresholdCkeck", Integer.TYPE, "SGE_ULONG", CullConstants.QU_last_suspend_threshold_ckeck, false, true, false); 

      propDescr = addSimple("jobCnt", Integer.TYPE, "SGE_ULONG", CullConstants.QU_job_cnt, false, true, false); 

      propDescr = addSimple("pendingJobCnt", Integer.TYPE, "SGE_ULONG", CullConstants.QU_pending_job_cnt, false, true, false); 

      propDescr = addSimple("softViolation", Integer.TYPE, "SGE_ULONG", CullConstants.QU_soft_violation, false, true, false); 

      propDescr = addSimple("hostSeqNo", Integer.TYPE, "SGE_ULONG", CullConstants.QU_host_seq_no, false, true, false); 

      propDescr = addList("resourceUtilization", ResourceUtilization.class, "RUE_Type", CullConstants.QU_resource_utilization, true, true, false);

      propDescr = addList("message", QueueInstanceMessage.class, "QIM_Type", CullConstants.QU_message_list, true, true, false);

      propDescr = addSimple("gdiDoLater", Integer.TYPE, "SGE_ULONG", CullConstants.QU_gdi_do_later, false, true, false); 

      propDescr = addList("stateChanges", CalendarQueueState.class, "CQU_Type", CullConstants.QU_state_changes, true, true, false);

   }
   
   public void validate(Object obj) throws InvalidObjectException {
   
      if (!(obj instanceof QueueInstance)) {
         throw new InvalidObjectException(obj, "obj is not an instanceof QueueInstance");
      }

      QueueInstance cullObj = (QueueInstance)obj;
      InvalidObjectException exc = null;
   
       if (!cullObj.isSetFullName()) {
          if (exc == null) {
             exc = new InvalidObjectException(obj, "Primary key fields are not set");
          }
          exc.addPropertyError("fullName", "primary key field is required");
       }

       if (exc != null) {
           throw exc;
       }

   }
}
