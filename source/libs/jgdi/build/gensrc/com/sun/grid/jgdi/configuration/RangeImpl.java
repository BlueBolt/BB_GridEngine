/*___INFO__MARK_BEGIN__*/
/*************************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  the Sun Industry Standards Source License Version 1.2
 *
 *  Sun Microsystems Inc., March, 2001
 *
 *
 *  Sun Industry Standards Source License Version 1.2
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.2 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *   Copyright: 2001 by Sun Microsystems, Inc.
 *
 *   All Rights Reserved.
 *
 ************************************************************************/
/*___INFO__MARK_END__*/
/**
 *  Generated from javamodel_impl.jsp
 *  !!! DO NOT EDIT THIS FILE !!!
 */

package com.sun.grid.jgdi.configuration;

import javax.management.*;
import com.sun.grid.jgdi.configuration.GEObject;
import java.util.List;
import java.util.LinkedList;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.logging.Logger;
import java.util.logging.Level;

/**
 *  Java representation of the cull object RN_Type
 *  defined in sge_all_listsL.template
 *
 *  <p><strong>Warning:</strong>  The  RangeImpl class will 
 *  not be compatible with future Sun&trade; Grid Engine releases.</p>
 */
public class RangeImpl extends    GEObjectImpl implements Range {


   /**
    *  Create a new instance of RangeImpl. The new instance
    *  will not be initialized with the default values.
    */
   public RangeImpl() {
      this(false);
   }
   
   /**
    *   Create a new instanceof
    *   @param  initWithDefaultValues if <code>true</code> the new instance will
    *                                 be initialized with the default values as defined
    *                                 in the cull definition.
    */
   public RangeImpl(boolean initWithDefaultValues) { 

      if (initWithDefaultValues) {     
    }

  } // end of default constructor
  
  // --- newInstance method with primary key field
  

   /**
    *  Create a new instance of RangeImpl
    */
   public RangeImpl(int min ) {

   
         setMin(min);

    }



    // Attribute min ------------------------------------------------

    private boolean isMinSet;
   
    /**
     *  Determine if the min attribute is set
     *  @return <code>true</code> if the min attribute is set
     */
    public boolean isSetMin() {

        return isMinSet;

    }
   
    private int m_min;

    /**
     *   Set the min attribute.
     *
     *   @param aMin  the new value for the  min attribute
     */
    public void setMin(int aMin) {   
        m_min = aMin;

        isMinSet = true;

    }

    /**
     *  Get the value of the min attribute.
     *  @return the value of the min attribute
     */
    public int getMin() {
        return m_min;
    }


    // Attribute max ------------------------------------------------

    private boolean isMaxSet;
   
    /**
     *  Determine if the max attribute is set
     *  @return <code>true</code> if the max attribute is set
     */
    public boolean isSetMax() {

        return isMaxSet;

    }
   
    private int m_max;

    /**
     *   Set the max attribute.
     *
     *   @param aMax  the new value for the  max attribute
     */
    public void setMax(int aMax) {   
        m_max = aMax;

        isMaxSet = true;

    }

    /**
     *  Get the value of the max attribute.
     *  @return the value of the max attribute
     */
    public int getMax() {
        return m_max;
    }


    // Attribute step ------------------------------------------------

    private boolean isStepSet;
   
    /**
     *  Determine if the step attribute is set
     *  @return <code>true</code> if the step attribute is set
     */
    public boolean isSetStep() {

        return isStepSet;

    }
   
    private int m_step;

    /**
     *   Set the step attribute.
     *
     *   @param aStep  the new value for the  step attribute
     */
    public void setStep(int aStep) {   
        m_step = aStep;

        isStepSet = true;

    }

    /**
     *  Get the value of the step attribute.
     *  @return the value of the step attribute
     */
    public int getStep() {
        return m_step;
    }




    /**
     *  Is the primary key information equal to the primary key information
     *  of <code>obj</code>.
     *
     *  @param obj   the compared object
     *  @return <code>true</code> if the primary key information is equal to the
     *          primary key informations of <code>obj</code>.
     */
    public boolean equals(Object obj) {

        return (obj instanceof RangeImpl && getMin() == ((com.sun.grid.jgdi.configuration.Range)obj).getMin());

    }

    
    
    public boolean equalsCompletely(Object obj) {
        Logger logger = Logger.getLogger(getClass().getName());
        if (obj instanceof  RangeImpl) {
            com.sun.grid.jgdi.configuration.Range obj1 = (com.sun.grid.jgdi.configuration.Range)obj;

            {
                int value1 = getMin();
                int value2 = obj1.getMin();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes RN_min are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getMax();
                int value2 = obj1.getMax();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes RN_max are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getStep();
                int value2 = obj1.getStep();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes RN_step are not equal");
                }
                return false;
            }

            }

            return true;
        } else {
            return true;
        }
    }
  
    public java.lang.String toString() {
        StringBuilder ret = new StringBuilder();
        ret.append("RangeImpl(");

        ret.append(getMin());

        ret.append(")");
        return ret.toString();
    }



    public java.lang.String dump() {
        StringBuilder sb = new StringBuilder();

            {
                int value = getMin();
                sb.append("Min = " + value + "\n");
            }

            {
                int value = getMax();
                sb.append("Max = " + value + "\n");
            }

            {
                int value = getStep();
                sb.append("Step = " + value + "\n");
            }

        return sb.toString();
    }    

 
}
