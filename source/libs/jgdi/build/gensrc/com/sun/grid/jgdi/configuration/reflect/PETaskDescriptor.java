/*___INFO__MARK_BEGIN__*/
/*************************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  the Sun Industry Standards Source License Version 1.2
 *
 *  Sun Microsystems Inc., March, 2001
 *
 *
 *  Sun Industry Standards Source License Version 1.2
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.2 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *   Copyright: 2001 by Sun Microsystems, Inc.
 *
 *   All Rights Reserved.
 *
 ************************************************************************/
/*___INFO__MARK_END__*/
/**
 *  Generated from javadescriptor.jsp
 *  !!! DO NOT EDIT THIS FILE !!!
 */

package com.sun.grid.jgdi.configuration.reflect;

import com.sun.grid.jgdi.configuration.*;
import com.sun.grid.jgdi.CullConstants;

/**
 *  Java descriptor of the cull object PET_Type
 *  defined in sge_all_listsL.template
 */
public class PETaskDescriptor extends  GEObjectDescriptor {

   public PETaskDescriptor() {
      this(PETaskImpl.class, "PET_Type" );
      setImplClass(PETaskImpl.class);
   }
      
   protected PETaskDescriptor(Class type, String name) {
      super(type, name);
     
      PropertyDescriptor propDescr = null;

      propDescr = addSimple("id", String.class, "SGE_STRING", CullConstants.PET_id, true, false, false); 

      propDescr = addSimple("name", String.class, "SGE_STRING", CullConstants.PET_name, false, false, false); 

      propDescr = addSimple("status", Integer.TYPE, "SGE_ULONG", CullConstants.PET_status, false, false, false); 

      propDescr = addList("grantedDestinIdentifier", JG.class, "JG_Type", CullConstants.PET_granted_destin_identifier_list, true, false, false);

      propDescr = addSimple("pid", Integer.TYPE, "SGE_ULONG", CullConstants.PET_pid, false, false, false); 

      propDescr = addSimple("osjobid", String.class, "SGE_STRING", CullConstants.PET_osjobid, false, false, false); 

      // keyAttr = UA_name (type = SGE_STRING)
      // valueAttr = UA_value (type = SGE_DOUBLE)
      propDescr = addMap("usage", Double.TYPE, "UA_Type", String.class,
             CullConstants.PET_usage, CullConstants.UA_name, CullConstants.UA_value,
             null, false, false);

      // keyAttr = UA_name (type = SGE_STRING)
      // valueAttr = UA_value (type = SGE_DOUBLE)
      propDescr = addMap("scaledUsage", Double.TYPE, "UA_Type", String.class,
             CullConstants.PET_scaled_usage, CullConstants.UA_name, CullConstants.UA_value,
             null, false, false);

      // keyAttr = UA_name (type = SGE_STRING)
      // valueAttr = UA_value (type = SGE_DOUBLE)
      propDescr = addMap("reportedUsage", Double.TYPE, "UA_Type", String.class,
             CullConstants.PET_reported_usage, CullConstants.UA_name, CullConstants.UA_value,
             null, false, false);

      // keyAttr = UA_name (type = SGE_STRING)
      // valueAttr = UA_value (type = SGE_DOUBLE)
      propDescr = addMap("previousUsage", Double.TYPE, "UA_Type", String.class,
             CullConstants.PET_previous_usage, CullConstants.UA_name, CullConstants.UA_value,
             null, false, false);

      propDescr = addSimple("submissionTime", Integer.TYPE, "SGE_ULONG", CullConstants.PET_submission_time, false, false, false); 

      propDescr = addSimple("startTime", Integer.TYPE, "SGE_ULONG", CullConstants.PET_start_time, false, false, false); 

      propDescr = addSimple("endTime", Integer.TYPE, "SGE_ULONG", CullConstants.PET_end_time, false, false, false); 

      propDescr = addSimple("cwd", String.class, "SGE_STRING", CullConstants.PET_cwd, false, false, false); 

      propDescr = addList("pathAliases", PathAlias.class, "PA_Type", CullConstants.PET_path_aliases, true, false, false);

      // keyAttr = VA_variable (type = SGE_STRING)
      // valueAttr = VA_value (type = SGE_STRING)
      propDescr = addMap("environment", String.class, "VA_Type", String.class,
             CullConstants.PET_environment, CullConstants.VA_variable, CullConstants.VA_value,
             null, false, false);

      propDescr = addSimple("doContact", Boolean.TYPE, "SGE_BOOL", CullConstants.PET_do_contact, false, false, false); 

   }
   
   public void validate(Object obj) throws InvalidObjectException {
   
      if (!(obj instanceof PETask)) {
         throw new InvalidObjectException(obj, "obj is not an instanceof PETask");
      }

      PETask cullObj = (PETask)obj;
      InvalidObjectException exc = null;
   
       if (!cullObj.isSetId()) {
          if (exc == null) {
             exc = new InvalidObjectException(obj, "Primary key fields are not set");
          }
          exc.addPropertyError("id", "primary key field is required");
       }

       if (exc != null) {
           throw exc;
       }

   }
}
