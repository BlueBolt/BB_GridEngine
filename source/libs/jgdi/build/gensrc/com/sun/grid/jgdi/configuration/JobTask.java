/*___INFO__MARK_BEGIN__*/
/*************************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  the Sun Industry Standards Source License Version 1.2
 *
 *  Sun Microsystems Inc., March, 2001
 *
 *
 *  Sun Industry Standards Source License Version 1.2
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.2 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *   Copyright: 2001 by Sun Microsystems, Inc.
 *
 *   All Rights Reserved.
 *
 ************************************************************************/
/*___INFO__MARK_END__*/
/**
 *  Generated from javamodel.jsp
 *  !!! DO NOT EDIT THIS FILE !!!
 */

package com.sun.grid.jgdi.configuration;

import com.sun.grid.jgdi.configuration.GEObject;
import java.util.List;
import java.util.Set;

/**
 *  Java representation of the cull object JAT_Type
 *  defined in sge_all_listsL.template
 *
 *  <p><strong>Warning:</strong>  The  JobTask class will 
 *  not be compatible with future Sun&trade; Grid Engine releases.</p>
 *
 */
public interface JobTask extends 
    GEObject  { 

    // Attribute taskNumber ------------------------------------------------

       
    /**
     *   Set the taskNumber attribute.
     *
     *   @param aTaskNumber  the new value for the  taskNumber attribute
     */
    public void setTaskNumber(int aTaskNumber);
  
    /**
     *  Get the value of the taskNumber attribute.
     *  @return the value of the taskNumber attribute
     */
    public int getTaskNumber();
   

 
    /**
     *  Determine if any taskNumber attribute is set
     *  @return <code>true</code> if the taskNumber attribute is set
     */
    public boolean isSetTaskNumber();


    // Attribute status ------------------------------------------------

       
    /**
     *   Set the status attribute.
     *
     *   @param aStatus  the new value for the  status attribute
     */
    public void setStatus(int aStatus);
  
    /**
     *  Get the value of the status attribute.
     *  @return the value of the status attribute
     */
    public int getStatus();
   

 
    /**
     *  Determine if any status attribute is set
     *  @return <code>true</code> if the status attribute is set
     */
    public boolean isSetStatus();


    // Attribute startTime ------------------------------------------------

       
    /**
     *   Set the startTime attribute.
     *
     *   @param aStartTime  the new value for the  startTime attribute
     */
    public void setStartTime(int aStartTime);
  
    /**
     *  Get the value of the startTime attribute.
     *  @return the value of the startTime attribute
     */
    public int getStartTime();
   

 
    /**
     *  Determine if any startTime attribute is set
     *  @return <code>true</code> if the startTime attribute is set
     */
    public boolean isSetStartTime();


    // Attribute endTime ------------------------------------------------

       
    /**
     *   Set the endTime attribute.
     *
     *   @param aEndTime  the new value for the  endTime attribute
     */
    public void setEndTime(int aEndTime);
  
    /**
     *  Get the value of the endTime attribute.
     *  @return the value of the endTime attribute
     */
    public int getEndTime();
   

 
    /**
     *  Determine if any endTime attribute is set
     *  @return <code>true</code> if the endTime attribute is set
     */
    public boolean isSetEndTime();


    // Attribute hold ------------------------------------------------

       
    /**
     *   Set the hold attribute.
     *
     *   @param aHold  the new value for the  hold attribute
     */
    public void setHold(int aHold);
  
    /**
     *  Get the value of the hold attribute.
     *  @return the value of the hold attribute
     */
    public int getHold();
   

 
    /**
     *  Determine if any hold attribute is set
     *  @return <code>true</code> if the hold attribute is set
     */
    public boolean isSetHold();


    // Attribute grantedPe ------------------------------------------------

       
    /**
     *   Set the grantedPe attribute.
     *
     *   @param aGrantedPe  the new value for the  grantedPe attribute
     */
    public void setGrantedPe(java.lang.String aGrantedPe);
  
    /**
     *  Get the value of the grantedPe attribute.
     *  @return the value of the grantedPe attribute
     */
    public java.lang.String getGrantedPe();
   

 
    /**
     *  Determine if any grantedPe attribute is set
     *  @return <code>true</code> if the grantedPe attribute is set
     */
    public boolean isSetGrantedPe();


    // Attribute jobRestarted ------------------------------------------------

       
    /**
     *   Set the jobRestarted attribute.
     *
     *   @param aJobRestarted  the new value for the  jobRestarted attribute
     */
    public void setJobRestarted(int aJobRestarted);
  
    /**
     *  Get the value of the jobRestarted attribute.
     *  @return the value of the jobRestarted attribute
     */
    public int getJobRestarted();
   

 
    /**
     *  Determine if any jobRestarted attribute is set
     *  @return <code>true</code> if the jobRestarted attribute is set
     */
    public boolean isSetJobRestarted();


    // Attribute grantedDestinIdentifierList ------------------------------------------------


    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.JG attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.JG attributes
     */
    public List< com.sun.grid.jgdi.configuration.JG >  getGrantedDestinIdentifierList();

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.JG attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.JG attributes.
     */
    public int getGrantedDestinIdentifierCount();
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.JG attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.JG attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.JG attribute
     */
    public com.sun.grid.jgdi.configuration.JG getGrantedDestinIdentifier(int index);
   

    /**
     *   Add a com.sun.grid.jgdi.configuration.JG attribute.
     *   @param agrantedDestinIdentifier  the new com.sun.grid.jgdi.configuration.JG attribute
     */
    public void addGrantedDestinIdentifier(com.sun.grid.jgdi.configuration.JG agrantedDestinIdentifier);
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.JG attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.JG attribute
     *   @param agrantedDestinIdentifier  the new com.sun.grid.jgdi.configuration.JG attribute
     */
    public void setGrantedDestinIdentifier(int index, com.sun.grid.jgdi.configuration.JG agrantedDestinIdentifier);

    /**
     *  Remove all com.sun.grid.jgdi.configuration.JG attributes.
     */
    public void removeAllGrantedDestinIdentifier();
   
    /**
     *  Remote a com.sun.grid.jgdi.configuration.JG attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.JG attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.JG attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.JG removeGrantedDestinIdentifier(int index);

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.JG attribute.
     *  @param agrantedDestinIdentifier  the com.sun.grid.jgdi.configuration.JG attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.JG attribute has been removed
     */
    public boolean removeGrantedDestinIdentifier(com.sun.grid.jgdi.configuration.JG agrantedDestinIdentifier);
   
       
 
    /**
     *  Determine if any grantedDestinIdentifier attribute is set
     *  @return <code>true</code> if the grantedDestinIdentifier attribute is set
     */
    public boolean isSetGrantedDestinIdentifier();


    // Attribute masterQueue ------------------------------------------------

       
    /**
     *   Set the masterQueue attribute.
     *
     *   @param aMasterQueue  the new value for the  masterQueue attribute
     */
    public void setMasterQueue(java.lang.String aMasterQueue);
  
    /**
     *  Get the value of the masterQueue attribute.
     *  @return the value of the masterQueue attribute
     */
    public java.lang.String getMasterQueue();
   

 
    /**
     *  Determine if any masterQueue attribute is set
     *  @return <code>true</code> if the masterQueue attribute is set
     */
    public boolean isSetMasterQueue();


    // Attribute state ------------------------------------------------

       
    /**
     *   Set the state attribute.
     *
     *   @param aState  the new value for the  state attribute
     */
    public void setState(int aState);
  
    /**
     *  Get the value of the state attribute.
     *  @return the value of the state attribute
     */
    public int getState();
   

 
    /**
     *  Determine if any state attribute is set
     *  @return <code>true</code> if the state attribute is set
     */
    public boolean isSetState();


    // Attribute pvmCkptPid ------------------------------------------------

       
    /**
     *   Set the pvmCkptPid attribute.
     *
     *   @param aPvmCkptPid  the new value for the  pvmCkptPid attribute
     */
    public void setPvmCkptPid(int aPvmCkptPid);
  
    /**
     *  Get the value of the pvmCkptPid attribute.
     *  @return the value of the pvmCkptPid attribute
     */
    public int getPvmCkptPid();
   

 
    /**
     *  Determine if any pvmCkptPid attribute is set
     *  @return <code>true</code> if the pvmCkptPid attribute is set
     */
    public boolean isSetPvmCkptPid();


    // Attribute pendingSignal ------------------------------------------------

       
    /**
     *   Set the pendingSignal attribute.
     *
     *   @param aPendingSignal  the new value for the  pendingSignal attribute
     */
    public void setPendingSignal(int aPendingSignal);
  
    /**
     *  Get the value of the pendingSignal attribute.
     *  @return the value of the pendingSignal attribute
     */
    public int getPendingSignal();
   

 
    /**
     *  Determine if any pendingSignal attribute is set
     *  @return <code>true</code> if the pendingSignal attribute is set
     */
    public boolean isSetPendingSignal();


    // Attribute pendingSignalDeliveryTime ------------------------------------------------

       
    /**
     *   Set the pendingSignalDeliveryTime attribute.
     *
     *   @param aPendingSignalDeliveryTime  the new value for the  pendingSignalDeliveryTime attribute
     */
    public void setPendingSignalDeliveryTime(int aPendingSignalDeliveryTime);
  
    /**
     *  Get the value of the pendingSignalDeliveryTime attribute.
     *  @return the value of the pendingSignalDeliveryTime attribute
     */
    public int getPendingSignalDeliveryTime();
   

 
    /**
     *  Determine if any pendingSignalDeliveryTime attribute is set
     *  @return <code>true</code> if the pendingSignalDeliveryTime attribute is set
     */
    public boolean isSetPendingSignalDeliveryTime();


    // Attribute pid ------------------------------------------------

       
    /**
     *   Set the pid attribute.
     *
     *   @param aPid  the new value for the  pid attribute
     */
    public void setPid(int aPid);
  
    /**
     *  Get the value of the pid attribute.
     *  @return the value of the pid attribute
     */
    public int getPid();
   

 
    /**
     *  Determine if any pid attribute is set
     *  @return <code>true</code> if the pid attribute is set
     */
    public boolean isSetPid();


    // Attribute osjobid ------------------------------------------------

       
    /**
     *   Set the osjobid attribute.
     *
     *   @param aOsjobid  the new value for the  osjobid attribute
     */
    public void setOsjobid(java.lang.String aOsjobid);
  
    /**
     *  Get the value of the osjobid attribute.
     *  @return the value of the osjobid attribute
     */
    public java.lang.String getOsjobid();
   

 
    /**
     *  Determine if any osjobid attribute is set
     *  @return <code>true</code> if the osjobid attribute is set
     */
    public boolean isSetOsjobid();


    // Attribute usageList ------------------------------------------------

        // keyClassName for SGE_STRING = String
     
   
    /**
     *  <p>Get the default value of the attribute usage.</p>
     *  @return the default value of the attribute usage
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public double getDefaultUsage();

    /**
     *  <p>Get the usage attribute for <code>key</code>.</p>
     *  @param   key   the key
     *  @return  the usage attribute for <code>key</code> or the
     *           default value of  usage
     */
    public double getUsage(String key);
   
    /**
     *  Get the set of <code>key</code>s which have the attribute usage set.
     *  @return set of <code>key</code>s
     */
    public Set<String> getUsageKeys();
   
    /**
     *  Get the number of keys which have the attribute usage set.
     *  @return the number of keys which have the attribute usage set.
     */
    public int getUsageCount();
   
    /**
     *  Determine if any usage attribute is for <code>key</code> is set
     *  @param  key the key
     *  @return <code>true</code> if the usage attribute is set
     */
    public boolean isSetUsage(String key);
   
   
          
    /**
     *  <p>Put the attribute usage for <code>key</code>.</p>
     *
     *  @param key   the key
     *  @param value the value
     */
    public void putUsage(String key, double value);
   


    /**
     *  <p>remove the attribute usage for <code>key</code>.</p>
     *
     *  @param key  The key
     *  @return the value of the attribute for <code>key</code> or <code>null</code>
     *          if the attribute was not defined for <code>key</code>.
     */
    public java.lang.Double removeUsage(String key);
   
    /**
     *  <p>Remove the attribute usage for all keys.</p>
     */
    public void removeAllUsage();


 
    /**
     *  Determine if any usage attribute is set
     *  @return <code>true</code> if the usage attribute is set
     */
    public boolean isSetUsage();


    // Attribute scaledUsageList ------------------------------------------------

        // keyClassName for SGE_STRING = String
     
   
    /**
     *  <p>Get the default value of the attribute scaledUsage.</p>
     *  @return the default value of the attribute scaledUsage
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public double getDefaultScaledUsage();

    /**
     *  <p>Get the scaledUsage attribute for <code>key</code>.</p>
     *  @param   key   the key
     *  @return  the scaledUsage attribute for <code>key</code> or the
     *           default value of  scaledUsage
     */
    public double getScaledUsage(String key);
   
    /**
     *  Get the set of <code>key</code>s which have the attribute scaledUsage set.
     *  @return set of <code>key</code>s
     */
    public Set<String> getScaledUsageKeys();
   
    /**
     *  Get the number of keys which have the attribute scaledUsage set.
     *  @return the number of keys which have the attribute scaledUsage set.
     */
    public int getScaledUsageCount();
   
    /**
     *  Determine if any scaledUsage attribute is for <code>key</code> is set
     *  @param  key the key
     *  @return <code>true</code> if the scaledUsage attribute is set
     */
    public boolean isSetScaledUsage(String key);
   
   
          
    /**
     *  <p>Put the attribute scaledUsage for <code>key</code>.</p>
     *
     *  @param key   the key
     *  @param value the value
     */
    public void putScaledUsage(String key, double value);
   


    /**
     *  <p>remove the attribute scaledUsage for <code>key</code>.</p>
     *
     *  @param key  The key
     *  @return the value of the attribute for <code>key</code> or <code>null</code>
     *          if the attribute was not defined for <code>key</code>.
     */
    public java.lang.Double removeScaledUsage(String key);
   
    /**
     *  <p>Remove the attribute scaledUsage for all keys.</p>
     */
    public void removeAllScaledUsage();


 
    /**
     *  Determine if any scaledUsage attribute is set
     *  @return <code>true</code> if the scaledUsage attribute is set
     */
    public boolean isSetScaledUsage();


    // Attribute reportedUsageList ------------------------------------------------

        // keyClassName for SGE_STRING = String
     
   
    /**
     *  <p>Get the default value of the attribute reportedUsage.</p>
     *  @return the default value of the attribute reportedUsage
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public double getDefaultReportedUsage();

    /**
     *  <p>Get the reportedUsage attribute for <code>key</code>.</p>
     *  @param   key   the key
     *  @return  the reportedUsage attribute for <code>key</code> or the
     *           default value of  reportedUsage
     */
    public double getReportedUsage(String key);
   
    /**
     *  Get the set of <code>key</code>s which have the attribute reportedUsage set.
     *  @return set of <code>key</code>s
     */
    public Set<String> getReportedUsageKeys();
   
    /**
     *  Get the number of keys which have the attribute reportedUsage set.
     *  @return the number of keys which have the attribute reportedUsage set.
     */
    public int getReportedUsageCount();
   
    /**
     *  Determine if any reportedUsage attribute is for <code>key</code> is set
     *  @param  key the key
     *  @return <code>true</code> if the reportedUsage attribute is set
     */
    public boolean isSetReportedUsage(String key);
   
   
          
    /**
     *  <p>Put the attribute reportedUsage for <code>key</code>.</p>
     *
     *  @param key   the key
     *  @param value the value
     */
    public void putReportedUsage(String key, double value);
   


    /**
     *  <p>remove the attribute reportedUsage for <code>key</code>.</p>
     *
     *  @param key  The key
     *  @return the value of the attribute for <code>key</code> or <code>null</code>
     *          if the attribute was not defined for <code>key</code>.
     */
    public java.lang.Double removeReportedUsage(String key);
   
    /**
     *  <p>Remove the attribute reportedUsage for all keys.</p>
     */
    public void removeAllReportedUsage();


 
    /**
     *  Determine if any reportedUsage attribute is set
     *  @return <code>true</code> if the reportedUsage attribute is set
     */
    public boolean isSetReportedUsage();


    // Attribute fshare ------------------------------------------------

       
    /**
     *   Set the fshare attribute.
     *
     *   @param aFshare  the new value for the  fshare attribute
     */
    public void setFshare(int aFshare);
  
    /**
     *  Get the value of the fshare attribute.
     *  @return the value of the fshare attribute
     */
    public int getFshare();
   

 
    /**
     *  Determine if any fshare attribute is set
     *  @return <code>true</code> if the fshare attribute is set
     */
    public boolean isSetFshare();


    // Attribute tix ------------------------------------------------

       
    /**
     *   Set the tix attribute.
     *
     *   @param aTix  the new value for the  tix attribute
     */
    public void setTix(double aTix);
  
    /**
     *  Get the value of the tix attribute.
     *  @return the value of the tix attribute
     */
    public double getTix();
   

 
    /**
     *  Determine if any tix attribute is set
     *  @return <code>true</code> if the tix attribute is set
     */
    public boolean isSetTix();


    // Attribute oticket ------------------------------------------------

       
    /**
     *   Set the oticket attribute.
     *
     *   @param aOticket  the new value for the  oticket attribute
     */
    public void setOticket(double aOticket);
  
    /**
     *  Get the value of the oticket attribute.
     *  @return the value of the oticket attribute
     */
    public double getOticket();
   

 
    /**
     *  Determine if any oticket attribute is set
     *  @return <code>true</code> if the oticket attribute is set
     */
    public boolean isSetOticket();


    // Attribute fticket ------------------------------------------------

       
    /**
     *   Set the fticket attribute.
     *
     *   @param aFticket  the new value for the  fticket attribute
     */
    public void setFticket(double aFticket);
  
    /**
     *  Get the value of the fticket attribute.
     *  @return the value of the fticket attribute
     */
    public double getFticket();
   

 
    /**
     *  Determine if any fticket attribute is set
     *  @return <code>true</code> if the fticket attribute is set
     */
    public boolean isSetFticket();


    // Attribute sticket ------------------------------------------------

       
    /**
     *   Set the sticket attribute.
     *
     *   @param aSticket  the new value for the  sticket attribute
     */
    public void setSticket(double aSticket);
  
    /**
     *  Get the value of the sticket attribute.
     *  @return the value of the sticket attribute
     */
    public double getSticket();
   

 
    /**
     *  Determine if any sticket attribute is set
     *  @return <code>true</code> if the sticket attribute is set
     */
    public boolean isSetSticket();


    // Attribute share ------------------------------------------------

       
    /**
     *   Set the share attribute.
     *
     *   @param aShare  the new value for the  share attribute
     */
    public void setShare(double aShare);
  
    /**
     *  Get the value of the share attribute.
     *  @return the value of the share attribute
     */
    public double getShare();
   

 
    /**
     *  Determine if any share attribute is set
     *  @return <code>true</code> if the share attribute is set
     */
    public boolean isSetShare();


    // Attribute suitable ------------------------------------------------

       
    /**
     *   Set the suitable attribute.
     *
     *   @param aSuitable  the new value for the  suitable attribute
     */
    public void setSuitable(int aSuitable);
  
    /**
     *  Get the value of the suitable attribute.
     *  @return the value of the suitable attribute
     */
    public int getSuitable();
   

 
    /**
     *  Determine if any suitable attribute is set
     *  @return <code>true</code> if the suitable attribute is set
     */
    public boolean isSetSuitable();


    // Attribute taskList ------------------------------------------------


    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.PETask attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.PETask attributes
     */
    public List< com.sun.grid.jgdi.configuration.PETask >  getTaskList();

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.PETask attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.PETask attributes.
     */
    public int getTaskCount();
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.PETask attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.PETask attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.PETask attribute
     */
    public com.sun.grid.jgdi.configuration.PETask getTask(int index);
   

    /**
     *   Add a com.sun.grid.jgdi.configuration.PETask attribute.
     *   @param atask  the new com.sun.grid.jgdi.configuration.PETask attribute
     */
    public void addTask(com.sun.grid.jgdi.configuration.PETask atask);
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.PETask attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.PETask attribute
     *   @param atask  the new com.sun.grid.jgdi.configuration.PETask attribute
     */
    public void setTask(int index, com.sun.grid.jgdi.configuration.PETask atask);

    /**
     *  Remove all com.sun.grid.jgdi.configuration.PETask attributes.
     */
    public void removeAllTask();
   
    /**
     *  Remote a com.sun.grid.jgdi.configuration.PETask attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.PETask attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.PETask attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.PETask removeTask(int index);

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.PETask attribute.
     *  @param atask  the com.sun.grid.jgdi.configuration.PETask attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.PETask attribute has been removed
     */
    public boolean removeTask(com.sun.grid.jgdi.configuration.PETask atask);
   
       
 
    /**
     *  Determine if any task attribute is set
     *  @return <code>true</code> if the task attribute is set
     */
    public boolean isSetTask();


    // Attribute finishedTaskList ------------------------------------------------


    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.FPET attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.FPET attributes
     */
    public List< com.sun.grid.jgdi.configuration.FPET >  getFinishedTaskList();

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.FPET attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.FPET attributes.
     */
    public int getFinishedTaskCount();
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.FPET attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.FPET attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.FPET attribute
     */
    public com.sun.grid.jgdi.configuration.FPET getFinishedTask(int index);
   

    /**
     *   Add a com.sun.grid.jgdi.configuration.FPET attribute.
     *   @param afinishedTask  the new com.sun.grid.jgdi.configuration.FPET attribute
     */
    public void addFinishedTask(com.sun.grid.jgdi.configuration.FPET afinishedTask);
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.FPET attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.FPET attribute
     *   @param afinishedTask  the new com.sun.grid.jgdi.configuration.FPET attribute
     */
    public void setFinishedTask(int index, com.sun.grid.jgdi.configuration.FPET afinishedTask);

    /**
     *  Remove all com.sun.grid.jgdi.configuration.FPET attributes.
     */
    public void removeAllFinishedTask();
   
    /**
     *  Remote a com.sun.grid.jgdi.configuration.FPET attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.FPET attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.FPET attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.FPET removeFinishedTask(int index);

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.FPET attribute.
     *  @param afinishedTask  the com.sun.grid.jgdi.configuration.FPET attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.FPET attribute has been removed
     */
    public boolean removeFinishedTask(com.sun.grid.jgdi.configuration.FPET afinishedTask);
   
       
 
    /**
     *  Determine if any finishedTask attribute is set
     *  @return <code>true</code> if the finishedTask attribute is set
     */
    public boolean isSetFinishedTask();


    // Attribute previousUsageList ------------------------------------------------

        // keyClassName for SGE_STRING = String
     
   
    /**
     *  <p>Get the default value of the attribute previousUsage.</p>
     *  @return the default value of the attribute previousUsage
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public double getDefaultPreviousUsage();

    /**
     *  <p>Get the previousUsage attribute for <code>key</code>.</p>
     *  @param   key   the key
     *  @return  the previousUsage attribute for <code>key</code> or the
     *           default value of  previousUsage
     */
    public double getPreviousUsage(String key);
   
    /**
     *  Get the set of <code>key</code>s which have the attribute previousUsage set.
     *  @return set of <code>key</code>s
     */
    public Set<String> getPreviousUsageKeys();
   
    /**
     *  Get the number of keys which have the attribute previousUsage set.
     *  @return the number of keys which have the attribute previousUsage set.
     */
    public int getPreviousUsageCount();
   
    /**
     *  Determine if any previousUsage attribute is for <code>key</code> is set
     *  @param  key the key
     *  @return <code>true</code> if the previousUsage attribute is set
     */
    public boolean isSetPreviousUsage(String key);
   
   
          
    /**
     *  <p>Put the attribute previousUsage for <code>key</code>.</p>
     *
     *  @param key   the key
     *  @param value the value
     */
    public void putPreviousUsage(String key, double value);
   


    /**
     *  <p>remove the attribute previousUsage for <code>key</code>.</p>
     *
     *  @param key  The key
     *  @return the value of the attribute for <code>key</code> or <code>null</code>
     *          if the attribute was not defined for <code>key</code>.
     */
    public java.lang.Double removePreviousUsage(String key);
   
    /**
     *  <p>Remove the attribute previousUsage for all keys.</p>
     */
    public void removeAllPreviousUsage();


 
    /**
     *  Determine if any previousUsage attribute is set
     *  @return <code>true</code> if the previousUsage attribute is set
     */
    public boolean isSetPreviousUsage();


    // Attribute peObject ------------------------------------------------

       
    /**
     *   Set the peObject attribute.
     *
     *   @param aPeObject  the new value for the  peObject attribute
     */
    public void setPeObject(com.sun.grid.jgdi.configuration.ParallelEnvironment aPeObject);
  
    /**
     *  Get the value of the peObject attribute.
     *  @return the value of the peObject attribute
     */
    public com.sun.grid.jgdi.configuration.ParallelEnvironment getPeObject();
   

 
    /**
     *  Determine if any peObject attribute is set
     *  @return <code>true</code> if the peObject attribute is set
     */
    public boolean isSetPeObject();


    // Attribute nextPeTaskId ------------------------------------------------

       
    /**
     *   Set the nextPeTaskId attribute.
     *
     *   @param aNextPeTaskId  the new value for the  nextPeTaskId attribute
     */
    public void setNextPeTaskId(int aNextPeTaskId);
  
    /**
     *  Get the value of the nextPeTaskId attribute.
     *  @return the value of the nextPeTaskId attribute
     */
    public int getNextPeTaskId();
   

 
    /**
     *  Determine if any nextPeTaskId attribute is set
     *  @return <code>true</code> if the nextPeTaskId attribute is set
     */
    public boolean isSetNextPeTaskId();


    // Attribute stopInitiateTime ------------------------------------------------

       
    /**
     *   Set the stopInitiateTime attribute.
     *
     *   @param aStopInitiateTime  the new value for the  stopInitiateTime attribute
     */
    public void setStopInitiateTime(int aStopInitiateTime);
  
    /**
     *  Get the value of the stopInitiateTime attribute.
     *  @return the value of the stopInitiateTime attribute
     */
    public int getStopInitiateTime();
   

 
    /**
     *  Determine if any stopInitiateTime attribute is set
     *  @return <code>true</code> if the stopInitiateTime attribute is set
     */
    public boolean isSetStopInitiateTime();


    // Attribute prio ------------------------------------------------

       
    /**
     *   Set the prio attribute.
     *
     *   @param aPrio  the new value for the  prio attribute
     */
    public void setPrio(double aPrio);
  
    /**
     *  Get the value of the prio attribute.
     *  @return the value of the prio attribute
     */
    public double getPrio();
   

 
    /**
     *  Determine if any prio attribute is set
     *  @return <code>true</code> if the prio attribute is set
     */
    public boolean isSetPrio();


    // Attribute ntix ------------------------------------------------

       
    /**
     *   Set the ntix attribute.
     *
     *   @param aNtix  the new value for the  ntix attribute
     */
    public void setNtix(double aNtix);
  
    /**
     *  Get the value of the ntix attribute.
     *  @return the value of the ntix attribute
     */
    public double getNtix();
   

 
    /**
     *  Determine if any ntix attribute is set
     *  @return <code>true</code> if the ntix attribute is set
     */
    public boolean isSetNtix();


    // Attribute wallclockLimit ------------------------------------------------

       
    /**
     *   Set the wallclockLimit attribute.
     *
     *   @param aWallclockLimit  the new value for the  wallclockLimit attribute
     */
    public void setWallclockLimit(int aWallclockLimit);
  
    /**
     *  Get the value of the wallclockLimit attribute.
     *  @return the value of the wallclockLimit attribute
     */
    public int getWallclockLimit();
   

 
    /**
     *  Determine if any wallclockLimit attribute is set
     *  @return <code>true</code> if the wallclockLimit attribute is set
     */
    public boolean isSetWallclockLimit();


    // Attribute messageList ------------------------------------------------


    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.QueueInstanceMessage attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.QueueInstanceMessage attributes
     */
    public List< com.sun.grid.jgdi.configuration.QueueInstanceMessage >  getMessageList();

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.QueueInstanceMessage attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.QueueInstanceMessage attributes.
     */
    public int getMessageCount();
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.QueueInstanceMessage attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.QueueInstanceMessage attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.QueueInstanceMessage attribute
     */
    public com.sun.grid.jgdi.configuration.QueueInstanceMessage getMessage(int index);
   

    /**
     *   Add a com.sun.grid.jgdi.configuration.QueueInstanceMessage attribute.
     *   @param amessage  the new com.sun.grid.jgdi.configuration.QueueInstanceMessage attribute
     */
    public void addMessage(com.sun.grid.jgdi.configuration.QueueInstanceMessage amessage);
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.QueueInstanceMessage attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.QueueInstanceMessage attribute
     *   @param amessage  the new com.sun.grid.jgdi.configuration.QueueInstanceMessage attribute
     */
    public void setMessage(int index, com.sun.grid.jgdi.configuration.QueueInstanceMessage amessage);

    /**
     *  Remove all com.sun.grid.jgdi.configuration.QueueInstanceMessage attributes.
     */
    public void removeAllMessage();
   
    /**
     *  Remote a com.sun.grid.jgdi.configuration.QueueInstanceMessage attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.QueueInstanceMessage attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.QueueInstanceMessage attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.QueueInstanceMessage removeMessage(int index);

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.QueueInstanceMessage attribute.
     *  @param amessage  the com.sun.grid.jgdi.configuration.QueueInstanceMessage attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.QueueInstanceMessage attribute has been removed
     */
    public boolean removeMessage(com.sun.grid.jgdi.configuration.QueueInstanceMessage amessage);
   
       
 
    /**
     *  Determine if any message attribute is set
     *  @return <code>true</code> if the message attribute is set
     */
    public boolean isSetMessage();



    /*
     * Dump the object
     * @return <code>String</code> the dump string
     */
     public String dump();
     

}
