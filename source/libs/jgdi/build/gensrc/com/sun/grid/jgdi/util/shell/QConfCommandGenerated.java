/*___INFO__MARK_BEGIN__*/
/*************************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  the Sun Industry Standards Source License Version 1.2
 *
 *  Sun Microsystems Inc., March, 2001
 *
 *
 *  Sun Industry Standards Source License Version 1.2
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.2 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *   Copyright: 2001 by Sun Microsystems, Inc.
 *
 *   All Rights Reserved.
 *
 ************************************************************************/
/*___INFO__MARK_END__*/
/**
 *  Generated from java_jmx_jgdi.jsp
 *  !!! DO NOT EDIT THIS FILE !!!
 */
 


package com.sun.grid.jgdi.util.shell;

import com.sun.grid.jgdi.JGDI;
import com.sun.grid.jgdi.JGDIException;
import com.sun.grid.jgdi.configuration.*;
import com.sun.grid.jgdi.util.shell.AnnotatedCommand;
import com.sun.grid.jgdi.util.shell.editor.EditorUtil;
import com.sun.grid.jgdi.util.shell.editor.GEObjectEditor;
import com.sun.grid.jgdi.util.shell.editor.TextEditor;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.LineNumberReader;
import java.io.PrintWriter;
import java.io.StringReader;
import java.util.LinkedList;
import java.util.Collections;
import java.util.List;

/**
 * Generated abstract class for handling generic JGDI objects.
 * Implements generic qconf command options.
 * NOTE: QConfCommand should extend this class.
 * @see com.sun.grid.jgdi.util.shell.QConfCommand
 */
public abstract class QConfCommandGenerated extends AnnotatedCommand {

   

   /**
    *   Implements qconf -auser option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-auser", min = 0, extra = 1)
   public void addUser(final OptionInfo oi) throws JGDIException {
      oi.optionDone();
      String arg = oi.getFirstArg();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      // create an object with defaults set
      User obj = new UserImpl(true);
      if (arg != null) {
         obj.setName(arg);
      }
      String userTypedText = runEditor(GEObjectEditor.getConfigurablePropertiesAsText(obj));

      if (userTypedText != null) {
         GEObjectEditor.updateObjectWithText(jgdi, obj, userTypedText);
         jgdi.addUserWithAnswer(obj, answer);
         printAnswers(answer);
      }
   }   
   
   /**
    *   Implements qconf -Auser option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-Auser", min = 1, extra = 0)
   public void addFromFileUser(final OptionInfo oi) throws JGDIException {
      //Just look at the filename
      final String fileName = oi.getArgs().get(0);
      oi.optionDone();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      User obj = new UserImpl(true);
      String inputText = readFile(oi);
      
      final String keyAttrValue = getKeyAttributeValueFromString(err, "User", fileName, inputText);
      
      if (keyAttrValue == null) {
         return;
      }
      obj.setName(keyAttrValue);
      GEObjectEditor.updateObjectWithText(jgdi, obj, inputText);
      jgdi.addUserWithAnswer(obj, answer);
      printAnswers(answer);
   }  
   
   /**
    *   Implements qconf -muser option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-muser", min = 1, extra = 0)
   public void modifyUser(final OptionInfo oi) throws JGDIException {
      final String arg = oi.getFirstArg();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      
      User obj = jgdi.getUserWithAnswer(arg, answer);
      
      if (obj != null) {
         //clear the answers from the get request
         answer.clear();
         String userTypedText = runEditor(GEObjectEditor.getConfigurablePropertiesAsText(obj));
         if (userTypedText != null) {
            GEObjectEditor.updateObjectWithText(jgdi, obj, userTypedText);
            jgdi.updateUserWithAnswer(obj, answer);
         }
         printAnswers(answer);
      } else {
         err.println(getErrorMessage("InvalidObjectArgument", oi.getOd().getOption(), arg));
         setExitCode(getCustomExitCode("InvalidObjectArgument", oi.getOd().getOption()));
      }
      oi.optionDone();
   }  
   
   /**
    *   Implements qconf -Muser option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-Muser", min = 1, extra = 0)
   public void modifyFromFileUser(final OptionInfo oi) throws JGDIException {
      //Just look at the filename
      final String fileName = oi.getArgs().get(0);
      oi.optionDone();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      String inputText = readFile(oi);
      User obj;
      
      final String keyAttrValue = getKeyAttributeValueFromString(err, "User", fileName, inputText);
      if (keyAttrValue == null) {
         return;
      }
      obj = jgdi.getUserWithAnswer(keyAttrValue, answer);
      
      printAnswers(answer);
      answer.clear();
      if (obj != null) {
          GEObjectEditor.updateObjectWithText(jgdi, obj, inputText);
          jgdi.updateUserWithAnswer(obj, answer);
          printAnswers(answer);
      } else {
          //TODO LP: Check this is ever displayed
          
          err.println(getErrorMessage("InvalidObjectArgument", oi.getOd().getOption(), keyAttrValue));
          
          setExitCode(getCustomExitCode("InvalidObjectArgument", oi.getOd().getOption()));
      }
   }  
   
   /**
    *   Implements qconf -suser option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-suser", min = 1, extra = 268435455)
   public void showUser(final OptionInfo oi) throws JGDIException {
      final String arg = oi.getFirstArg();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      
      User obj = jgdi.getUserWithAnswer(arg, answer);
      
      printAnswers(answer);
      //Display error message in no such object exists
      if (obj == null) {
          err.println(getErrorMessage("InvalidObjectArgument", oi.getOd().getOption(), arg));
          setExitCode(getCustomExitCode("InvalidObjectArgument", oi.getOd().getOption()));
          return;
      }
      //Show the object
      String text = GEObjectEditor.getAllPropertiesAsText(obj);
      out.print(text);
   } 
   
   /**
    *   Implements qconf -suserl option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-suserl", min = 0, extra = 0)
   public void showListUser(final OptionInfo oi) throws JGDIException {
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      List< User > list = (List< User >)jgdi.getUserListWithAnswer(answer);
      printAnswers(answer);
      List<String> values = new LinkedList<String>();
      for (User obj : list) {
         values.add(obj.getName());
      }
      
      //Show correct error message if list is empty
      if (values.size() == 0) {
          err.println(getErrorMessage("NoObjectFound", oi.getOd().getOption()));
          setExitCode(getCustomExitCode("NoObjectFound", oi.getOd().getOption()));
          return;
      }
      //Otherwise print sorted list
      Collections.sort(values);
      for (String val : values) {
        out.println(val);
      }
      oi.optionDone();
   }   
   
   /**
    *   Implements qconf -duser option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-duser", min = 1, extra = 268435455)
   public void deleteUser(final OptionInfo oi) throws JGDIException {
      List<JGDIAnswer> answers = new LinkedList<JGDIAnswer>();
      int size = oi.getArgs().size();
      final String[] vals = oi.getArgs().toArray(new String[size]);
      oi.optionDone();
      jgdi.deleteUsersWithAnswer(vals, answers);
      printAnswers(answers);
   }
   
   /**
    *   Implements qconf -ap option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-ap", min = 0, extra = 1)
   public void addParallelEnvironment(final OptionInfo oi) throws JGDIException {
      oi.optionDone();
      String arg = oi.getFirstArg();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      // create an object with defaults set
      ParallelEnvironment obj = new ParallelEnvironmentImpl(true);
      if (arg != null) {
         obj.setName(arg);
      }
      String userTypedText = runEditor(GEObjectEditor.getConfigurablePropertiesAsText(obj));

      if (userTypedText != null) {
         GEObjectEditor.updateObjectWithText(jgdi, obj, userTypedText);
         jgdi.addParallelEnvironmentWithAnswer(obj, answer);
         printAnswers(answer);
      }
   }   
   
   /**
    *   Implements qconf -Ap option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-Ap", min = 1, extra = 0)
   public void addFromFileParallelEnvironment(final OptionInfo oi) throws JGDIException {
      //Just look at the filename
      final String fileName = oi.getArgs().get(0);
      oi.optionDone();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      ParallelEnvironment obj = new ParallelEnvironmentImpl(true);
      String inputText = readFile(oi);
      
      final String keyAttrValue = getKeyAttributeValueFromString(err, "ParallelEnvironment", fileName, inputText);
      
      if (keyAttrValue == null) {
         return;
      }
      obj.setName(keyAttrValue);
      GEObjectEditor.updateObjectWithText(jgdi, obj, inputText);
      jgdi.addParallelEnvironmentWithAnswer(obj, answer);
      printAnswers(answer);
   }  
   
   /**
    *   Implements qconf -mp option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-mp", min = 1, extra = 0)
   public void modifyParallelEnvironment(final OptionInfo oi) throws JGDIException {
      final String arg = oi.getFirstArg();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      
      ParallelEnvironment obj = jgdi.getParallelEnvironmentWithAnswer(arg, answer);
      
      if (obj != null) {
         //clear the answers from the get request
         answer.clear();
         String userTypedText = runEditor(GEObjectEditor.getConfigurablePropertiesAsText(obj));
         if (userTypedText != null) {
            GEObjectEditor.updateObjectWithText(jgdi, obj, userTypedText);
            jgdi.updateParallelEnvironmentWithAnswer(obj, answer);
         }
         printAnswers(answer);
      } else {
         err.println(getErrorMessage("InvalidObjectArgument", oi.getOd().getOption(), arg));
         setExitCode(getCustomExitCode("InvalidObjectArgument", oi.getOd().getOption()));
      }
      oi.optionDone();
   }  
   
   /**
    *   Implements qconf -Mp option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-Mp", min = 1, extra = 0)
   public void modifyFromFileParallelEnvironment(final OptionInfo oi) throws JGDIException {
      //Just look at the filename
      final String fileName = oi.getArgs().get(0);
      oi.optionDone();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      String inputText = readFile(oi);
      ParallelEnvironment obj;
      
      final String keyAttrValue = getKeyAttributeValueFromString(err, "ParallelEnvironment", fileName, inputText);
      if (keyAttrValue == null) {
         return;
      }
      obj = jgdi.getParallelEnvironmentWithAnswer(keyAttrValue, answer);
      
      printAnswers(answer);
      answer.clear();
      if (obj != null) {
          GEObjectEditor.updateObjectWithText(jgdi, obj, inputText);
          jgdi.updateParallelEnvironmentWithAnswer(obj, answer);
          printAnswers(answer);
      } else {
          //TODO LP: Check this is ever displayed
          
          err.println(getErrorMessage("InvalidObjectArgument", oi.getOd().getOption(), keyAttrValue));
          
          setExitCode(getCustomExitCode("InvalidObjectArgument", oi.getOd().getOption()));
      }
   }  
   
   /**
    *   Implements qconf -sp option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-sp", min = 1, extra = 268435455)
   public void showParallelEnvironment(final OptionInfo oi) throws JGDIException {
      final String arg = oi.getFirstArg();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      
      ParallelEnvironment obj = jgdi.getParallelEnvironmentWithAnswer(arg, answer);
      
      printAnswers(answer);
      //Display error message in no such object exists
      if (obj == null) {
          err.println(getErrorMessage("InvalidObjectArgument", oi.getOd().getOption(), arg));
          setExitCode(getCustomExitCode("InvalidObjectArgument", oi.getOd().getOption()));
          return;
      }
      //Show the object
      String text = GEObjectEditor.getAllPropertiesAsText(obj);
      out.print(text);
   } 
   
   /**
    *   Implements qconf -spl option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-spl", min = 0, extra = 0)
   public void showListParallelEnvironment(final OptionInfo oi) throws JGDIException {
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      List< ParallelEnvironment > list = (List< ParallelEnvironment >)jgdi.getParallelEnvironmentListWithAnswer(answer);
      printAnswers(answer);
      List<String> values = new LinkedList<String>();
      for (ParallelEnvironment obj : list) {
         values.add(obj.getName());
      }
      
      //Show correct error message if list is empty
      if (values.size() == 0) {
          err.println(getErrorMessage("NoObjectFound", oi.getOd().getOption()));
          setExitCode(getCustomExitCode("NoObjectFound", oi.getOd().getOption()));
          return;
      }
      //Otherwise print sorted list
      Collections.sort(values);
      for (String val : values) {
        out.println(val);
      }
      oi.optionDone();
   }   
   
   /**
    *   Implements qconf -dp option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-dp", min = 1, extra = 268435455)
   public void deleteParallelEnvironment(final OptionInfo oi) throws JGDIException {
      List<JGDIAnswer> answers = new LinkedList<JGDIAnswer>();
      int size = oi.getArgs().size();
      final String[] vals = oi.getArgs().toArray(new String[size]);
      oi.optionDone();
      jgdi.deleteParallelEnvironmentsWithAnswer(vals, answers);
      printAnswers(answers);
   }
   
   /**
    *   Implements qconf -aq option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-aq", min = 0, extra = 1)
   public void addClusterQueue(final OptionInfo oi) throws JGDIException {
      oi.optionDone();
      String arg = oi.getFirstArg();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      // create an object with defaults set
      ClusterQueue obj = new ClusterQueueImpl(true);
      if (arg != null) {
         obj.setName(arg);
      }
      String userTypedText = runEditor(GEObjectEditor.getConfigurablePropertiesAsText(obj));

      if (userTypedText != null) {
         GEObjectEditor.updateObjectWithText(jgdi, obj, userTypedText);
         jgdi.addClusterQueueWithAnswer(obj, answer);
         printAnswers(answer);
      }
   }   
   
   /**
    *   Implements qconf -Aq option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-Aq", min = 1, extra = 0)
   public void addFromFileClusterQueue(final OptionInfo oi) throws JGDIException {
      //Just look at the filename
      final String fileName = oi.getArgs().get(0);
      oi.optionDone();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      ClusterQueue obj = new ClusterQueueImpl(true);
      String inputText = readFile(oi);
      
      final String keyAttrValue = getKeyAttributeValueFromString(err, "ClusterQueue", fileName, inputText);
      
      if (keyAttrValue == null) {
         return;
      }
      obj.setName(keyAttrValue);
      GEObjectEditor.updateObjectWithText(jgdi, obj, inputText);
      jgdi.addClusterQueueWithAnswer(obj, answer);
      printAnswers(answer);
   }  
   
   /**
    *   Implements qconf -mq option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-mq", min = 1, extra = 0)
   public void modifyClusterQueue(final OptionInfo oi) throws JGDIException {
      final String arg = oi.getFirstArg();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      
      ClusterQueue obj = jgdi.getClusterQueueWithAnswer(arg, answer);
      
      if (obj != null) {
         //clear the answers from the get request
         answer.clear();
         String userTypedText = runEditor(GEObjectEditor.getConfigurablePropertiesAsText(obj));
         if (userTypedText != null) {
            GEObjectEditor.updateObjectWithText(jgdi, obj, userTypedText);
            jgdi.updateClusterQueueWithAnswer(obj, answer);
         }
         printAnswers(answer);
      } else {
         err.println(getErrorMessage("InvalidObjectArgument", oi.getOd().getOption(), arg));
         setExitCode(getCustomExitCode("InvalidObjectArgument", oi.getOd().getOption()));
      }
      oi.optionDone();
   }  
   
   /**
    *   Implements qconf -Mq option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-Mq", min = 1, extra = 0)
   public void modifyFromFileClusterQueue(final OptionInfo oi) throws JGDIException {
      //Just look at the filename
      final String fileName = oi.getArgs().get(0);
      oi.optionDone();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      String inputText = readFile(oi);
      ClusterQueue obj;
      
      final String keyAttrValue = getKeyAttributeValueFromString(err, "ClusterQueue", fileName, inputText);
      if (keyAttrValue == null) {
         return;
      }
      obj = jgdi.getClusterQueueWithAnswer(keyAttrValue, answer);
      
      printAnswers(answer);
      answer.clear();
      if (obj != null) {
          GEObjectEditor.updateObjectWithText(jgdi, obj, inputText);
          jgdi.updateClusterQueueWithAnswer(obj, answer);
          printAnswers(answer);
      } else {
          //TODO LP: Check this is ever displayed
          
          err.println(getErrorMessage("InvalidObjectArgument", oi.getOd().getOption(), keyAttrValue));
          
          setExitCode(getCustomExitCode("InvalidObjectArgument", oi.getOd().getOption()));
      }
   }  
   
   /**
    *   Implements qconf -sq option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-sq", min = 1, extra = 268435455)
   public void showClusterQueue(final OptionInfo oi) throws JGDIException {
      final String arg = oi.getFirstArg();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      
      ClusterQueue obj = jgdi.getClusterQueueWithAnswer(arg, answer);
      
      printAnswers(answer);
      //Display error message in no such object exists
      if (obj == null) {
          err.println(getErrorMessage("InvalidObjectArgument", oi.getOd().getOption(), arg));
          setExitCode(getCustomExitCode("InvalidObjectArgument", oi.getOd().getOption()));
          return;
      }
      //Show the object
      String text = GEObjectEditor.getAllPropertiesAsText(obj);
      out.print(text);
   } 
   
   /**
    *   Implements qconf -sql option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-sql", min = 0, extra = 0)
   public void showListClusterQueue(final OptionInfo oi) throws JGDIException {
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      List< ClusterQueue > list = (List< ClusterQueue >)jgdi.getClusterQueueListWithAnswer(answer);
      printAnswers(answer);
      List<String> values = new LinkedList<String>();
      for (ClusterQueue obj : list) {
         values.add(obj.getName());
      }
      
      //Show correct error message if list is empty
      if (values.size() == 0) {
          err.println(getErrorMessage("NoObjectFound", oi.getOd().getOption()));
          setExitCode(getCustomExitCode("NoObjectFound", oi.getOd().getOption()));
          return;
      }
      //Otherwise print sorted list
      Collections.sort(values);
      for (String val : values) {
        out.println(val);
      }
      oi.optionDone();
   }   
   
   /**
    *   Implements qconf -dq option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-dq", min = 1, extra = 268435455)
   public void deleteClusterQueue(final OptionInfo oi) throws JGDIException {
      List<JGDIAnswer> answers = new LinkedList<JGDIAnswer>();
      int size = oi.getArgs().size();
      final String[] vals = oi.getArgs().toArray(new String[size]);
      oi.optionDone();
      jgdi.deleteClusterQueuesWithAnswer(vals, answers);
      printAnswers(answers);
   }
   
   /**
    *   Implements qconf -aprj option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-aprj", min = 0, extra = 1)
   public void addProject(final OptionInfo oi) throws JGDIException {
      oi.optionDone();
      String arg = oi.getFirstArg();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      // create an object with defaults set
      Project obj = new ProjectImpl(true);
      if (arg != null) {
         obj.setName(arg);
      }
      String userTypedText = runEditor(GEObjectEditor.getConfigurablePropertiesAsText(obj));

      if (userTypedText != null) {
         GEObjectEditor.updateObjectWithText(jgdi, obj, userTypedText);
         jgdi.addProjectWithAnswer(obj, answer);
         printAnswers(answer);
      }
   }   
   
   /**
    *   Implements qconf -Aprj option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-Aprj", min = 1, extra = 0)
   public void addFromFileProject(final OptionInfo oi) throws JGDIException {
      //Just look at the filename
      final String fileName = oi.getArgs().get(0);
      oi.optionDone();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      Project obj = new ProjectImpl(true);
      String inputText = readFile(oi);
      
      final String keyAttrValue = getKeyAttributeValueFromString(err, "Project", fileName, inputText);
      
      if (keyAttrValue == null) {
         return;
      }
      obj.setName(keyAttrValue);
      GEObjectEditor.updateObjectWithText(jgdi, obj, inputText);
      jgdi.addProjectWithAnswer(obj, answer);
      printAnswers(answer);
   }  
   
   /**
    *   Implements qconf -mprj option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-mprj", min = 1, extra = 0)
   public void modifyProject(final OptionInfo oi) throws JGDIException {
      final String arg = oi.getFirstArg();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      
      Project obj = jgdi.getProjectWithAnswer(arg, answer);
      
      if (obj != null) {
         //clear the answers from the get request
         answer.clear();
         String userTypedText = runEditor(GEObjectEditor.getConfigurablePropertiesAsText(obj));
         if (userTypedText != null) {
            GEObjectEditor.updateObjectWithText(jgdi, obj, userTypedText);
            jgdi.updateProjectWithAnswer(obj, answer);
         }
         printAnswers(answer);
      } else {
         err.println(getErrorMessage("InvalidObjectArgument", oi.getOd().getOption(), arg));
         setExitCode(getCustomExitCode("InvalidObjectArgument", oi.getOd().getOption()));
      }
      oi.optionDone();
   }  
   
   /**
    *   Implements qconf -Mprj option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-Mprj", min = 1, extra = 0)
   public void modifyFromFileProject(final OptionInfo oi) throws JGDIException {
      //Just look at the filename
      final String fileName = oi.getArgs().get(0);
      oi.optionDone();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      String inputText = readFile(oi);
      Project obj;
      
      final String keyAttrValue = getKeyAttributeValueFromString(err, "Project", fileName, inputText);
      if (keyAttrValue == null) {
         return;
      }
      obj = jgdi.getProjectWithAnswer(keyAttrValue, answer);
      
      printAnswers(answer);
      answer.clear();
      if (obj != null) {
          GEObjectEditor.updateObjectWithText(jgdi, obj, inputText);
          jgdi.updateProjectWithAnswer(obj, answer);
          printAnswers(answer);
      } else {
          //TODO LP: Check this is ever displayed
          
          err.println(getErrorMessage("InvalidObjectArgument", oi.getOd().getOption(), keyAttrValue));
          
          setExitCode(getCustomExitCode("InvalidObjectArgument", oi.getOd().getOption()));
      }
   }  
   
   /**
    *   Implements qconf -sprj option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-sprj", min = 1, extra = 268435455)
   public void showProject(final OptionInfo oi) throws JGDIException {
      final String arg = oi.getFirstArg();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      
      Project obj = jgdi.getProjectWithAnswer(arg, answer);
      
      printAnswers(answer);
      //Display error message in no such object exists
      if (obj == null) {
          err.println(getErrorMessage("InvalidObjectArgument", oi.getOd().getOption(), arg));
          setExitCode(getCustomExitCode("InvalidObjectArgument", oi.getOd().getOption()));
          return;
      }
      //Show the object
      String text = GEObjectEditor.getAllPropertiesAsText(obj);
      out.print(text);
   } 
   
   /**
    *   Implements qconf -sprjl option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-sprjl", min = 0, extra = 0)
   public void showListProject(final OptionInfo oi) throws JGDIException {
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      List< Project > list = (List< Project >)jgdi.getProjectListWithAnswer(answer);
      printAnswers(answer);
      List<String> values = new LinkedList<String>();
      for (Project obj : list) {
         values.add(obj.getName());
      }
      
      //Show correct error message if list is empty
      if (values.size() == 0) {
          err.println(getErrorMessage("NoObjectFound", oi.getOd().getOption()));
          setExitCode(getCustomExitCode("NoObjectFound", oi.getOd().getOption()));
          return;
      }
      //Otherwise print sorted list
      Collections.sort(values);
      for (String val : values) {
        out.println(val);
      }
      oi.optionDone();
   }   
   
   /**
    *   Implements qconf -dprj option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-dprj", min = 1, extra = 268435455)
   public void deleteProject(final OptionInfo oi) throws JGDIException {
      List<JGDIAnswer> answers = new LinkedList<JGDIAnswer>();
      int size = oi.getArgs().size();
      final String[] vals = oi.getArgs().toArray(new String[size]);
      oi.optionDone();
      jgdi.deleteProjectsWithAnswer(vals, answers);
      printAnswers(answers);
   }
   
   /**
    *   Implements qconf -ahgrp option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-ahgrp", min = 0, extra = 1)
   public void addHostgroup(final OptionInfo oi) throws JGDIException {
      oi.optionDone();
      String arg = oi.getFirstArg();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      // create an object with defaults set
      Hostgroup obj = new HostgroupImpl(true);
      if (arg != null) {
         obj.setName(arg);
      }
      String userTypedText = runEditor(GEObjectEditor.getConfigurablePropertiesAsText(obj));

      if (userTypedText != null) {
         GEObjectEditor.updateObjectWithText(jgdi, obj, userTypedText);
         jgdi.addHostgroupWithAnswer(obj, answer);
         printAnswers(answer);
      }
   }   
   
   /**
    *   Implements qconf -Ahgrp option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-Ahgrp", min = 1, extra = 0)
   public void addFromFileHostgroup(final OptionInfo oi) throws JGDIException {
      //Just look at the filename
      final String fileName = oi.getArgs().get(0);
      oi.optionDone();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      Hostgroup obj = new HostgroupImpl(true);
      String inputText = readFile(oi);
      
      final String keyAttrValue = getKeyAttributeValueFromString(err, "Hostgroup", fileName, inputText);
      
      if (keyAttrValue == null) {
         return;
      }
      obj.setName(keyAttrValue);
      GEObjectEditor.updateObjectWithText(jgdi, obj, inputText);
      jgdi.addHostgroupWithAnswer(obj, answer);
      printAnswers(answer);
   }  
   
   /**
    *   Implements qconf -mhgrp option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-mhgrp", min = 1, extra = 0)
   public void modifyHostgroup(final OptionInfo oi) throws JGDIException {
      final String arg = oi.getFirstArg();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      
      Hostgroup obj = jgdi.getHostgroupWithAnswer(arg, answer);
      
      if (obj != null) {
         //clear the answers from the get request
         answer.clear();
         String userTypedText = runEditor(GEObjectEditor.getConfigurablePropertiesAsText(obj));
         if (userTypedText != null) {
            GEObjectEditor.updateObjectWithText(jgdi, obj, userTypedText);
            jgdi.updateHostgroupWithAnswer(obj, answer);
         }
         printAnswers(answer);
      } else {
         err.println(getErrorMessage("InvalidObjectArgument", oi.getOd().getOption(), arg));
         setExitCode(getCustomExitCode("InvalidObjectArgument", oi.getOd().getOption()));
      }
      oi.optionDone();
   }  
   
   /**
    *   Implements qconf -Mhgrp option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-Mhgrp", min = 1, extra = 0)
   public void modifyFromFileHostgroup(final OptionInfo oi) throws JGDIException {
      //Just look at the filename
      final String fileName = oi.getArgs().get(0);
      oi.optionDone();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      String inputText = readFile(oi);
      Hostgroup obj;
      
      final String keyAttrValue = getKeyAttributeValueFromString(err, "Hostgroup", fileName, inputText);
      if (keyAttrValue == null) {
         return;
      }
      obj = jgdi.getHostgroupWithAnswer(keyAttrValue, answer);
      
      printAnswers(answer);
      answer.clear();
      if (obj != null) {
          GEObjectEditor.updateObjectWithText(jgdi, obj, inputText);
          jgdi.updateHostgroupWithAnswer(obj, answer);
          printAnswers(answer);
      } else {
          //TODO LP: Check this is ever displayed
          
          err.println(getErrorMessage("InvalidObjectArgument", oi.getOd().getOption(), keyAttrValue));
          
          setExitCode(getCustomExitCode("InvalidObjectArgument", oi.getOd().getOption()));
      }
   }  
   
   /**
    *   Implements qconf -shgrp option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-shgrp", min = 1, extra = 268435455)
   public void showHostgroup(final OptionInfo oi) throws JGDIException {
      final String arg = oi.getFirstArg();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      
      Hostgroup obj = jgdi.getHostgroupWithAnswer(arg, answer);
      
      printAnswers(answer);
      //Display error message in no such object exists
      if (obj == null) {
          err.println(getErrorMessage("InvalidObjectArgument", oi.getOd().getOption(), arg));
          setExitCode(getCustomExitCode("InvalidObjectArgument", oi.getOd().getOption()));
          return;
      }
      //Show the object
      String text = GEObjectEditor.getAllPropertiesAsText(obj);
      out.print(text);
   } 
   
   /**
    *   Implements qconf -shgrpl option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-shgrpl", min = 0, extra = 0)
   public void showListHostgroup(final OptionInfo oi) throws JGDIException {
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      List< Hostgroup > list = (List< Hostgroup >)jgdi.getHostgroupListWithAnswer(answer);
      printAnswers(answer);
      List<String> values = new LinkedList<String>();
      for (Hostgroup obj : list) {
         values.add(obj.getName());
      }
      
      //Show correct error message if list is empty
      if (values.size() == 0) {
          err.println(getErrorMessage("NoObjectFound", oi.getOd().getOption()));
          setExitCode(getCustomExitCode("NoObjectFound", oi.getOd().getOption()));
          return;
      }
      //Otherwise print sorted list
      Collections.sort(values);
      for (String val : values) {
        out.println(val);
      }
      oi.optionDone();
   }   
   
   /**
    *   Implements qconf -dhgrp option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-dhgrp", min = 1, extra = 268435455)
   public void deleteHostgroup(final OptionInfo oi) throws JGDIException {
      List<JGDIAnswer> answers = new LinkedList<JGDIAnswer>();
      int size = oi.getArgs().size();
      final String[] vals = oi.getArgs().toArray(new String[size]);
      oi.optionDone();
      jgdi.deleteHostgroupsWithAnswer(vals, answers);
      printAnswers(answers);
   }
   
   /**
    *   Implements qconf -aconf option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-aconf", min = 0, extra = 1)
   public void addConfiguration(final OptionInfo oi) throws JGDIException {
      oi.optionDone();
      String arg = oi.getFirstArg();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      // create an object with defaults set
      Configuration obj = new ConfigurationImpl(true);
      if (arg != null) {
         obj.setName(arg);
      }
      String userTypedText = runEditor(GEObjectEditor.getConfigurablePropertiesAsText(obj));

      if (userTypedText != null) {
         GEObjectEditor.updateObjectWithText(jgdi, obj, userTypedText);
         jgdi.addConfigurationWithAnswer(obj, answer);
         printAnswers(answer);
      }
   }   
   
   /**
    *   Implements qconf -Aconf option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-Aconf", min = 1, extra = 0)
   public void addFromFileConfiguration(final OptionInfo oi) throws JGDIException {
      //Just look at the filename
      final String fileName = oi.getArgs().get(0);
      oi.optionDone();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      Configuration obj = new ConfigurationImpl(true);
      String inputText = readFile(oi);
      
      final String keyAttrValue = new File(fileName).getName();
      
      if (keyAttrValue == null) {
         return;
      }
      obj.setName(keyAttrValue);
      GEObjectEditor.updateObjectWithText(jgdi, obj, inputText);
      jgdi.addConfigurationWithAnswer(obj, answer);
      printAnswers(answer);
   }  
   
   /**
    *   Implements qconf -mconf option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-mconf", min = 1, extra = 0)
   public void modifyConfiguration(final OptionInfo oi) throws JGDIException {
      final String arg = oi.getFirstArg();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      
      Configuration obj = jgdi.getConfigurationWithAnswer(arg, answer);
      
      if (obj != null) {
         //clear the answers from the get request
         answer.clear();
         String userTypedText = runEditor(GEObjectEditor.getConfigurablePropertiesAsText(obj));
         if (userTypedText != null) {
            GEObjectEditor.updateObjectWithText(jgdi, obj, userTypedText);
            jgdi.updateConfigurationWithAnswer(obj, answer);
         }
         printAnswers(answer);
      } else {
         err.println(getErrorMessage("InvalidObjectArgument", oi.getOd().getOption(), arg));
         setExitCode(getCustomExitCode("InvalidObjectArgument", oi.getOd().getOption()));
      }
      oi.optionDone();
   }  
   
   /**
    *   Implements qconf -Mconf option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-Mconf", min = 1, extra = 0)
   public void modifyFromFileConfiguration(final OptionInfo oi) throws JGDIException {
      //Just look at the filename
      final String fileName = oi.getArgs().get(0);
      oi.optionDone();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      String inputText = readFile(oi);
      Configuration obj;
      
      final String keyAttrValue = getKeyAttributeValueFromString(err, "Configuration", fileName, inputText);
      if (keyAttrValue == null) {
         return;
      }
      obj = jgdi.getConfigurationWithAnswer(keyAttrValue, answer);
      
      printAnswers(answer);
      answer.clear();
      if (obj != null) {
          GEObjectEditor.updateObjectWithText(jgdi, obj, inputText);
          jgdi.updateConfigurationWithAnswer(obj, answer);
          printAnswers(answer);
      } else {
          //TODO LP: Check this is ever displayed
          
          err.println(getErrorMessage("InvalidObjectArgument", oi.getOd().getOption(), keyAttrValue));
          
          setExitCode(getCustomExitCode("InvalidObjectArgument", oi.getOd().getOption()));
      }
   }  
   
   /**
    *   Implements qconf -sconf option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-sconf", min = 1, extra = 268435455)
   public void showConfiguration(final OptionInfo oi) throws JGDIException {
      final String arg = oi.getFirstArg();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      
      Configuration obj = jgdi.getConfigurationWithAnswer(arg, answer);
      
      printAnswers(answer);
      //Display error message in no such object exists
      if (obj == null) {
          err.println(getErrorMessage("InvalidObjectArgument", oi.getOd().getOption(), arg));
          setExitCode(getCustomExitCode("InvalidObjectArgument", oi.getOd().getOption()));
          return;
      }
      //Show the object
      String text = GEObjectEditor.getAllPropertiesAsText(obj);
      out.print(text);
   } 
   
   /**
    *   Implements qconf -sconfl option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-sconfl", min = 0, extra = 0)
   public void showListConfiguration(final OptionInfo oi) throws JGDIException {
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      List< Configuration > list = (List< Configuration >)jgdi.getConfigurationListWithAnswer(answer);
      printAnswers(answer);
      List<String> values = new LinkedList<String>();
      for (Configuration obj : list) {
         values.add(obj.getName());
      }
      
      values.remove("global");
      
      //Show correct error message if list is empty
      if (values.size() == 0) {
          err.println(getErrorMessage("NoObjectFound", oi.getOd().getOption()));
          setExitCode(getCustomExitCode("NoObjectFound", oi.getOd().getOption()));
          return;
      }
      //Otherwise print sorted list
      Collections.sort(values);
      for (String val : values) {
        out.println(val);
      }
      oi.optionDone();
   }   
   
   /**
    *   Implements qconf -dconf option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-dconf", min = 1, extra = 268435455)
   public void deleteConfiguration(final OptionInfo oi) throws JGDIException {
      List<JGDIAnswer> answers = new LinkedList<JGDIAnswer>();
      int size = oi.getArgs().size();
      final String[] vals = oi.getArgs().toArray(new String[size]);
      oi.optionDone();
      jgdi.deleteConfigurationsWithAnswer(vals, answers);
      printAnswers(answers);
   }
   
   /**
    *   Implements qconf -acal option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-acal", min = 0, extra = 1)
   public void addCalendar(final OptionInfo oi) throws JGDIException {
      oi.optionDone();
      String arg = oi.getFirstArg();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      // create an object with defaults set
      Calendar obj = new CalendarImpl(true);
      if (arg != null) {
         obj.setName(arg);
      }
      String userTypedText = runEditor(GEObjectEditor.getConfigurablePropertiesAsText(obj));

      if (userTypedText != null) {
         GEObjectEditor.updateObjectWithText(jgdi, obj, userTypedText);
         jgdi.addCalendarWithAnswer(obj, answer);
         printAnswers(answer);
      }
   }   
   
   /**
    *   Implements qconf -Acal option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-Acal", min = 1, extra = 0)
   public void addFromFileCalendar(final OptionInfo oi) throws JGDIException {
      //Just look at the filename
      final String fileName = oi.getArgs().get(0);
      oi.optionDone();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      Calendar obj = new CalendarImpl(true);
      String inputText = readFile(oi);
      
      final String keyAttrValue = getKeyAttributeValueFromString(err, "Calendar", fileName, inputText);
      
      if (keyAttrValue == null) {
         return;
      }
      obj.setName(keyAttrValue);
      GEObjectEditor.updateObjectWithText(jgdi, obj, inputText);
      jgdi.addCalendarWithAnswer(obj, answer);
      printAnswers(answer);
   }  
   
   /**
    *   Implements qconf -mcal option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-mcal", min = 1, extra = 0)
   public void modifyCalendar(final OptionInfo oi) throws JGDIException {
      final String arg = oi.getFirstArg();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      
      Calendar obj = jgdi.getCalendarWithAnswer(arg, answer);
      
      if (obj != null) {
         //clear the answers from the get request
         answer.clear();
         String userTypedText = runEditor(GEObjectEditor.getConfigurablePropertiesAsText(obj));
         if (userTypedText != null) {
            GEObjectEditor.updateObjectWithText(jgdi, obj, userTypedText);
            jgdi.updateCalendarWithAnswer(obj, answer);
         }
         printAnswers(answer);
      } else {
         err.println(getErrorMessage("InvalidObjectArgument", oi.getOd().getOption(), arg));
         setExitCode(getCustomExitCode("InvalidObjectArgument", oi.getOd().getOption()));
      }
      oi.optionDone();
   }  
   
   /**
    *   Implements qconf -Mcal option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-Mcal", min = 1, extra = 0)
   public void modifyFromFileCalendar(final OptionInfo oi) throws JGDIException {
      //Just look at the filename
      final String fileName = oi.getArgs().get(0);
      oi.optionDone();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      String inputText = readFile(oi);
      Calendar obj;
      
      final String keyAttrValue = getKeyAttributeValueFromString(err, "Calendar", fileName, inputText);
      if (keyAttrValue == null) {
         return;
      }
      obj = jgdi.getCalendarWithAnswer(keyAttrValue, answer);
      
      printAnswers(answer);
      answer.clear();
      if (obj != null) {
          GEObjectEditor.updateObjectWithText(jgdi, obj, inputText);
          jgdi.updateCalendarWithAnswer(obj, answer);
          printAnswers(answer);
      } else {
          //TODO LP: Check this is ever displayed
          
          err.println(getErrorMessage("InvalidObjectArgument", oi.getOd().getOption(), keyAttrValue));
          
          setExitCode(getCustomExitCode("InvalidObjectArgument", oi.getOd().getOption()));
      }
   }  
   
   /**
    *   Implements qconf -scal option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-scal", min = 1, extra = 268435455)
   public void showCalendar(final OptionInfo oi) throws JGDIException {
      final String arg = oi.getFirstArg();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      
      Calendar obj = jgdi.getCalendarWithAnswer(arg, answer);
      
      printAnswers(answer);
      //Display error message in no such object exists
      if (obj == null) {
          err.println(getErrorMessage("InvalidObjectArgument", oi.getOd().getOption(), arg));
          setExitCode(getCustomExitCode("InvalidObjectArgument", oi.getOd().getOption()));
          return;
      }
      //Show the object
      String text = GEObjectEditor.getAllPropertiesAsText(obj);
      out.print(text);
   } 
   
   /**
    *   Implements qconf -scall option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-scall", min = 0, extra = 0)
   public void showListCalendar(final OptionInfo oi) throws JGDIException {
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      List< Calendar > list = (List< Calendar >)jgdi.getCalendarListWithAnswer(answer);
      printAnswers(answer);
      List<String> values = new LinkedList<String>();
      for (Calendar obj : list) {
         values.add(obj.getName());
      }
      
      //Show correct error message if list is empty
      if (values.size() == 0) {
          err.println(getErrorMessage("NoObjectFound", oi.getOd().getOption()));
          setExitCode(getCustomExitCode("NoObjectFound", oi.getOd().getOption()));
          return;
      }
      //Otherwise print sorted list
      Collections.sort(values);
      for (String val : values) {
        out.println(val);
      }
      oi.optionDone();
   }   
   
   /**
    *   Implements qconf -dcal option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-dcal", min = 1, extra = 268435455)
   public void deleteCalendar(final OptionInfo oi) throws JGDIException {
      List<JGDIAnswer> answers = new LinkedList<JGDIAnswer>();
      int size = oi.getArgs().size();
      final String[] vals = oi.getArgs().toArray(new String[size]);
      oi.optionDone();
      jgdi.deleteCalendarsWithAnswer(vals, answers);
      printAnswers(answers);
   }
   
   /**
    *   Implements qconf -ackpt option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-ackpt", min = 0, extra = 1)
   public void addCheckpoint(final OptionInfo oi) throws JGDIException {
      oi.optionDone();
      String arg = oi.getFirstArg();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      // create an object with defaults set
      Checkpoint obj = new CheckpointImpl(true);
      if (arg != null) {
         obj.setName(arg);
      }
      String userTypedText = runEditor(GEObjectEditor.getConfigurablePropertiesAsText(obj));

      if (userTypedText != null) {
         GEObjectEditor.updateObjectWithText(jgdi, obj, userTypedText);
         jgdi.addCheckpointWithAnswer(obj, answer);
         printAnswers(answer);
      }
   }   
   
   /**
    *   Implements qconf -Ackpt option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-Ackpt", min = 1, extra = 0)
   public void addFromFileCheckpoint(final OptionInfo oi) throws JGDIException {
      //Just look at the filename
      final String fileName = oi.getArgs().get(0);
      oi.optionDone();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      Checkpoint obj = new CheckpointImpl(true);
      String inputText = readFile(oi);
      
      final String keyAttrValue = getKeyAttributeValueFromString(err, "Checkpoint", fileName, inputText);
      
      if (keyAttrValue == null) {
         return;
      }
      obj.setName(keyAttrValue);
      GEObjectEditor.updateObjectWithText(jgdi, obj, inputText);
      jgdi.addCheckpointWithAnswer(obj, answer);
      printAnswers(answer);
   }  
   
   /**
    *   Implements qconf -mckpt option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-mckpt", min = 1, extra = 0)
   public void modifyCheckpoint(final OptionInfo oi) throws JGDIException {
      final String arg = oi.getFirstArg();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      
      Checkpoint obj = jgdi.getCheckpointWithAnswer(arg, answer);
      
      if (obj != null) {
         //clear the answers from the get request
         answer.clear();
         String userTypedText = runEditor(GEObjectEditor.getConfigurablePropertiesAsText(obj));
         if (userTypedText != null) {
            GEObjectEditor.updateObjectWithText(jgdi, obj, userTypedText);
            jgdi.updateCheckpointWithAnswer(obj, answer);
         }
         printAnswers(answer);
      } else {
         err.println(getErrorMessage("InvalidObjectArgument", oi.getOd().getOption(), arg));
         setExitCode(getCustomExitCode("InvalidObjectArgument", oi.getOd().getOption()));
      }
      oi.optionDone();
   }  
   
   /**
    *   Implements qconf -Mckpt option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-Mckpt", min = 1, extra = 0)
   public void modifyFromFileCheckpoint(final OptionInfo oi) throws JGDIException {
      //Just look at the filename
      final String fileName = oi.getArgs().get(0);
      oi.optionDone();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      String inputText = readFile(oi);
      Checkpoint obj;
      
      final String keyAttrValue = getKeyAttributeValueFromString(err, "Checkpoint", fileName, inputText);
      if (keyAttrValue == null) {
         return;
      }
      obj = jgdi.getCheckpointWithAnswer(keyAttrValue, answer);
      
      printAnswers(answer);
      answer.clear();
      if (obj != null) {
          GEObjectEditor.updateObjectWithText(jgdi, obj, inputText);
          jgdi.updateCheckpointWithAnswer(obj, answer);
          printAnswers(answer);
      } else {
          //TODO LP: Check this is ever displayed
          
          err.println(getErrorMessage("InvalidObjectArgument", oi.getOd().getOption(), keyAttrValue));
          
          setExitCode(getCustomExitCode("InvalidObjectArgument", oi.getOd().getOption()));
      }
   }  
   
   /**
    *   Implements qconf -sckpt option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-sckpt", min = 1, extra = 268435455)
   public void showCheckpoint(final OptionInfo oi) throws JGDIException {
      final String arg = oi.getFirstArg();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      
      Checkpoint obj = jgdi.getCheckpointWithAnswer(arg, answer);
      
      printAnswers(answer);
      //Display error message in no such object exists
      if (obj == null) {
          err.println(getErrorMessage("InvalidObjectArgument", oi.getOd().getOption(), arg));
          setExitCode(getCustomExitCode("InvalidObjectArgument", oi.getOd().getOption()));
          return;
      }
      //Show the object
      String text = GEObjectEditor.getAllPropertiesAsText(obj);
      out.print(text);
   } 
   
   /**
    *   Implements qconf -sckptl option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-sckptl", min = 0, extra = 0)
   public void showListCheckpoint(final OptionInfo oi) throws JGDIException {
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      List< Checkpoint > list = (List< Checkpoint >)jgdi.getCheckpointListWithAnswer(answer);
      printAnswers(answer);
      List<String> values = new LinkedList<String>();
      for (Checkpoint obj : list) {
         values.add(obj.getName());
      }
      
      //Show correct error message if list is empty
      if (values.size() == 0) {
          err.println(getErrorMessage("NoObjectFound", oi.getOd().getOption()));
          setExitCode(getCustomExitCode("NoObjectFound", oi.getOd().getOption()));
          return;
      }
      //Otherwise print sorted list
      Collections.sort(values);
      for (String val : values) {
        out.println(val);
      }
      oi.optionDone();
   }   
   
   /**
    *   Implements qconf -dckpt option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-dckpt", min = 1, extra = 268435455)
   public void deleteCheckpoint(final OptionInfo oi) throws JGDIException {
      List<JGDIAnswer> answers = new LinkedList<JGDIAnswer>();
      int size = oi.getArgs().size();
      final String[] vals = oi.getArgs().toArray(new String[size]);
      oi.optionDone();
      jgdi.deleteCheckpointsWithAnswer(vals, answers);
      printAnswers(answers);
   }
   
   /**
    *   Implements qconf -Ae option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-Ae", min = 1, extra = 0)
   public void addFromFileExecHost(final OptionInfo oi) throws JGDIException {
      //Just look at the filename
      final String fileName = oi.getArgs().get(0);
      oi.optionDone();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      ExecHost obj = new ExecHostImpl(true);
      String inputText = readFile(oi);
      
      final String keyAttrValue = getKeyAttributeValueFromString(err, "ExecHost", fileName, inputText);
      
      if (keyAttrValue == null) {
         return;
      }
      obj.setName(keyAttrValue);
      GEObjectEditor.updateObjectWithText(jgdi, obj, inputText);
      jgdi.addExecHostWithAnswer(obj, answer);
      printAnswers(answer);
   }  
   
   /**
    *   Implements qconf -me option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-me", min = 1, extra = 0)
   public void modifyExecHost(final OptionInfo oi) throws JGDIException {
      final String arg = oi.getFirstArg();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      
      ExecHost obj = jgdi.getExecHostWithAnswer(arg, answer);
      
      if (obj != null) {
         //clear the answers from the get request
         answer.clear();
         String userTypedText = runEditor(GEObjectEditor.getConfigurablePropertiesAsText(obj));
         if (userTypedText != null) {
            GEObjectEditor.updateObjectWithText(jgdi, obj, userTypedText);
            jgdi.updateExecHostWithAnswer(obj, answer);
         }
         printAnswers(answer);
      } else {
         err.println(getErrorMessage("InvalidObjectArgument", oi.getOd().getOption(), arg));
         setExitCode(getCustomExitCode("InvalidObjectArgument", oi.getOd().getOption()));
      }
      oi.optionDone();
   }  
   
   /**
    *   Implements qconf -Me option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-Me", min = 1, extra = 0)
   public void modifyFromFileExecHost(final OptionInfo oi) throws JGDIException {
      //Just look at the filename
      final String fileName = oi.getArgs().get(0);
      oi.optionDone();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      String inputText = readFile(oi);
      ExecHost obj;
      
      final String keyAttrValue = getKeyAttributeValueFromString(err, "ExecHost", fileName, inputText);
      if (keyAttrValue == null) {
         return;
      }
      obj = jgdi.getExecHostWithAnswer(keyAttrValue, answer);
      
      printAnswers(answer);
      answer.clear();
      if (obj != null) {
          GEObjectEditor.updateObjectWithText(jgdi, obj, inputText);
          jgdi.updateExecHostWithAnswer(obj, answer);
          printAnswers(answer);
      } else {
          //TODO LP: Check this is ever displayed
          
          err.println(getErrorMessage("InvalidObjectArgument", oi.getOd().getOption(), keyAttrValue));
          
          setExitCode(getCustomExitCode("InvalidObjectArgument", oi.getOd().getOption()));
      }
   }  
   
   /**
    *   Implements qconf -se option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-se", min = 1, extra = 268435455)
   public void showExecHost(final OptionInfo oi) throws JGDIException {
      final String arg = oi.getFirstArg();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      
      ExecHost obj = jgdi.getExecHostWithAnswer(arg, answer);
      
      printAnswers(answer);
      //Display error message in no such object exists
      if (obj == null) {
          err.println(getErrorMessage("InvalidObjectArgument", oi.getOd().getOption(), arg));
          setExitCode(getCustomExitCode("InvalidObjectArgument", oi.getOd().getOption()));
          return;
      }
      //Show the object
      String text = GEObjectEditor.getAllPropertiesAsText(obj);
      out.print(text);
   } 
   
   /**
    *   Implements qconf -sel option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-sel", min = 0, extra = 0)
   public void showListExecHost(final OptionInfo oi) throws JGDIException {
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      List< ExecHost > list = (List< ExecHost >)jgdi.getExecHostListWithAnswer(answer);
      printAnswers(answer);
      List<String> values = new LinkedList<String>();
      for (ExecHost obj : list) {
         values.add(obj.getName());
      }
      
      values.remove("global");
      values.remove("template");
      
      //Show correct error message if list is empty
      if (values.size() == 0) {
          err.println(getErrorMessage("NoObjectFound", oi.getOd().getOption()));
          setExitCode(getCustomExitCode("NoObjectFound", oi.getOd().getOption()));
          return;
      }
      //Otherwise print sorted list
      Collections.sort(values);
      for (String val : values) {
        out.println(val);
      }
      oi.optionDone();
   }   
   
   /**
    *   Implements qconf -de option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-de", min = 1, extra = 268435455)
   public void deleteExecHost(final OptionInfo oi) throws JGDIException {
      List<JGDIAnswer> answers = new LinkedList<JGDIAnswer>();
      int size = oi.getArgs().size();
      final String[] vals = oi.getArgs().toArray(new String[size]);
      oi.optionDone();
      jgdi.deleteExecHostsWithAnswer(vals, answers);
      printAnswers(answers);
   }
   
   /**
    *   Implements qconf -msconf option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-msconf", min = 0, extra = 0)
   public void modifySchedConf(final OptionInfo oi) throws JGDIException {
      final String arg = oi.getFirstArg();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      
      SchedConf obj = jgdi.getSchedConfWithAnswer(answer);
      
      if (obj != null) {
         //clear the answers from the get request
         answer.clear();
         String userTypedText = runEditor(GEObjectEditor.getConfigurablePropertiesAsText(obj));
         if (userTypedText != null) {
            GEObjectEditor.updateObjectWithText(jgdi, obj, userTypedText);
            jgdi.updateSchedConfWithAnswer(obj, answer);
         }
         printAnswers(answer);
      } else {
         err.println(getErrorMessage("InvalidObjectArgument", oi.getOd().getOption(), arg));
         setExitCode(getCustomExitCode("InvalidObjectArgument", oi.getOd().getOption()));
      }
      oi.optionDone();
   }  
   
   /**
    *   Implements qconf -Msconf option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-Msconf", min = 1, extra = 0)
   public void modifyFromFileSchedConf(final OptionInfo oi) throws JGDIException {
      //Just look at the filename
      final String fileName = oi.getArgs().get(0);
      oi.optionDone();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      String inputText = readFile(oi);
      SchedConf obj;
      
      obj = jgdi.getSchedConfWithAnswer(answer);
      
      printAnswers(answer);
      answer.clear();
      if (obj != null) {
          GEObjectEditor.updateObjectWithText(jgdi, obj, inputText);
          jgdi.updateSchedConfWithAnswer(obj, answer);
          printAnswers(answer);
      } else {
          //TODO LP: Check this is ever displayed
          
          err.println(getErrorMessage("InvalidObjectArgument", oi.getOd().getOption()));
          
          setExitCode(getCustomExitCode("InvalidObjectArgument", oi.getOd().getOption()));
      }
   }  
   
   /**
    *   Implements qconf -ssconf option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-ssconf", min = 0, extra = 0)
   public void showSchedConf(final OptionInfo oi) throws JGDIException {
      final String arg = oi.getFirstArg();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      
      SchedConf obj = jgdi.getSchedConfWithAnswer(answer);
      
      printAnswers(answer);
      //Display error message in no such object exists
      if (obj == null) {
          err.println(getErrorMessage("InvalidObjectArgument", oi.getOd().getOption(), arg));
          setExitCode(getCustomExitCode("InvalidObjectArgument", oi.getOd().getOption()));
          return;
      }
      //Show the object
      String text = GEObjectEditor.getAllPropertiesAsText(obj);
      out.print(text);
   } 
   
   /**
    *   Implements qconf -Au option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-Au", min = 1, extra = 0)
   public void addFromFileUserSet(final OptionInfo oi) throws JGDIException {
      //Just look at the filename
      final String fileName = oi.getArgs().get(0);
      oi.optionDone();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      UserSet obj = new UserSetImpl(true);
      String inputText = readFile(oi);
      
      final String keyAttrValue = getKeyAttributeValueFromString(err, "UserSet", fileName, inputText);
      
      if (keyAttrValue == null) {
         return;
      }
      obj.setName(keyAttrValue);
      GEObjectEditor.updateObjectWithText(jgdi, obj, inputText);
      jgdi.addUserSetWithAnswer(obj, answer);
      printAnswers(answer);
   }  
   
   /**
    *   Implements qconf -mu option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-mu", min = 1, extra = 0)
   public void modifyUserSet(final OptionInfo oi) throws JGDIException {
      final String arg = oi.getFirstArg();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      
      UserSet obj = jgdi.getUserSetWithAnswer(arg, answer);
      
      if (obj != null) {
         //clear the answers from the get request
         answer.clear();
         String userTypedText = runEditor(GEObjectEditor.getConfigurablePropertiesAsText(obj));
         if (userTypedText != null) {
            GEObjectEditor.updateObjectWithText(jgdi, obj, userTypedText);
            jgdi.updateUserSetWithAnswer(obj, answer);
         }
         printAnswers(answer);
      } else {
         err.println(getErrorMessage("InvalidObjectArgument", oi.getOd().getOption(), arg));
         setExitCode(getCustomExitCode("InvalidObjectArgument", oi.getOd().getOption()));
      }
      oi.optionDone();
   }  
   
   /**
    *   Implements qconf -Mu option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-Mu", min = 1, extra = 0)
   public void modifyFromFileUserSet(final OptionInfo oi) throws JGDIException {
      //Just look at the filename
      final String fileName = oi.getArgs().get(0);
      oi.optionDone();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      String inputText = readFile(oi);
      UserSet obj;
      
      final String keyAttrValue = getKeyAttributeValueFromString(err, "UserSet", fileName, inputText);
      if (keyAttrValue == null) {
         return;
      }
      obj = jgdi.getUserSetWithAnswer(keyAttrValue, answer);
      
      printAnswers(answer);
      answer.clear();
      if (obj != null) {
          GEObjectEditor.updateObjectWithText(jgdi, obj, inputText);
          jgdi.updateUserSetWithAnswer(obj, answer);
          printAnswers(answer);
      } else {
          //TODO LP: Check this is ever displayed
          
          err.println(getErrorMessage("InvalidObjectArgument", oi.getOd().getOption(), keyAttrValue));
          
          setExitCode(getCustomExitCode("InvalidObjectArgument", oi.getOd().getOption()));
      }
   }  
   
   /**
    *   Implements qconf -su option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-su", min = 1, extra = 268435455)
   public void showUserSet(final OptionInfo oi) throws JGDIException {
      final String arg = oi.getFirstArg();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      
      UserSet obj = jgdi.getUserSetWithAnswer(arg, answer);
      
      printAnswers(answer);
      //Display error message in no such object exists
      if (obj == null) {
          err.println(getErrorMessage("InvalidObjectArgument", oi.getOd().getOption(), arg));
          setExitCode(getCustomExitCode("InvalidObjectArgument", oi.getOd().getOption()));
          return;
      }
      //Show the object
      String text = GEObjectEditor.getAllPropertiesAsText(obj);
      out.print(text);
   } 
   
   /**
    *   Implements qconf -sul option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-sul", min = 0, extra = 0)
   public void showListUserSet(final OptionInfo oi) throws JGDIException {
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      List< UserSet > list = (List< UserSet >)jgdi.getUserSetListWithAnswer(answer);
      printAnswers(answer);
      List<String> values = new LinkedList<String>();
      for (UserSet obj : list) {
         values.add(obj.getName());
      }
      
      values.remove("global");
      
      //Show correct error message if list is empty
      if (values.size() == 0) {
          err.println(getErrorMessage("NoObjectFound", oi.getOd().getOption()));
          setExitCode(getCustomExitCode("NoObjectFound", oi.getOd().getOption()));
          return;
      }
      //Otherwise print sorted list
      Collections.sort(values);
      for (String val : values) {
        out.println(val);
      }
      oi.optionDone();
   }   
   
   /**
    *   Implements qconf -so option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-so", min = 0, extra = 0)
   public void showListOperator(final OptionInfo oi) throws JGDIException {
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      List< Operator > list = (List< Operator >)jgdi.getOperatorListWithAnswer(answer);
      printAnswers(answer);
      List<String> values = new LinkedList<String>();
      for (Operator obj : list) {
         values.add(obj.getName());
      }
      
      //Show correct error message if list is empty
      if (values.size() == 0) {
          err.println(getErrorMessage("NoObjectFound", oi.getOd().getOption()));
          setExitCode(getCustomExitCode("NoObjectFound", oi.getOd().getOption()));
          return;
      }
      //Otherwise print sorted list
      Collections.sort(values);
      for (String val : values) {
        out.println(val);
      }
      oi.optionDone();
   }   
   
   /**
    *   Implements qconf -sm option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-sm", min = 0, extra = 0)
   public void showListManager(final OptionInfo oi) throws JGDIException {
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      List< Manager > list = (List< Manager >)jgdi.getManagerListWithAnswer(answer);
      printAnswers(answer);
      List<String> values = new LinkedList<String>();
      for (Manager obj : list) {
         values.add(obj.getName());
      }
      
      //Show correct error message if list is empty
      if (values.size() == 0) {
          err.println(getErrorMessage("NoObjectFound", oi.getOd().getOption()));
          setExitCode(getCustomExitCode("NoObjectFound", oi.getOd().getOption()));
          return;
      }
      //Otherwise print sorted list
      Collections.sort(values);
      for (String val : values) {
        out.println(val);
      }
      oi.optionDone();
   }   
   
   /**
    *   Implements qconf -ss option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-ss", min = 0, extra = 0)
   public void showListSubmitHost(final OptionInfo oi) throws JGDIException {
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      List< SubmitHost > list = (List< SubmitHost >)jgdi.getSubmitHostListWithAnswer(answer);
      printAnswers(answer);
      List<String> values = new LinkedList<String>();
      for (SubmitHost obj : list) {
         values.add(obj.getName());
      }
      
      //Show correct error message if list is empty
      if (values.size() == 0) {
          err.println(getErrorMessage("NoObjectFound", oi.getOd().getOption()));
          setExitCode(getCustomExitCode("NoObjectFound", oi.getOd().getOption()));
          return;
      }
      //Otherwise print sorted list
      Collections.sort(values);
      for (String val : values) {
        out.println(val);
      }
      oi.optionDone();
   }   
   
   /**
    *   Implements qconf -sh option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-sh", min = 0, extra = 0)
   public void showListAdminHost(final OptionInfo oi) throws JGDIException {
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      List< AdminHost > list = (List< AdminHost >)jgdi.getAdminHostListWithAnswer(answer);
      printAnswers(answer);
      List<String> values = new LinkedList<String>();
      for (AdminHost obj : list) {
         values.add(obj.getName());
      }
      
      //Show correct error message if list is empty
      if (values.size() == 0) {
          err.println(getErrorMessage("NoObjectFound", oi.getOd().getOption()));
          setExitCode(getCustomExitCode("NoObjectFound", oi.getOd().getOption()));
          return;
      }
      //Otherwise print sorted list
      Collections.sort(values);
      for (String val : values) {
        out.println(val);
      }
      oi.optionDone();
   }   
   
   /**
    *   Implements qconf -arqs option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-arqs", min = 0, extra = 268435455)
   public void addResourceQuotaSet(final OptionInfo oi) throws JGDIException {
      oi.optionDone();
      String arg = oi.getFirstArg();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      // create an object with defaults set
      ResourceQuotaSet obj = new ResourceQuotaSetImpl(true);
      if (arg != null) {
         obj.setName(arg);
      }
      String userTypedText = runEditor(GEObjectEditor.getConfigurablePropertiesAsText(obj));

      if (userTypedText != null) {
         GEObjectEditor.updateObjectWithText(jgdi, obj, userTypedText);
         jgdi.addResourceQuotaSetWithAnswer(obj, answer);
         printAnswers(answer);
      }
   }   
   
   /**
    *   Implements qconf -Arqs option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-Arqs", min = 1, extra = 0)
   public void addFromFileResourceQuotaSet(final OptionInfo oi) throws JGDIException {
      //Just look at the filename
      final String fileName = oi.getArgs().get(0);
      oi.optionDone();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      ResourceQuotaSet obj = new ResourceQuotaSetImpl(true);
      String inputText = readFile(oi);
      
      final String keyAttrValue = getKeyAttributeValueFromString(err, "ResourceQuotaSet", fileName, inputText);
      
      if (keyAttrValue == null) {
         return;
      }
      obj.setName(keyAttrValue);
      GEObjectEditor.updateObjectWithText(jgdi, obj, inputText);
      jgdi.addResourceQuotaSetWithAnswer(obj, answer);
      printAnswers(answer);
   }  
   
   /**
    *   Implements qconf -Mrqs option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-Mrqs", min = 1, extra = 0)
   public void modifyFromFileResourceQuotaSet(final OptionInfo oi) throws JGDIException {
      //Just look at the filename
      final String fileName = oi.getArgs().get(0);
      oi.optionDone();
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      String inputText = readFile(oi);
      ResourceQuotaSet obj;
      
      final String keyAttrValue = getKeyAttributeValueFromString(err, "ResourceQuotaSet", fileName, inputText);
      if (keyAttrValue == null) {
         return;
      }
      obj = jgdi.getResourceQuotaSetWithAnswer(keyAttrValue, answer);
      
      printAnswers(answer);
      answer.clear();
      if (obj != null) {
          GEObjectEditor.updateObjectWithText(jgdi, obj, inputText);
          jgdi.updateResourceQuotaSetWithAnswer(obj, answer);
          printAnswers(answer);
      } else {
          //TODO LP: Check this is ever displayed
          
          err.println(getErrorMessage("InvalidObjectArgument", oi.getOd().getOption(), keyAttrValue));
          
          setExitCode(getCustomExitCode("InvalidObjectArgument", oi.getOd().getOption()));
      }
   }  
   
   /**
    *   Implements qconf -srqsl option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-srqsl", min = 0, extra = 0)
   public void showListResourceQuotaSet(final OptionInfo oi) throws JGDIException {
      List<JGDIAnswer> answer = new LinkedList<JGDIAnswer>();
      List< ResourceQuotaSet > list = (List< ResourceQuotaSet >)jgdi.getResourceQuotaSetListWithAnswer(answer);
      printAnswers(answer);
      List<String> values = new LinkedList<String>();
      for (ResourceQuotaSet obj : list) {
         values.add(obj.getName());
      }
      
      //Show correct error message if list is empty
      if (values.size() == 0) {
          err.println(getErrorMessage("NoObjectFound", oi.getOd().getOption()));
          setExitCode(getCustomExitCode("NoObjectFound", oi.getOd().getOption()));
          return;
      }
      //Otherwise print sorted list
      Collections.sort(values);
      for (String val : values) {
        out.println(val);
      }
      oi.optionDone();
   }   
   
   /**
    *   Implements qconf -drqs option
    *   @param  oi <b>OptionInfo</b> option enviroment object
    *   @throws JGDIException on any error on the GDI layer
    */
   @OptionAnnotation(value = "-drqs", min = 1, extra = 268435455)
   public void deleteResourceQuotaSet(final OptionInfo oi) throws JGDIException {
      List<JGDIAnswer> answers = new LinkedList<JGDIAnswer>();
      int size = oi.getArgs().size();
      final String[] vals = oi.getArgs().toArray(new String[size]);
      oi.optionDone();
      jgdi.deleteResourceQuotaSetsWithAnswer(vals, answers);
      printAnswers(answers);
   }
   
  
   String getKeyAttributeValueFromString(final PrintWriter err, final String type, final String fileName, final String inputText) {
      String keyAttrValue = null;
      //Get the key attribute value from the file
      String keyAttr = EditorUtil.unifyAttrWithClientNames(type, "name");
      StringReader sr = new StringReader(inputText);
      LineNumberReader lnr = new LineNumberReader(sr);
      String keyAttrLine = null;
      try {
         while (lnr.ready()) {
            keyAttrLine = lnr.readLine().trim();
            if (keyAttrLine.startsWith(keyAttr)) {
               keyAttrValue = keyAttrLine.substring(keyAttr.length()).trim();
               break;
            }
         }
         //Exit if the key attribute is missing
         if (keyAttrValue == null) {
            err.println("error: required attribute \"" + keyAttr + "\" is missing");
            err.println(type + " file \"" + fileName + "\" is not correct");
            err.flush();
            //TODO LP: Set correct exit code
         }
      } catch (IOException ex) {
         err.println(ex.getMessage());
         err.flush();
         setExitCode(1);
      }
      return keyAttrValue;
   }

    String readFile(final OptionInfo oi) throws JGDIException {
        String msg = "Error messages file not found!";
        int exitCode = 0;
        String option = oi.getOd().getOption();
        if (oi.getArgs().size() == 0) {
            msg = getErrorMessage("NoArgument", option);
            //err.println(msg);
            setExitCode(getCustomExitCode("NoArgument", option));
            throw new JGDIException(msg, exitCode);
        }
        File f = new File(oi.getFirstArg());
        long fileSize = f.length();
        FileReader fr;
        StringBuilder sb = new StringBuilder();
        try {
            fr = new FileReader(f);
            char[] buff = new char[2048];
            int r;
            while (fr.ready()) {
                r = fr.read(buff);
                if (r > 0) {
                    sb.append(buff, 0, r);
                }
            }
        } catch (IOException ex) {
            msg = getErrorMessage("InvalidFile", option);
            exitCode = getCustomExitCode("InvalidFile", option);
            throw new JGDIException(msg, exitCode);
        }
        //Check we have whole content
        if (sb.length() != fileSize) {
            throw new JGDIException("Unable to read whole file content. Filesize is " + fileSize + " got only " + sb.length());
        }
        return sb.toString();
    }

   private String runJavaEditor(final String text) {
      TextEditor ted = new TextEditor(text);
      while (!ted.isDone()) {
         try {
            Thread.currentThread().sleep(1000);
         } catch (InterruptedException ex) {
            ex.printStackTrace();
         }
      }
      return ted.getText();
   }

   String runEditor(final String text) {
      String editor;
      String version = System.getProperty("java.specification.version");
      //TODO LP <1.5 doesn't list properties like EDITOR...
      if (Double.parseDouble(version) < 1.5) {
         editor = System.getProperty("EDITOR");
      } else {
         editor = System.getenv("EDITOR");
      }
      if (editor == null) {
         return runJavaEditor(text);
      }
      StringBuilder sb = new StringBuilder();
      try {
         File f = File.createTempFile("edit", null, new File("/tmp"));
         FileWriter fw = new FileWriter(f);
         fw.write(text);
         fw.flush();
         fw.close();

         int exitCode = EditorUtil.sgeEdit(f);
         if (exitCode != 0) {
            return null;
         }
         char[] buff = new char[1024];
         FileReader fr = new FileReader(f);
         int readChars = 0;
         while (fr.ready() && readChars != -1) {
            readChars = fr.read(buff);
            if (readChars > 0) {
               sb.append(buff, 0, readChars);
            }
         }
      } catch (IOException ioe) {
         ioe.printStackTrace();
/*
      } catch (InterruptedException ie) {
         ie.printStackTrace();
*/
      }
      return sb.toString();
   }

}

