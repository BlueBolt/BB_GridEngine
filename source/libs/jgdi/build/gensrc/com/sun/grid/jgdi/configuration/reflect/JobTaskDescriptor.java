/*___INFO__MARK_BEGIN__*/
/*************************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  the Sun Industry Standards Source License Version 1.2
 *
 *  Sun Microsystems Inc., March, 2001
 *
 *
 *  Sun Industry Standards Source License Version 1.2
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.2 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *   Copyright: 2001 by Sun Microsystems, Inc.
 *
 *   All Rights Reserved.
 *
 ************************************************************************/
/*___INFO__MARK_END__*/
/**
 *  Generated from javadescriptor.jsp
 *  !!! DO NOT EDIT THIS FILE !!!
 */

package com.sun.grid.jgdi.configuration.reflect;

import com.sun.grid.jgdi.configuration.*;
import com.sun.grid.jgdi.CullConstants;

/**
 *  Java descriptor of the cull object JAT_Type
 *  defined in sge_all_listsL.template
 */
public class JobTaskDescriptor extends  GEObjectDescriptor {

   public JobTaskDescriptor() {
      this(JobTaskImpl.class, "JAT_Type" );
      setImplClass(JobTaskImpl.class);
   }
      
   protected JobTaskDescriptor(Class type, String name) {
      super(type, name);
     
      PropertyDescriptor propDescr = null;

      propDescr = addSimple("taskNumber", Integer.TYPE, "SGE_ULONG", CullConstants.JAT_task_number, true, false, false); 

      propDescr = addSimple("status", Integer.TYPE, "SGE_ULONG", CullConstants.JAT_status, false, false, false); 

      propDescr = addSimple("startTime", Integer.TYPE, "SGE_ULONG", CullConstants.JAT_start_time, false, false, false); 

      propDescr = addSimple("endTime", Integer.TYPE, "SGE_ULONG", CullConstants.JAT_end_time, false, false, false); 

      propDescr = addSimple("hold", Integer.TYPE, "SGE_ULONG", CullConstants.JAT_hold, false, false, false); 

      propDescr = addSimple("grantedPe", String.class, "SGE_STRING", CullConstants.JAT_granted_pe, false, false, false); 

      propDescr = addSimple("jobRestarted", Integer.TYPE, "SGE_ULONG", CullConstants.JAT_job_restarted, false, false, false); 

      propDescr = addList("grantedDestinIdentifier", JG.class, "JG_Type", CullConstants.JAT_granted_destin_identifier_list, true, false, false);

      propDescr = addSimple("masterQueue", String.class, "SGE_STRING", CullConstants.JAT_master_queue, false, false, false); 

      propDescr = addSimple("state", Integer.TYPE, "SGE_ULONG", CullConstants.JAT_state, false, false, false); 

      propDescr = addSimple("pvmCkptPid", Integer.TYPE, "SGE_ULONG", CullConstants.JAT_pvm_ckpt_pid, false, false, false); 

      propDescr = addSimple("pendingSignal", Integer.TYPE, "SGE_ULONG", CullConstants.JAT_pending_signal, false, false, false); 

      propDescr = addSimple("pendingSignalDeliveryTime", Integer.TYPE, "SGE_ULONG", CullConstants.JAT_pending_signal_delivery_time, false, false, false); 

      propDescr = addSimple("pid", Integer.TYPE, "SGE_ULONG", CullConstants.JAT_pid, false, false, false); 

      propDescr = addSimple("osjobid", String.class, "SGE_STRING", CullConstants.JAT_osjobid, false, false, false); 

      // keyAttr = UA_name (type = SGE_STRING)
      // valueAttr = UA_value (type = SGE_DOUBLE)
      propDescr = addMap("usage", Double.TYPE, "UA_Type", String.class,
             CullConstants.JAT_usage_list, CullConstants.UA_name, CullConstants.UA_value,
             null, false, false);

      // keyAttr = UA_name (type = SGE_STRING)
      // valueAttr = UA_value (type = SGE_DOUBLE)
      propDescr = addMap("scaledUsage", Double.TYPE, "UA_Type", String.class,
             CullConstants.JAT_scaled_usage_list, CullConstants.UA_name, CullConstants.UA_value,
             null, false, false);

      // keyAttr = UA_name (type = SGE_STRING)
      // valueAttr = UA_value (type = SGE_DOUBLE)
      propDescr = addMap("reportedUsage", Double.TYPE, "UA_Type", String.class,
             CullConstants.JAT_reported_usage_list, CullConstants.UA_name, CullConstants.UA_value,
             null, false, false);

      propDescr = addSimple("fshare", Integer.TYPE, "SGE_ULONG", CullConstants.JAT_fshare, false, false, false); 

      propDescr = addSimple("tix", Double.TYPE, "SGE_DOUBLE", CullConstants.JAT_tix, false, false, false); 

      propDescr = addSimple("oticket", Double.TYPE, "SGE_DOUBLE", CullConstants.JAT_oticket, false, false, false); 

      propDescr = addSimple("fticket", Double.TYPE, "SGE_DOUBLE", CullConstants.JAT_fticket, false, false, false); 

      propDescr = addSimple("sticket", Double.TYPE, "SGE_DOUBLE", CullConstants.JAT_sticket, false, false, false); 

      propDescr = addSimple("share", Double.TYPE, "SGE_DOUBLE", CullConstants.JAT_share, false, false, false); 

      propDescr = addSimple("suitable", Integer.TYPE, "SGE_ULONG", CullConstants.JAT_suitable, false, false, false); 

      propDescr = addList("task", PETask.class, "PET_Type", CullConstants.JAT_task_list, true, false, false);

      propDescr = addList("finishedTask", FPET.class, "FPET_Type", CullConstants.JAT_finished_task_list, true, false, false);

      // keyAttr = UA_name (type = SGE_STRING)
      // valueAttr = UA_value (type = SGE_DOUBLE)
      propDescr = addMap("previousUsage", Double.TYPE, "UA_Type", String.class,
             CullConstants.JAT_previous_usage_list, CullConstants.UA_name, CullConstants.UA_value,
             null, false, false);

      propDescr = addSimple("peObject", ParallelEnvironment.class, "PE_Type", CullConstants.JAT_pe_object, false, false, false); 

      propDescr = addSimple("nextPeTaskId", Integer.TYPE, "SGE_ULONG", CullConstants.JAT_next_pe_task_id, false, false, false); 

      propDescr = addSimple("stopInitiateTime", Integer.TYPE, "SGE_ULONG", CullConstants.JAT_stop_initiate_time, false, false, false); 

      propDescr = addSimple("prio", Double.TYPE, "SGE_DOUBLE", CullConstants.JAT_prio, false, false, false); 

      propDescr = addSimple("ntix", Double.TYPE, "SGE_DOUBLE", CullConstants.JAT_ntix, false, false, false); 

      propDescr = addSimple("wallclockLimit", Integer.TYPE, "SGE_ULONG", CullConstants.JAT_wallclock_limit, false, false, false); 

      propDescr = addList("message", QueueInstanceMessage.class, "QIM_Type", CullConstants.JAT_message_list, true, false, false);

   }
   
   public void validate(Object obj) throws InvalidObjectException {
   
      if (!(obj instanceof JobTask)) {
         throw new InvalidObjectException(obj, "obj is not an instanceof JobTask");
      }

      JobTask cullObj = (JobTask)obj;
      InvalidObjectException exc = null;
   
       if (!cullObj.isSetTaskNumber()) {
          if (exc == null) {
             exc = new InvalidObjectException(obj, "Primary key fields are not set");
          }
          exc.addPropertyError("taskNumber", "primary key field is required");
       }

       if (exc != null) {
           throw exc;
       }

   }
}
