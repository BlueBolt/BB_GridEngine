/*___INFO__MARK_BEGIN__*/
/*************************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  the Sun Industry Standards Source License Version 1.2
 *
 *  Sun Microsystems Inc., March, 2001
 *
 *
 *  Sun Industry Standards Source License Version 1.2
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.2 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *   Copyright: 2001 by Sun Microsystems, Inc.
 *
 *   All Rights Reserved.
 *
 ************************************************************************/
/*___INFO__MARK_END__*/
/**
 *  Generated from javamodel_impl.jsp
 *  !!! DO NOT EDIT THIS FILE !!!
 */

package com.sun.grid.jgdi.configuration;

import javax.management.*;
import com.sun.grid.jgdi.configuration.GEObject;
import java.util.List;
import java.util.LinkedList;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.logging.Logger;
import java.util.logging.Level;

/**
 *  Java representation of the cull object JB_Type
 *  defined in sge_all_listsL.template
 *
 *  <p><strong>Warning:</strong>  The  JobImpl class will 
 *  not be compatible with future Sun&trade; Grid Engine releases.</p>
 */
public class JobImpl extends    GEObjectImpl implements Job {


   /**
    *  Create a new instance of JobImpl. The new instance
    *  will not be initialized with the default values.
    */
   public JobImpl() {
      this(false);
   }
   
   /**
    *   Create a new instanceof
    *   @param  initWithDefaultValues if <code>true</code> the new instance will
    *                                 be initialized with the default values as defined
    *                                 in the cull definition.
    */
   public JobImpl(boolean initWithDefaultValues) { 

      if (initWithDefaultValues) {     
    }

  } // end of default constructor
  
  // --- newInstance method with primary key field
  

   /**
    *  Create a new instance of JobImpl
    */
   public JobImpl(int jobNumber ) {

   
         setJobNumber(jobNumber);

    }



    // Attribute jobNumber ------------------------------------------------

    private boolean isJobNumberSet;
   
    /**
     *  Determine if the jobNumber attribute is set
     *  @return <code>true</code> if the jobNumber attribute is set
     */
    public boolean isSetJobNumber() {

        return isJobNumberSet;

    }
   
    private int m_jobNumber;

    /**
     *   Set the jobNumber attribute.
     *
     *   @param aJobNumber  the new value for the  jobNumber attribute
     */
    public void setJobNumber(int aJobNumber) {   
        m_jobNumber = aJobNumber;

        isJobNumberSet = true;

    }

    /**
     *  Get the value of the jobNumber attribute.
     *  @return the value of the jobNumber attribute
     */
    public int getJobNumber() {
        return m_jobNumber;
    }


    // Attribute jobName ------------------------------------------------
   
    /**
     *  Determine if the jobName attribute is set
     *  @return <code>true</code> if the jobName attribute is set
     */
    public boolean isSetJobName() {
   
        return  (m_jobName != null);

    }
   
    private java.lang.String m_jobName;

    /**
     *   Set the jobName attribute.
     *
     *   @param aJobName  the new value for the  jobName attribute
     */
    public void setJobName(java.lang.String aJobName) {   
        m_jobName = aJobName;

    }

    /**
     *  Get the value of the jobName attribute.
     *  @return the value of the jobName attribute
     */
    public java.lang.String getJobName() {
        return m_jobName;
    }


    // Attribute version ------------------------------------------------

    private boolean isVersionSet;
   
    /**
     *  Determine if the version attribute is set
     *  @return <code>true</code> if the version attribute is set
     */
    public boolean isSetVersion() {

        return isVersionSet;

    }
   
    private int m_version;

    /**
     *   Set the version attribute.
     *
     *   @param aVersion  the new value for the  version attribute
     */
    public void setVersion(int aVersion) {   
        m_version = aVersion;

        isVersionSet = true;

    }

    /**
     *  Get the value of the version attribute.
     *  @return the value of the version attribute
     */
    public int getVersion() {
        return m_version;
    }


    // Attribute jidRequestList ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.JobReference > m_jidRequestList;
   
    private void initJidRequest() {
        if (m_jidRequestList == null) {
            m_jidRequestList = new LinkedList< com.sun.grid.jgdi.configuration.JobReference >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.JobReference attribute.

     *   @param ajidRequest  the new com.sun.grid.jgdi.configuration.JobReference attribute
     */
    public void addJidRequest(com.sun.grid.jgdi.configuration.JobReference ajidRequest) {   
        initJidRequest();
        
        m_jidRequestList.add(ajidRequest);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.JobReference attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.JobReference attribute
     *   @param ajidRequest  the new com.sun.grid.jgdi.configuration.JobReference attribute
     */
    public void setJidRequest(int index, com.sun.grid.jgdi.configuration.JobReference ajidRequest) {
        initJidRequest();
        m_jidRequestList.set(index, ajidRequest);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.JobReference attributes.
     */
    public void removeAllJidRequest() {
        if (m_jidRequestList != null) {
            m_jidRequestList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.JobReference attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.JobReference attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.JobReference attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.JobReference removeJidRequest(int index) {
        initJidRequest();
        return (com.sun.grid.jgdi.configuration.JobReference)m_jidRequestList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.JobReference attribute.
     *  @param ajidRequest  the com.sun.grid.jgdi.configuration.JobReference attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.JobReference attribute has been removed
     */
    public boolean removeJidRequest(com.sun.grid.jgdi.configuration.JobReference ajidRequest) {
        initJidRequest();
        return m_jidRequestList.remove(ajidRequest);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.JobReference attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.JobReference attributes
     */
    public List< com.sun.grid.jgdi.configuration.JobReference > getJidRequestList() {
        initJidRequest();
        return Collections.unmodifiableList(m_jidRequestList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.JobReference attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.JobReference attributes.
     */
    public int getJidRequestCount() {
        if (m_jidRequestList != null) {
            return m_jidRequestList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.JobReference attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.JobReference attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.JobReference attribute
     */
    public com.sun.grid.jgdi.configuration.JobReference getJidRequest(int index) {
        initJidRequest();
        return (com.sun.grid.jgdi.configuration.JobReference)m_jidRequestList.get(index);
    }
   
    /**
     *  Determine if the jidRequest attribute is set
     *  @return <code>true</code> if the jidRequest attribute is set
     */
    public boolean isSetJidRequest () {
        return (m_jidRequestList != null) && (!m_jidRequestList.isEmpty());
    }
   

    // Attribute jidPredecessorList ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.JobReference > m_jidPredecessorList;
   
    private void initJidPredecessor() {
        if (m_jidPredecessorList == null) {
            m_jidPredecessorList = new LinkedList< com.sun.grid.jgdi.configuration.JobReference >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.JobReference attribute.

     *   @param ajidPredecessor  the new com.sun.grid.jgdi.configuration.JobReference attribute
     */
    public void addJidPredecessor(com.sun.grid.jgdi.configuration.JobReference ajidPredecessor) {   
        initJidPredecessor();
        
        m_jidPredecessorList.add(ajidPredecessor);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.JobReference attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.JobReference attribute
     *   @param ajidPredecessor  the new com.sun.grid.jgdi.configuration.JobReference attribute
     */
    public void setJidPredecessor(int index, com.sun.grid.jgdi.configuration.JobReference ajidPredecessor) {
        initJidPredecessor();
        m_jidPredecessorList.set(index, ajidPredecessor);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.JobReference attributes.
     */
    public void removeAllJidPredecessor() {
        if (m_jidPredecessorList != null) {
            m_jidPredecessorList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.JobReference attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.JobReference attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.JobReference attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.JobReference removeJidPredecessor(int index) {
        initJidPredecessor();
        return (com.sun.grid.jgdi.configuration.JobReference)m_jidPredecessorList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.JobReference attribute.
     *  @param ajidPredecessor  the com.sun.grid.jgdi.configuration.JobReference attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.JobReference attribute has been removed
     */
    public boolean removeJidPredecessor(com.sun.grid.jgdi.configuration.JobReference ajidPredecessor) {
        initJidPredecessor();
        return m_jidPredecessorList.remove(ajidPredecessor);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.JobReference attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.JobReference attributes
     */
    public List< com.sun.grid.jgdi.configuration.JobReference > getJidPredecessorList() {
        initJidPredecessor();
        return Collections.unmodifiableList(m_jidPredecessorList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.JobReference attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.JobReference attributes.
     */
    public int getJidPredecessorCount() {
        if (m_jidPredecessorList != null) {
            return m_jidPredecessorList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.JobReference attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.JobReference attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.JobReference attribute
     */
    public com.sun.grid.jgdi.configuration.JobReference getJidPredecessor(int index) {
        initJidPredecessor();
        return (com.sun.grid.jgdi.configuration.JobReference)m_jidPredecessorList.get(index);
    }
   
    /**
     *  Determine if the jidPredecessor attribute is set
     *  @return <code>true</code> if the jidPredecessor attribute is set
     */
    public boolean isSetJidPredecessor () {
        return (m_jidPredecessorList != null) && (!m_jidPredecessorList.isEmpty());
    }
   

    // Attribute jidSuccessorList ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.JobReference > m_jidSuccessorList;
   
    private void initJidSuccessor() {
        if (m_jidSuccessorList == null) {
            m_jidSuccessorList = new LinkedList< com.sun.grid.jgdi.configuration.JobReference >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.JobReference attribute.

     *   @param ajidSuccessor  the new com.sun.grid.jgdi.configuration.JobReference attribute
     */
    public void addJidSuccessor(com.sun.grid.jgdi.configuration.JobReference ajidSuccessor) {   
        initJidSuccessor();
        
        m_jidSuccessorList.add(ajidSuccessor);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.JobReference attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.JobReference attribute
     *   @param ajidSuccessor  the new com.sun.grid.jgdi.configuration.JobReference attribute
     */
    public void setJidSuccessor(int index, com.sun.grid.jgdi.configuration.JobReference ajidSuccessor) {
        initJidSuccessor();
        m_jidSuccessorList.set(index, ajidSuccessor);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.JobReference attributes.
     */
    public void removeAllJidSuccessor() {
        if (m_jidSuccessorList != null) {
            m_jidSuccessorList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.JobReference attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.JobReference attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.JobReference attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.JobReference removeJidSuccessor(int index) {
        initJidSuccessor();
        return (com.sun.grid.jgdi.configuration.JobReference)m_jidSuccessorList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.JobReference attribute.
     *  @param ajidSuccessor  the com.sun.grid.jgdi.configuration.JobReference attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.JobReference attribute has been removed
     */
    public boolean removeJidSuccessor(com.sun.grid.jgdi.configuration.JobReference ajidSuccessor) {
        initJidSuccessor();
        return m_jidSuccessorList.remove(ajidSuccessor);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.JobReference attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.JobReference attributes
     */
    public List< com.sun.grid.jgdi.configuration.JobReference > getJidSuccessorList() {
        initJidSuccessor();
        return Collections.unmodifiableList(m_jidSuccessorList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.JobReference attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.JobReference attributes.
     */
    public int getJidSuccessorCount() {
        if (m_jidSuccessorList != null) {
            return m_jidSuccessorList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.JobReference attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.JobReference attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.JobReference attribute
     */
    public com.sun.grid.jgdi.configuration.JobReference getJidSuccessor(int index) {
        initJidSuccessor();
        return (com.sun.grid.jgdi.configuration.JobReference)m_jidSuccessorList.get(index);
    }
   
    /**
     *  Determine if the jidSuccessor attribute is set
     *  @return <code>true</code> if the jidSuccessor attribute is set
     */
    public boolean isSetJidSuccessor () {
        return (m_jidSuccessorList != null) && (!m_jidSuccessorList.isEmpty());
    }
   

    // Attribute jaAdRequestList ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.JobReference > m_jaAdRequestList;
   
    private void initJaAdRequest() {
        if (m_jaAdRequestList == null) {
            m_jaAdRequestList = new LinkedList< com.sun.grid.jgdi.configuration.JobReference >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.JobReference attribute.

     *   @param ajaAdRequest  the new com.sun.grid.jgdi.configuration.JobReference attribute
     */
    public void addJaAdRequest(com.sun.grid.jgdi.configuration.JobReference ajaAdRequest) {   
        initJaAdRequest();
        
        m_jaAdRequestList.add(ajaAdRequest);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.JobReference attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.JobReference attribute
     *   @param ajaAdRequest  the new com.sun.grid.jgdi.configuration.JobReference attribute
     */
    public void setJaAdRequest(int index, com.sun.grid.jgdi.configuration.JobReference ajaAdRequest) {
        initJaAdRequest();
        m_jaAdRequestList.set(index, ajaAdRequest);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.JobReference attributes.
     */
    public void removeAllJaAdRequest() {
        if (m_jaAdRequestList != null) {
            m_jaAdRequestList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.JobReference attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.JobReference attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.JobReference attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.JobReference removeJaAdRequest(int index) {
        initJaAdRequest();
        return (com.sun.grid.jgdi.configuration.JobReference)m_jaAdRequestList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.JobReference attribute.
     *  @param ajaAdRequest  the com.sun.grid.jgdi.configuration.JobReference attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.JobReference attribute has been removed
     */
    public boolean removeJaAdRequest(com.sun.grid.jgdi.configuration.JobReference ajaAdRequest) {
        initJaAdRequest();
        return m_jaAdRequestList.remove(ajaAdRequest);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.JobReference attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.JobReference attributes
     */
    public List< com.sun.grid.jgdi.configuration.JobReference > getJaAdRequestList() {
        initJaAdRequest();
        return Collections.unmodifiableList(m_jaAdRequestList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.JobReference attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.JobReference attributes.
     */
    public int getJaAdRequestCount() {
        if (m_jaAdRequestList != null) {
            return m_jaAdRequestList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.JobReference attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.JobReference attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.JobReference attribute
     */
    public com.sun.grid.jgdi.configuration.JobReference getJaAdRequest(int index) {
        initJaAdRequest();
        return (com.sun.grid.jgdi.configuration.JobReference)m_jaAdRequestList.get(index);
    }
   
    /**
     *  Determine if the jaAdRequest attribute is set
     *  @return <code>true</code> if the jaAdRequest attribute is set
     */
    public boolean isSetJaAdRequest () {
        return (m_jaAdRequestList != null) && (!m_jaAdRequestList.isEmpty());
    }
   

    // Attribute jaAdPredecessorList ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.JobReference > m_jaAdPredecessorList;
   
    private void initJaAdPredecessor() {
        if (m_jaAdPredecessorList == null) {
            m_jaAdPredecessorList = new LinkedList< com.sun.grid.jgdi.configuration.JobReference >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.JobReference attribute.

     *   @param ajaAdPredecessor  the new com.sun.grid.jgdi.configuration.JobReference attribute
     */
    public void addJaAdPredecessor(com.sun.grid.jgdi.configuration.JobReference ajaAdPredecessor) {   
        initJaAdPredecessor();
        
        m_jaAdPredecessorList.add(ajaAdPredecessor);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.JobReference attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.JobReference attribute
     *   @param ajaAdPredecessor  the new com.sun.grid.jgdi.configuration.JobReference attribute
     */
    public void setJaAdPredecessor(int index, com.sun.grid.jgdi.configuration.JobReference ajaAdPredecessor) {
        initJaAdPredecessor();
        m_jaAdPredecessorList.set(index, ajaAdPredecessor);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.JobReference attributes.
     */
    public void removeAllJaAdPredecessor() {
        if (m_jaAdPredecessorList != null) {
            m_jaAdPredecessorList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.JobReference attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.JobReference attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.JobReference attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.JobReference removeJaAdPredecessor(int index) {
        initJaAdPredecessor();
        return (com.sun.grid.jgdi.configuration.JobReference)m_jaAdPredecessorList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.JobReference attribute.
     *  @param ajaAdPredecessor  the com.sun.grid.jgdi.configuration.JobReference attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.JobReference attribute has been removed
     */
    public boolean removeJaAdPredecessor(com.sun.grid.jgdi.configuration.JobReference ajaAdPredecessor) {
        initJaAdPredecessor();
        return m_jaAdPredecessorList.remove(ajaAdPredecessor);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.JobReference attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.JobReference attributes
     */
    public List< com.sun.grid.jgdi.configuration.JobReference > getJaAdPredecessorList() {
        initJaAdPredecessor();
        return Collections.unmodifiableList(m_jaAdPredecessorList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.JobReference attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.JobReference attributes.
     */
    public int getJaAdPredecessorCount() {
        if (m_jaAdPredecessorList != null) {
            return m_jaAdPredecessorList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.JobReference attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.JobReference attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.JobReference attribute
     */
    public com.sun.grid.jgdi.configuration.JobReference getJaAdPredecessor(int index) {
        initJaAdPredecessor();
        return (com.sun.grid.jgdi.configuration.JobReference)m_jaAdPredecessorList.get(index);
    }
   
    /**
     *  Determine if the jaAdPredecessor attribute is set
     *  @return <code>true</code> if the jaAdPredecessor attribute is set
     */
    public boolean isSetJaAdPredecessor () {
        return (m_jaAdPredecessorList != null) && (!m_jaAdPredecessorList.isEmpty());
    }
   

    // Attribute jaAdSuccessorList ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.JobReference > m_jaAdSuccessorList;
   
    private void initJaAdSuccessor() {
        if (m_jaAdSuccessorList == null) {
            m_jaAdSuccessorList = new LinkedList< com.sun.grid.jgdi.configuration.JobReference >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.JobReference attribute.

     *   @param ajaAdSuccessor  the new com.sun.grid.jgdi.configuration.JobReference attribute
     */
    public void addJaAdSuccessor(com.sun.grid.jgdi.configuration.JobReference ajaAdSuccessor) {   
        initJaAdSuccessor();
        
        m_jaAdSuccessorList.add(ajaAdSuccessor);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.JobReference attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.JobReference attribute
     *   @param ajaAdSuccessor  the new com.sun.grid.jgdi.configuration.JobReference attribute
     */
    public void setJaAdSuccessor(int index, com.sun.grid.jgdi.configuration.JobReference ajaAdSuccessor) {
        initJaAdSuccessor();
        m_jaAdSuccessorList.set(index, ajaAdSuccessor);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.JobReference attributes.
     */
    public void removeAllJaAdSuccessor() {
        if (m_jaAdSuccessorList != null) {
            m_jaAdSuccessorList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.JobReference attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.JobReference attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.JobReference attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.JobReference removeJaAdSuccessor(int index) {
        initJaAdSuccessor();
        return (com.sun.grid.jgdi.configuration.JobReference)m_jaAdSuccessorList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.JobReference attribute.
     *  @param ajaAdSuccessor  the com.sun.grid.jgdi.configuration.JobReference attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.JobReference attribute has been removed
     */
    public boolean removeJaAdSuccessor(com.sun.grid.jgdi.configuration.JobReference ajaAdSuccessor) {
        initJaAdSuccessor();
        return m_jaAdSuccessorList.remove(ajaAdSuccessor);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.JobReference attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.JobReference attributes
     */
    public List< com.sun.grid.jgdi.configuration.JobReference > getJaAdSuccessorList() {
        initJaAdSuccessor();
        return Collections.unmodifiableList(m_jaAdSuccessorList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.JobReference attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.JobReference attributes.
     */
    public int getJaAdSuccessorCount() {
        if (m_jaAdSuccessorList != null) {
            return m_jaAdSuccessorList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.JobReference attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.JobReference attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.JobReference attribute
     */
    public com.sun.grid.jgdi.configuration.JobReference getJaAdSuccessor(int index) {
        initJaAdSuccessor();
        return (com.sun.grid.jgdi.configuration.JobReference)m_jaAdSuccessorList.get(index);
    }
   
    /**
     *  Determine if the jaAdSuccessor attribute is set
     *  @return <code>true</code> if the jaAdSuccessor attribute is set
     */
    public boolean isSetJaAdSuccessor () {
        return (m_jaAdSuccessorList != null) && (!m_jaAdSuccessorList.isEmpty());
    }
   

    // Attribute session ------------------------------------------------
   
    /**
     *  Determine if the session attribute is set
     *  @return <code>true</code> if the session attribute is set
     */
    public boolean isSetSession() {
   
        return  (m_session != null);

    }
   
    private java.lang.String m_session;

    /**
     *   Set the session attribute.
     *
     *   @param aSession  the new value for the  session attribute
     */
    public void setSession(java.lang.String aSession) {   
        m_session = aSession;

    }

    /**
     *  Get the value of the session attribute.
     *  @return the value of the session attribute
     */
    public java.lang.String getSession() {
        return m_session;
    }


    // Attribute project ------------------------------------------------
   
    /**
     *  Determine if the project attribute is set
     *  @return <code>true</code> if the project attribute is set
     */
    public boolean isSetProject() {
   
        return  (m_project != null);

    }
   
    private java.lang.String m_project;

    /**
     *   Set the project attribute.
     *
     *   @param aProject  the new value for the  project attribute
     */
    public void setProject(java.lang.String aProject) {   
        m_project = aProject;

    }

    /**
     *  Get the value of the project attribute.
     *  @return the value of the project attribute
     */
    public java.lang.String getProject() {
        return m_project;
    }


    // Attribute department ------------------------------------------------
   
    /**
     *  Determine if the department attribute is set
     *  @return <code>true</code> if the department attribute is set
     */
    public boolean isSetDepartment() {
   
        return  (m_department != null);

    }
   
    private java.lang.String m_department;

    /**
     *   Set the department attribute.
     *
     *   @param aDepartment  the new value for the  department attribute
     */
    public void setDepartment(java.lang.String aDepartment) {   
        m_department = aDepartment;

    }

    /**
     *  Get the value of the department attribute.
     *  @return the value of the department attribute
     */
    public java.lang.String getDepartment() {
        return m_department;
    }


    // Attribute directivePrefix ------------------------------------------------
   
    /**
     *  Determine if the directivePrefix attribute is set
     *  @return <code>true</code> if the directivePrefix attribute is set
     */
    public boolean isSetDirectivePrefix() {
   
        return  (m_directivePrefix != null);

    }
   
    private java.lang.String m_directivePrefix;

    /**
     *   Set the directivePrefix attribute.
     *
     *   @param aDirectivePrefix  the new value for the  directivePrefix attribute
     */
    public void setDirectivePrefix(java.lang.String aDirectivePrefix) {   
        m_directivePrefix = aDirectivePrefix;

    }

    /**
     *  Get the value of the directivePrefix attribute.
     *  @return the value of the directivePrefix attribute
     */
    public java.lang.String getDirectivePrefix() {
        return m_directivePrefix;
    }


    // Attribute execFile ------------------------------------------------
   
    /**
     *  Determine if the execFile attribute is set
     *  @return <code>true</code> if the execFile attribute is set
     */
    public boolean isSetExecFile() {
   
        return  (m_execFile != null);

    }
   
    private java.lang.String m_execFile;

    /**
     *   Set the execFile attribute.
     *
     *   @param aExecFile  the new value for the  execFile attribute
     */
    public void setExecFile(java.lang.String aExecFile) {   
        m_execFile = aExecFile;

    }

    /**
     *  Get the value of the execFile attribute.
     *  @return the value of the execFile attribute
     */
    public java.lang.String getExecFile() {
        return m_execFile;
    }


    // Attribute scriptFile ------------------------------------------------
   
    /**
     *  Determine if the scriptFile attribute is set
     *  @return <code>true</code> if the scriptFile attribute is set
     */
    public boolean isSetScriptFile() {
   
        return  (m_scriptFile != null);

    }
   
    private java.lang.String m_scriptFile;

    /**
     *   Set the scriptFile attribute.
     *
     *   @param aScriptFile  the new value for the  scriptFile attribute
     */
    public void setScriptFile(java.lang.String aScriptFile) {   
        m_scriptFile = aScriptFile;

    }

    /**
     *  Get the value of the scriptFile attribute.
     *  @return the value of the scriptFile attribute
     */
    public java.lang.String getScriptFile() {
        return m_scriptFile;
    }


    // Attribute scriptSize ------------------------------------------------

    private boolean isScriptSizeSet;
   
    /**
     *  Determine if the scriptSize attribute is set
     *  @return <code>true</code> if the scriptSize attribute is set
     */
    public boolean isSetScriptSize() {

        return isScriptSizeSet;

    }
   
    private int m_scriptSize;

    /**
     *   Set the scriptSize attribute.
     *
     *   @param aScriptSize  the new value for the  scriptSize attribute
     */
    public void setScriptSize(int aScriptSize) {   
        m_scriptSize = aScriptSize;

        isScriptSizeSet = true;

    }

    /**
     *  Get the value of the scriptSize attribute.
     *  @return the value of the scriptSize attribute
     */
    public int getScriptSize() {
        return m_scriptSize;
    }


    // Attribute scriptPtr ------------------------------------------------
   
    /**
     *  Determine if the scriptPtr attribute is set
     *  @return <code>true</code> if the scriptPtr attribute is set
     */
    public boolean isSetScriptPtr() {
   
        return  (m_scriptPtr != null);

    }
   
    private java.lang.String m_scriptPtr;

    /**
     *   Set the scriptPtr attribute.
     *
     *   @param aScriptPtr  the new value for the  scriptPtr attribute
     */
    public void setScriptPtr(java.lang.String aScriptPtr) {   
        m_scriptPtr = aScriptPtr;

    }

    /**
     *  Get the value of the scriptPtr attribute.
     *  @return the value of the scriptPtr attribute
     */
    public java.lang.String getScriptPtr() {
        return m_scriptPtr;
    }


    // Attribute submissionTime ------------------------------------------------

    private boolean isSubmissionTimeSet;
   
    /**
     *  Determine if the submissionTime attribute is set
     *  @return <code>true</code> if the submissionTime attribute is set
     */
    public boolean isSetSubmissionTime() {

        return isSubmissionTimeSet;

    }
   
    private int m_submissionTime;

    /**
     *   Set the submissionTime attribute.
     *
     *   @param aSubmissionTime  the new value for the  submissionTime attribute
     */
    public void setSubmissionTime(int aSubmissionTime) {   
        m_submissionTime = aSubmissionTime;

        isSubmissionTimeSet = true;

    }

    /**
     *  Get the value of the submissionTime attribute.
     *  @return the value of the submissionTime attribute
     */
    public int getSubmissionTime() {
        return m_submissionTime;
    }


    // Attribute executionTime ------------------------------------------------

    private boolean isExecutionTimeSet;
   
    /**
     *  Determine if the executionTime attribute is set
     *  @return <code>true</code> if the executionTime attribute is set
     */
    public boolean isSetExecutionTime() {

        return isExecutionTimeSet;

    }
   
    private int m_executionTime;

    /**
     *   Set the executionTime attribute.
     *
     *   @param aExecutionTime  the new value for the  executionTime attribute
     */
    public void setExecutionTime(int aExecutionTime) {   
        m_executionTime = aExecutionTime;

        isExecutionTimeSet = true;

    }

    /**
     *  Get the value of the executionTime attribute.
     *  @return the value of the executionTime attribute
     */
    public int getExecutionTime() {
        return m_executionTime;
    }


    // Attribute deadline ------------------------------------------------

    private boolean isDeadlineSet;
   
    /**
     *  Determine if the deadline attribute is set
     *  @return <code>true</code> if the deadline attribute is set
     */
    public boolean isSetDeadline() {

        return isDeadlineSet;

    }
   
    private int m_deadline;

    /**
     *   Set the deadline attribute.
     *
     *   @param aDeadline  the new value for the  deadline attribute
     */
    public void setDeadline(int aDeadline) {   
        m_deadline = aDeadline;

        isDeadlineSet = true;

    }

    /**
     *  Get the value of the deadline attribute.
     *  @return the value of the deadline attribute
     */
    public int getDeadline() {
        return m_deadline;
    }


    // Attribute owner ------------------------------------------------
   
    /**
     *  Determine if the owner attribute is set
     *  @return <code>true</code> if the owner attribute is set
     */
    public boolean isSetOwner() {
   
        return  (m_owner != null);

    }
   
    private java.lang.String m_owner;

    /**
     *   Set the owner attribute.
     *
     *   @param aOwner  the new value for the  owner attribute
     */
    public void setOwner(java.lang.String aOwner) {   
        m_owner = aOwner;

    }

    /**
     *  Get the value of the owner attribute.
     *  @return the value of the owner attribute
     */
    public java.lang.String getOwner() {
        return m_owner;
    }


    // Attribute uid ------------------------------------------------

    private boolean isUidSet;
   
    /**
     *  Determine if the uid attribute is set
     *  @return <code>true</code> if the uid attribute is set
     */
    public boolean isSetUid() {

        return isUidSet;

    }
   
    private int m_uid;

    /**
     *   Set the uid attribute.
     *
     *   @param aUid  the new value for the  uid attribute
     */
    public void setUid(int aUid) {   
        m_uid = aUid;

        isUidSet = true;

    }

    /**
     *  Get the value of the uid attribute.
     *  @return the value of the uid attribute
     */
    public int getUid() {
        return m_uid;
    }


    // Attribute group ------------------------------------------------
   
    /**
     *  Determine if the group attribute is set
     *  @return <code>true</code> if the group attribute is set
     */
    public boolean isSetGroup() {
   
        return  (m_group != null);

    }
   
    private java.lang.String m_group;

    /**
     *   Set the group attribute.
     *
     *   @param aGroup  the new value for the  group attribute
     */
    public void setGroup(java.lang.String aGroup) {   
        m_group = aGroup;

    }

    /**
     *  Get the value of the group attribute.
     *  @return the value of the group attribute
     */
    public java.lang.String getGroup() {
        return m_group;
    }


    // Attribute gid ------------------------------------------------

    private boolean isGidSet;
   
    /**
     *  Determine if the gid attribute is set
     *  @return <code>true</code> if the gid attribute is set
     */
    public boolean isSetGid() {

        return isGidSet;

    }
   
    private int m_gid;

    /**
     *   Set the gid attribute.
     *
     *   @param aGid  the new value for the  gid attribute
     */
    public void setGid(int aGid) {   
        m_gid = aGid;

        isGidSet = true;

    }

    /**
     *  Get the value of the gid attribute.
     *  @return the value of the gid attribute
     */
    public int getGid() {
        return m_gid;
    }


    // Attribute account ------------------------------------------------
   
    /**
     *  Determine if the account attribute is set
     *  @return <code>true</code> if the account attribute is set
     */
    public boolean isSetAccount() {
   
        return  (m_account != null);

    }
   
    private java.lang.String m_account;

    /**
     *   Set the account attribute.
     *
     *   @param aAccount  the new value for the  account attribute
     */
    public void setAccount(java.lang.String aAccount) {   
        m_account = aAccount;

    }

    /**
     *  Get the value of the account attribute.
     *  @return the value of the account attribute
     */
    public java.lang.String getAccount() {
        return m_account;
    }


    // Attribute cwd ------------------------------------------------
   
    /**
     *  Determine if the cwd attribute is set
     *  @return <code>true</code> if the cwd attribute is set
     */
    public boolean isSetCwd() {
   
        return  (m_cwd != null);

    }
   
    private java.lang.String m_cwd;

    /**
     *   Set the cwd attribute.
     *
     *   @param aCwd  the new value for the  cwd attribute
     */
    public void setCwd(java.lang.String aCwd) {   
        m_cwd = aCwd;

    }

    /**
     *  Get the value of the cwd attribute.
     *  @return the value of the cwd attribute
     */
    public java.lang.String getCwd() {
        return m_cwd;
    }


    // Attribute notify ------------------------------------------------

    private boolean isNotifySet;
   
    /**
     *  Determine if the notify attribute is set
     *  @return <code>true</code> if the notify attribute is set
     */
    public boolean isSetNotify() {

        return isNotifySet;

    }
   
    private boolean m_notify;

    /**
     *   Set the notify attribute.
     *
     *   @param aNotify  the new value for the  notify attribute
     */
    public void setNotify(boolean aNotify) {   
        m_notify = aNotify;

        isNotifySet = true;

    }

    /**
     *  Get the value of the notify attribute.
     *  @return the value of the notify attribute
     */
    public boolean isNotify() {
        return m_notify;
    }


    // Attribute type ------------------------------------------------

    private boolean isTypeSet;
   
    /**
     *  Determine if the type attribute is set
     *  @return <code>true</code> if the type attribute is set
     */
    public boolean isSetType() {

        return isTypeSet;

    }
   
    private int m_type;

    /**
     *   Set the type attribute.
     *
     *   @param aType  the new value for the  type attribute
     */
    public void setType(int aType) {   
        m_type = aType;

        isTypeSet = true;

    }

    /**
     *  Get the value of the type attribute.
     *  @return the value of the type attribute
     */
    public int getType() {
        return m_type;
    }


    // Attribute reserve ------------------------------------------------

    private boolean isReserveSet;
   
    /**
     *  Determine if the reserve attribute is set
     *  @return <code>true</code> if the reserve attribute is set
     */
    public boolean isSetReserve() {

        return isReserveSet;

    }
   
    private boolean m_reserve;

    /**
     *   Set the reserve attribute.
     *
     *   @param aReserve  the new value for the  reserve attribute
     */
    public void setReserve(boolean aReserve) {   
        m_reserve = aReserve;

        isReserveSet = true;

    }

    /**
     *  Get the value of the reserve attribute.
     *  @return the value of the reserve attribute
     */
    public boolean isReserve() {
        return m_reserve;
    }


    // Attribute priority ------------------------------------------------

    private boolean isPrioritySet;
   
    /**
     *  Determine if the priority attribute is set
     *  @return <code>true</code> if the priority attribute is set
     */
    public boolean isSetPriority() {

        return isPrioritySet;

    }
   
    private int m_priority;

    /**
     *   Set the priority attribute.
     *
     *   @param aPriority  the new value for the  priority attribute
     */
    public void setPriority(int aPriority) {   
        m_priority = aPriority;

        isPrioritySet = true;

    }

    /**
     *  Get the value of the priority attribute.
     *  @return the value of the priority attribute
     */
    public int getPriority() {
        return m_priority;
    }


    // Attribute jobshare ------------------------------------------------

    private boolean isJobshareSet;
   
    /**
     *  Determine if the jobshare attribute is set
     *  @return <code>true</code> if the jobshare attribute is set
     */
    public boolean isSetJobshare() {

        return isJobshareSet;

    }
   
    private int m_jobshare;

    /**
     *   Set the jobshare attribute.
     *
     *   @param aJobshare  the new value for the  jobshare attribute
     */
    public void setJobshare(int aJobshare) {   
        m_jobshare = aJobshare;

        isJobshareSet = true;

    }

    /**
     *  Get the value of the jobshare attribute.
     *  @return the value of the jobshare attribute
     */
    public int getJobshare() {
        return m_jobshare;
    }


    // Attribute shellList ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.PathName > m_shellList;
   
    private void initShell() {
        if (m_shellList == null) {
            m_shellList = new LinkedList< com.sun.grid.jgdi.configuration.PathName >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.PathName attribute.

     *   @param ashell  the new com.sun.grid.jgdi.configuration.PathName attribute
     */
    public void addShell(com.sun.grid.jgdi.configuration.PathName ashell) {   
        initShell();
        
        m_shellList.add(ashell);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.PathName attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.PathName attribute
     *   @param ashell  the new com.sun.grid.jgdi.configuration.PathName attribute
     */
    public void setShell(int index, com.sun.grid.jgdi.configuration.PathName ashell) {
        initShell();
        m_shellList.set(index, ashell);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.PathName attributes.
     */
    public void removeAllShell() {
        if (m_shellList != null) {
            m_shellList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.PathName attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.PathName attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.PathName attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.PathName removeShell(int index) {
        initShell();
        return (com.sun.grid.jgdi.configuration.PathName)m_shellList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.PathName attribute.
     *  @param ashell  the com.sun.grid.jgdi.configuration.PathName attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.PathName attribute has been removed
     */
    public boolean removeShell(com.sun.grid.jgdi.configuration.PathName ashell) {
        initShell();
        return m_shellList.remove(ashell);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.PathName attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.PathName attributes
     */
    public List< com.sun.grid.jgdi.configuration.PathName > getShellList() {
        initShell();
        return Collections.unmodifiableList(m_shellList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.PathName attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.PathName attributes.
     */
    public int getShellCount() {
        if (m_shellList != null) {
            return m_shellList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.PathName attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.PathName attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.PathName attribute
     */
    public com.sun.grid.jgdi.configuration.PathName getShell(int index) {
        initShell();
        return (com.sun.grid.jgdi.configuration.PathName)m_shellList.get(index);
    }
   
    /**
     *  Determine if the shell attribute is set
     *  @return <code>true</code> if the shell attribute is set
     */
    public boolean isSetShell () {
        return (m_shellList != null) && (!m_shellList.isEmpty());
    }
   

    // Attribute verify ------------------------------------------------

    private boolean isVerifySet;
   
    /**
     *  Determine if the verify attribute is set
     *  @return <code>true</code> if the verify attribute is set
     */
    public boolean isSetVerify() {

        return isVerifySet;

    }
   
    private int m_verify;

    /**
     *   Set the verify attribute.
     *
     *   @param aVerify  the new value for the  verify attribute
     */
    public void setVerify(int aVerify) {   
        m_verify = aVerify;

        isVerifySet = true;

    }

    /**
     *  Get the value of the verify attribute.
     *  @return the value of the verify attribute
     */
    public int getVerify() {
        return m_verify;
    }


    // Attribute envList ------------------------------------------------

    // keyClassName for SGE_STRING = String

   
    private Map m_env;

    private void initEnv() {
        if (m_env == null) {
            m_env = new LinkedHashMap();
        }
    }
   
    /**
     *  <p>Put the attribute env for a key.</p>
     *
     *  @param key    the key
     *  @param value  the value
     */
    public void putEnv(String key, String value) {   
        initEnv();
        m_env.put(key,

                            value

                            );
    }

    /**
     *  <p>Get the default value of the attribute env.</p>
     *  @return the default value of the attribute env
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultEnv() {
        if (m_env == null) {
            throw new IllegalStateException("default value for attribute env not found");
        }
        java.lang.String ret = (java.lang.String)m_env.get("default");
        if (ret == null) {
            throw new IllegalStateException("default value for attribute env not found");
        }

        return ret;

    }
   
    /**
     *  <p>Get the env attribute for a key.</p>
     *  @param   key   the key
     *  @return  the env attribute for the host or the
     *           default value of  env
     */
    public String getEnv(String key) {
        initEnv();
        if (m_env.containsKey(key)) {      
            java.lang.String ret = (java.lang.String)m_env.get(key);
            if (ret != null) {

                return ret;

            } else {
                return null;
            }
        } else {
            return getDefaultEnv();
        }
    }


    /**
     *  <p>remove the attribute env for a key.</p>
     *
     *  @param key tje key
     *  @return the value for the key or <code>null</code>
     *          if the value attribute was not defined for the key.
     */
    public java.lang.String removeEnv(String key) {
        initEnv();
        return (java.lang.String)m_env.remove(key);
    }

    /**
     *  <p>Remove the attribute env for all keys.</p>
     */
    public void removeAllEnv() {
        if (m_env != null) {
            m_env.clear();
        }
    }
   
    /**
     *  Get the set of keys which have the attribute env set.
     *  @return set of keys
     */
    public Set<String> getEnvKeys() {
        if (m_env == null) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(m_env.keySet());
        }
    }
   
    /**
     *  Get the number of keys which have the attribute env set.
     *  @return the number of keys which have the attribute env set.
     */
    public int getEnvCount() {
        if (m_env == null) {
            return 0;
        } else {
            return m_env.size();
        }
    }
   
    /**
     *  Determine if any env attribute is set
     *  @return <code>true</code> if the env attribute is set
     */
    public boolean isSetEnv () {
        return (m_env != null) && (!m_env.isEmpty());
    }
   
    /**
     *  Determine if any env attribute is for a key is set
     *  @param  key the key
     *  @return <code>true</code> if the env attribute is set
     */
    public boolean isSetEnv(String key) {
        return (m_env != null) && (m_env.get(key) != null);
    }
   


    // Attribute context ------------------------------------------------

    // keyClassName for SGE_STRING = String

   
    private Map m_context;

    private void initContext() {
        if (m_context == null) {
            m_context = new LinkedHashMap();
        }
    }
   
    /**
     *  <p>Put the attribute context for a key.</p>
     *
     *  @param key    the key
     *  @param value  the value
     */
    public void putContext(String key, String value) {   
        initContext();
        m_context.put(key,

                            value

                            );
    }

    /**
     *  <p>Get the default value of the attribute context.</p>
     *  @return the default value of the attribute context
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultContext() {
        if (m_context == null) {
            throw new IllegalStateException("default value for attribute context not found");
        }
        java.lang.String ret = (java.lang.String)m_context.get("default");
        if (ret == null) {
            throw new IllegalStateException("default value for attribute context not found");
        }

        return ret;

    }
   
    /**
     *  <p>Get the context attribute for a key.</p>
     *  @param   key   the key
     *  @return  the context attribute for the host or the
     *           default value of  context
     */
    public String getContext(String key) {
        initContext();
        if (m_context.containsKey(key)) {      
            java.lang.String ret = (java.lang.String)m_context.get(key);
            if (ret != null) {

                return ret;

            } else {
                return null;
            }
        } else {
            return getDefaultContext();
        }
    }


    /**
     *  <p>remove the attribute context for a key.</p>
     *
     *  @param key tje key
     *  @return the value for the key or <code>null</code>
     *          if the value attribute was not defined for the key.
     */
    public java.lang.String removeContext(String key) {
        initContext();
        return (java.lang.String)m_context.remove(key);
    }

    /**
     *  <p>Remove the attribute context for all keys.</p>
     */
    public void removeAllContext() {
        if (m_context != null) {
            m_context.clear();
        }
    }
   
    /**
     *  Get the set of keys which have the attribute context set.
     *  @return set of keys
     */
    public Set<String> getContextKeys() {
        if (m_context == null) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(m_context.keySet());
        }
    }
   
    /**
     *  Get the number of keys which have the attribute context set.
     *  @return the number of keys which have the attribute context set.
     */
    public int getContextCount() {
        if (m_context == null) {
            return 0;
        } else {
            return m_context.size();
        }
    }
   
    /**
     *  Determine if any context attribute is set
     *  @return <code>true</code> if the context attribute is set
     */
    public boolean isSetContext () {
        return (m_context != null) && (!m_context.isEmpty());
    }
   
    /**
     *  Determine if any context attribute is for a key is set
     *  @param  key the key
     *  @return <code>true</code> if the context attribute is set
     */
    public boolean isSetContext(String key) {
        return (m_context != null) && (m_context.get(key) != null);
    }
   


    // Attribute jobArgs ------------------------------------------------

    private List< java.lang.String > m_jobArgsList;
   
    private void initJobArgs() {
        if (m_jobArgsList == null) {
            m_jobArgsList = new LinkedList< java.lang.String >();
        }
    }

    /**
     *   Add a java.lang.String attribute.

     *   @param ajobArgs  the new java.lang.String attribute
     */
    public void addJobArgs(java.lang.String ajobArgs) {   
        initJobArgs();
        
        m_jobArgsList.add(ajobArgs);
        
    }
   
   
    /**
     *   Set a java.lang.String attribute.
     *   @param index   index of the java.lang.String attribute
     *   @param ajobArgs  the new java.lang.String attribute
     */
    public void setJobArgs(int index, java.lang.String ajobArgs) {
        initJobArgs();
        m_jobArgsList.set(index, ajobArgs);
    }

    /**
     *  Remove all java.lang.String attributes.
     */
    public void removeAllJobArgs() {
        if (m_jobArgsList != null) {
            m_jobArgsList.clear();
        }
    }

    /**
     *  Remote a java.lang.String attribute at an index.
     *  @param index  the index of the java.lang.String attribute which should be
     *                removed
     *  @return the removed java.lang.String attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public java.lang.String removeJobArgs(int index) {
        initJobArgs();
        return (java.lang.String)m_jobArgsList.remove(index);
    }

    /**
     *  Remote a specific java.lang.String attribute.
     *  @param ajobArgs  the java.lang.String attribute which should be
     *                         removed
     *  @return <code>true</code> if the java.lang.String attribute has been removed
     */
    public boolean removeJobArgs(java.lang.String ajobArgs) {
        initJobArgs();
        return m_jobArgsList.remove(ajobArgs);
    }
   
    /**
     *   Get a unmodifiable list of all java.lang.String attributes.
     *
     *   @return Unmodifiable list with all java.lang.String attributes
     */
    public List< java.lang.String > getJobArgsList() {
        initJobArgs();
        return Collections.unmodifiableList(m_jobArgsList);
    }

    /**
     *  Get the number of java.lang.String attributes.
     *
     *  @return The number of java.lang.String attributes.
     */
    public int getJobArgsCount() {
        if (m_jobArgsList != null) {
            return m_jobArgsList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a java.lang.String attribute at an index.
     *  @param index  the index of the java.lang.String attribute which should be
     *                removed
     *  @return the java.lang.String attribute
     */
    public java.lang.String getJobArgs(int index) {
        initJobArgs();
        return (java.lang.String)m_jobArgsList.get(index);
    }
   
    /**
     *  Determine if the jobArgs attribute is set
     *  @return <code>true</code> if the jobArgs attribute is set
     */
    public boolean isSetJobArgs () {
        return (m_jobArgsList != null) && (!m_jobArgsList.isEmpty());
    }
   

    // Attribute checkpointAttr ------------------------------------------------

    private boolean isCheckpointAttrSet;
   
    /**
     *  Determine if the checkpointAttr attribute is set
     *  @return <code>true</code> if the checkpointAttr attribute is set
     */
    public boolean isSetCheckpointAttr() {

        return isCheckpointAttrSet;

    }
   
    private int m_checkpointAttr;

    /**
     *   Set the checkpointAttr attribute.
     *
     *   @param aCheckpointAttr  the new value for the  checkpointAttr attribute
     */
    public void setCheckpointAttr(int aCheckpointAttr) {   
        m_checkpointAttr = aCheckpointAttr;

        isCheckpointAttrSet = true;

    }

    /**
     *  Get the value of the checkpointAttr attribute.
     *  @return the value of the checkpointAttr attribute
     */
    public int getCheckpointAttr() {
        return m_checkpointAttr;
    }


    // Attribute checkpointName ------------------------------------------------
   
    /**
     *  Determine if the checkpointName attribute is set
     *  @return <code>true</code> if the checkpointName attribute is set
     */
    public boolean isSetCheckpointName() {
   
        return  (m_checkpointName != null);

    }
   
    private java.lang.String m_checkpointName;

    /**
     *   Set the checkpointName attribute.
     *
     *   @param aCheckpointName  the new value for the  checkpointName attribute
     */
    public void setCheckpointName(java.lang.String aCheckpointName) {   
        m_checkpointName = aCheckpointName;

    }

    /**
     *  Get the value of the checkpointName attribute.
     *  @return the value of the checkpointName attribute
     */
    public java.lang.String getCheckpointName() {
        return m_checkpointName;
    }


    // Attribute checkpointObject ------------------------------------------------
   
    /**
     *  Determine if the checkpointObject attribute is set
     *  @return <code>true</code> if the checkpointObject attribute is set
     */
    public boolean isSetCheckpointObject() {
   
        return  (m_checkpointObject != null);

    }
   
    private com.sun.grid.jgdi.configuration.Checkpoint m_checkpointObject;

    /**
     *   Set the checkpointObject attribute.
     *
     *   @param aCheckpointObject  the new value for the  checkpointObject attribute
     */
    public void setCheckpointObject(com.sun.grid.jgdi.configuration.Checkpoint aCheckpointObject) {   
        m_checkpointObject = aCheckpointObject;

    }

    /**
     *  Get the value of the checkpointObject attribute.
     *  @return the value of the checkpointObject attribute
     */
    public com.sun.grid.jgdi.configuration.Checkpoint getCheckpointObject() {
        return m_checkpointObject;
    }


    // Attribute checkpointInterval ------------------------------------------------

    private boolean isCheckpointIntervalSet;
   
    /**
     *  Determine if the checkpointInterval attribute is set
     *  @return <code>true</code> if the checkpointInterval attribute is set
     */
    public boolean isSetCheckpointInterval() {

        return isCheckpointIntervalSet;

    }
   
    private int m_checkpointInterval;

    /**
     *   Set the checkpointInterval attribute.
     *
     *   @param aCheckpointInterval  the new value for the  checkpointInterval attribute
     */
    public void setCheckpointInterval(int aCheckpointInterval) {   
        m_checkpointInterval = aCheckpointInterval;

        isCheckpointIntervalSet = true;

    }

    /**
     *  Get the value of the checkpointInterval attribute.
     *  @return the value of the checkpointInterval attribute
     */
    public int getCheckpointInterval() {
        return m_checkpointInterval;
    }


    // Attribute restart ------------------------------------------------

    private boolean isRestartSet;
   
    /**
     *  Determine if the restart attribute is set
     *  @return <code>true</code> if the restart attribute is set
     */
    public boolean isSetRestart() {

        return isRestartSet;

    }
   
    private int m_restart;

    /**
     *   Set the restart attribute.
     *
     *   @param aRestart  the new value for the  restart attribute
     */
    public void setRestart(int aRestart) {   
        m_restart = aRestart;

        isRestartSet = true;

    }

    /**
     *  Get the value of the restart attribute.
     *  @return the value of the restart attribute
     */
    public int getRestart() {
        return m_restart;
    }


    // Attribute stdoutPathList ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.PathName > m_stdoutPathList;
   
    private void initStdoutPath() {
        if (m_stdoutPathList == null) {
            m_stdoutPathList = new LinkedList< com.sun.grid.jgdi.configuration.PathName >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.PathName attribute.

     *   @param astdoutPath  the new com.sun.grid.jgdi.configuration.PathName attribute
     */
    public void addStdoutPath(com.sun.grid.jgdi.configuration.PathName astdoutPath) {   
        initStdoutPath();
        
        m_stdoutPathList.add(astdoutPath);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.PathName attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.PathName attribute
     *   @param astdoutPath  the new com.sun.grid.jgdi.configuration.PathName attribute
     */
    public void setStdoutPath(int index, com.sun.grid.jgdi.configuration.PathName astdoutPath) {
        initStdoutPath();
        m_stdoutPathList.set(index, astdoutPath);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.PathName attributes.
     */
    public void removeAllStdoutPath() {
        if (m_stdoutPathList != null) {
            m_stdoutPathList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.PathName attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.PathName attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.PathName attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.PathName removeStdoutPath(int index) {
        initStdoutPath();
        return (com.sun.grid.jgdi.configuration.PathName)m_stdoutPathList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.PathName attribute.
     *  @param astdoutPath  the com.sun.grid.jgdi.configuration.PathName attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.PathName attribute has been removed
     */
    public boolean removeStdoutPath(com.sun.grid.jgdi.configuration.PathName astdoutPath) {
        initStdoutPath();
        return m_stdoutPathList.remove(astdoutPath);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.PathName attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.PathName attributes
     */
    public List< com.sun.grid.jgdi.configuration.PathName > getStdoutPathList() {
        initStdoutPath();
        return Collections.unmodifiableList(m_stdoutPathList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.PathName attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.PathName attributes.
     */
    public int getStdoutPathCount() {
        if (m_stdoutPathList != null) {
            return m_stdoutPathList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.PathName attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.PathName attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.PathName attribute
     */
    public com.sun.grid.jgdi.configuration.PathName getStdoutPath(int index) {
        initStdoutPath();
        return (com.sun.grid.jgdi.configuration.PathName)m_stdoutPathList.get(index);
    }
   
    /**
     *  Determine if the stdoutPath attribute is set
     *  @return <code>true</code> if the stdoutPath attribute is set
     */
    public boolean isSetStdoutPath () {
        return (m_stdoutPathList != null) && (!m_stdoutPathList.isEmpty());
    }
   

    // Attribute stderrPathList ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.PathName > m_stderrPathList;
   
    private void initStderrPath() {
        if (m_stderrPathList == null) {
            m_stderrPathList = new LinkedList< com.sun.grid.jgdi.configuration.PathName >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.PathName attribute.

     *   @param astderrPath  the new com.sun.grid.jgdi.configuration.PathName attribute
     */
    public void addStderrPath(com.sun.grid.jgdi.configuration.PathName astderrPath) {   
        initStderrPath();
        
        m_stderrPathList.add(astderrPath);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.PathName attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.PathName attribute
     *   @param astderrPath  the new com.sun.grid.jgdi.configuration.PathName attribute
     */
    public void setStderrPath(int index, com.sun.grid.jgdi.configuration.PathName astderrPath) {
        initStderrPath();
        m_stderrPathList.set(index, astderrPath);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.PathName attributes.
     */
    public void removeAllStderrPath() {
        if (m_stderrPathList != null) {
            m_stderrPathList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.PathName attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.PathName attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.PathName attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.PathName removeStderrPath(int index) {
        initStderrPath();
        return (com.sun.grid.jgdi.configuration.PathName)m_stderrPathList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.PathName attribute.
     *  @param astderrPath  the com.sun.grid.jgdi.configuration.PathName attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.PathName attribute has been removed
     */
    public boolean removeStderrPath(com.sun.grid.jgdi.configuration.PathName astderrPath) {
        initStderrPath();
        return m_stderrPathList.remove(astderrPath);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.PathName attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.PathName attributes
     */
    public List< com.sun.grid.jgdi.configuration.PathName > getStderrPathList() {
        initStderrPath();
        return Collections.unmodifiableList(m_stderrPathList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.PathName attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.PathName attributes.
     */
    public int getStderrPathCount() {
        if (m_stderrPathList != null) {
            return m_stderrPathList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.PathName attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.PathName attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.PathName attribute
     */
    public com.sun.grid.jgdi.configuration.PathName getStderrPath(int index) {
        initStderrPath();
        return (com.sun.grid.jgdi.configuration.PathName)m_stderrPathList.get(index);
    }
   
    /**
     *  Determine if the stderrPath attribute is set
     *  @return <code>true</code> if the stderrPath attribute is set
     */
    public boolean isSetStderrPath () {
        return (m_stderrPathList != null) && (!m_stderrPathList.isEmpty());
    }
   

    // Attribute stdinPathList ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.PathName > m_stdinPathList;
   
    private void initStdinPath() {
        if (m_stdinPathList == null) {
            m_stdinPathList = new LinkedList< com.sun.grid.jgdi.configuration.PathName >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.PathName attribute.

     *   @param astdinPath  the new com.sun.grid.jgdi.configuration.PathName attribute
     */
    public void addStdinPath(com.sun.grid.jgdi.configuration.PathName astdinPath) {   
        initStdinPath();
        
        m_stdinPathList.add(astdinPath);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.PathName attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.PathName attribute
     *   @param astdinPath  the new com.sun.grid.jgdi.configuration.PathName attribute
     */
    public void setStdinPath(int index, com.sun.grid.jgdi.configuration.PathName astdinPath) {
        initStdinPath();
        m_stdinPathList.set(index, astdinPath);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.PathName attributes.
     */
    public void removeAllStdinPath() {
        if (m_stdinPathList != null) {
            m_stdinPathList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.PathName attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.PathName attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.PathName attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.PathName removeStdinPath(int index) {
        initStdinPath();
        return (com.sun.grid.jgdi.configuration.PathName)m_stdinPathList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.PathName attribute.
     *  @param astdinPath  the com.sun.grid.jgdi.configuration.PathName attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.PathName attribute has been removed
     */
    public boolean removeStdinPath(com.sun.grid.jgdi.configuration.PathName astdinPath) {
        initStdinPath();
        return m_stdinPathList.remove(astdinPath);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.PathName attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.PathName attributes
     */
    public List< com.sun.grid.jgdi.configuration.PathName > getStdinPathList() {
        initStdinPath();
        return Collections.unmodifiableList(m_stdinPathList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.PathName attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.PathName attributes.
     */
    public int getStdinPathCount() {
        if (m_stdinPathList != null) {
            return m_stdinPathList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.PathName attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.PathName attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.PathName attribute
     */
    public com.sun.grid.jgdi.configuration.PathName getStdinPath(int index) {
        initStdinPath();
        return (com.sun.grid.jgdi.configuration.PathName)m_stdinPathList.get(index);
    }
   
    /**
     *  Determine if the stdinPath attribute is set
     *  @return <code>true</code> if the stdinPath attribute is set
     */
    public boolean isSetStdinPath () {
        return (m_stdinPathList != null) && (!m_stdinPathList.isEmpty());
    }
   

    // Attribute mergeStderr ------------------------------------------------

    private boolean isMergeStderrSet;
   
    /**
     *  Determine if the mergeStderr attribute is set
     *  @return <code>true</code> if the mergeStderr attribute is set
     */
    public boolean isSetMergeStderr() {

        return isMergeStderrSet;

    }
   
    private boolean m_mergeStderr;

    /**
     *   Set the mergeStderr attribute.
     *
     *   @param aMergeStderr  the new value for the  mergeStderr attribute
     */
    public void setMergeStderr(boolean aMergeStderr) {   
        m_mergeStderr = aMergeStderr;

        isMergeStderrSet = true;

    }

    /**
     *  Get the value of the mergeStderr attribute.
     *  @return the value of the mergeStderr attribute
     */
    public boolean isMergeStderr() {
        return m_mergeStderr;
    }


    // Attribute hardResourceList ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.ComplexEntry > m_hardResourceList;
   
    private void initHardResource() {
        if (m_hardResourceList == null) {
            m_hardResourceList = new LinkedList< com.sun.grid.jgdi.configuration.ComplexEntry >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.ComplexEntry attribute.

     *   @param ahardResource  the new com.sun.grid.jgdi.configuration.ComplexEntry attribute
     */
    public void addHardResource(com.sun.grid.jgdi.configuration.ComplexEntry ahardResource) {   
        initHardResource();
        
        m_hardResourceList.add(ahardResource);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.ComplexEntry attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.ComplexEntry attribute
     *   @param ahardResource  the new com.sun.grid.jgdi.configuration.ComplexEntry attribute
     */
    public void setHardResource(int index, com.sun.grid.jgdi.configuration.ComplexEntry ahardResource) {
        initHardResource();
        m_hardResourceList.set(index, ahardResource);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.ComplexEntry attributes.
     */
    public void removeAllHardResource() {
        if (m_hardResourceList != null) {
            m_hardResourceList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.ComplexEntry attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.ComplexEntry attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.ComplexEntry attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.ComplexEntry removeHardResource(int index) {
        initHardResource();
        return (com.sun.grid.jgdi.configuration.ComplexEntry)m_hardResourceList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.ComplexEntry attribute.
     *  @param ahardResource  the com.sun.grid.jgdi.configuration.ComplexEntry attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.ComplexEntry attribute has been removed
     */
    public boolean removeHardResource(com.sun.grid.jgdi.configuration.ComplexEntry ahardResource) {
        initHardResource();
        return m_hardResourceList.remove(ahardResource);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.ComplexEntry attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.ComplexEntry attributes
     */
    public List< com.sun.grid.jgdi.configuration.ComplexEntry > getHardResourceList() {
        initHardResource();
        return Collections.unmodifiableList(m_hardResourceList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.ComplexEntry attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.ComplexEntry attributes.
     */
    public int getHardResourceCount() {
        if (m_hardResourceList != null) {
            return m_hardResourceList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.ComplexEntry attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.ComplexEntry attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.ComplexEntry attribute
     */
    public com.sun.grid.jgdi.configuration.ComplexEntry getHardResource(int index) {
        initHardResource();
        return (com.sun.grid.jgdi.configuration.ComplexEntry)m_hardResourceList.get(index);
    }
   
    /**
     *  Determine if the hardResource attribute is set
     *  @return <code>true</code> if the hardResource attribute is set
     */
    public boolean isSetHardResource () {
        return (m_hardResourceList != null) && (!m_hardResourceList.isEmpty());
    }
   

    // Attribute softResourceList ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.ComplexEntry > m_softResourceList;
   
    private void initSoftResource() {
        if (m_softResourceList == null) {
            m_softResourceList = new LinkedList< com.sun.grid.jgdi.configuration.ComplexEntry >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.ComplexEntry attribute.

     *   @param asoftResource  the new com.sun.grid.jgdi.configuration.ComplexEntry attribute
     */
    public void addSoftResource(com.sun.grid.jgdi.configuration.ComplexEntry asoftResource) {   
        initSoftResource();
        
        m_softResourceList.add(asoftResource);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.ComplexEntry attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.ComplexEntry attribute
     *   @param asoftResource  the new com.sun.grid.jgdi.configuration.ComplexEntry attribute
     */
    public void setSoftResource(int index, com.sun.grid.jgdi.configuration.ComplexEntry asoftResource) {
        initSoftResource();
        m_softResourceList.set(index, asoftResource);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.ComplexEntry attributes.
     */
    public void removeAllSoftResource() {
        if (m_softResourceList != null) {
            m_softResourceList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.ComplexEntry attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.ComplexEntry attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.ComplexEntry attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.ComplexEntry removeSoftResource(int index) {
        initSoftResource();
        return (com.sun.grid.jgdi.configuration.ComplexEntry)m_softResourceList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.ComplexEntry attribute.
     *  @param asoftResource  the com.sun.grid.jgdi.configuration.ComplexEntry attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.ComplexEntry attribute has been removed
     */
    public boolean removeSoftResource(com.sun.grid.jgdi.configuration.ComplexEntry asoftResource) {
        initSoftResource();
        return m_softResourceList.remove(asoftResource);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.ComplexEntry attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.ComplexEntry attributes
     */
    public List< com.sun.grid.jgdi.configuration.ComplexEntry > getSoftResourceList() {
        initSoftResource();
        return Collections.unmodifiableList(m_softResourceList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.ComplexEntry attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.ComplexEntry attributes.
     */
    public int getSoftResourceCount() {
        if (m_softResourceList != null) {
            return m_softResourceList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.ComplexEntry attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.ComplexEntry attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.ComplexEntry attribute
     */
    public com.sun.grid.jgdi.configuration.ComplexEntry getSoftResource(int index) {
        initSoftResource();
        return (com.sun.grid.jgdi.configuration.ComplexEntry)m_softResourceList.get(index);
    }
   
    /**
     *  Determine if the softResource attribute is set
     *  @return <code>true</code> if the softResource attribute is set
     */
    public boolean isSetSoftResource () {
        return (m_softResourceList != null) && (!m_softResourceList.isEmpty());
    }
   

    // Attribute hardQueueList ------------------------------------------------

    private List< java.lang.String > m_hardQueueList;
   
    private void initHardQueue() {
        if (m_hardQueueList == null) {
            m_hardQueueList = new LinkedList< java.lang.String >();
        }
    }

    /**
     *   Add a java.lang.String attribute.

     *   @param ahardQueue  the new java.lang.String attribute
     */
    public void addHardQueue(java.lang.String ahardQueue) {   
        initHardQueue();
        
        m_hardQueueList.add(ahardQueue);
        
    }
   
   
    /**
     *   Set a java.lang.String attribute.
     *   @param index   index of the java.lang.String attribute
     *   @param ahardQueue  the new java.lang.String attribute
     */
    public void setHardQueue(int index, java.lang.String ahardQueue) {
        initHardQueue();
        m_hardQueueList.set(index, ahardQueue);
    }

    /**
     *  Remove all java.lang.String attributes.
     */
    public void removeAllHardQueue() {
        if (m_hardQueueList != null) {
            m_hardQueueList.clear();
        }
    }

    /**
     *  Remote a java.lang.String attribute at an index.
     *  @param index  the index of the java.lang.String attribute which should be
     *                removed
     *  @return the removed java.lang.String attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public java.lang.String removeHardQueue(int index) {
        initHardQueue();
        return (java.lang.String)m_hardQueueList.remove(index);
    }

    /**
     *  Remote a specific java.lang.String attribute.
     *  @param ahardQueue  the java.lang.String attribute which should be
     *                         removed
     *  @return <code>true</code> if the java.lang.String attribute has been removed
     */
    public boolean removeHardQueue(java.lang.String ahardQueue) {
        initHardQueue();
        return m_hardQueueList.remove(ahardQueue);
    }
   
    /**
     *   Get a unmodifiable list of all java.lang.String attributes.
     *
     *   @return Unmodifiable list with all java.lang.String attributes
     */
    public List< java.lang.String > getHardQueueList() {
        initHardQueue();
        return Collections.unmodifiableList(m_hardQueueList);
    }

    /**
     *  Get the number of java.lang.String attributes.
     *
     *  @return The number of java.lang.String attributes.
     */
    public int getHardQueueCount() {
        if (m_hardQueueList != null) {
            return m_hardQueueList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a java.lang.String attribute at an index.
     *  @param index  the index of the java.lang.String attribute which should be
     *                removed
     *  @return the java.lang.String attribute
     */
    public java.lang.String getHardQueue(int index) {
        initHardQueue();
        return (java.lang.String)m_hardQueueList.get(index);
    }
   
    /**
     *  Determine if the hardQueue attribute is set
     *  @return <code>true</code> if the hardQueue attribute is set
     */
    public boolean isSetHardQueue () {
        return (m_hardQueueList != null) && (!m_hardQueueList.isEmpty());
    }
   

    // Attribute softQueueList ------------------------------------------------

    private List< java.lang.String > m_softQueueList;
   
    private void initSoftQueue() {
        if (m_softQueueList == null) {
            m_softQueueList = new LinkedList< java.lang.String >();
        }
    }

    /**
     *   Add a java.lang.String attribute.

     *   @param asoftQueue  the new java.lang.String attribute
     */
    public void addSoftQueue(java.lang.String asoftQueue) {   
        initSoftQueue();
        
        m_softQueueList.add(asoftQueue);
        
    }
   
   
    /**
     *   Set a java.lang.String attribute.
     *   @param index   index of the java.lang.String attribute
     *   @param asoftQueue  the new java.lang.String attribute
     */
    public void setSoftQueue(int index, java.lang.String asoftQueue) {
        initSoftQueue();
        m_softQueueList.set(index, asoftQueue);
    }

    /**
     *  Remove all java.lang.String attributes.
     */
    public void removeAllSoftQueue() {
        if (m_softQueueList != null) {
            m_softQueueList.clear();
        }
    }

    /**
     *  Remote a java.lang.String attribute at an index.
     *  @param index  the index of the java.lang.String attribute which should be
     *                removed
     *  @return the removed java.lang.String attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public java.lang.String removeSoftQueue(int index) {
        initSoftQueue();
        return (java.lang.String)m_softQueueList.remove(index);
    }

    /**
     *  Remote a specific java.lang.String attribute.
     *  @param asoftQueue  the java.lang.String attribute which should be
     *                         removed
     *  @return <code>true</code> if the java.lang.String attribute has been removed
     */
    public boolean removeSoftQueue(java.lang.String asoftQueue) {
        initSoftQueue();
        return m_softQueueList.remove(asoftQueue);
    }
   
    /**
     *   Get a unmodifiable list of all java.lang.String attributes.
     *
     *   @return Unmodifiable list with all java.lang.String attributes
     */
    public List< java.lang.String > getSoftQueueList() {
        initSoftQueue();
        return Collections.unmodifiableList(m_softQueueList);
    }

    /**
     *  Get the number of java.lang.String attributes.
     *
     *  @return The number of java.lang.String attributes.
     */
    public int getSoftQueueCount() {
        if (m_softQueueList != null) {
            return m_softQueueList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a java.lang.String attribute at an index.
     *  @param index  the index of the java.lang.String attribute which should be
     *                removed
     *  @return the java.lang.String attribute
     */
    public java.lang.String getSoftQueue(int index) {
        initSoftQueue();
        return (java.lang.String)m_softQueueList.get(index);
    }
   
    /**
     *  Determine if the softQueue attribute is set
     *  @return <code>true</code> if the softQueue attribute is set
     */
    public boolean isSetSoftQueue () {
        return (m_softQueueList != null) && (!m_softQueueList.isEmpty());
    }
   

    // Attribute mailOptions ------------------------------------------------

    private boolean isMailOptionsSet;
   
    /**
     *  Determine if the mailOptions attribute is set
     *  @return <code>true</code> if the mailOptions attribute is set
     */
    public boolean isSetMailOptions() {

        return isMailOptionsSet;

    }
   
    private int m_mailOptions;

    /**
     *   Set the mailOptions attribute.
     *
     *   @param aMailOptions  the new value for the  mailOptions attribute
     */
    public void setMailOptions(int aMailOptions) {   
        m_mailOptions = aMailOptions;

        isMailOptionsSet = true;

    }

    /**
     *  Get the value of the mailOptions attribute.
     *  @return the value of the mailOptions attribute
     */
    public int getMailOptions() {
        return m_mailOptions;
    }


    // Attribute mailList ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.MailReceiver > m_mailList;
   
    private void initMail() {
        if (m_mailList == null) {
            m_mailList = new LinkedList< com.sun.grid.jgdi.configuration.MailReceiver >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.MailReceiver attribute.

     *   @param amail  the new com.sun.grid.jgdi.configuration.MailReceiver attribute
     */
    public void addMail(com.sun.grid.jgdi.configuration.MailReceiver amail) {   
        initMail();
        
        m_mailList.add(amail);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.MailReceiver attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.MailReceiver attribute
     *   @param amail  the new com.sun.grid.jgdi.configuration.MailReceiver attribute
     */
    public void setMail(int index, com.sun.grid.jgdi.configuration.MailReceiver amail) {
        initMail();
        m_mailList.set(index, amail);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.MailReceiver attributes.
     */
    public void removeAllMail() {
        if (m_mailList != null) {
            m_mailList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.MailReceiver attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.MailReceiver attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.MailReceiver attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.MailReceiver removeMail(int index) {
        initMail();
        return (com.sun.grid.jgdi.configuration.MailReceiver)m_mailList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.MailReceiver attribute.
     *  @param amail  the com.sun.grid.jgdi.configuration.MailReceiver attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.MailReceiver attribute has been removed
     */
    public boolean removeMail(com.sun.grid.jgdi.configuration.MailReceiver amail) {
        initMail();
        return m_mailList.remove(amail);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.MailReceiver attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.MailReceiver attributes
     */
    public List< com.sun.grid.jgdi.configuration.MailReceiver > getMailList() {
        initMail();
        return Collections.unmodifiableList(m_mailList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.MailReceiver attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.MailReceiver attributes.
     */
    public int getMailCount() {
        if (m_mailList != null) {
            return m_mailList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.MailReceiver attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.MailReceiver attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.MailReceiver attribute
     */
    public com.sun.grid.jgdi.configuration.MailReceiver getMail(int index) {
        initMail();
        return (com.sun.grid.jgdi.configuration.MailReceiver)m_mailList.get(index);
    }
   
    /**
     *  Determine if the mail attribute is set
     *  @return <code>true</code> if the mail attribute is set
     */
    public boolean isSetMail () {
        return (m_mailList != null) && (!m_mailList.isEmpty());
    }
   

    // Attribute pe ------------------------------------------------
   
    /**
     *  Determine if the pe attribute is set
     *  @return <code>true</code> if the pe attribute is set
     */
    public boolean isSetPe() {
   
        return  (m_pe != null);

    }
   
    private java.lang.String m_pe;

    /**
     *   Set the pe attribute.
     *
     *   @param aPe  the new value for the  pe attribute
     */
    public void setPe(java.lang.String aPe) {   
        m_pe = aPe;

    }

    /**
     *  Get the value of the pe attribute.
     *  @return the value of the pe attribute
     */
    public java.lang.String getPe() {
        return m_pe;
    }


    // Attribute peRange ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.Range > m_peRangeList;
   
    private void initPeRange() {
        if (m_peRangeList == null) {
            m_peRangeList = new LinkedList< com.sun.grid.jgdi.configuration.Range >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.Range attribute.

     *   @param apeRange  the new com.sun.grid.jgdi.configuration.Range attribute
     */
    public void addPeRange(com.sun.grid.jgdi.configuration.Range apeRange) {   
        initPeRange();
        
        m_peRangeList.add(apeRange);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.Range attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.Range attribute
     *   @param apeRange  the new com.sun.grid.jgdi.configuration.Range attribute
     */
    public void setPeRange(int index, com.sun.grid.jgdi.configuration.Range apeRange) {
        initPeRange();
        m_peRangeList.set(index, apeRange);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.Range attributes.
     */
    public void removeAllPeRange() {
        if (m_peRangeList != null) {
            m_peRangeList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.Range attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.Range attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.Range attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.Range removePeRange(int index) {
        initPeRange();
        return (com.sun.grid.jgdi.configuration.Range)m_peRangeList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.Range attribute.
     *  @param apeRange  the com.sun.grid.jgdi.configuration.Range attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.Range attribute has been removed
     */
    public boolean removePeRange(com.sun.grid.jgdi.configuration.Range apeRange) {
        initPeRange();
        return m_peRangeList.remove(apeRange);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.Range attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.Range attributes
     */
    public List< com.sun.grid.jgdi.configuration.Range > getPeRangeList() {
        initPeRange();
        return Collections.unmodifiableList(m_peRangeList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.Range attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.Range attributes.
     */
    public int getPeRangeCount() {
        if (m_peRangeList != null) {
            return m_peRangeList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.Range attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.Range attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.Range attribute
     */
    public com.sun.grid.jgdi.configuration.Range getPeRange(int index) {
        initPeRange();
        return (com.sun.grid.jgdi.configuration.Range)m_peRangeList.get(index);
    }
   
    /**
     *  Determine if the peRange attribute is set
     *  @return <code>true</code> if the peRange attribute is set
     */
    public boolean isSetPeRange () {
        return (m_peRangeList != null) && (!m_peRangeList.isEmpty());
    }
   

    // Attribute masterHardQueueList ------------------------------------------------

    private List< java.lang.String > m_masterHardQueueList;
   
    private void initMasterHardQueue() {
        if (m_masterHardQueueList == null) {
            m_masterHardQueueList = new LinkedList< java.lang.String >();
        }
    }

    /**
     *   Add a java.lang.String attribute.

     *   @param amasterHardQueue  the new java.lang.String attribute
     */
    public void addMasterHardQueue(java.lang.String amasterHardQueue) {   
        initMasterHardQueue();
        
        m_masterHardQueueList.add(amasterHardQueue);
        
    }
   
   
    /**
     *   Set a java.lang.String attribute.
     *   @param index   index of the java.lang.String attribute
     *   @param amasterHardQueue  the new java.lang.String attribute
     */
    public void setMasterHardQueue(int index, java.lang.String amasterHardQueue) {
        initMasterHardQueue();
        m_masterHardQueueList.set(index, amasterHardQueue);
    }

    /**
     *  Remove all java.lang.String attributes.
     */
    public void removeAllMasterHardQueue() {
        if (m_masterHardQueueList != null) {
            m_masterHardQueueList.clear();
        }
    }

    /**
     *  Remote a java.lang.String attribute at an index.
     *  @param index  the index of the java.lang.String attribute which should be
     *                removed
     *  @return the removed java.lang.String attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public java.lang.String removeMasterHardQueue(int index) {
        initMasterHardQueue();
        return (java.lang.String)m_masterHardQueueList.remove(index);
    }

    /**
     *  Remote a specific java.lang.String attribute.
     *  @param amasterHardQueue  the java.lang.String attribute which should be
     *                         removed
     *  @return <code>true</code> if the java.lang.String attribute has been removed
     */
    public boolean removeMasterHardQueue(java.lang.String amasterHardQueue) {
        initMasterHardQueue();
        return m_masterHardQueueList.remove(amasterHardQueue);
    }
   
    /**
     *   Get a unmodifiable list of all java.lang.String attributes.
     *
     *   @return Unmodifiable list with all java.lang.String attributes
     */
    public List< java.lang.String > getMasterHardQueueList() {
        initMasterHardQueue();
        return Collections.unmodifiableList(m_masterHardQueueList);
    }

    /**
     *  Get the number of java.lang.String attributes.
     *
     *  @return The number of java.lang.String attributes.
     */
    public int getMasterHardQueueCount() {
        if (m_masterHardQueueList != null) {
            return m_masterHardQueueList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a java.lang.String attribute at an index.
     *  @param index  the index of the java.lang.String attribute which should be
     *                removed
     *  @return the java.lang.String attribute
     */
    public java.lang.String getMasterHardQueue(int index) {
        initMasterHardQueue();
        return (java.lang.String)m_masterHardQueueList.get(index);
    }
   
    /**
     *  Determine if the masterHardQueue attribute is set
     *  @return <code>true</code> if the masterHardQueue attribute is set
     */
    public boolean isSetMasterHardQueue () {
        return (m_masterHardQueueList != null) && (!m_masterHardQueueList.isEmpty());
    }
   

    // Attribute tgt ------------------------------------------------
   
    /**
     *  Determine if the tgt attribute is set
     *  @return <code>true</code> if the tgt attribute is set
     */
    public boolean isSetTgt() {
   
        return  (m_tgt != null);

    }
   
    private java.lang.String m_tgt;

    /**
     *   Set the tgt attribute.
     *
     *   @param aTgt  the new value for the  tgt attribute
     */
    public void setTgt(java.lang.String aTgt) {   
        m_tgt = aTgt;

    }

    /**
     *  Get the value of the tgt attribute.
     *  @return the value of the tgt attribute
     */
    public java.lang.String getTgt() {
        return m_tgt;
    }


    // Attribute cred ------------------------------------------------
   
    /**
     *  Determine if the cred attribute is set
     *  @return <code>true</code> if the cred attribute is set
     */
    public boolean isSetCred() {
   
        return  (m_cred != null);

    }
   
    private java.lang.String m_cred;

    /**
     *   Set the cred attribute.
     *
     *   @param aCred  the new value for the  cred attribute
     */
    public void setCred(java.lang.String aCred) {   
        m_cred = aCred;

    }

    /**
     *  Get the value of the cred attribute.
     *  @return the value of the cred attribute
     */
    public java.lang.String getCred() {
        return m_cred;
    }


    // Attribute jaStructure ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.Range > m_jaStructureList;
   
    private void initJaStructure() {
        if (m_jaStructureList == null) {
            m_jaStructureList = new LinkedList< com.sun.grid.jgdi.configuration.Range >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.Range attribute.

     *   @param ajaStructure  the new com.sun.grid.jgdi.configuration.Range attribute
     */
    public void addJaStructure(com.sun.grid.jgdi.configuration.Range ajaStructure) {   
        initJaStructure();
        
        m_jaStructureList.add(ajaStructure);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.Range attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.Range attribute
     *   @param ajaStructure  the new com.sun.grid.jgdi.configuration.Range attribute
     */
    public void setJaStructure(int index, com.sun.grid.jgdi.configuration.Range ajaStructure) {
        initJaStructure();
        m_jaStructureList.set(index, ajaStructure);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.Range attributes.
     */
    public void removeAllJaStructure() {
        if (m_jaStructureList != null) {
            m_jaStructureList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.Range attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.Range attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.Range attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.Range removeJaStructure(int index) {
        initJaStructure();
        return (com.sun.grid.jgdi.configuration.Range)m_jaStructureList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.Range attribute.
     *  @param ajaStructure  the com.sun.grid.jgdi.configuration.Range attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.Range attribute has been removed
     */
    public boolean removeJaStructure(com.sun.grid.jgdi.configuration.Range ajaStructure) {
        initJaStructure();
        return m_jaStructureList.remove(ajaStructure);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.Range attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.Range attributes
     */
    public List< com.sun.grid.jgdi.configuration.Range > getJaStructureList() {
        initJaStructure();
        return Collections.unmodifiableList(m_jaStructureList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.Range attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.Range attributes.
     */
    public int getJaStructureCount() {
        if (m_jaStructureList != null) {
            return m_jaStructureList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.Range attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.Range attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.Range attribute
     */
    public com.sun.grid.jgdi.configuration.Range getJaStructure(int index) {
        initJaStructure();
        return (com.sun.grid.jgdi.configuration.Range)m_jaStructureList.get(index);
    }
   
    /**
     *  Determine if the jaStructure attribute is set
     *  @return <code>true</code> if the jaStructure attribute is set
     */
    public boolean isSetJaStructure () {
        return (m_jaStructureList != null) && (!m_jaStructureList.isEmpty());
    }
   

    // Attribute jaNHIds ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.Range > m_jaNHIdsList;
   
    private void initJaNHIds() {
        if (m_jaNHIdsList == null) {
            m_jaNHIdsList = new LinkedList< com.sun.grid.jgdi.configuration.Range >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.Range attribute.

     *   @param ajaNHIds  the new com.sun.grid.jgdi.configuration.Range attribute
     */
    public void addJaNHIds(com.sun.grid.jgdi.configuration.Range ajaNHIds) {   
        initJaNHIds();
        
        m_jaNHIdsList.add(ajaNHIds);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.Range attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.Range attribute
     *   @param ajaNHIds  the new com.sun.grid.jgdi.configuration.Range attribute
     */
    public void setJaNHIds(int index, com.sun.grid.jgdi.configuration.Range ajaNHIds) {
        initJaNHIds();
        m_jaNHIdsList.set(index, ajaNHIds);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.Range attributes.
     */
    public void removeAllJaNHIds() {
        if (m_jaNHIdsList != null) {
            m_jaNHIdsList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.Range attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.Range attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.Range attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.Range removeJaNHIds(int index) {
        initJaNHIds();
        return (com.sun.grid.jgdi.configuration.Range)m_jaNHIdsList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.Range attribute.
     *  @param ajaNHIds  the com.sun.grid.jgdi.configuration.Range attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.Range attribute has been removed
     */
    public boolean removeJaNHIds(com.sun.grid.jgdi.configuration.Range ajaNHIds) {
        initJaNHIds();
        return m_jaNHIdsList.remove(ajaNHIds);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.Range attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.Range attributes
     */
    public List< com.sun.grid.jgdi.configuration.Range > getJaNHIdsList() {
        initJaNHIds();
        return Collections.unmodifiableList(m_jaNHIdsList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.Range attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.Range attributes.
     */
    public int getJaNHIdsCount() {
        if (m_jaNHIdsList != null) {
            return m_jaNHIdsList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.Range attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.Range attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.Range attribute
     */
    public com.sun.grid.jgdi.configuration.Range getJaNHIds(int index) {
        initJaNHIds();
        return (com.sun.grid.jgdi.configuration.Range)m_jaNHIdsList.get(index);
    }
   
    /**
     *  Determine if the jaNHIds attribute is set
     *  @return <code>true</code> if the jaNHIds attribute is set
     */
    public boolean isSetJaNHIds () {
        return (m_jaNHIdsList != null) && (!m_jaNHIdsList.isEmpty());
    }
   

    // Attribute jaUHIds ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.Range > m_jaUHIdsList;
   
    private void initJaUHIds() {
        if (m_jaUHIdsList == null) {
            m_jaUHIdsList = new LinkedList< com.sun.grid.jgdi.configuration.Range >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.Range attribute.

     *   @param ajaUHIds  the new com.sun.grid.jgdi.configuration.Range attribute
     */
    public void addJaUHIds(com.sun.grid.jgdi.configuration.Range ajaUHIds) {   
        initJaUHIds();
        
        m_jaUHIdsList.add(ajaUHIds);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.Range attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.Range attribute
     *   @param ajaUHIds  the new com.sun.grid.jgdi.configuration.Range attribute
     */
    public void setJaUHIds(int index, com.sun.grid.jgdi.configuration.Range ajaUHIds) {
        initJaUHIds();
        m_jaUHIdsList.set(index, ajaUHIds);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.Range attributes.
     */
    public void removeAllJaUHIds() {
        if (m_jaUHIdsList != null) {
            m_jaUHIdsList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.Range attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.Range attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.Range attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.Range removeJaUHIds(int index) {
        initJaUHIds();
        return (com.sun.grid.jgdi.configuration.Range)m_jaUHIdsList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.Range attribute.
     *  @param ajaUHIds  the com.sun.grid.jgdi.configuration.Range attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.Range attribute has been removed
     */
    public boolean removeJaUHIds(com.sun.grid.jgdi.configuration.Range ajaUHIds) {
        initJaUHIds();
        return m_jaUHIdsList.remove(ajaUHIds);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.Range attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.Range attributes
     */
    public List< com.sun.grid.jgdi.configuration.Range > getJaUHIdsList() {
        initJaUHIds();
        return Collections.unmodifiableList(m_jaUHIdsList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.Range attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.Range attributes.
     */
    public int getJaUHIdsCount() {
        if (m_jaUHIdsList != null) {
            return m_jaUHIdsList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.Range attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.Range attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.Range attribute
     */
    public com.sun.grid.jgdi.configuration.Range getJaUHIds(int index) {
        initJaUHIds();
        return (com.sun.grid.jgdi.configuration.Range)m_jaUHIdsList.get(index);
    }
   
    /**
     *  Determine if the jaUHIds attribute is set
     *  @return <code>true</code> if the jaUHIds attribute is set
     */
    public boolean isSetJaUHIds () {
        return (m_jaUHIdsList != null) && (!m_jaUHIdsList.isEmpty());
    }
   

    // Attribute jaSHIds ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.Range > m_jaSHIdsList;
   
    private void initJaSHIds() {
        if (m_jaSHIdsList == null) {
            m_jaSHIdsList = new LinkedList< com.sun.grid.jgdi.configuration.Range >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.Range attribute.

     *   @param ajaSHIds  the new com.sun.grid.jgdi.configuration.Range attribute
     */
    public void addJaSHIds(com.sun.grid.jgdi.configuration.Range ajaSHIds) {   
        initJaSHIds();
        
        m_jaSHIdsList.add(ajaSHIds);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.Range attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.Range attribute
     *   @param ajaSHIds  the new com.sun.grid.jgdi.configuration.Range attribute
     */
    public void setJaSHIds(int index, com.sun.grid.jgdi.configuration.Range ajaSHIds) {
        initJaSHIds();
        m_jaSHIdsList.set(index, ajaSHIds);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.Range attributes.
     */
    public void removeAllJaSHIds() {
        if (m_jaSHIdsList != null) {
            m_jaSHIdsList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.Range attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.Range attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.Range attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.Range removeJaSHIds(int index) {
        initJaSHIds();
        return (com.sun.grid.jgdi.configuration.Range)m_jaSHIdsList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.Range attribute.
     *  @param ajaSHIds  the com.sun.grid.jgdi.configuration.Range attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.Range attribute has been removed
     */
    public boolean removeJaSHIds(com.sun.grid.jgdi.configuration.Range ajaSHIds) {
        initJaSHIds();
        return m_jaSHIdsList.remove(ajaSHIds);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.Range attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.Range attributes
     */
    public List< com.sun.grid.jgdi.configuration.Range > getJaSHIdsList() {
        initJaSHIds();
        return Collections.unmodifiableList(m_jaSHIdsList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.Range attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.Range attributes.
     */
    public int getJaSHIdsCount() {
        if (m_jaSHIdsList != null) {
            return m_jaSHIdsList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.Range attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.Range attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.Range attribute
     */
    public com.sun.grid.jgdi.configuration.Range getJaSHIds(int index) {
        initJaSHIds();
        return (com.sun.grid.jgdi.configuration.Range)m_jaSHIdsList.get(index);
    }
   
    /**
     *  Determine if the jaSHIds attribute is set
     *  @return <code>true</code> if the jaSHIds attribute is set
     */
    public boolean isSetJaSHIds () {
        return (m_jaSHIdsList != null) && (!m_jaSHIdsList.isEmpty());
    }
   

    // Attribute jaOHIds ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.Range > m_jaOHIdsList;
   
    private void initJaOHIds() {
        if (m_jaOHIdsList == null) {
            m_jaOHIdsList = new LinkedList< com.sun.grid.jgdi.configuration.Range >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.Range attribute.

     *   @param ajaOHIds  the new com.sun.grid.jgdi.configuration.Range attribute
     */
    public void addJaOHIds(com.sun.grid.jgdi.configuration.Range ajaOHIds) {   
        initJaOHIds();
        
        m_jaOHIdsList.add(ajaOHIds);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.Range attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.Range attribute
     *   @param ajaOHIds  the new com.sun.grid.jgdi.configuration.Range attribute
     */
    public void setJaOHIds(int index, com.sun.grid.jgdi.configuration.Range ajaOHIds) {
        initJaOHIds();
        m_jaOHIdsList.set(index, ajaOHIds);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.Range attributes.
     */
    public void removeAllJaOHIds() {
        if (m_jaOHIdsList != null) {
            m_jaOHIdsList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.Range attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.Range attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.Range attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.Range removeJaOHIds(int index) {
        initJaOHIds();
        return (com.sun.grid.jgdi.configuration.Range)m_jaOHIdsList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.Range attribute.
     *  @param ajaOHIds  the com.sun.grid.jgdi.configuration.Range attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.Range attribute has been removed
     */
    public boolean removeJaOHIds(com.sun.grid.jgdi.configuration.Range ajaOHIds) {
        initJaOHIds();
        return m_jaOHIdsList.remove(ajaOHIds);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.Range attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.Range attributes
     */
    public List< com.sun.grid.jgdi.configuration.Range > getJaOHIdsList() {
        initJaOHIds();
        return Collections.unmodifiableList(m_jaOHIdsList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.Range attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.Range attributes.
     */
    public int getJaOHIdsCount() {
        if (m_jaOHIdsList != null) {
            return m_jaOHIdsList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.Range attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.Range attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.Range attribute
     */
    public com.sun.grid.jgdi.configuration.Range getJaOHIds(int index) {
        initJaOHIds();
        return (com.sun.grid.jgdi.configuration.Range)m_jaOHIdsList.get(index);
    }
   
    /**
     *  Determine if the jaOHIds attribute is set
     *  @return <code>true</code> if the jaOHIds attribute is set
     */
    public boolean isSetJaOHIds () {
        return (m_jaOHIdsList != null) && (!m_jaOHIdsList.isEmpty());
    }
   

    // Attribute jaAHIds ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.Range > m_jaAHIdsList;
   
    private void initJaAHIds() {
        if (m_jaAHIdsList == null) {
            m_jaAHIdsList = new LinkedList< com.sun.grid.jgdi.configuration.Range >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.Range attribute.

     *   @param ajaAHIds  the new com.sun.grid.jgdi.configuration.Range attribute
     */
    public void addJaAHIds(com.sun.grid.jgdi.configuration.Range ajaAHIds) {   
        initJaAHIds();
        
        m_jaAHIdsList.add(ajaAHIds);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.Range attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.Range attribute
     *   @param ajaAHIds  the new com.sun.grid.jgdi.configuration.Range attribute
     */
    public void setJaAHIds(int index, com.sun.grid.jgdi.configuration.Range ajaAHIds) {
        initJaAHIds();
        m_jaAHIdsList.set(index, ajaAHIds);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.Range attributes.
     */
    public void removeAllJaAHIds() {
        if (m_jaAHIdsList != null) {
            m_jaAHIdsList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.Range attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.Range attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.Range attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.Range removeJaAHIds(int index) {
        initJaAHIds();
        return (com.sun.grid.jgdi.configuration.Range)m_jaAHIdsList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.Range attribute.
     *  @param ajaAHIds  the com.sun.grid.jgdi.configuration.Range attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.Range attribute has been removed
     */
    public boolean removeJaAHIds(com.sun.grid.jgdi.configuration.Range ajaAHIds) {
        initJaAHIds();
        return m_jaAHIdsList.remove(ajaAHIds);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.Range attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.Range attributes
     */
    public List< com.sun.grid.jgdi.configuration.Range > getJaAHIdsList() {
        initJaAHIds();
        return Collections.unmodifiableList(m_jaAHIdsList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.Range attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.Range attributes.
     */
    public int getJaAHIdsCount() {
        if (m_jaAHIdsList != null) {
            return m_jaAHIdsList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.Range attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.Range attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.Range attribute
     */
    public com.sun.grid.jgdi.configuration.Range getJaAHIds(int index) {
        initJaAHIds();
        return (com.sun.grid.jgdi.configuration.Range)m_jaAHIdsList.get(index);
    }
   
    /**
     *  Determine if the jaAHIds attribute is set
     *  @return <code>true</code> if the jaAHIds attribute is set
     */
    public boolean isSetJaAHIds () {
        return (m_jaAHIdsList != null) && (!m_jaAHIdsList.isEmpty());
    }
   

    // Attribute jaTemplate ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.JobTask > m_jaTemplateList;
   
    private void initJaTemplate() {
        if (m_jaTemplateList == null) {
            m_jaTemplateList = new LinkedList< com.sun.grid.jgdi.configuration.JobTask >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.JobTask attribute.

     *   @param ajaTemplate  the new com.sun.grid.jgdi.configuration.JobTask attribute
     */
    public void addJaTemplate(com.sun.grid.jgdi.configuration.JobTask ajaTemplate) {   
        initJaTemplate();
        
        m_jaTemplateList.add(ajaTemplate);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.JobTask attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.JobTask attribute
     *   @param ajaTemplate  the new com.sun.grid.jgdi.configuration.JobTask attribute
     */
    public void setJaTemplate(int index, com.sun.grid.jgdi.configuration.JobTask ajaTemplate) {
        initJaTemplate();
        m_jaTemplateList.set(index, ajaTemplate);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.JobTask attributes.
     */
    public void removeAllJaTemplate() {
        if (m_jaTemplateList != null) {
            m_jaTemplateList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.JobTask attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.JobTask attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.JobTask attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.JobTask removeJaTemplate(int index) {
        initJaTemplate();
        return (com.sun.grid.jgdi.configuration.JobTask)m_jaTemplateList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.JobTask attribute.
     *  @param ajaTemplate  the com.sun.grid.jgdi.configuration.JobTask attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.JobTask attribute has been removed
     */
    public boolean removeJaTemplate(com.sun.grid.jgdi.configuration.JobTask ajaTemplate) {
        initJaTemplate();
        return m_jaTemplateList.remove(ajaTemplate);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.JobTask attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.JobTask attributes
     */
    public List< com.sun.grid.jgdi.configuration.JobTask > getJaTemplateList() {
        initJaTemplate();
        return Collections.unmodifiableList(m_jaTemplateList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.JobTask attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.JobTask attributes.
     */
    public int getJaTemplateCount() {
        if (m_jaTemplateList != null) {
            return m_jaTemplateList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.JobTask attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.JobTask attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.JobTask attribute
     */
    public com.sun.grid.jgdi.configuration.JobTask getJaTemplate(int index) {
        initJaTemplate();
        return (com.sun.grid.jgdi.configuration.JobTask)m_jaTemplateList.get(index);
    }
   
    /**
     *  Determine if the jaTemplate attribute is set
     *  @return <code>true</code> if the jaTemplate attribute is set
     */
    public boolean isSetJaTemplate () {
        return (m_jaTemplateList != null) && (!m_jaTemplateList.isEmpty());
    }
   

    // Attribute jaTasks ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.JobTask > m_jaTasksList;
   
    private void initJaTasks() {
        if (m_jaTasksList == null) {
            m_jaTasksList = new LinkedList< com.sun.grid.jgdi.configuration.JobTask >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.JobTask attribute.

     *   @param ajaTasks  the new com.sun.grid.jgdi.configuration.JobTask attribute
     */
    public void addJaTasks(com.sun.grid.jgdi.configuration.JobTask ajaTasks) {   
        initJaTasks();
        
        m_jaTasksList.add(ajaTasks);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.JobTask attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.JobTask attribute
     *   @param ajaTasks  the new com.sun.grid.jgdi.configuration.JobTask attribute
     */
    public void setJaTasks(int index, com.sun.grid.jgdi.configuration.JobTask ajaTasks) {
        initJaTasks();
        m_jaTasksList.set(index, ajaTasks);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.JobTask attributes.
     */
    public void removeAllJaTasks() {
        if (m_jaTasksList != null) {
            m_jaTasksList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.JobTask attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.JobTask attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.JobTask attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.JobTask removeJaTasks(int index) {
        initJaTasks();
        return (com.sun.grid.jgdi.configuration.JobTask)m_jaTasksList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.JobTask attribute.
     *  @param ajaTasks  the com.sun.grid.jgdi.configuration.JobTask attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.JobTask attribute has been removed
     */
    public boolean removeJaTasks(com.sun.grid.jgdi.configuration.JobTask ajaTasks) {
        initJaTasks();
        return m_jaTasksList.remove(ajaTasks);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.JobTask attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.JobTask attributes
     */
    public List< com.sun.grid.jgdi.configuration.JobTask > getJaTasksList() {
        initJaTasks();
        return Collections.unmodifiableList(m_jaTasksList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.JobTask attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.JobTask attributes.
     */
    public int getJaTasksCount() {
        if (m_jaTasksList != null) {
            return m_jaTasksList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.JobTask attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.JobTask attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.JobTask attribute
     */
    public com.sun.grid.jgdi.configuration.JobTask getJaTasks(int index) {
        initJaTasks();
        return (com.sun.grid.jgdi.configuration.JobTask)m_jaTasksList.get(index);
    }
   
    /**
     *  Determine if the jaTasks attribute is set
     *  @return <code>true</code> if the jaTasks attribute is set
     */
    public boolean isSetJaTasks () {
        return (m_jaTasksList != null) && (!m_jaTasksList.isEmpty());
    }
   

    // Attribute host ------------------------------------------------
   
    /**
     *  Determine if the host attribute is set
     *  @return <code>true</code> if the host attribute is set
     */
    public boolean isSetHost() {
   
        return  (m_host != null);

    }
   
    private java.lang.String m_host;

    /**
     *   Set the host attribute.
     *
     *   @param aHost  the new value for the  host attribute
     */
    public void setHost(java.lang.String aHost) {   
        m_host = aHost;

    }

    /**
     *  Get the value of the host attribute.
     *  @return the value of the host attribute
     */
    public java.lang.String getHost() {
        return m_host;
    }


    // Attribute userList ------------------------------------------------

    private List< java.lang.String > m_userList;
   
    private void initUser() {
        if (m_userList == null) {
            m_userList = new LinkedList< java.lang.String >();
        }
    }

    /**
     *   Add a java.lang.String attribute.

     *   @param auser  the new java.lang.String attribute
     */
    public void addUser(java.lang.String auser) {   
        initUser();
        
        m_userList.add(auser);
        
    }
   
   
    /**
     *   Set a java.lang.String attribute.
     *   @param index   index of the java.lang.String attribute
     *   @param auser  the new java.lang.String attribute
     */
    public void setUser(int index, java.lang.String auser) {
        initUser();
        m_userList.set(index, auser);
    }

    /**
     *  Remove all java.lang.String attributes.
     */
    public void removeAllUser() {
        if (m_userList != null) {
            m_userList.clear();
        }
    }

    /**
     *  Remote a java.lang.String attribute at an index.
     *  @param index  the index of the java.lang.String attribute which should be
     *                removed
     *  @return the removed java.lang.String attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public java.lang.String removeUser(int index) {
        initUser();
        return (java.lang.String)m_userList.remove(index);
    }

    /**
     *  Remote a specific java.lang.String attribute.
     *  @param auser  the java.lang.String attribute which should be
     *                         removed
     *  @return <code>true</code> if the java.lang.String attribute has been removed
     */
    public boolean removeUser(java.lang.String auser) {
        initUser();
        return m_userList.remove(auser);
    }
   
    /**
     *   Get a unmodifiable list of all java.lang.String attributes.
     *
     *   @return Unmodifiable list with all java.lang.String attributes
     */
    public List< java.lang.String > getUserList() {
        initUser();
        return Collections.unmodifiableList(m_userList);
    }

    /**
     *  Get the number of java.lang.String attributes.
     *
     *  @return The number of java.lang.String attributes.
     */
    public int getUserCount() {
        if (m_userList != null) {
            return m_userList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a java.lang.String attribute at an index.
     *  @param index  the index of the java.lang.String attribute which should be
     *                removed
     *  @return the java.lang.String attribute
     */
    public java.lang.String getUser(int index) {
        initUser();
        return (java.lang.String)m_userList.get(index);
    }
   
    /**
     *  Determine if the user attribute is set
     *  @return <code>true</code> if the user attribute is set
     */
    public boolean isSetUser () {
        return (m_userList != null) && (!m_userList.isEmpty());
    }
   

    // Attribute verifySuitableQueues ------------------------------------------------

    private boolean isVerifySuitableQueuesSet;
   
    /**
     *  Determine if the verifySuitableQueues attribute is set
     *  @return <code>true</code> if the verifySuitableQueues attribute is set
     */
    public boolean isSetVerifySuitableQueues() {

        return isVerifySuitableQueuesSet;

    }
   
    private int m_verifySuitableQueues;

    /**
     *   Set the verifySuitableQueues attribute.
     *
     *   @param aVerifySuitableQueues  the new value for the  verifySuitableQueues attribute
     */
    public void setVerifySuitableQueues(int aVerifySuitableQueues) {   
        m_verifySuitableQueues = aVerifySuitableQueues;

        isVerifySuitableQueuesSet = true;

    }

    /**
     *  Get the value of the verifySuitableQueues attribute.
     *  @return the value of the verifySuitableQueues attribute
     */
    public int getVerifySuitableQueues() {
        return m_verifySuitableQueues;
    }


    // Attribute overrideTickets ------------------------------------------------

    private boolean isOverrideTicketsSet;
   
    /**
     *  Determine if the overrideTickets attribute is set
     *  @return <code>true</code> if the overrideTickets attribute is set
     */
    public boolean isSetOverrideTickets() {

        return isOverrideTicketsSet;

    }
   
    private int m_overrideTickets;

    /**
     *   Set the overrideTickets attribute.
     *
     *   @param aOverrideTickets  the new value for the  overrideTickets attribute
     */
    public void setOverrideTickets(int aOverrideTickets) {   
        m_overrideTickets = aOverrideTickets;

        isOverrideTicketsSet = true;

    }

    /**
     *  Get the value of the overrideTickets attribute.
     *  @return the value of the overrideTickets attribute
     */
    public int getOverrideTickets() {
        return m_overrideTickets;
    }


    // Attribute pathAliases ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.PathAlias > m_pathAliasesList;
   
    private void initPathAliases() {
        if (m_pathAliasesList == null) {
            m_pathAliasesList = new LinkedList< com.sun.grid.jgdi.configuration.PathAlias >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.PathAlias attribute.

     *   @param apathAliases  the new com.sun.grid.jgdi.configuration.PathAlias attribute
     */
    public void addPathAliases(com.sun.grid.jgdi.configuration.PathAlias apathAliases) {   
        initPathAliases();
        
        m_pathAliasesList.add(apathAliases);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.PathAlias attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.PathAlias attribute
     *   @param apathAliases  the new com.sun.grid.jgdi.configuration.PathAlias attribute
     */
    public void setPathAliases(int index, com.sun.grid.jgdi.configuration.PathAlias apathAliases) {
        initPathAliases();
        m_pathAliasesList.set(index, apathAliases);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.PathAlias attributes.
     */
    public void removeAllPathAliases() {
        if (m_pathAliasesList != null) {
            m_pathAliasesList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.PathAlias attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.PathAlias attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.PathAlias attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.PathAlias removePathAliases(int index) {
        initPathAliases();
        return (com.sun.grid.jgdi.configuration.PathAlias)m_pathAliasesList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.PathAlias attribute.
     *  @param apathAliases  the com.sun.grid.jgdi.configuration.PathAlias attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.PathAlias attribute has been removed
     */
    public boolean removePathAliases(com.sun.grid.jgdi.configuration.PathAlias apathAliases) {
        initPathAliases();
        return m_pathAliasesList.remove(apathAliases);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.PathAlias attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.PathAlias attributes
     */
    public List< com.sun.grid.jgdi.configuration.PathAlias > getPathAliasesList() {
        initPathAliases();
        return Collections.unmodifiableList(m_pathAliasesList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.PathAlias attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.PathAlias attributes.
     */
    public int getPathAliasesCount() {
        if (m_pathAliasesList != null) {
            return m_pathAliasesList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.PathAlias attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.PathAlias attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.PathAlias attribute
     */
    public com.sun.grid.jgdi.configuration.PathAlias getPathAliases(int index) {
        initPathAliases();
        return (com.sun.grid.jgdi.configuration.PathAlias)m_pathAliasesList.get(index);
    }
   
    /**
     *  Determine if the pathAliases attribute is set
     *  @return <code>true</code> if the pathAliases attribute is set
     */
    public boolean isSetPathAliases () {
        return (m_pathAliasesList != null) && (!m_pathAliasesList.isEmpty());
    }
   

    // Attribute urg ------------------------------------------------

    private boolean isUrgSet;
   
    /**
     *  Determine if the urg attribute is set
     *  @return <code>true</code> if the urg attribute is set
     */
    public boolean isSetUrg() {

        return isUrgSet;

    }
   
    private double m_urg;

    /**
     *   Set the urg attribute.
     *
     *   @param aUrg  the new value for the  urg attribute
     */
    public void setUrg(double aUrg) {   
        m_urg = aUrg;

        isUrgSet = true;

    }

    /**
     *  Get the value of the urg attribute.
     *  @return the value of the urg attribute
     */
    public double getUrg() {
        return m_urg;
    }


    // Attribute nurg ------------------------------------------------

    private boolean isNurgSet;
   
    /**
     *  Determine if the nurg attribute is set
     *  @return <code>true</code> if the nurg attribute is set
     */
    public boolean isSetNurg() {

        return isNurgSet;

    }
   
    private double m_nurg;

    /**
     *   Set the nurg attribute.
     *
     *   @param aNurg  the new value for the  nurg attribute
     */
    public void setNurg(double aNurg) {   
        m_nurg = aNurg;

        isNurgSet = true;

    }

    /**
     *  Get the value of the nurg attribute.
     *  @return the value of the nurg attribute
     */
    public double getNurg() {
        return m_nurg;
    }


    // Attribute nppri ------------------------------------------------

    private boolean isNppriSet;
   
    /**
     *  Determine if the nppri attribute is set
     *  @return <code>true</code> if the nppri attribute is set
     */
    public boolean isSetNppri() {

        return isNppriSet;

    }
   
    private double m_nppri;

    /**
     *   Set the nppri attribute.
     *
     *   @param aNppri  the new value for the  nppri attribute
     */
    public void setNppri(double aNppri) {   
        m_nppri = aNppri;

        isNppriSet = true;

    }

    /**
     *  Get the value of the nppri attribute.
     *  @return the value of the nppri attribute
     */
    public double getNppri() {
        return m_nppri;
    }


    // Attribute rrcontr ------------------------------------------------

    private boolean isRrcontrSet;
   
    /**
     *  Determine if the rrcontr attribute is set
     *  @return <code>true</code> if the rrcontr attribute is set
     */
    public boolean isSetRrcontr() {

        return isRrcontrSet;

    }
   
    private double m_rrcontr;

    /**
     *   Set the rrcontr attribute.
     *
     *   @param aRrcontr  the new value for the  rrcontr attribute
     */
    public void setRrcontr(double aRrcontr) {   
        m_rrcontr = aRrcontr;

        isRrcontrSet = true;

    }

    /**
     *  Get the value of the rrcontr attribute.
     *  @return the value of the rrcontr attribute
     */
    public double getRrcontr() {
        return m_rrcontr;
    }


    // Attribute dlcontr ------------------------------------------------

    private boolean isDlcontrSet;
   
    /**
     *  Determine if the dlcontr attribute is set
     *  @return <code>true</code> if the dlcontr attribute is set
     */
    public boolean isSetDlcontr() {

        return isDlcontrSet;

    }
   
    private double m_dlcontr;

    /**
     *   Set the dlcontr attribute.
     *
     *   @param aDlcontr  the new value for the  dlcontr attribute
     */
    public void setDlcontr(double aDlcontr) {   
        m_dlcontr = aDlcontr;

        isDlcontrSet = true;

    }

    /**
     *  Get the value of the dlcontr attribute.
     *  @return the value of the dlcontr attribute
     */
    public double getDlcontr() {
        return m_dlcontr;
    }


    // Attribute wtcontr ------------------------------------------------

    private boolean isWtcontrSet;
   
    /**
     *  Determine if the wtcontr attribute is set
     *  @return <code>true</code> if the wtcontr attribute is set
     */
    public boolean isSetWtcontr() {

        return isWtcontrSet;

    }
   
    private double m_wtcontr;

    /**
     *   Set the wtcontr attribute.
     *
     *   @param aWtcontr  the new value for the  wtcontr attribute
     */
    public void setWtcontr(double aWtcontr) {   
        m_wtcontr = aWtcontr;

        isWtcontrSet = true;

    }

    /**
     *  Get the value of the wtcontr attribute.
     *  @return the value of the wtcontr attribute
     */
    public double getWtcontr() {
        return m_wtcontr;
    }


    // Attribute ar ------------------------------------------------

    private boolean isArSet;
   
    /**
     *  Determine if the ar attribute is set
     *  @return <code>true</code> if the ar attribute is set
     */
    public boolean isSetAr() {

        return isArSet;

    }
   
    private int m_ar;

    /**
     *   Set the ar attribute.
     *
     *   @param aAr  the new value for the  ar attribute
     */
    public void setAr(int aAr) {   
        m_ar = aAr;

        isArSet = true;

    }

    /**
     *  Get the value of the ar attribute.
     *  @return the value of the ar attribute
     */
    public int getAr() {
        return m_ar;
    }


    // Attribute pty ------------------------------------------------

    private boolean isPtySet;
   
    /**
     *  Determine if the pty attribute is set
     *  @return <code>true</code> if the pty attribute is set
     */
    public boolean isSetPty() {

        return isPtySet;

    }
   
    private int m_pty;

    /**
     *   Set the pty attribute.
     *
     *   @param aPty  the new value for the  pty attribute
     */
    public void setPty(int aPty) {   
        m_pty = aPty;

        isPtySet = true;

    }

    /**
     *  Get the value of the pty attribute.
     *  @return the value of the pty attribute
     */
    public int getPty() {
        return m_pty;
    }


    // Attribute jaTaskConcurrency ------------------------------------------------

    private boolean isJaTaskConcurrencySet;
   
    /**
     *  Determine if the jaTaskConcurrency attribute is set
     *  @return <code>true</code> if the jaTaskConcurrency attribute is set
     */
    public boolean isSetJaTaskConcurrency() {

        return isJaTaskConcurrencySet;

    }
   
    private int m_jaTaskConcurrency;

    /**
     *   Set the jaTaskConcurrency attribute.
     *
     *   @param aJaTaskConcurrency  the new value for the  jaTaskConcurrency attribute
     */
    public void setJaTaskConcurrency(int aJaTaskConcurrency) {   
        m_jaTaskConcurrency = aJaTaskConcurrency;

        isJaTaskConcurrencySet = true;

    }

    /**
     *  Get the value of the jaTaskConcurrency attribute.
     *  @return the value of the jaTaskConcurrency attribute
     */
    public int getJaTaskConcurrency() {
        return m_jaTaskConcurrency;
    }


    // Attribute binding ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.Binding > m_bindingList;
   
    private void initBinding() {
        if (m_bindingList == null) {
            m_bindingList = new LinkedList< com.sun.grid.jgdi.configuration.Binding >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.Binding attribute.

     *   @param abinding  the new com.sun.grid.jgdi.configuration.Binding attribute
     */
    public void addBinding(com.sun.grid.jgdi.configuration.Binding abinding) {   
        initBinding();
        
        m_bindingList.add(abinding);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.Binding attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.Binding attribute
     *   @param abinding  the new com.sun.grid.jgdi.configuration.Binding attribute
     */
    public void setBinding(int index, com.sun.grid.jgdi.configuration.Binding abinding) {
        initBinding();
        m_bindingList.set(index, abinding);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.Binding attributes.
     */
    public void removeAllBinding() {
        if (m_bindingList != null) {
            m_bindingList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.Binding attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.Binding attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.Binding attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.Binding removeBinding(int index) {
        initBinding();
        return (com.sun.grid.jgdi.configuration.Binding)m_bindingList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.Binding attribute.
     *  @param abinding  the com.sun.grid.jgdi.configuration.Binding attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.Binding attribute has been removed
     */
    public boolean removeBinding(com.sun.grid.jgdi.configuration.Binding abinding) {
        initBinding();
        return m_bindingList.remove(abinding);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.Binding attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.Binding attributes
     */
    public List< com.sun.grid.jgdi.configuration.Binding > getBindingList() {
        initBinding();
        return Collections.unmodifiableList(m_bindingList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.Binding attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.Binding attributes.
     */
    public int getBindingCount() {
        if (m_bindingList != null) {
            return m_bindingList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.Binding attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.Binding attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.Binding attribute
     */
    public com.sun.grid.jgdi.configuration.Binding getBinding(int index) {
        initBinding();
        return (com.sun.grid.jgdi.configuration.Binding)m_bindingList.get(index);
    }
   
    /**
     *  Determine if the binding attribute is set
     *  @return <code>true</code> if the binding attribute is set
     */
    public boolean isSetBinding () {
        return (m_bindingList != null) && (!m_bindingList.isEmpty());
    }
   



    /**
     *  Is the primary key information equal to the primary key information
     *  of <code>obj</code>.
     *
     *  @param obj   the compared object
     *  @return <code>true</code> if the primary key information is equal to the
     *          primary key informations of <code>obj</code>.
     */
    public boolean equals(Object obj) {

        return (obj instanceof JobImpl && getJobNumber() == ((com.sun.grid.jgdi.configuration.Job)obj).getJobNumber());

    }

    
    
    public boolean equalsCompletely(Object obj) {
        Logger logger = Logger.getLogger(getClass().getName());
        if (obj instanceof  JobImpl) {
            com.sun.grid.jgdi.configuration.Job obj1 = (com.sun.grid.jgdi.configuration.Job)obj;

            {
                int value1 = getJobNumber();
                int value2 = obj1.getJobNumber();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes JB_job_number are not equal");
                }
                return false;
            }

            }

            {
                java.lang.String value1 = getJobName();
                java.lang.String value2 = obj1.getJobName();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute JB_job_name of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes JB_job_name are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                int jidRequestCount = getJidRequestCount();
                if (jidRequestCount != obj1.getJidRequestCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists jidRequest has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < jidRequestCount; i++) {
                    com.sun.grid.jgdi.configuration.JobReference value1 = getJidRequest(i);
                    com.sun.grid.jgdi.configuration.JobReference value2 = obj1.getJidRequest(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute JB_jid_request_list of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

                } // end of for
            }

            {
                int jaAdRequestCount = getJaAdRequestCount();
                if (jaAdRequestCount != obj1.getJaAdRequestCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists jaAdRequest has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < jaAdRequestCount; i++) {
                    com.sun.grid.jgdi.configuration.JobReference value1 = getJaAdRequest(i);
                    com.sun.grid.jgdi.configuration.JobReference value2 = obj1.getJaAdRequest(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute JB_ja_ad_request_list of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

                } // end of for
            }

            {
                java.lang.String value1 = getSession();
                java.lang.String value2 = obj1.getSession();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute JB_session of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes JB_session are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                java.lang.String value1 = getProject();
                java.lang.String value2 = obj1.getProject();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute JB_project of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes JB_project are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                java.lang.String value1 = getDepartment();
                java.lang.String value2 = obj1.getDepartment();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute JB_department of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes JB_department are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                java.lang.String value1 = getDirectivePrefix();
                java.lang.String value2 = obj1.getDirectivePrefix();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute JB_directive_prefix of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes JB_directive_prefix are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                java.lang.String value1 = getExecFile();
                java.lang.String value2 = obj1.getExecFile();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute JB_exec_file of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes JB_exec_file are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                java.lang.String value1 = getScriptFile();
                java.lang.String value2 = obj1.getScriptFile();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute JB_script_file of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes JB_script_file are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                int value1 = getScriptSize();
                int value2 = obj1.getScriptSize();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes JB_script_size are not equal");
                }
                return false;
            }

            }

            {
                java.lang.String value1 = getScriptPtr();
                java.lang.String value2 = obj1.getScriptPtr();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute JB_script_ptr of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes JB_script_ptr are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                int value1 = getExecutionTime();
                int value2 = obj1.getExecutionTime();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes JB_execution_time are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getDeadline();
                int value2 = obj1.getDeadline();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes JB_deadline are not equal");
                }
                return false;
            }

            }

            {
                java.lang.String value1 = getAccount();
                java.lang.String value2 = obj1.getAccount();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute JB_account of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes JB_account are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                java.lang.String value1 = getCwd();
                java.lang.String value2 = obj1.getCwd();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute JB_cwd of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes JB_cwd are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                boolean value1 = isNotify();
                boolean value2 = obj1.isNotify();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes JB_notify are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getType();
                int value2 = obj1.getType();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes JB_type are not equal");
                }
                return false;
            }

            }

            {
                boolean value1 = isReserve();
                boolean value2 = obj1.isReserve();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes JB_reserve are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getPriority();
                int value2 = obj1.getPriority();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes JB_priority are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getJobshare();
                int value2 = obj1.getJobshare();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes JB_jobshare are not equal");
                }
                return false;
            }

            }

            {
                int shellCount = getShellCount();
                if (shellCount != obj1.getShellCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists shell has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < shellCount; i++) {
                    com.sun.grid.jgdi.configuration.PathName value1 = getShell(i);
                    com.sun.grid.jgdi.configuration.PathName value2 = obj1.getShell(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute JB_shell_list of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

                } // end of for
            }
           
            {
                Set envSet1 = getEnvKeys();
                Set envSet2 = obj1.getEnvKeys();
                if (envSet1.size() != envSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("maps env has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getEnvKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    java.lang.String value1 = getEnv(key);
                    java.lang.String value2 = obj1.getEnv(key);             

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute VA_value of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes VA_value are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

                }
            }
           
            {
                Set contextSet1 = getContextKeys();
                Set contextSet2 = obj1.getContextKeys();
                if (contextSet1.size() != contextSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("maps context has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getContextKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    java.lang.String value1 = getContext(key);
                    java.lang.String value2 = obj1.getContext(key);             

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute VA_value of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes VA_value are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

                }
            }

            {
                int jobArgsCount = getJobArgsCount();
                if (jobArgsCount != obj1.getJobArgsCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists jobArgs has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < jobArgsCount; i++) {
                    java.lang.String value1 = getJobArgs(i);
                    java.lang.String value2 = obj1.getJobArgs(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute JB_job_args of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes JB_job_args are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

                } // end of for
            }

            {
                java.lang.String value1 = getCheckpointName();
                java.lang.String value2 = obj1.getCheckpointName();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute JB_checkpoint_name of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes JB_checkpoint_name are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                int value1 = getRestart();
                int value2 = obj1.getRestart();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes JB_restart are not equal");
                }
                return false;
            }

            }

            {
                int stdoutPathCount = getStdoutPathCount();
                if (stdoutPathCount != obj1.getStdoutPathCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists stdoutPath has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < stdoutPathCount; i++) {
                    com.sun.grid.jgdi.configuration.PathName value1 = getStdoutPath(i);
                    com.sun.grid.jgdi.configuration.PathName value2 = obj1.getStdoutPath(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute JB_stdout_path_list of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

                } // end of for
            }

            {
                int stderrPathCount = getStderrPathCount();
                if (stderrPathCount != obj1.getStderrPathCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists stderrPath has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < stderrPathCount; i++) {
                    com.sun.grid.jgdi.configuration.PathName value1 = getStderrPath(i);
                    com.sun.grid.jgdi.configuration.PathName value2 = obj1.getStderrPath(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute JB_stderr_path_list of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

                } // end of for
            }

            {
                int stdinPathCount = getStdinPathCount();
                if (stdinPathCount != obj1.getStdinPathCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists stdinPath has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < stdinPathCount; i++) {
                    com.sun.grid.jgdi.configuration.PathName value1 = getStdinPath(i);
                    com.sun.grid.jgdi.configuration.PathName value2 = obj1.getStdinPath(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute JB_stdin_path_list of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

                } // end of for
            }

            {
                boolean value1 = isMergeStderr();
                boolean value2 = obj1.isMergeStderr();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes JB_merge_stderr are not equal");
                }
                return false;
            }

            }

            {
                int hardResourceCount = getHardResourceCount();
                if (hardResourceCount != obj1.getHardResourceCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists hardResource has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < hardResourceCount; i++) {
                    com.sun.grid.jgdi.configuration.ComplexEntry value1 = getHardResource(i);
                    com.sun.grid.jgdi.configuration.ComplexEntry value2 = obj1.getHardResource(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute JB_hard_resource_list of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

                } // end of for
            }

            {
                int softResourceCount = getSoftResourceCount();
                if (softResourceCount != obj1.getSoftResourceCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists softResource has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < softResourceCount; i++) {
                    com.sun.grid.jgdi.configuration.ComplexEntry value1 = getSoftResource(i);
                    com.sun.grid.jgdi.configuration.ComplexEntry value2 = obj1.getSoftResource(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute JB_soft_resource_list of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

                } // end of for
            }

            {
                int hardQueueCount = getHardQueueCount();
                if (hardQueueCount != obj1.getHardQueueCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists hardQueue has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < hardQueueCount; i++) {
                    java.lang.String value1 = getHardQueue(i);
                    java.lang.String value2 = obj1.getHardQueue(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute JB_hard_queue_list of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes JB_hard_queue_list are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

                } // end of for
            }

            {
                int softQueueCount = getSoftQueueCount();
                if (softQueueCount != obj1.getSoftQueueCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists softQueue has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < softQueueCount; i++) {
                    java.lang.String value1 = getSoftQueue(i);
                    java.lang.String value2 = obj1.getSoftQueue(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute JB_soft_queue_list of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes JB_soft_queue_list are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

                } // end of for
            }

            {
                int value1 = getMailOptions();
                int value2 = obj1.getMailOptions();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes JB_mail_options are not equal");
                }
                return false;
            }

            }

            {
                int mailCount = getMailCount();
                if (mailCount != obj1.getMailCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists mail has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < mailCount; i++) {
                    com.sun.grid.jgdi.configuration.MailReceiver value1 = getMail(i);
                    com.sun.grid.jgdi.configuration.MailReceiver value2 = obj1.getMail(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute JB_mail_list of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

                } // end of for
            }

            {
                java.lang.String value1 = getPe();
                java.lang.String value2 = obj1.getPe();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute JB_pe of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes JB_pe are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                int peRangeCount = getPeRangeCount();
                if (peRangeCount != obj1.getPeRangeCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists peRange has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < peRangeCount; i++) {
                    com.sun.grid.jgdi.configuration.Range value1 = getPeRange(i);
                    com.sun.grid.jgdi.configuration.Range value2 = obj1.getPeRange(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute JB_pe_range of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

                } // end of for
            }

            {
                int masterHardQueueCount = getMasterHardQueueCount();
                if (masterHardQueueCount != obj1.getMasterHardQueueCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists masterHardQueue has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < masterHardQueueCount; i++) {
                    java.lang.String value1 = getMasterHardQueue(i);
                    java.lang.String value2 = obj1.getMasterHardQueue(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute JB_master_hard_queue_list of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes JB_master_hard_queue_list are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

                } // end of for
            }

            {
                java.lang.String value1 = getTgt();
                java.lang.String value2 = obj1.getTgt();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute JB_tgt of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes JB_tgt are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                java.lang.String value1 = getCred();
                java.lang.String value2 = obj1.getCred();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute JB_cred of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes JB_cred are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                int jaStructureCount = getJaStructureCount();
                if (jaStructureCount != obj1.getJaStructureCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists jaStructure has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < jaStructureCount; i++) {
                    com.sun.grid.jgdi.configuration.Range value1 = getJaStructure(i);
                    com.sun.grid.jgdi.configuration.Range value2 = obj1.getJaStructure(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute JB_ja_structure of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

                } // end of for
            }

            {
                int jaNHIdsCount = getJaNHIdsCount();
                if (jaNHIdsCount != obj1.getJaNHIdsCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists jaNHIds has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < jaNHIdsCount; i++) {
                    com.sun.grid.jgdi.configuration.Range value1 = getJaNHIds(i);
                    com.sun.grid.jgdi.configuration.Range value2 = obj1.getJaNHIds(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute JB_ja_n_h_ids of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

                } // end of for
            }

            {
                int jaUHIdsCount = getJaUHIdsCount();
                if (jaUHIdsCount != obj1.getJaUHIdsCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists jaUHIds has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < jaUHIdsCount; i++) {
                    com.sun.grid.jgdi.configuration.Range value1 = getJaUHIds(i);
                    com.sun.grid.jgdi.configuration.Range value2 = obj1.getJaUHIds(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute JB_ja_u_h_ids of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

                } // end of for
            }

            {
                int jaSHIdsCount = getJaSHIdsCount();
                if (jaSHIdsCount != obj1.getJaSHIdsCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists jaSHIds has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < jaSHIdsCount; i++) {
                    com.sun.grid.jgdi.configuration.Range value1 = getJaSHIds(i);
                    com.sun.grid.jgdi.configuration.Range value2 = obj1.getJaSHIds(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute JB_ja_s_h_ids of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

                } // end of for
            }

            {
                int jaOHIdsCount = getJaOHIdsCount();
                if (jaOHIdsCount != obj1.getJaOHIdsCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists jaOHIds has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < jaOHIdsCount; i++) {
                    com.sun.grid.jgdi.configuration.Range value1 = getJaOHIds(i);
                    com.sun.grid.jgdi.configuration.Range value2 = obj1.getJaOHIds(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute JB_ja_o_h_ids of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

                } // end of for
            }

            {
                int jaAHIdsCount = getJaAHIdsCount();
                if (jaAHIdsCount != obj1.getJaAHIdsCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists jaAHIds has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < jaAHIdsCount; i++) {
                    com.sun.grid.jgdi.configuration.Range value1 = getJaAHIds(i);
                    com.sun.grid.jgdi.configuration.Range value2 = obj1.getJaAHIds(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute JB_ja_a_h_ids of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

                } // end of for
            }

            {
                int jaTemplateCount = getJaTemplateCount();
                if (jaTemplateCount != obj1.getJaTemplateCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists jaTemplate has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < jaTemplateCount; i++) {
                    com.sun.grid.jgdi.configuration.JobTask value1 = getJaTemplate(i);
                    com.sun.grid.jgdi.configuration.JobTask value2 = obj1.getJaTemplate(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute JB_ja_template of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

                } // end of for
            }

            {
                int jaTasksCount = getJaTasksCount();
                if (jaTasksCount != obj1.getJaTasksCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists jaTasks has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < jaTasksCount; i++) {
                    com.sun.grid.jgdi.configuration.JobTask value1 = getJaTasks(i);
                    com.sun.grid.jgdi.configuration.JobTask value2 = obj1.getJaTasks(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute JB_ja_tasks of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

                } // end of for
            }

            {
                int userCount = getUserCount();
                if (userCount != obj1.getUserCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists user has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < userCount; i++) {
                    java.lang.String value1 = getUser(i);
                    java.lang.String value2 = obj1.getUser(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute JB_user_list of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes JB_user_list are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

                } // end of for
            }

            {
                int value1 = getVerifySuitableQueues();
                int value2 = obj1.getVerifySuitableQueues();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes JB_verify_suitable_queues are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getOverrideTickets();
                int value2 = obj1.getOverrideTickets();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes JB_override_tickets are not equal");
                }
                return false;
            }

            }

            {
                int pathAliasesCount = getPathAliasesCount();
                if (pathAliasesCount != obj1.getPathAliasesCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists pathAliases has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < pathAliasesCount; i++) {
                    com.sun.grid.jgdi.configuration.PathAlias value1 = getPathAliases(i);
                    com.sun.grid.jgdi.configuration.PathAlias value2 = obj1.getPathAliases(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute JB_path_aliases of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

                } // end of for
            }

            {
                double value1 = getUrg();
                double value2 = obj1.getUrg();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes JB_urg are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getAr();
                int value2 = obj1.getAr();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes JB_ar are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getPty();
                int value2 = obj1.getPty();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes JB_pty are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getJaTaskConcurrency();
                int value2 = obj1.getJaTaskConcurrency();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes JB_ja_task_concurrency are not equal");
                }
                return false;
            }

            }

            {
                int bindingCount = getBindingCount();
                if (bindingCount != obj1.getBindingCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists binding has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < bindingCount; i++) {
                    com.sun.grid.jgdi.configuration.Binding value1 = getBinding(i);
                    com.sun.grid.jgdi.configuration.Binding value2 = obj1.getBinding(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute JB_binding of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

                } // end of for
            }

            return true;
        } else {
            return true;
        }
    }
  
    public java.lang.String toString() {
        StringBuilder ret = new StringBuilder();
        ret.append("JobImpl(");

        ret.append(getJobNumber());

        ret.append(")");
        return ret.toString();
    }



    public java.lang.String dump() {
        StringBuilder sb = new StringBuilder();

            {
                int value = getJobNumber();
                sb.append("JobNumber = " + value + "\n");
            }

            {
                java.lang.String value = getJobName();
                sb.append("JobName = " + value + "\n");
            }

            int jidRequestCount = getJidRequestCount();
            for (int i = 0; i < jidRequestCount; i++) {
                com.sun.grid.jgdi.configuration.JobReference value = getJidRequest(i);
                
                sb.append("JidRequest[" + i + "] = " + value.dump() + "\n");
                
            } // end of for

            int jaAdRequestCount = getJaAdRequestCount();
            for (int i = 0; i < jaAdRequestCount; i++) {
                com.sun.grid.jgdi.configuration.JobReference value = getJaAdRequest(i);
                
                sb.append("JaAdRequest[" + i + "] = " + value.dump() + "\n");
                
            } // end of for

            {
                java.lang.String value = getSession();
                sb.append("Session = " + value + "\n");
            }

            {
                java.lang.String value = getProject();
                sb.append("Project = " + value + "\n");
            }

            {
                java.lang.String value = getDepartment();
                sb.append("Department = " + value + "\n");
            }

            {
                java.lang.String value = getDirectivePrefix();
                sb.append("DirectivePrefix = " + value + "\n");
            }

            {
                java.lang.String value = getExecFile();
                sb.append("ExecFile = " + value + "\n");
            }

            {
                java.lang.String value = getScriptFile();
                sb.append("ScriptFile = " + value + "\n");
            }

            {
                int value = getScriptSize();
                sb.append("ScriptSize = " + value + "\n");
            }

            {
                java.lang.String value = getScriptPtr();
                sb.append("ScriptPtr = " + value + "\n");
            }

            {
                int value = getExecutionTime();
                sb.append("ExecutionTime = " + value + "\n");
            }

            {
                int value = getDeadline();
                sb.append("Deadline = " + value + "\n");
            }

            {
                java.lang.String value = getAccount();
                sb.append("Account = " + value + "\n");
            }

            {
                java.lang.String value = getCwd();
                sb.append("Cwd = " + value + "\n");
            }

            {
                boolean value = isNotify();
                sb.append("Notify = " + value + "\n");
            }

            {
                int value = getType();
                sb.append("Type = " + value + "\n");
            }

            {
                boolean value = isReserve();
                sb.append("Reserve = " + value + "\n");
            }

            {
                int value = getPriority();
                sb.append("Priority = " + value + "\n");
            }

            {
                int value = getJobshare();
                sb.append("Jobshare = " + value + "\n");
            }

            int shellCount = getShellCount();
            for (int i = 0; i < shellCount; i++) {
                com.sun.grid.jgdi.configuration.PathName value = getShell(i);
                
                sb.append("Shell[" + i + "] = " + value.dump() + "\n");
                
            } // end of for

            for (java.lang.String key : getEnvKeys()) {
                java.lang.String value = getEnv(key);
                
                sb.append("Env[" + key + "] = " + value + "\n");
                
            }

            for (java.lang.String key : getContextKeys()) {
                java.lang.String value = getContext(key);
                
                sb.append("Context[" + key + "] = " + value + "\n");
                
            }

            int jobArgsCount = getJobArgsCount();
            for (int i = 0; i < jobArgsCount; i++) {
                java.lang.String value = getJobArgs(i);
                
                sb.append("JobArgs[" + i + "] = " + value + "\n");
                
            } // end of for

            {
                java.lang.String value = getCheckpointName();
                sb.append("CheckpointName = " + value + "\n");
            }

            {
                int value = getRestart();
                sb.append("Restart = " + value + "\n");
            }

            int stdoutPathCount = getStdoutPathCount();
            for (int i = 0; i < stdoutPathCount; i++) {
                com.sun.grid.jgdi.configuration.PathName value = getStdoutPath(i);
                
                sb.append("StdoutPath[" + i + "] = " + value.dump() + "\n");
                
            } // end of for

            int stderrPathCount = getStderrPathCount();
            for (int i = 0; i < stderrPathCount; i++) {
                com.sun.grid.jgdi.configuration.PathName value = getStderrPath(i);
                
                sb.append("StderrPath[" + i + "] = " + value.dump() + "\n");
                
            } // end of for

            int stdinPathCount = getStdinPathCount();
            for (int i = 0; i < stdinPathCount; i++) {
                com.sun.grid.jgdi.configuration.PathName value = getStdinPath(i);
                
                sb.append("StdinPath[" + i + "] = " + value.dump() + "\n");
                
            } // end of for

            {
                boolean value = isMergeStderr();
                sb.append("MergeStderr = " + value + "\n");
            }

            int hardResourceCount = getHardResourceCount();
            for (int i = 0; i < hardResourceCount; i++) {
                com.sun.grid.jgdi.configuration.ComplexEntry value = getHardResource(i);
                
                sb.append("HardResource[" + i + "] = " + value.dump() + "\n");
                
            } // end of for

            int softResourceCount = getSoftResourceCount();
            for (int i = 0; i < softResourceCount; i++) {
                com.sun.grid.jgdi.configuration.ComplexEntry value = getSoftResource(i);
                
                sb.append("SoftResource[" + i + "] = " + value.dump() + "\n");
                
            } // end of for

            int hardQueueCount = getHardQueueCount();
            for (int i = 0; i < hardQueueCount; i++) {
                java.lang.String value = getHardQueue(i);
                
                sb.append("HardQueue[" + i + "] = " + value + "\n");
                
            } // end of for

            int softQueueCount = getSoftQueueCount();
            for (int i = 0; i < softQueueCount; i++) {
                java.lang.String value = getSoftQueue(i);
                
                sb.append("SoftQueue[" + i + "] = " + value + "\n");
                
            } // end of for

            {
                int value = getMailOptions();
                sb.append("MailOptions = " + value + "\n");
            }

            int mailCount = getMailCount();
            for (int i = 0; i < mailCount; i++) {
                com.sun.grid.jgdi.configuration.MailReceiver value = getMail(i);
                
                sb.append("Mail[" + i + "] = " + value.dump() + "\n");
                
            } // end of for

            {
                java.lang.String value = getPe();
                sb.append("Pe = " + value + "\n");
            }

            int peRangeCount = getPeRangeCount();
            for (int i = 0; i < peRangeCount; i++) {
                com.sun.grid.jgdi.configuration.Range value = getPeRange(i);
                
                sb.append("PeRange[" + i + "] = " + value.dump() + "\n");
                
            } // end of for

            int masterHardQueueCount = getMasterHardQueueCount();
            for (int i = 0; i < masterHardQueueCount; i++) {
                java.lang.String value = getMasterHardQueue(i);
                
                sb.append("MasterHardQueue[" + i + "] = " + value + "\n");
                
            } // end of for

            {
                java.lang.String value = getTgt();
                sb.append("Tgt = " + value + "\n");
            }

            {
                java.lang.String value = getCred();
                sb.append("Cred = " + value + "\n");
            }

            int jaStructureCount = getJaStructureCount();
            for (int i = 0; i < jaStructureCount; i++) {
                com.sun.grid.jgdi.configuration.Range value = getJaStructure(i);
                
                sb.append("JaStructure[" + i + "] = " + value.dump() + "\n");
                
            } // end of for

            int jaNHIdsCount = getJaNHIdsCount();
            for (int i = 0; i < jaNHIdsCount; i++) {
                com.sun.grid.jgdi.configuration.Range value = getJaNHIds(i);
                
                sb.append("JaNHIds[" + i + "] = " + value.dump() + "\n");
                
            } // end of for

            int jaUHIdsCount = getJaUHIdsCount();
            for (int i = 0; i < jaUHIdsCount; i++) {
                com.sun.grid.jgdi.configuration.Range value = getJaUHIds(i);
                
                sb.append("JaUHIds[" + i + "] = " + value.dump() + "\n");
                
            } // end of for

            int jaSHIdsCount = getJaSHIdsCount();
            for (int i = 0; i < jaSHIdsCount; i++) {
                com.sun.grid.jgdi.configuration.Range value = getJaSHIds(i);
                
                sb.append("JaSHIds[" + i + "] = " + value.dump() + "\n");
                
            } // end of for

            int jaOHIdsCount = getJaOHIdsCount();
            for (int i = 0; i < jaOHIdsCount; i++) {
                com.sun.grid.jgdi.configuration.Range value = getJaOHIds(i);
                
                sb.append("JaOHIds[" + i + "] = " + value.dump() + "\n");
                
            } // end of for

            int jaAHIdsCount = getJaAHIdsCount();
            for (int i = 0; i < jaAHIdsCount; i++) {
                com.sun.grid.jgdi.configuration.Range value = getJaAHIds(i);
                
                sb.append("JaAHIds[" + i + "] = " + value.dump() + "\n");
                
            } // end of for

            int jaTemplateCount = getJaTemplateCount();
            for (int i = 0; i < jaTemplateCount; i++) {
                com.sun.grid.jgdi.configuration.JobTask value = getJaTemplate(i);
                
                sb.append("JaTemplate[" + i + "] = " + value.dump() + "\n");
                
            } // end of for

            int jaTasksCount = getJaTasksCount();
            for (int i = 0; i < jaTasksCount; i++) {
                com.sun.grid.jgdi.configuration.JobTask value = getJaTasks(i);
                
                sb.append("JaTasks[" + i + "] = " + value.dump() + "\n");
                
            } // end of for

            int userCount = getUserCount();
            for (int i = 0; i < userCount; i++) {
                java.lang.String value = getUser(i);
                
                sb.append("User[" + i + "] = " + value + "\n");
                
            } // end of for

            {
                int value = getVerifySuitableQueues();
                sb.append("VerifySuitableQueues = " + value + "\n");
            }

            {
                int value = getOverrideTickets();
                sb.append("OverrideTickets = " + value + "\n");
            }

            int pathAliasesCount = getPathAliasesCount();
            for (int i = 0; i < pathAliasesCount; i++) {
                com.sun.grid.jgdi.configuration.PathAlias value = getPathAliases(i);
                
                sb.append("PathAliases[" + i + "] = " + value.dump() + "\n");
                
            } // end of for

            {
                double value = getUrg();
                sb.append("Urg = " + value + "\n");
            }

            {
                int value = getAr();
                sb.append("Ar = " + value + "\n");
            }

            {
                int value = getPty();
                sb.append("Pty = " + value + "\n");
            }

            {
                int value = getJaTaskConcurrency();
                sb.append("JaTaskConcurrency = " + value + "\n");
            }

            int bindingCount = getBindingCount();
            for (int i = 0; i < bindingCount; i++) {
                com.sun.grid.jgdi.configuration.Binding value = getBinding(i);
                
                sb.append("Binding[" + i + "] = " + value.dump() + "\n");
                
            } // end of for

        return sb.toString();
    }    

 
}
