/*___INFO__MARK_BEGIN__*/
/*************************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  the Sun Industry Standards Source License Version 1.2
 *
 *  Sun Microsystems Inc., March, 2001
 *
 *
 *  Sun Industry Standards Source License Version 1.2
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.2 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *   Copyright: 2001 by Sun Microsystems, Inc.
 *
 *   All Rights Reserved.
 *
 ************************************************************************/
/*___INFO__MARK_END__*/
/**
 *  Generated from java_jmx_jgdi_impl.jsp
 *  !!! DO NOT EDIT THIS FILE !!!
 */

package com.sun.grid.jgdi.management.mbeans;


import com.sun.grid.jgdi.JGDIException;
import java.util.List;
import java.util.LinkedList;
import com.sun.grid.jgdi.JGDI;
import com.sun.grid.jgdi.JGDIFactory;
import com.sun.grid.jgdi.configuration.JGDIAnswer;
import com.sun.grid.jgdi.monitoring.filter.UserFilter;
import java.util.logging.*;
import com.sun.grid.jgdi.management.JGDISession;

// for Hostgroup
import com.sun.grid.jgdi.configuration.Hostgroup;
// for SubmitHost
import com.sun.grid.jgdi.configuration.SubmitHost;
// for ExecHost
import com.sun.grid.jgdi.configuration.ExecHost;
// for Manager
import com.sun.grid.jgdi.configuration.Manager;
// for AdvanceReservation
import com.sun.grid.jgdi.configuration.AdvanceReservation;
// for SchedConf
import com.sun.grid.jgdi.configuration.SchedConf;
// for Configuration
import com.sun.grid.jgdi.configuration.Configuration;
// for Project
import com.sun.grid.jgdi.configuration.Project;
// for ShareTree
import com.sun.grid.jgdi.configuration.ShareTree;
// for AdminHost
import com.sun.grid.jgdi.configuration.AdminHost;
// for Checkpoint
import com.sun.grid.jgdi.configuration.Checkpoint;
// for ParallelEnvironment
import com.sun.grid.jgdi.configuration.ParallelEnvironment;
// for ComplexEntry
import com.sun.grid.jgdi.configuration.ComplexEntry;
// for ClusterQueue
import com.sun.grid.jgdi.configuration.ClusterQueue;
// for JobSchedulingInfo
import com.sun.grid.jgdi.configuration.JobSchedulingInfo;
// for UserSet
import com.sun.grid.jgdi.configuration.UserSet;
// for Calendar
import com.sun.grid.jgdi.configuration.Calendar;
// for Operator
import com.sun.grid.jgdi.configuration.Operator;
// for Job
import com.sun.grid.jgdi.configuration.Job;
// for ResourceQuotaSet
import com.sun.grid.jgdi.configuration.ResourceQuotaSet;
// for EventClient
import com.sun.grid.jgdi.configuration.EventClient;
// for User
import com.sun.grid.jgdi.configuration.User;

/**
 *   <code>JGDIJMX</code> implements a JMX service for
 *   the {@link com.sun.grid.jgdi.JGDI} interface.
 * 
 */
public class JGDIJMX extends JGDIJMXBase implements JGDIJMXMBean, JGDIJMXBaseMBean {

   /**
    *   Create a new instance of <code>JGDIJMXImpl</code>.
    */
   public JGDIJMX(JGDISession owner) throws JGDIException {
      super(owner);
   }
   
   

   /**
    *  Update the <code>Hostgroup</code> object.
    *
    *  @param  obj  the <code>Hostgroup</code> object with the new values
    *  @throws JGDIException on any error
    */
   public void updateHostgroup(Hostgroup obj) throws JGDIException {
        getJGDI().updateHostgroup(obj);
   }
   
   /**
    *   Update a <code>Hostgroup</code> object.
    *   @param obj      the <code>Hostgroup</code> object with the new values
    *   @param answers  the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void updateHostgroupWithAnswer(Hostgroup obj, List<JGDIAnswer> answers) throws JGDIException {
        getJGDI().updateHostgroupWithAnswer(obj, answers);
   }
   

   /**
    *   Delete a <code>Hostgroup</code> object.
    *   @param obj  <code>Hostgroup</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteHostgroup(Hostgroup obj) throws JGDIException {
        getJGDI().deleteHostgroup(obj);
   }
   
   /**
    *   Delete a <code>Hostgroup</code> object.
    *   @param obj  <code>Hostgroup</code> object with the primary key information
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteHostgroupWithAnswer(Hostgroup obj, List<JGDIAnswer> answers) throws JGDIException {
       getJGDI().deleteHostgroupWithAnswer(obj, answers);
   }
   


   /**
    *   Delete the <code>Hostgroup</code> object by primary key;
    *   @param HGRP_name   the HGRP_name of the <code>Hostgroup</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteHostgroup(String HGRP_name) throws JGDIException {
        getJGDI().deleteHostgroup(HGRP_name);
   }
   
   /**
    *   Delete a <code>Hostgroup</code> object by its primary key
    *   @param HGRP_name   the HGRP_name of the <code>Hostgroup</code> object

       *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteHostgroupWithAnswer(String HGRP_name, List<JGDIAnswer> answers) throws JGDIException {
        getJGDI().deleteHostgroupWithAnswer(HGRP_name, answers);
    }

   /**
    *   Delete several <code>Hostgroup</code> objects by their primary key
    *  @param HGRP_names   array of HGRP_name of the <code>Hostgroup</code> objects
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteHostgroupsWithAnswer(String[] HGRP_names 
    , List<JGDIAnswer> answers) throws JGDIException {
        getJGDI().deleteHostgroupsWithAnswer(HGRP_names,

   answers);
   }

   /**
    *  Add a new <code>Hostgroup</code> object.
    *
    *  @param obj  the new <code>Hostgroup</code> object
    *  @throws JGDIException on any error
    */
   public void addHostgroup(Hostgroup obj) throws JGDIException {
        getJGDI().addHostgroup(obj);
   }
   
   /**
    *   Add a new <code>Hostgroup</code> object.
    *   @param  obj the new <code>Hostgroup</code> object
    *   @param  answers the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addHostgroupWithAnswer(Hostgroup obj, List<JGDIAnswer> answers) throws JGDIException {
       getJGDI().addHostgroupWithAnswer(obj, answers);
   }
   
       
   /**
    *  Get all <code>Hostgroup</code> objects.
    *  @return a @{link java.util.List} of <code>Hostgroup</code> objects
    *  @throws JGDIException on any error
    */
   public List getHostgroupList() throws JGDIException {
       return getJGDI().getHostgroupList();
   }
   
   /**
    *   Get the list of all defined <code>Hostgroup</code> objects.
    *   @param answers  the <code>answer list</code> object    
    *   @return list of <code>Hostgroup</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getHostgroupListWithAnswer(List<JGDIAnswer> answers) throws JGDIException {
       return getJGDI().getHostgroupListWithAnswer(answers);
   }
   
   

   /**
    *   Get the <code>Hostgroup</code> object;
    *   @return the <code>Hostgroup</code> object
    *   @throws JGDIException on any error
    */
   public Hostgroup getHostgroup( String HGRP_name ) throws JGDIException {
        return getJGDI().getHostgroup(HGRP_name);
   }
   
   /**
    *  Get a Hostgroup by its primary key
    *
    *  @return the Hostgroup
    *  @param HGRP_name   the HGRP_name of the <code>Hostgroup</code> object
   *  @param  answers the <code>answer list</code> object
    *  @return the found <code>Hostgroup</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public Hostgroup getHostgroupWithAnswer( String HGRP_name , List<JGDIAnswer> answers) throws JGDIException {
        return getJGDI().getHostgroupWithAnswer(HGRP_name, answers);
    }
   

   /**
    *   Delete a <code>SubmitHost</code> object.
    *   @param obj  <code>SubmitHost</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteSubmitHost(SubmitHost obj) throws JGDIException {
        getJGDI().deleteSubmitHost(obj);
   }
   
   /**
    *   Delete a <code>SubmitHost</code> object.
    *   @param obj  <code>SubmitHost</code> object with the primary key information
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteSubmitHostWithAnswer(SubmitHost obj, List<JGDIAnswer> answers) throws JGDIException {
       getJGDI().deleteSubmitHostWithAnswer(obj, answers);
   }
   


   /**
    *   Delete the <code>SubmitHost</code> object by primary key;
    *   @param SH_name   the SH_name of the <code>SubmitHost</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteSubmitHost(String SH_name) throws JGDIException {
        getJGDI().deleteSubmitHost(SH_name);
   }
   
   /**
    *   Delete a <code>SubmitHost</code> object by its primary key
    *   @param SH_name   the SH_name of the <code>SubmitHost</code> object

       *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteSubmitHostWithAnswer(String SH_name, List<JGDIAnswer> answers) throws JGDIException {
        getJGDI().deleteSubmitHostWithAnswer(SH_name, answers);
    }

   /**
    *   Delete several <code>SubmitHost</code> objects by their primary key
    *  @param SH_names   array of SH_name of the <code>SubmitHost</code> objects
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteSubmitHostsWithAnswer(String[] SH_names 
    , List<JGDIAnswer> answers) throws JGDIException {
        getJGDI().deleteSubmitHostsWithAnswer(SH_names,

   answers);
   }

   /**
    *  Add a new <code>SubmitHost</code> object.
    *
    *  @param obj  the new <code>SubmitHost</code> object
    *  @throws JGDIException on any error
    */
   public void addSubmitHost(SubmitHost obj) throws JGDIException {
        getJGDI().addSubmitHost(obj);
   }
   
   /**
    *   Add a new <code>SubmitHost</code> object.
    *   @param  obj the new <code>SubmitHost</code> object
    *   @param  answers the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addSubmitHostWithAnswer(SubmitHost obj, List<JGDIAnswer> answers) throws JGDIException {
       getJGDI().addSubmitHostWithAnswer(obj, answers);
   }
   

   /**
    *   Add a new <code>SubmitHost</code> object.
    *   @param  name the new <code>String</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addSubmitHost(String name) throws JGDIException {
       getJGDI().addSubmitHost(name);
   }

   /**
    *   Add a new <code>SubmitHost</code> object.
    *   @param  name the new <code>String</code> object
    *   @param  answers the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addSubmitHostWithAnswer(String name, List<JGDIAnswer> answers) throws JGDIException {
       getJGDI().addSubmitHostWithAnswer(name, answers);
   }
       
   /**
    *  Get all <code>SubmitHost</code> objects.
    *  @return a @{link java.util.List} of <code>SubmitHost</code> objects
    *  @throws JGDIException on any error
    */
   public List getSubmitHostList() throws JGDIException {
       return getJGDI().getSubmitHostList();
   }
   
   /**
    *   Get the list of all defined <code>SubmitHost</code> objects.
    *   @param answers  the <code>answer list</code> object    
    *   @return list of <code>SubmitHost</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getSubmitHostListWithAnswer(List<JGDIAnswer> answers) throws JGDIException {
       return getJGDI().getSubmitHostListWithAnswer(answers);
   }
   
   

   /**
    *  Update the <code>ExecHost</code> object.
    *
    *  @param  obj  the <code>ExecHost</code> object with the new values
    *  @throws JGDIException on any error
    */
   public void updateExecHost(ExecHost obj) throws JGDIException {
        getJGDI().updateExecHost(obj);
   }
   
   /**
    *   Update a <code>ExecHost</code> object.
    *   @param obj      the <code>ExecHost</code> object with the new values
    *   @param answers  the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void updateExecHostWithAnswer(ExecHost obj, List<JGDIAnswer> answers) throws JGDIException {
        getJGDI().updateExecHostWithAnswer(obj, answers);
   }
   

   /**
    *   Delete a <code>ExecHost</code> object.
    *   @param obj  <code>ExecHost</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteExecHost(ExecHost obj) throws JGDIException {
        getJGDI().deleteExecHost(obj);
   }
   
   /**
    *   Delete a <code>ExecHost</code> object.
    *   @param obj  <code>ExecHost</code> object with the primary key information
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteExecHostWithAnswer(ExecHost obj, List<JGDIAnswer> answers) throws JGDIException {
       getJGDI().deleteExecHostWithAnswer(obj, answers);
   }
   


   /**
    *   Delete the <code>ExecHost</code> object by primary key;
    *   @param EH_name   the EH_name of the <code>ExecHost</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteExecHost(String EH_name) throws JGDIException {
        getJGDI().deleteExecHost(EH_name);
   }
   
   /**
    *   Delete a <code>ExecHost</code> object by its primary key
    *   @param EH_name   the EH_name of the <code>ExecHost</code> object

       *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteExecHostWithAnswer(String EH_name, List<JGDIAnswer> answers) throws JGDIException {
        getJGDI().deleteExecHostWithAnswer(EH_name, answers);
    }

   /**
    *   Delete several <code>ExecHost</code> objects by their primary key
    *  @param EH_names   array of EH_name of the <code>ExecHost</code> objects
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteExecHostsWithAnswer(String[] EH_names 
    , List<JGDIAnswer> answers) throws JGDIException {
        getJGDI().deleteExecHostsWithAnswer(EH_names,

   answers);
   }

   /**
    *  Add a new <code>ExecHost</code> object.
    *
    *  @param obj  the new <code>ExecHost</code> object
    *  @throws JGDIException on any error
    */
   public void addExecHost(ExecHost obj) throws JGDIException {
        getJGDI().addExecHost(obj);
   }
   
   /**
    *   Add a new <code>ExecHost</code> object.
    *   @param  obj the new <code>ExecHost</code> object
    *   @param  answers the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addExecHostWithAnswer(ExecHost obj, List<JGDIAnswer> answers) throws JGDIException {
       getJGDI().addExecHostWithAnswer(obj, answers);
   }
   
       
   /**
    *  Get all <code>ExecHost</code> objects.
    *  @return a @{link java.util.List} of <code>ExecHost</code> objects
    *  @throws JGDIException on any error
    */
   public List getExecHostList() throws JGDIException {
       return getJGDI().getExecHostList();
   }
   
   /**
    *   Get the list of all defined <code>ExecHost</code> objects.
    *   @param answers  the <code>answer list</code> object    
    *   @return list of <code>ExecHost</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getExecHostListWithAnswer(List<JGDIAnswer> answers) throws JGDIException {
       return getJGDI().getExecHostListWithAnswer(answers);
   }
   
   

   /**
    *   Get the <code>ExecHost</code> object;
    *   @return the <code>ExecHost</code> object
    *   @throws JGDIException on any error
    */
   public ExecHost getExecHost( String EH_name ) throws JGDIException {
        return getJGDI().getExecHost(EH_name);
   }
   
   /**
    *  Get a ExecHost by its primary key
    *
    *  @return the ExecHost
    *  @param EH_name   the EH_name of the <code>ExecHost</code> object
   *  @param  answers the <code>answer list</code> object
    *  @return the found <code>ExecHost</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public ExecHost getExecHostWithAnswer( String EH_name , List<JGDIAnswer> answers) throws JGDIException {
        return getJGDI().getExecHostWithAnswer(EH_name, answers);
    }
   

   /**
    *   Delete a <code>Manager</code> object.
    *   @param obj  <code>Manager</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteManager(Manager obj) throws JGDIException {
        getJGDI().deleteManager(obj);
   }
   
   /**
    *   Delete a <code>Manager</code> object.
    *   @param obj  <code>Manager</code> object with the primary key information
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteManagerWithAnswer(Manager obj, List<JGDIAnswer> answers) throws JGDIException {
       getJGDI().deleteManagerWithAnswer(obj, answers);
   }
   


   /**
    *   Delete the <code>Manager</code> object by primary key;
    *   @param UM_name   the UM_name of the <code>Manager</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteManager(String UM_name) throws JGDIException {
        getJGDI().deleteManager(UM_name);
   }
   
   /**
    *   Delete a <code>Manager</code> object by its primary key
    *   @param UM_name   the UM_name of the <code>Manager</code> object

       *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteManagerWithAnswer(String UM_name, List<JGDIAnswer> answers) throws JGDIException {
        getJGDI().deleteManagerWithAnswer(UM_name, answers);
    }

   /**
    *   Delete several <code>Manager</code> objects by their primary key
    *  @param UM_names   array of UM_name of the <code>Manager</code> objects
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteManagersWithAnswer(String[] UM_names 
    , List<JGDIAnswer> answers) throws JGDIException {
        getJGDI().deleteManagersWithAnswer(UM_names,

   answers);
   }

   /**
    *  Add a new <code>Manager</code> object.
    *
    *  @param obj  the new <code>Manager</code> object
    *  @throws JGDIException on any error
    */
   public void addManager(Manager obj) throws JGDIException {
        getJGDI().addManager(obj);
   }
   
   /**
    *   Add a new <code>Manager</code> object.
    *   @param  obj the new <code>Manager</code> object
    *   @param  answers the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addManagerWithAnswer(Manager obj, List<JGDIAnswer> answers) throws JGDIException {
       getJGDI().addManagerWithAnswer(obj, answers);
   }
   

   /**
    *   Add a new <code>Manager</code> object.
    *   @param  name the new <code>String</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addManager(String name) throws JGDIException {
       getJGDI().addManager(name);
   }

   /**
    *   Add a new <code>Manager</code> object.
    *   @param  name the new <code>String</code> object
    *   @param  answers the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addManagerWithAnswer(String name, List<JGDIAnswer> answers) throws JGDIException {
       getJGDI().addManagerWithAnswer(name, answers);
   }
       
   /**
    *  Get all <code>Manager</code> objects.
    *  @return a @{link java.util.List} of <code>Manager</code> objects
    *  @throws JGDIException on any error
    */
   public List getManagerList() throws JGDIException {
       return getJGDI().getManagerList();
   }
   
   /**
    *   Get the list of all defined <code>Manager</code> objects.
    *   @param answers  the <code>answer list</code> object    
    *   @return list of <code>Manager</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getManagerListWithAnswer(List<JGDIAnswer> answers) throws JGDIException {
       return getJGDI().getManagerListWithAnswer(answers);
   }
   
   

   /**
    *   Get the <code>Manager</code> object;
    *   @return the <code>Manager</code> object
    *   @throws JGDIException on any error
    */
   public Manager getManager( String UM_name ) throws JGDIException {
        return getJGDI().getManager(UM_name);
   }
   
   /**
    *  Get a Manager by its primary key
    *
    *  @return the Manager
    *  @param UM_name   the UM_name of the <code>Manager</code> object
   *  @param  answers the <code>answer list</code> object
    *  @return the found <code>Manager</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public Manager getManagerWithAnswer( String UM_name , List<JGDIAnswer> answers) throws JGDIException {
        return getJGDI().getManagerWithAnswer(UM_name, answers);
    }
   

   /**
    *   Delete a <code>AdvanceReservation</code> object.
    *   @param obj  <code>AdvanceReservation</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteAdvanceReservation(AdvanceReservation obj) throws JGDIException {
        getJGDI().deleteAdvanceReservation(obj);
   }
   
   /**
    *   Delete a <code>AdvanceReservation</code> object.
    *   @param obj  <code>AdvanceReservation</code> object with the primary key information
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteAdvanceReservationWithAnswer(AdvanceReservation obj, List<JGDIAnswer> answers) throws JGDIException {
       getJGDI().deleteAdvanceReservationWithAnswer(obj, answers);
   }
   


   /**
    *   Delete the <code>AdvanceReservation</code> object by primary key;
    *   @param AR_id   the AR_id of the <code>AdvanceReservation</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteAdvanceReservation(int AR_id) throws JGDIException {
        getJGDI().deleteAdvanceReservation(AR_id);
   }
   
   /**
    *   Delete a <code>AdvanceReservation</code> object by its primary key
    *   @param AR_id   the AR_id of the <code>AdvanceReservation</code> object

       *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteAdvanceReservationWithAnswer(int AR_id, List<JGDIAnswer> answers) throws JGDIException {
        getJGDI().deleteAdvanceReservationWithAnswer(AR_id, answers);
    }

   /**
    *   Delete several <code>AdvanceReservation</code> objects by their primary key
    *  @param AR_ids   array of AR_id of the <code>AdvanceReservation</code> objects
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteAdvanceReservationsWithAnswer(String[] AR_ids 

    , boolean forced, UserFilter userFilter
    , List<JGDIAnswer> answers) throws JGDIException {
        getJGDI().deleteAdvanceReservationsWithAnswer(AR_ids,

    forced, userFilter,

   answers);
   }

   /**
    *  Add a new <code>AdvanceReservation</code> object.
    *
    *  @param obj  the new <code>AdvanceReservation</code> object
    *  @throws JGDIException on any error
    */
   public void addAdvanceReservation(AdvanceReservation obj) throws JGDIException {
        getJGDI().addAdvanceReservation(obj);
   }
   
   /**
    *   Add a new <code>AdvanceReservation</code> object.
    *   @param  obj the new <code>AdvanceReservation</code> object
    *   @param  answers the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addAdvanceReservationWithAnswer(AdvanceReservation obj, List<JGDIAnswer> answers) throws JGDIException {
       getJGDI().addAdvanceReservationWithAnswer(obj, answers);
   }
   
       
   /**
    *  Get all <code>AdvanceReservation</code> objects.
    *  @return a @{link java.util.List} of <code>AdvanceReservation</code> objects
    *  @throws JGDIException on any error
    */
   public List getAdvanceReservationList() throws JGDIException {
       return getJGDI().getAdvanceReservationList();
   }
   
   /**
    *   Get the list of all defined <code>AdvanceReservation</code> objects.
    *   @param answers  the <code>answer list</code> object    
    *   @return list of <code>AdvanceReservation</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getAdvanceReservationListWithAnswer(List<JGDIAnswer> answers) throws JGDIException {
       return getJGDI().getAdvanceReservationListWithAnswer(answers);
   }
   
   

   /**
    *   Get the <code>AdvanceReservation</code> object;
    *   @return the <code>AdvanceReservation</code> object
    *   @throws JGDIException on any error
    */
   public AdvanceReservation getAdvanceReservation( int AR_id ) throws JGDIException {
        return getJGDI().getAdvanceReservation(AR_id);
   }
   
   /**
    *  Get a AdvanceReservation by its primary key
    *
    *  @return the AdvanceReservation
    *  @param AR_id   the AR_id of the <code>AdvanceReservation</code> object
   *  @param  answers the <code>answer list</code> object
    *  @return the found <code>AdvanceReservation</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public AdvanceReservation getAdvanceReservationWithAnswer( int AR_id , List<JGDIAnswer> answers) throws JGDIException {
        return getJGDI().getAdvanceReservationWithAnswer(AR_id, answers);
    }
   

   /**
    *  Update a <code>SchedConf</code> object.
    *
    *  @param  obj  the <code>SchedConf</code> object with the new values
    *  @throws JGDIException on any error
    */
   public void updateSchedConf(SchedConf obj) throws JGDIException {
        getJGDI().updateSchedConf(obj);
   }
   
   /**
    *   Update a <code>SchedConf</code> object.
    *   @param obj      the <code>SchedConf</code> object with the new values
    *   @param answers  the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void updateSchedConfWithAnswer(SchedConf obj, List<JGDIAnswer> answers) throws JGDIException {
        getJGDI().updateSchedConfWithAnswer(obj, answers);
   }
   
 
   /**
    *   Get the <code>SchedConf</code> object
    *   @return the <code>SchedConf</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public SchedConf getSchedConf() throws JGDIException {
        return getJGDI().getSchedConf();
   }

   /**
    *   Get the <code>SchedConf</code> object.
    *   @param answers  the <code>answer list</code> object
    *   @return the <code>SchedConf</code> object.
    *   @throws JGDIException on any error on the GDI layer
    */
   public SchedConf getSchedConfWithAnswer(List<JGDIAnswer> answers) throws JGDIException {
      return getJGDI().getSchedConfWithAnswer(answers);
   }

   /**
    *  Update the <code>Configuration</code> object.
    *
    *  @param  obj  the <code>Configuration</code> object with the new values
    *  @throws JGDIException on any error
    */
   public void updateConfiguration(Configuration obj) throws JGDIException {
        getJGDI().updateConfiguration(obj);
   }
   
   /**
    *   Update a <code>Configuration</code> object.
    *   @param obj      the <code>Configuration</code> object with the new values
    *   @param answers  the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void updateConfigurationWithAnswer(Configuration obj, List<JGDIAnswer> answers) throws JGDIException {
        getJGDI().updateConfigurationWithAnswer(obj, answers);
   }
   

   /**
    *   Delete a <code>Configuration</code> object.
    *   @param obj  <code>Configuration</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteConfiguration(Configuration obj) throws JGDIException {
        getJGDI().deleteConfiguration(obj);
   }
   
   /**
    *   Delete a <code>Configuration</code> object.
    *   @param obj  <code>Configuration</code> object with the primary key information
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteConfigurationWithAnswer(Configuration obj, List<JGDIAnswer> answers) throws JGDIException {
       getJGDI().deleteConfigurationWithAnswer(obj, answers);
   }
   


   /**
    *   Delete the <code>Configuration</code> object by primary key;
    *   @param CONF_name   the CONF_name of the <code>Configuration</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteConfiguration(String CONF_name) throws JGDIException {
        getJGDI().deleteConfiguration(CONF_name);
   }
   
   /**
    *   Delete a <code>Configuration</code> object by its primary key
    *   @param CONF_name   the CONF_name of the <code>Configuration</code> object

       *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteConfigurationWithAnswer(String CONF_name, List<JGDIAnswer> answers) throws JGDIException {
        getJGDI().deleteConfigurationWithAnswer(CONF_name, answers);
    }

   /**
    *   Delete several <code>Configuration</code> objects by their primary key
    *  @param CONF_names   array of CONF_name of the <code>Configuration</code> objects
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteConfigurationsWithAnswer(String[] CONF_names 
    , List<JGDIAnswer> answers) throws JGDIException {
        getJGDI().deleteConfigurationsWithAnswer(CONF_names,

   answers);
   }

   /**
    *  Add a new <code>Configuration</code> object.
    *
    *  @param obj  the new <code>Configuration</code> object
    *  @throws JGDIException on any error
    */
   public void addConfiguration(Configuration obj) throws JGDIException {
        getJGDI().addConfiguration(obj);
   }
   
   /**
    *   Add a new <code>Configuration</code> object.
    *   @param  obj the new <code>Configuration</code> object
    *   @param  answers the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addConfigurationWithAnswer(Configuration obj, List<JGDIAnswer> answers) throws JGDIException {
       getJGDI().addConfigurationWithAnswer(obj, answers);
   }
   
       
   /**
    *  Get all <code>Configuration</code> objects.
    *  @return a @{link java.util.List} of <code>Configuration</code> objects
    *  @throws JGDIException on any error
    */
   public List getConfigurationList() throws JGDIException {
       return getJGDI().getConfigurationList();
   }
   
   /**
    *   Get the list of all defined <code>Configuration</code> objects.
    *   @param answers  the <code>answer list</code> object    
    *   @return list of <code>Configuration</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getConfigurationListWithAnswer(List<JGDIAnswer> answers) throws JGDIException {
       return getJGDI().getConfigurationListWithAnswer(answers);
   }
   
   

   /**
    *   Get the <code>Configuration</code> object;
    *   @return the <code>Configuration</code> object
    *   @throws JGDIException on any error
    */
   public Configuration getConfiguration( String CONF_name ) throws JGDIException {
        return getJGDI().getConfiguration(CONF_name);
   }
   
   /**
    *  Get a Configuration by its primary key
    *
    *  @return the Configuration
    *  @param CONF_name   the CONF_name of the <code>Configuration</code> object
   *  @param  answers the <code>answer list</code> object
    *  @return the found <code>Configuration</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public Configuration getConfigurationWithAnswer( String CONF_name , List<JGDIAnswer> answers) throws JGDIException {
        return getJGDI().getConfigurationWithAnswer(CONF_name, answers);
    }
   

   /**
    *  Update the <code>Project</code> object.
    *
    *  @param  obj  the <code>Project</code> object with the new values
    *  @throws JGDIException on any error
    */
   public void updateProject(Project obj) throws JGDIException {
        getJGDI().updateProject(obj);
   }
   
   /**
    *   Update a <code>Project</code> object.
    *   @param obj      the <code>Project</code> object with the new values
    *   @param answers  the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void updateProjectWithAnswer(Project obj, List<JGDIAnswer> answers) throws JGDIException {
        getJGDI().updateProjectWithAnswer(obj, answers);
   }
   

   /**
    *   Delete a <code>Project</code> object.
    *   @param obj  <code>Project</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteProject(Project obj) throws JGDIException {
        getJGDI().deleteProject(obj);
   }
   
   /**
    *   Delete a <code>Project</code> object.
    *   @param obj  <code>Project</code> object with the primary key information
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteProjectWithAnswer(Project obj, List<JGDIAnswer> answers) throws JGDIException {
       getJGDI().deleteProjectWithAnswer(obj, answers);
   }
   


   /**
    *   Delete the <code>Project</code> object by primary key;
    *   @param PR_name   the PR_name of the <code>Project</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteProject(String PR_name) throws JGDIException {
        getJGDI().deleteProject(PR_name);
   }
   
   /**
    *   Delete a <code>Project</code> object by its primary key
    *   @param PR_name   the PR_name of the <code>Project</code> object

       *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteProjectWithAnswer(String PR_name, List<JGDIAnswer> answers) throws JGDIException {
        getJGDI().deleteProjectWithAnswer(PR_name, answers);
    }

   /**
    *   Delete several <code>Project</code> objects by their primary key
    *  @param PR_names   array of PR_name of the <code>Project</code> objects
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteProjectsWithAnswer(String[] PR_names 
    , List<JGDIAnswer> answers) throws JGDIException {
        getJGDI().deleteProjectsWithAnswer(PR_names,

   answers);
   }

   /**
    *  Add a new <code>Project</code> object.
    *
    *  @param obj  the new <code>Project</code> object
    *  @throws JGDIException on any error
    */
   public void addProject(Project obj) throws JGDIException {
        getJGDI().addProject(obj);
   }
   
   /**
    *   Add a new <code>Project</code> object.
    *   @param  obj the new <code>Project</code> object
    *   @param  answers the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addProjectWithAnswer(Project obj, List<JGDIAnswer> answers) throws JGDIException {
       getJGDI().addProjectWithAnswer(obj, answers);
   }
   
       
   /**
    *  Get all <code>Project</code> objects.
    *  @return a @{link java.util.List} of <code>Project</code> objects
    *  @throws JGDIException on any error
    */
   public List getProjectList() throws JGDIException {
       return getJGDI().getProjectList();
   }
   
   /**
    *   Get the list of all defined <code>Project</code> objects.
    *   @param answers  the <code>answer list</code> object    
    *   @return list of <code>Project</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getProjectListWithAnswer(List<JGDIAnswer> answers) throws JGDIException {
       return getJGDI().getProjectListWithAnswer(answers);
   }
   
   

   /**
    *   Get the <code>Project</code> object;
    *   @return the <code>Project</code> object
    *   @throws JGDIException on any error
    */
   public Project getProject( String PR_name ) throws JGDIException {
        return getJGDI().getProject(PR_name);
   }
   
   /**
    *  Get a Project by its primary key
    *
    *  @return the Project
    *  @param PR_name   the PR_name of the <code>Project</code> object
   *  @param  answers the <code>answer list</code> object
    *  @return the found <code>Project</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public Project getProjectWithAnswer( String PR_name , List<JGDIAnswer> answers) throws JGDIException {
        return getJGDI().getProjectWithAnswer(PR_name, answers);
    }
   

   /**
    *  Update the <code>ShareTree</code> object.
    *
    *  @param  obj  the <code>ShareTree</code> object with the new values
    *  @throws JGDIException on any error
    */
   public void updateShareTree(ShareTree obj) throws JGDIException {
        getJGDI().updateShareTree(obj);
   }
   
   /**
    *   Update a <code>ShareTree</code> object.
    *   @param obj      the <code>ShareTree</code> object with the new values
    *   @param answers  the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void updateShareTreeWithAnswer(ShareTree obj, List<JGDIAnswer> answers) throws JGDIException {
        getJGDI().updateShareTreeWithAnswer(obj, answers);
   }
   

   /**
    *   Get the <code>ShareTree</code> object;
    *   @return the <code>ShareTree</code> object
    *   @throws JGDIException on any error
    */
   public ShareTree getShareTree( String STN_name ) throws JGDIException {
        return getJGDI().getShareTree(STN_name);
   }
   
   /**
    *  Get a ShareTree by its primary key
    *
    *  @return the ShareTree
    *  @param STN_name   the STN_name of the <code>ShareTree</code> object
   *  @param  answers the <code>answer list</code> object
    *  @return the found <code>ShareTree</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public ShareTree getShareTreeWithAnswer( String STN_name , List<JGDIAnswer> answers) throws JGDIException {
        return getJGDI().getShareTreeWithAnswer(STN_name, answers);
    }
   

   /**
    *   Delete a <code>AdminHost</code> object.
    *   @param obj  <code>AdminHost</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteAdminHost(AdminHost obj) throws JGDIException {
        getJGDI().deleteAdminHost(obj);
   }
   
   /**
    *   Delete a <code>AdminHost</code> object.
    *   @param obj  <code>AdminHost</code> object with the primary key information
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteAdminHostWithAnswer(AdminHost obj, List<JGDIAnswer> answers) throws JGDIException {
       getJGDI().deleteAdminHostWithAnswer(obj, answers);
   }
   


   /**
    *   Delete the <code>AdminHost</code> object by primary key;
    *   @param AH_name   the AH_name of the <code>AdminHost</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteAdminHost(String AH_name) throws JGDIException {
        getJGDI().deleteAdminHost(AH_name);
   }
   
   /**
    *   Delete a <code>AdminHost</code> object by its primary key
    *   @param AH_name   the AH_name of the <code>AdminHost</code> object

       *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteAdminHostWithAnswer(String AH_name, List<JGDIAnswer> answers) throws JGDIException {
        getJGDI().deleteAdminHostWithAnswer(AH_name, answers);
    }

   /**
    *   Delete several <code>AdminHost</code> objects by their primary key
    *  @param AH_names   array of AH_name of the <code>AdminHost</code> objects
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteAdminHostsWithAnswer(String[] AH_names 
    , List<JGDIAnswer> answers) throws JGDIException {
        getJGDI().deleteAdminHostsWithAnswer(AH_names,

   answers);
   }

   /**
    *  Add a new <code>AdminHost</code> object.
    *
    *  @param obj  the new <code>AdminHost</code> object
    *  @throws JGDIException on any error
    */
   public void addAdminHost(AdminHost obj) throws JGDIException {
        getJGDI().addAdminHost(obj);
   }
   
   /**
    *   Add a new <code>AdminHost</code> object.
    *   @param  obj the new <code>AdminHost</code> object
    *   @param  answers the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addAdminHostWithAnswer(AdminHost obj, List<JGDIAnswer> answers) throws JGDIException {
       getJGDI().addAdminHostWithAnswer(obj, answers);
   }
   

   /**
    *   Add a new <code>AdminHost</code> object.
    *   @param  name the new <code>String</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addAdminHost(String name) throws JGDIException {
       getJGDI().addAdminHost(name);
   }

   /**
    *   Add a new <code>AdminHost</code> object.
    *   @param  name the new <code>String</code> object
    *   @param  answers the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addAdminHostWithAnswer(String name, List<JGDIAnswer> answers) throws JGDIException {
       getJGDI().addAdminHostWithAnswer(name, answers);
   }
       
   /**
    *  Get all <code>AdminHost</code> objects.
    *  @return a @{link java.util.List} of <code>AdminHost</code> objects
    *  @throws JGDIException on any error
    */
   public List getAdminHostList() throws JGDIException {
       return getJGDI().getAdminHostList();
   }
   
   /**
    *   Get the list of all defined <code>AdminHost</code> objects.
    *   @param answers  the <code>answer list</code> object    
    *   @return list of <code>AdminHost</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getAdminHostListWithAnswer(List<JGDIAnswer> answers) throws JGDIException {
       return getJGDI().getAdminHostListWithAnswer(answers);
   }
   
   

   /**
    *  Update the <code>Checkpoint</code> object.
    *
    *  @param  obj  the <code>Checkpoint</code> object with the new values
    *  @throws JGDIException on any error
    */
   public void updateCheckpoint(Checkpoint obj) throws JGDIException {
        getJGDI().updateCheckpoint(obj);
   }
   
   /**
    *   Update a <code>Checkpoint</code> object.
    *   @param obj      the <code>Checkpoint</code> object with the new values
    *   @param answers  the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void updateCheckpointWithAnswer(Checkpoint obj, List<JGDIAnswer> answers) throws JGDIException {
        getJGDI().updateCheckpointWithAnswer(obj, answers);
   }
   

   /**
    *   Delete a <code>Checkpoint</code> object.
    *   @param obj  <code>Checkpoint</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteCheckpoint(Checkpoint obj) throws JGDIException {
        getJGDI().deleteCheckpoint(obj);
   }
   
   /**
    *   Delete a <code>Checkpoint</code> object.
    *   @param obj  <code>Checkpoint</code> object with the primary key information
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteCheckpointWithAnswer(Checkpoint obj, List<JGDIAnswer> answers) throws JGDIException {
       getJGDI().deleteCheckpointWithAnswer(obj, answers);
   }
   


   /**
    *   Delete the <code>Checkpoint</code> object by primary key;
    *   @param CK_name   the CK_name of the <code>Checkpoint</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteCheckpoint(String CK_name) throws JGDIException {
        getJGDI().deleteCheckpoint(CK_name);
   }
   
   /**
    *   Delete a <code>Checkpoint</code> object by its primary key
    *   @param CK_name   the CK_name of the <code>Checkpoint</code> object

       *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteCheckpointWithAnswer(String CK_name, List<JGDIAnswer> answers) throws JGDIException {
        getJGDI().deleteCheckpointWithAnswer(CK_name, answers);
    }

   /**
    *   Delete several <code>Checkpoint</code> objects by their primary key
    *  @param CK_names   array of CK_name of the <code>Checkpoint</code> objects
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteCheckpointsWithAnswer(String[] CK_names 
    , List<JGDIAnswer> answers) throws JGDIException {
        getJGDI().deleteCheckpointsWithAnswer(CK_names,

   answers);
   }

   /**
    *  Add a new <code>Checkpoint</code> object.
    *
    *  @param obj  the new <code>Checkpoint</code> object
    *  @throws JGDIException on any error
    */
   public void addCheckpoint(Checkpoint obj) throws JGDIException {
        getJGDI().addCheckpoint(obj);
   }
   
   /**
    *   Add a new <code>Checkpoint</code> object.
    *   @param  obj the new <code>Checkpoint</code> object
    *   @param  answers the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addCheckpointWithAnswer(Checkpoint obj, List<JGDIAnswer> answers) throws JGDIException {
       getJGDI().addCheckpointWithAnswer(obj, answers);
   }
   
       
   /**
    *  Get all <code>Checkpoint</code> objects.
    *  @return a @{link java.util.List} of <code>Checkpoint</code> objects
    *  @throws JGDIException on any error
    */
   public List getCheckpointList() throws JGDIException {
       return getJGDI().getCheckpointList();
   }
   
   /**
    *   Get the list of all defined <code>Checkpoint</code> objects.
    *   @param answers  the <code>answer list</code> object    
    *   @return list of <code>Checkpoint</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getCheckpointListWithAnswer(List<JGDIAnswer> answers) throws JGDIException {
       return getJGDI().getCheckpointListWithAnswer(answers);
   }
   
   

   /**
    *   Get the <code>Checkpoint</code> object;
    *   @return the <code>Checkpoint</code> object
    *   @throws JGDIException on any error
    */
   public Checkpoint getCheckpoint( String CK_name ) throws JGDIException {
        return getJGDI().getCheckpoint(CK_name);
   }
   
   /**
    *  Get a Checkpoint by its primary key
    *
    *  @return the Checkpoint
    *  @param CK_name   the CK_name of the <code>Checkpoint</code> object
   *  @param  answers the <code>answer list</code> object
    *  @return the found <code>Checkpoint</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public Checkpoint getCheckpointWithAnswer( String CK_name , List<JGDIAnswer> answers) throws JGDIException {
        return getJGDI().getCheckpointWithAnswer(CK_name, answers);
    }
   

   /**
    *  Update the <code>ParallelEnvironment</code> object.
    *
    *  @param  obj  the <code>ParallelEnvironment</code> object with the new values
    *  @throws JGDIException on any error
    */
   public void updateParallelEnvironment(ParallelEnvironment obj) throws JGDIException {
        getJGDI().updateParallelEnvironment(obj);
   }
   
   /**
    *   Update a <code>ParallelEnvironment</code> object.
    *   @param obj      the <code>ParallelEnvironment</code> object with the new values
    *   @param answers  the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void updateParallelEnvironmentWithAnswer(ParallelEnvironment obj, List<JGDIAnswer> answers) throws JGDIException {
        getJGDI().updateParallelEnvironmentWithAnswer(obj, answers);
   }
   

   /**
    *   Delete a <code>ParallelEnvironment</code> object.
    *   @param obj  <code>ParallelEnvironment</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteParallelEnvironment(ParallelEnvironment obj) throws JGDIException {
        getJGDI().deleteParallelEnvironment(obj);
   }
   
   /**
    *   Delete a <code>ParallelEnvironment</code> object.
    *   @param obj  <code>ParallelEnvironment</code> object with the primary key information
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteParallelEnvironmentWithAnswer(ParallelEnvironment obj, List<JGDIAnswer> answers) throws JGDIException {
       getJGDI().deleteParallelEnvironmentWithAnswer(obj, answers);
   }
   


   /**
    *   Delete the <code>ParallelEnvironment</code> object by primary key;
    *   @param PE_name   the PE_name of the <code>ParallelEnvironment</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteParallelEnvironment(String PE_name) throws JGDIException {
        getJGDI().deleteParallelEnvironment(PE_name);
   }
   
   /**
    *   Delete a <code>ParallelEnvironment</code> object by its primary key
    *   @param PE_name   the PE_name of the <code>ParallelEnvironment</code> object

       *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteParallelEnvironmentWithAnswer(String PE_name, List<JGDIAnswer> answers) throws JGDIException {
        getJGDI().deleteParallelEnvironmentWithAnswer(PE_name, answers);
    }

   /**
    *   Delete several <code>ParallelEnvironment</code> objects by their primary key
    *  @param PE_names   array of PE_name of the <code>ParallelEnvironment</code> objects
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteParallelEnvironmentsWithAnswer(String[] PE_names 
    , List<JGDIAnswer> answers) throws JGDIException {
        getJGDI().deleteParallelEnvironmentsWithAnswer(PE_names,

   answers);
   }

   /**
    *  Add a new <code>ParallelEnvironment</code> object.
    *
    *  @param obj  the new <code>ParallelEnvironment</code> object
    *  @throws JGDIException on any error
    */
   public void addParallelEnvironment(ParallelEnvironment obj) throws JGDIException {
        getJGDI().addParallelEnvironment(obj);
   }
   
   /**
    *   Add a new <code>ParallelEnvironment</code> object.
    *   @param  obj the new <code>ParallelEnvironment</code> object
    *   @param  answers the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addParallelEnvironmentWithAnswer(ParallelEnvironment obj, List<JGDIAnswer> answers) throws JGDIException {
       getJGDI().addParallelEnvironmentWithAnswer(obj, answers);
   }
   
       
   /**
    *  Get all <code>ParallelEnvironment</code> objects.
    *  @return a @{link java.util.List} of <code>ParallelEnvironment</code> objects
    *  @throws JGDIException on any error
    */
   public List getParallelEnvironmentList() throws JGDIException {
       return getJGDI().getParallelEnvironmentList();
   }
   
   /**
    *   Get the list of all defined <code>ParallelEnvironment</code> objects.
    *   @param answers  the <code>answer list</code> object    
    *   @return list of <code>ParallelEnvironment</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getParallelEnvironmentListWithAnswer(List<JGDIAnswer> answers) throws JGDIException {
       return getJGDI().getParallelEnvironmentListWithAnswer(answers);
   }
   
   

   /**
    *   Get the <code>ParallelEnvironment</code> object;
    *   @return the <code>ParallelEnvironment</code> object
    *   @throws JGDIException on any error
    */
   public ParallelEnvironment getParallelEnvironment( String PE_name ) throws JGDIException {
        return getJGDI().getParallelEnvironment(PE_name);
   }
   
   /**
    *  Get a ParallelEnvironment by its primary key
    *
    *  @return the ParallelEnvironment
    *  @param PE_name   the PE_name of the <code>ParallelEnvironment</code> object
   *  @param  answers the <code>answer list</code> object
    *  @return the found <code>ParallelEnvironment</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public ParallelEnvironment getParallelEnvironmentWithAnswer( String PE_name , List<JGDIAnswer> answers) throws JGDIException {
        return getJGDI().getParallelEnvironmentWithAnswer(PE_name, answers);
    }
   

   /**
    *  Update the <code>ComplexEntry</code> object.
    *
    *  @param  obj  the <code>ComplexEntry</code> object with the new values
    *  @throws JGDIException on any error
    */
   public void updateComplexEntry(ComplexEntry obj) throws JGDIException {
        getJGDI().updateComplexEntry(obj);
   }
   
   /**
    *   Update a <code>ComplexEntry</code> object.
    *   @param obj      the <code>ComplexEntry</code> object with the new values
    *   @param answers  the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void updateComplexEntryWithAnswer(ComplexEntry obj, List<JGDIAnswer> answers) throws JGDIException {
        getJGDI().updateComplexEntryWithAnswer(obj, answers);
   }
   

   /**
    *   Delete a <code>ComplexEntry</code> object.
    *   @param obj  <code>ComplexEntry</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteComplexEntry(ComplexEntry obj) throws JGDIException {
        getJGDI().deleteComplexEntry(obj);
   }
   
   /**
    *   Delete a <code>ComplexEntry</code> object.
    *   @param obj  <code>ComplexEntry</code> object with the primary key information
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteComplexEntryWithAnswer(ComplexEntry obj, List<JGDIAnswer> answers) throws JGDIException {
       getJGDI().deleteComplexEntryWithAnswer(obj, answers);
   }
   


   /**
    *   Delete the <code>ComplexEntry</code> object by primary key;
    *   @param CE_name   the CE_name of the <code>ComplexEntry</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteComplexEntry(String CE_name) throws JGDIException {
        getJGDI().deleteComplexEntry(CE_name);
   }
   
   /**
    *   Delete a <code>ComplexEntry</code> object by its primary key
    *   @param CE_name   the CE_name of the <code>ComplexEntry</code> object

       *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteComplexEntryWithAnswer(String CE_name, List<JGDIAnswer> answers) throws JGDIException {
        getJGDI().deleteComplexEntryWithAnswer(CE_name, answers);
    }

   /**
    *   Delete several <code>ComplexEntry</code> objects by their primary key
    *  @param CE_names   array of CE_name of the <code>ComplexEntry</code> objects
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteComplexEntrysWithAnswer(String[] CE_names 
    , List<JGDIAnswer> answers) throws JGDIException {
        getJGDI().deleteComplexEntrysWithAnswer(CE_names,

   answers);
   }

   /**
    *  Add a new <code>ComplexEntry</code> object.
    *
    *  @param obj  the new <code>ComplexEntry</code> object
    *  @throws JGDIException on any error
    */
   public void addComplexEntry(ComplexEntry obj) throws JGDIException {
        getJGDI().addComplexEntry(obj);
   }
   
   /**
    *   Add a new <code>ComplexEntry</code> object.
    *   @param  obj the new <code>ComplexEntry</code> object
    *   @param  answers the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addComplexEntryWithAnswer(ComplexEntry obj, List<JGDIAnswer> answers) throws JGDIException {
       getJGDI().addComplexEntryWithAnswer(obj, answers);
   }
   
       
   /**
    *  Get all <code>ComplexEntry</code> objects.
    *  @return a @{link java.util.List} of <code>ComplexEntry</code> objects
    *  @throws JGDIException on any error
    */
   public List getComplexEntryList() throws JGDIException {
       return getJGDI().getComplexEntryList();
   }
   
   /**
    *   Get the list of all defined <code>ComplexEntry</code> objects.
    *   @param answers  the <code>answer list</code> object    
    *   @return list of <code>ComplexEntry</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getComplexEntryListWithAnswer(List<JGDIAnswer> answers) throws JGDIException {
       return getJGDI().getComplexEntryListWithAnswer(answers);
   }
   
   

   /**
    *   Get the <code>ComplexEntry</code> object;
    *   @return the <code>ComplexEntry</code> object
    *   @throws JGDIException on any error
    */
   public ComplexEntry getComplexEntry( String CE_name ) throws JGDIException {
        return getJGDI().getComplexEntry(CE_name);
   }
   
   /**
    *  Get a ComplexEntry by its primary key
    *
    *  @return the ComplexEntry
    *  @param CE_name   the CE_name of the <code>ComplexEntry</code> object
   *  @param  answers the <code>answer list</code> object
    *  @return the found <code>ComplexEntry</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public ComplexEntry getComplexEntryWithAnswer( String CE_name , List<JGDIAnswer> answers) throws JGDIException {
        return getJGDI().getComplexEntryWithAnswer(CE_name, answers);
    }
   

   /**
    *  Update the <code>ClusterQueue</code> object.
    *
    *  @param  obj  the <code>ClusterQueue</code> object with the new values
    *  @throws JGDIException on any error
    */
   public void updateClusterQueue(ClusterQueue obj) throws JGDIException {
        getJGDI().updateClusterQueue(obj);
   }
   
   /**
    *   Update a <code>ClusterQueue</code> object.
    *   @param obj      the <code>ClusterQueue</code> object with the new values
    *   @param answers  the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void updateClusterQueueWithAnswer(ClusterQueue obj, List<JGDIAnswer> answers) throws JGDIException {
        getJGDI().updateClusterQueueWithAnswer(obj, answers);
   }
   

   /**
    *   Delete a <code>ClusterQueue</code> object.
    *   @param obj  <code>ClusterQueue</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteClusterQueue(ClusterQueue obj) throws JGDIException {
        getJGDI().deleteClusterQueue(obj);
   }
   
   /**
    *   Delete a <code>ClusterQueue</code> object.
    *   @param obj  <code>ClusterQueue</code> object with the primary key information
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteClusterQueueWithAnswer(ClusterQueue obj, List<JGDIAnswer> answers) throws JGDIException {
       getJGDI().deleteClusterQueueWithAnswer(obj, answers);
   }
   


   /**
    *   Delete the <code>ClusterQueue</code> object by primary key;
    *   @param CQ_name   the CQ_name of the <code>ClusterQueue</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteClusterQueue(String CQ_name) throws JGDIException {
        getJGDI().deleteClusterQueue(CQ_name);
   }
   
   /**
    *   Delete a <code>ClusterQueue</code> object by its primary key
    *   @param CQ_name   the CQ_name of the <code>ClusterQueue</code> object

       *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteClusterQueueWithAnswer(String CQ_name, List<JGDIAnswer> answers) throws JGDIException {
        getJGDI().deleteClusterQueueWithAnswer(CQ_name, answers);
    }

   /**
    *   Delete several <code>ClusterQueue</code> objects by their primary key
    *  @param CQ_names   array of CQ_name of the <code>ClusterQueue</code> objects
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteClusterQueuesWithAnswer(String[] CQ_names 
    , List<JGDIAnswer> answers) throws JGDIException {
        getJGDI().deleteClusterQueuesWithAnswer(CQ_names,

   answers);
   }

   /**
    *  Add a new <code>ClusterQueue</code> object.
    *
    *  @param obj  the new <code>ClusterQueue</code> object
    *  @throws JGDIException on any error
    */
   public void addClusterQueue(ClusterQueue obj) throws JGDIException {
        getJGDI().addClusterQueue(obj);
   }
   
   /**
    *   Add a new <code>ClusterQueue</code> object.
    *   @param  obj the new <code>ClusterQueue</code> object
    *   @param  answers the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addClusterQueueWithAnswer(ClusterQueue obj, List<JGDIAnswer> answers) throws JGDIException {
       getJGDI().addClusterQueueWithAnswer(obj, answers);
   }
   
       
   /**
    *  Get all <code>ClusterQueue</code> objects.
    *  @return a @{link java.util.List} of <code>ClusterQueue</code> objects
    *  @throws JGDIException on any error
    */
   public List getClusterQueueList() throws JGDIException {
       return getJGDI().getClusterQueueList();
   }
   
   /**
    *   Get the list of all defined <code>ClusterQueue</code> objects.
    *   @param answers  the <code>answer list</code> object    
    *   @return list of <code>ClusterQueue</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getClusterQueueListWithAnswer(List<JGDIAnswer> answers) throws JGDIException {
       return getJGDI().getClusterQueueListWithAnswer(answers);
   }
   
   

   /**
    *   Get the <code>ClusterQueue</code> object;
    *   @return the <code>ClusterQueue</code> object
    *   @throws JGDIException on any error
    */
   public ClusterQueue getClusterQueue( String CQ_name ) throws JGDIException {
        return getJGDI().getClusterQueue(CQ_name);
   }
   
   /**
    *  Get a ClusterQueue by its primary key
    *
    *  @return the ClusterQueue
    *  @param CQ_name   the CQ_name of the <code>ClusterQueue</code> object
   *  @param  answers the <code>answer list</code> object
    *  @return the found <code>ClusterQueue</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public ClusterQueue getClusterQueueWithAnswer( String CQ_name , List<JGDIAnswer> answers) throws JGDIException {
        return getJGDI().getClusterQueueWithAnswer(CQ_name, answers);
    }
   
 
   /**
    *   Get the <code>JobSchedulingInfo</code> object
    *   @return the <code>JobSchedulingInfo</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public JobSchedulingInfo getJobSchedulingInfo() throws JGDIException {
        return getJGDI().getJobSchedulingInfo();
   }

   /**
    *   Get the <code>JobSchedulingInfo</code> object.
    *   @param answers  the <code>answer list</code> object
    *   @return the <code>JobSchedulingInfo</code> object.
    *   @throws JGDIException on any error on the GDI layer
    */
   public JobSchedulingInfo getJobSchedulingInfoWithAnswer(List<JGDIAnswer> answers) throws JGDIException {
      return getJGDI().getJobSchedulingInfoWithAnswer(answers);
   }

   /**
    *  Update the <code>UserSet</code> object.
    *
    *  @param  obj  the <code>UserSet</code> object with the new values
    *  @throws JGDIException on any error
    */
   public void updateUserSet(UserSet obj) throws JGDIException {
        getJGDI().updateUserSet(obj);
   }
   
   /**
    *   Update a <code>UserSet</code> object.
    *   @param obj      the <code>UserSet</code> object with the new values
    *   @param answers  the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void updateUserSetWithAnswer(UserSet obj, List<JGDIAnswer> answers) throws JGDIException {
        getJGDI().updateUserSetWithAnswer(obj, answers);
   }
   

   /**
    *   Delete a <code>UserSet</code> object.
    *   @param obj  <code>UserSet</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteUserSet(UserSet obj) throws JGDIException {
        getJGDI().deleteUserSet(obj);
   }
   
   /**
    *   Delete a <code>UserSet</code> object.
    *   @param obj  <code>UserSet</code> object with the primary key information
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteUserSetWithAnswer(UserSet obj, List<JGDIAnswer> answers) throws JGDIException {
       getJGDI().deleteUserSetWithAnswer(obj, answers);
   }
   


   /**
    *   Delete the <code>UserSet</code> object by primary key;
    *   @param US_name   the US_name of the <code>UserSet</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteUserSet(String US_name) throws JGDIException {
        getJGDI().deleteUserSet(US_name);
   }
   
   /**
    *   Delete a <code>UserSet</code> object by its primary key
    *   @param US_name   the US_name of the <code>UserSet</code> object

       *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteUserSetWithAnswer(String US_name, List<JGDIAnswer> answers) throws JGDIException {
        getJGDI().deleteUserSetWithAnswer(US_name, answers);
    }

   /**
    *   Delete several <code>UserSet</code> objects by their primary key
    *  @param US_names   array of US_name of the <code>UserSet</code> objects
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteUserSetsWithAnswer(String[] US_names 
    , List<JGDIAnswer> answers) throws JGDIException {
        getJGDI().deleteUserSetsWithAnswer(US_names,

   answers);
   }

   /**
    *  Add a new <code>UserSet</code> object.
    *
    *  @param obj  the new <code>UserSet</code> object
    *  @throws JGDIException on any error
    */
   public void addUserSet(UserSet obj) throws JGDIException {
        getJGDI().addUserSet(obj);
   }
   
   /**
    *   Add a new <code>UserSet</code> object.
    *   @param  obj the new <code>UserSet</code> object
    *   @param  answers the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addUserSetWithAnswer(UserSet obj, List<JGDIAnswer> answers) throws JGDIException {
       getJGDI().addUserSetWithAnswer(obj, answers);
   }
   
       
   /**
    *  Get all <code>UserSet</code> objects.
    *  @return a @{link java.util.List} of <code>UserSet</code> objects
    *  @throws JGDIException on any error
    */
   public List getUserSetList() throws JGDIException {
       return getJGDI().getUserSetList();
   }
   
   /**
    *   Get the list of all defined <code>UserSet</code> objects.
    *   @param answers  the <code>answer list</code> object    
    *   @return list of <code>UserSet</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getUserSetListWithAnswer(List<JGDIAnswer> answers) throws JGDIException {
       return getJGDI().getUserSetListWithAnswer(answers);
   }
   
   

   /**
    *   Get the <code>UserSet</code> object;
    *   @return the <code>UserSet</code> object
    *   @throws JGDIException on any error
    */
   public UserSet getUserSet( String US_name ) throws JGDIException {
        return getJGDI().getUserSet(US_name);
   }
   
   /**
    *  Get a UserSet by its primary key
    *
    *  @return the UserSet
    *  @param US_name   the US_name of the <code>UserSet</code> object
   *  @param  answers the <code>answer list</code> object
    *  @return the found <code>UserSet</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public UserSet getUserSetWithAnswer( String US_name , List<JGDIAnswer> answers) throws JGDIException {
        return getJGDI().getUserSetWithAnswer(US_name, answers);
    }
   

   /**
    *  Update the <code>Calendar</code> object.
    *
    *  @param  obj  the <code>Calendar</code> object with the new values
    *  @throws JGDIException on any error
    */
   public void updateCalendar(Calendar obj) throws JGDIException {
        getJGDI().updateCalendar(obj);
   }
   
   /**
    *   Update a <code>Calendar</code> object.
    *   @param obj      the <code>Calendar</code> object with the new values
    *   @param answers  the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void updateCalendarWithAnswer(Calendar obj, List<JGDIAnswer> answers) throws JGDIException {
        getJGDI().updateCalendarWithAnswer(obj, answers);
   }
   

   /**
    *   Delete a <code>Calendar</code> object.
    *   @param obj  <code>Calendar</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteCalendar(Calendar obj) throws JGDIException {
        getJGDI().deleteCalendar(obj);
   }
   
   /**
    *   Delete a <code>Calendar</code> object.
    *   @param obj  <code>Calendar</code> object with the primary key information
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteCalendarWithAnswer(Calendar obj, List<JGDIAnswer> answers) throws JGDIException {
       getJGDI().deleteCalendarWithAnswer(obj, answers);
   }
   


   /**
    *   Delete the <code>Calendar</code> object by primary key;
    *   @param CAL_name   the CAL_name of the <code>Calendar</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteCalendar(String CAL_name) throws JGDIException {
        getJGDI().deleteCalendar(CAL_name);
   }
   
   /**
    *   Delete a <code>Calendar</code> object by its primary key
    *   @param CAL_name   the CAL_name of the <code>Calendar</code> object

       *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteCalendarWithAnswer(String CAL_name, List<JGDIAnswer> answers) throws JGDIException {
        getJGDI().deleteCalendarWithAnswer(CAL_name, answers);
    }

   /**
    *   Delete several <code>Calendar</code> objects by their primary key
    *  @param CAL_names   array of CAL_name of the <code>Calendar</code> objects
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteCalendarsWithAnswer(String[] CAL_names 
    , List<JGDIAnswer> answers) throws JGDIException {
        getJGDI().deleteCalendarsWithAnswer(CAL_names,

   answers);
   }

   /**
    *  Add a new <code>Calendar</code> object.
    *
    *  @param obj  the new <code>Calendar</code> object
    *  @throws JGDIException on any error
    */
   public void addCalendar(Calendar obj) throws JGDIException {
        getJGDI().addCalendar(obj);
   }
   
   /**
    *   Add a new <code>Calendar</code> object.
    *   @param  obj the new <code>Calendar</code> object
    *   @param  answers the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addCalendarWithAnswer(Calendar obj, List<JGDIAnswer> answers) throws JGDIException {
       getJGDI().addCalendarWithAnswer(obj, answers);
   }
   
       
   /**
    *  Get all <code>Calendar</code> objects.
    *  @return a @{link java.util.List} of <code>Calendar</code> objects
    *  @throws JGDIException on any error
    */
   public List getCalendarList() throws JGDIException {
       return getJGDI().getCalendarList();
   }
   
   /**
    *   Get the list of all defined <code>Calendar</code> objects.
    *   @param answers  the <code>answer list</code> object    
    *   @return list of <code>Calendar</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getCalendarListWithAnswer(List<JGDIAnswer> answers) throws JGDIException {
       return getJGDI().getCalendarListWithAnswer(answers);
   }
   
   

   /**
    *   Get the <code>Calendar</code> object;
    *   @return the <code>Calendar</code> object
    *   @throws JGDIException on any error
    */
   public Calendar getCalendar( String CAL_name ) throws JGDIException {
        return getJGDI().getCalendar(CAL_name);
   }
   
   /**
    *  Get a Calendar by its primary key
    *
    *  @return the Calendar
    *  @param CAL_name   the CAL_name of the <code>Calendar</code> object
   *  @param  answers the <code>answer list</code> object
    *  @return the found <code>Calendar</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public Calendar getCalendarWithAnswer( String CAL_name , List<JGDIAnswer> answers) throws JGDIException {
        return getJGDI().getCalendarWithAnswer(CAL_name, answers);
    }
   

   /**
    *   Delete a <code>Operator</code> object.
    *   @param obj  <code>Operator</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteOperator(Operator obj) throws JGDIException {
        getJGDI().deleteOperator(obj);
   }
   
   /**
    *   Delete a <code>Operator</code> object.
    *   @param obj  <code>Operator</code> object with the primary key information
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteOperatorWithAnswer(Operator obj, List<JGDIAnswer> answers) throws JGDIException {
       getJGDI().deleteOperatorWithAnswer(obj, answers);
   }
   


   /**
    *   Delete the <code>Operator</code> object by primary key;
    *   @param UO_name   the UO_name of the <code>Operator</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteOperator(String UO_name) throws JGDIException {
        getJGDI().deleteOperator(UO_name);
   }
   
   /**
    *   Delete a <code>Operator</code> object by its primary key
    *   @param UO_name   the UO_name of the <code>Operator</code> object

       *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteOperatorWithAnswer(String UO_name, List<JGDIAnswer> answers) throws JGDIException {
        getJGDI().deleteOperatorWithAnswer(UO_name, answers);
    }

   /**
    *   Delete several <code>Operator</code> objects by their primary key
    *  @param UO_names   array of UO_name of the <code>Operator</code> objects
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteOperatorsWithAnswer(String[] UO_names 
    , List<JGDIAnswer> answers) throws JGDIException {
        getJGDI().deleteOperatorsWithAnswer(UO_names,

   answers);
   }

   /**
    *  Add a new <code>Operator</code> object.
    *
    *  @param obj  the new <code>Operator</code> object
    *  @throws JGDIException on any error
    */
   public void addOperator(Operator obj) throws JGDIException {
        getJGDI().addOperator(obj);
   }
   
   /**
    *   Add a new <code>Operator</code> object.
    *   @param  obj the new <code>Operator</code> object
    *   @param  answers the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addOperatorWithAnswer(Operator obj, List<JGDIAnswer> answers) throws JGDIException {
       getJGDI().addOperatorWithAnswer(obj, answers);
   }
   

   /**
    *   Add a new <code>Operator</code> object.
    *   @param  name the new <code>String</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addOperator(String name) throws JGDIException {
       getJGDI().addOperator(name);
   }

   /**
    *   Add a new <code>Operator</code> object.
    *   @param  name the new <code>String</code> object
    *   @param  answers the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addOperatorWithAnswer(String name, List<JGDIAnswer> answers) throws JGDIException {
       getJGDI().addOperatorWithAnswer(name, answers);
   }
       
   /**
    *  Get all <code>Operator</code> objects.
    *  @return a @{link java.util.List} of <code>Operator</code> objects
    *  @throws JGDIException on any error
    */
   public List getOperatorList() throws JGDIException {
       return getJGDI().getOperatorList();
   }
   
   /**
    *   Get the list of all defined <code>Operator</code> objects.
    *   @param answers  the <code>answer list</code> object    
    *   @return list of <code>Operator</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getOperatorListWithAnswer(List<JGDIAnswer> answers) throws JGDIException {
       return getJGDI().getOperatorListWithAnswer(answers);
   }
   
   

   /**
    *   Get the <code>Operator</code> object;
    *   @return the <code>Operator</code> object
    *   @throws JGDIException on any error
    */
   public Operator getOperator( String UO_name ) throws JGDIException {
        return getJGDI().getOperator(UO_name);
   }
   
   /**
    *  Get a Operator by its primary key
    *
    *  @return the Operator
    *  @param UO_name   the UO_name of the <code>Operator</code> object
   *  @param  answers the <code>answer list</code> object
    *  @return the found <code>Operator</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public Operator getOperatorWithAnswer( String UO_name , List<JGDIAnswer> answers) throws JGDIException {
        return getJGDI().getOperatorWithAnswer(UO_name, answers);
    }
   

   /**
    *  Update the <code>Job</code> object.
    *
    *  @param  obj  the <code>Job</code> object with the new values
    *  @throws JGDIException on any error
    */
   public void updateJob(Job obj) throws JGDIException {
        getJGDI().updateJob(obj);
   }
   
   /**
    *   Update a <code>Job</code> object.
    *   @param obj      the <code>Job</code> object with the new values
    *   @param answers  the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void updateJobWithAnswer(Job obj, List<JGDIAnswer> answers) throws JGDIException {
        getJGDI().updateJobWithAnswer(obj, answers);
   }
   

   /**
    *   Delete a <code>Job</code> object.
    *   @param obj  <code>Job</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteJob(Job obj) throws JGDIException {
        getJGDI().deleteJob(obj);
   }
   
   /**
    *   Delete a <code>Job</code> object.
    *   @param obj  <code>Job</code> object with the primary key information
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteJobWithAnswer(Job obj, List<JGDIAnswer> answers) throws JGDIException {
       getJGDI().deleteJobWithAnswer(obj, answers);
   }
   


   /**
    *   Delete the <code>Job</code> object by primary key;
    *   @param JB_job_number   the JB_job_number of the <code>Job</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteJob(int JB_job_number) throws JGDIException {
        getJGDI().deleteJob(JB_job_number);
   }
   
   /**
    *   Delete a <code>Job</code> object by its primary key
    *   @param JB_job_number   the JB_job_number of the <code>Job</code> object

       *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteJobWithAnswer(int JB_job_number, List<JGDIAnswer> answers) throws JGDIException {
        getJGDI().deleteJobWithAnswer(JB_job_number, answers);
    }

   /**
    *   Delete several <code>Job</code> objects by their primary key
    *  @param JB_job_numbers   array of JB_job_number of the <code>Job</code> objects
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteJobsWithAnswer(String[] JB_job_numbers 

    , boolean forced, UserFilter userFilter
    , List<JGDIAnswer> answers) throws JGDIException {
        getJGDI().deleteJobsWithAnswer(JB_job_numbers,

    forced, userFilter,

   answers);
   }

   /**
    *  Add a new <code>Job</code> object.
    *
    *  @param obj  the new <code>Job</code> object
    *  @throws JGDIException on any error
    */
   public void addJob(Job obj) throws JGDIException {
        getJGDI().addJob(obj);
   }
   
   /**
    *   Add a new <code>Job</code> object.
    *   @param  obj the new <code>Job</code> object
    *   @param  answers the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addJobWithAnswer(Job obj, List<JGDIAnswer> answers) throws JGDIException {
       getJGDI().addJobWithAnswer(obj, answers);
   }
   
       
   /**
    *  Get all <code>Job</code> objects.
    *  @return a @{link java.util.List} of <code>Job</code> objects
    *  @throws JGDIException on any error
    */
   public List getJobList() throws JGDIException {
       return getJGDI().getJobList();
   }
   
   /**
    *   Get the list of all defined <code>Job</code> objects.
    *   @param answers  the <code>answer list</code> object    
    *   @return list of <code>Job</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getJobListWithAnswer(List<JGDIAnswer> answers) throws JGDIException {
       return getJGDI().getJobListWithAnswer(answers);
   }
   
   

   /**
    *   Get the <code>Job</code> object;
    *   @return the <code>Job</code> object
    *   @throws JGDIException on any error
    */
   public Job getJob( int JB_job_number ) throws JGDIException {
        return getJGDI().getJob(JB_job_number);
   }
   
   /**
    *  Get a Job by its primary key
    *
    *  @return the Job
    *  @param JB_job_number   the JB_job_number of the <code>Job</code> object
   *  @param  answers the <code>answer list</code> object
    *  @return the found <code>Job</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public Job getJobWithAnswer( int JB_job_number , List<JGDIAnswer> answers) throws JGDIException {
        return getJGDI().getJobWithAnswer(JB_job_number, answers);
    }
   

   /**
    *  Update the <code>ResourceQuotaSet</code> object.
    *
    *  @param  obj  the <code>ResourceQuotaSet</code> object with the new values
    *  @throws JGDIException on any error
    */
   public void updateResourceQuotaSet(ResourceQuotaSet obj) throws JGDIException {
        getJGDI().updateResourceQuotaSet(obj);
   }
   
   /**
    *   Update a <code>ResourceQuotaSet</code> object.
    *   @param obj      the <code>ResourceQuotaSet</code> object with the new values
    *   @param answers  the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void updateResourceQuotaSetWithAnswer(ResourceQuotaSet obj, List<JGDIAnswer> answers) throws JGDIException {
        getJGDI().updateResourceQuotaSetWithAnswer(obj, answers);
   }
   

   /**
    *   Delete a <code>ResourceQuotaSet</code> object.
    *   @param obj  <code>ResourceQuotaSet</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteResourceQuotaSet(ResourceQuotaSet obj) throws JGDIException {
        getJGDI().deleteResourceQuotaSet(obj);
   }
   
   /**
    *   Delete a <code>ResourceQuotaSet</code> object.
    *   @param obj  <code>ResourceQuotaSet</code> object with the primary key information
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteResourceQuotaSetWithAnswer(ResourceQuotaSet obj, List<JGDIAnswer> answers) throws JGDIException {
       getJGDI().deleteResourceQuotaSetWithAnswer(obj, answers);
   }
   


   /**
    *   Delete the <code>ResourceQuotaSet</code> object by primary key;
    *   @param RQS_name   the RQS_name of the <code>ResourceQuotaSet</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteResourceQuotaSet(String RQS_name) throws JGDIException {
        getJGDI().deleteResourceQuotaSet(RQS_name);
   }
   
   /**
    *   Delete a <code>ResourceQuotaSet</code> object by its primary key
    *   @param RQS_name   the RQS_name of the <code>ResourceQuotaSet</code> object

       *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteResourceQuotaSetWithAnswer(String RQS_name, List<JGDIAnswer> answers) throws JGDIException {
        getJGDI().deleteResourceQuotaSetWithAnswer(RQS_name, answers);
    }

   /**
    *   Delete several <code>ResourceQuotaSet</code> objects by their primary key
    *  @param RQS_names   array of RQS_name of the <code>ResourceQuotaSet</code> objects
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteResourceQuotaSetsWithAnswer(String[] RQS_names 
    , List<JGDIAnswer> answers) throws JGDIException {
        getJGDI().deleteResourceQuotaSetsWithAnswer(RQS_names,

   answers);
   }

   /**
    *  Add a new <code>ResourceQuotaSet</code> object.
    *
    *  @param obj  the new <code>ResourceQuotaSet</code> object
    *  @throws JGDIException on any error
    */
   public void addResourceQuotaSet(ResourceQuotaSet obj) throws JGDIException {
        getJGDI().addResourceQuotaSet(obj);
   }
   
   /**
    *   Add a new <code>ResourceQuotaSet</code> object.
    *   @param  obj the new <code>ResourceQuotaSet</code> object
    *   @param  answers the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addResourceQuotaSetWithAnswer(ResourceQuotaSet obj, List<JGDIAnswer> answers) throws JGDIException {
       getJGDI().addResourceQuotaSetWithAnswer(obj, answers);
   }
   
       
   /**
    *  Get all <code>ResourceQuotaSet</code> objects.
    *  @return a @{link java.util.List} of <code>ResourceQuotaSet</code> objects
    *  @throws JGDIException on any error
    */
   public List getResourceQuotaSetList() throws JGDIException {
       return getJGDI().getResourceQuotaSetList();
   }
   
   /**
    *   Get the list of all defined <code>ResourceQuotaSet</code> objects.
    *   @param answers  the <code>answer list</code> object    
    *   @return list of <code>ResourceQuotaSet</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getResourceQuotaSetListWithAnswer(List<JGDIAnswer> answers) throws JGDIException {
       return getJGDI().getResourceQuotaSetListWithAnswer(answers);
   }
   
   

   /**
    *   Get the <code>ResourceQuotaSet</code> object;
    *   @return the <code>ResourceQuotaSet</code> object
    *   @throws JGDIException on any error
    */
   public ResourceQuotaSet getResourceQuotaSet( String RQS_name ) throws JGDIException {
        return getJGDI().getResourceQuotaSet(RQS_name);
   }
   
   /**
    *  Get a ResourceQuotaSet by its primary key
    *
    *  @return the ResourceQuotaSet
    *  @param RQS_name   the RQS_name of the <code>ResourceQuotaSet</code> object
   *  @param  answers the <code>answer list</code> object
    *  @return the found <code>ResourceQuotaSet</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public ResourceQuotaSet getResourceQuotaSetWithAnswer( String RQS_name , List<JGDIAnswer> answers) throws JGDIException {
        return getJGDI().getResourceQuotaSetWithAnswer(RQS_name, answers);
    }
   
       
   /**
    *  Get all <code>EventClient</code> objects.
    *  @return a @{link java.util.List} of <code>EventClient</code> objects
    *  @throws JGDIException on any error
    */
   public List getEventClientList() throws JGDIException {
       return getJGDI().getEventClientList();
   }
   
   /**
    *   Get the list of all defined <code>EventClient</code> objects.
    *   @param answers  the <code>answer list</code> object    
    *   @return list of <code>EventClient</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getEventClientListWithAnswer(List<JGDIAnswer> answers) throws JGDIException {
       return getJGDI().getEventClientListWithAnswer(answers);
   }
   
   

   /**
    *  Update the <code>User</code> object.
    *
    *  @param  obj  the <code>User</code> object with the new values
    *  @throws JGDIException on any error
    */
   public void updateUser(User obj) throws JGDIException {
        getJGDI().updateUser(obj);
   }
   
   /**
    *   Update a <code>User</code> object.
    *   @param obj      the <code>User</code> object with the new values
    *   @param answers  the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void updateUserWithAnswer(User obj, List<JGDIAnswer> answers) throws JGDIException {
        getJGDI().updateUserWithAnswer(obj, answers);
   }
   

   /**
    *   Delete a <code>User</code> object.
    *   @param obj  <code>User</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteUser(User obj) throws JGDIException {
        getJGDI().deleteUser(obj);
   }
   
   /**
    *   Delete a <code>User</code> object.
    *   @param obj  <code>User</code> object with the primary key information
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteUserWithAnswer(User obj, List<JGDIAnswer> answers) throws JGDIException {
       getJGDI().deleteUserWithAnswer(obj, answers);
   }
   


   /**
    *   Delete the <code>User</code> object by primary key;
    *   @param UU_name   the UU_name of the <code>User</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteUser(String UU_name) throws JGDIException {
        getJGDI().deleteUser(UU_name);
   }
   
   /**
    *   Delete a <code>User</code> object by its primary key
    *   @param UU_name   the UU_name of the <code>User</code> object

       *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteUserWithAnswer(String UU_name, List<JGDIAnswer> answers) throws JGDIException {
        getJGDI().deleteUserWithAnswer(UU_name, answers);
    }

   /**
    *   Delete several <code>User</code> objects by their primary key
    *  @param UU_names   array of UU_name of the <code>User</code> objects
    *  @param answers   the <code>answer list</code> object
    *  @throws JGDIException on any error on the GDI layer
    */
   public void deleteUsersWithAnswer(String[] UU_names 
    , List<JGDIAnswer> answers) throws JGDIException {
        getJGDI().deleteUsersWithAnswer(UU_names,

   answers);
   }

   /**
    *  Add a new <code>User</code> object.
    *
    *  @param obj  the new <code>User</code> object
    *  @throws JGDIException on any error
    */
   public void addUser(User obj) throws JGDIException {
        getJGDI().addUser(obj);
   }
   
   /**
    *   Add a new <code>User</code> object.
    *   @param  obj the new <code>User</code> object
    *   @param  answers the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addUserWithAnswer(User obj, List<JGDIAnswer> answers) throws JGDIException {
       getJGDI().addUserWithAnswer(obj, answers);
   }
   
       
   /**
    *  Get all <code>User</code> objects.
    *  @return a @{link java.util.List} of <code>User</code> objects
    *  @throws JGDIException on any error
    */
   public List getUserList() throws JGDIException {
       return getJGDI().getUserList();
   }
   
   /**
    *   Get the list of all defined <code>User</code> objects.
    *   @param answers  the <code>answer list</code> object    
    *   @return list of <code>User</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getUserListWithAnswer(List<JGDIAnswer> answers) throws JGDIException {
       return getJGDI().getUserListWithAnswer(answers);
   }
   
   

   /**
    *   Get the <code>User</code> object;
    *   @return the <code>User</code> object
    *   @throws JGDIException on any error
    */
   public User getUser( String UU_name ) throws JGDIException {
        return getJGDI().getUser(UU_name);
   }
   
   /**
    *  Get a User by its primary key
    *
    *  @return the User
    *  @param UU_name   the UU_name of the <code>User</code> object
   *  @param  answers the <code>answer list</code> object
    *  @return the found <code>User</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public User getUserWithAnswer( String UU_name , List<JGDIAnswer> answers) throws JGDIException {
        return getJGDI().getUserWithAnswer(UU_name, answers);
    }
   

}
