/*___INFO__MARK_BEGIN__*/
/*************************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  the Sun Industry Standards Source License Version 1.2
 *
 *  Sun Microsystems Inc., March, 2001
 *
 *
 *  Sun Industry Standards Source License Version 1.2
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.2 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *   Copyright: 2001 by Sun Microsystems, Inc.
 *
 *   All Rights Reserved.
 *
 ************************************************************************/
/*___INFO__MARK_END__*/
/**
 *  Generated from javamodel_impl.jsp
 *  !!! DO NOT EDIT THIS FILE !!!
 */

package com.sun.grid.jgdi.configuration;

import javax.management.*;
import com.sun.grid.jgdi.configuration.GEObject;
import java.util.List;
import java.util.LinkedList;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.logging.Logger;
import java.util.logging.Level;

/**
 *  Java representation of the cull object EVS_Type
 *  defined in sge_all_listsL.template
 *
 *  <p><strong>Warning:</strong>  The  EventSubcribtionImpl class will 
 *  not be compatible with future Sun&trade; Grid Engine releases.</p>
 */
public class EventSubcribtionImpl extends    GEObjectImpl implements EventSubcribtion {


   /**
    *  Create a new instance of EventSubcribtionImpl. The new instance
    *  will not be initialized with the default values.
    */
   public EventSubcribtionImpl() {
      this(false);
   }
   
   /**
    *   Create a new instanceof
    *   @param  initWithDefaultValues if <code>true</code> the new instance will
    *                                 be initialized with the default values as defined
    *                                 in the cull definition.
    */
   public EventSubcribtionImpl(boolean initWithDefaultValues) { 

      if (initWithDefaultValues) {     
    }

  } // end of default constructor
  
  // --- newInstance method with primary key field
  



    // Attribute id ------------------------------------------------

    private boolean isIdSet;
   
    /**
     *  Determine if the id attribute is set
     *  @return <code>true</code> if the id attribute is set
     */
    public boolean isSetId() {

        return isIdSet;

    }
   
    private int m_id;

    /**
     *   Set the id attribute.
     *
     *   @param aId  the new value for the  id attribute
     */
    public void setId(int aId) {   
        m_id = aId;

        isIdSet = true;

    }

    /**
     *  Get the value of the id attribute.
     *  @return the value of the id attribute
     */
    public int getId() {
        return m_id;
    }


    // Attribute flush ------------------------------------------------

    private boolean isFlushSet;
   
    /**
     *  Determine if the flush attribute is set
     *  @return <code>true</code> if the flush attribute is set
     */
    public boolean isSetFlush() {

        return isFlushSet;

    }
   
    private boolean m_flush;

    /**
     *   Set the flush attribute.
     *
     *   @param aFlush  the new value for the  flush attribute
     */
    public void setFlush(boolean aFlush) {   
        m_flush = aFlush;

        isFlushSet = true;

    }

    /**
     *  Get the value of the flush attribute.
     *  @return the value of the flush attribute
     */
    public boolean isFlush() {
        return m_flush;
    }


    // Attribute interval ------------------------------------------------

    private boolean isIntervalSet;
   
    /**
     *  Determine if the interval attribute is set
     *  @return <code>true</code> if the interval attribute is set
     */
    public boolean isSetInterval() {

        return isIntervalSet;

    }
   
    private int m_interval;

    /**
     *   Set the interval attribute.
     *
     *   @param aInterval  the new value for the  interval attribute
     */
    public void setInterval(int aInterval) {   
        m_interval = aInterval;

        isIntervalSet = true;

    }

    /**
     *  Get the value of the interval attribute.
     *  @return the value of the interval attribute
     */
    public int getInterval() {
        return m_interval;
    }




    /**
     *  Is the primary key information equal to the primary key information
     *  of <code>obj</code>.
     *
     *  @param obj   the compared object
     *  @return <code>true</code> if the primary key information is equal to the
     *          primary key informations of <code>obj</code>.
     */
    public boolean equals(Object obj) {
            
            return obj instanceof EventSubcribtionImpl;

    }

    
    
    public boolean equalsCompletely(Object obj) {
        Logger logger = Logger.getLogger(getClass().getName());
        if (obj instanceof  EventSubcribtionImpl) {
            com.sun.grid.jgdi.configuration.EventSubcribtion obj1 = (com.sun.grid.jgdi.configuration.EventSubcribtion)obj;

            {
                int value1 = getId();
                int value2 = obj1.getId();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes EVS_id are not equal");
                }
                return false;
            }

            }

            {
                boolean value1 = isFlush();
                boolean value2 = obj1.isFlush();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes EVS_flush are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getInterval();
                int value2 = obj1.getInterval();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes EVS_interval are not equal");
                }
                return false;
            }

            }

            return true;
        } else {
            return true;
        }
    }
  
    public java.lang.String toString() {
        StringBuilder ret = new StringBuilder();
        ret.append("EventSubcribtionImpl(");

        ret.append(")");
        return ret.toString();
    }



    public java.lang.String dump() {
        StringBuilder sb = new StringBuilder();

            {
                int value = getId();
                sb.append("Id = " + value + "\n");
            }

            {
                boolean value = isFlush();
                sb.append("Flush = " + value + "\n");
            }

            {
                int value = getInterval();
                sb.append("Interval = " + value + "\n");
            }

        return sb.toString();
    }    

 
}
