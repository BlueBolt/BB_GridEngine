/*___INFO__MARK_BEGIN__*/
/*************************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  the Sun Industry Standards Source License Version 1.2
 *
 *  Sun Microsystems Inc., March, 2001
 *
 *
 *  Sun Industry Standards Source License Version 1.2
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.2 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *   Copyright: 2001 by Sun Microsystems, Inc.
 *
 *   All Rights Reserved.
 *
 ************************************************************************/
/*___INFO__MARK_END__*/
/**
 *  Generated from javamodel_impl.jsp
 *  !!! DO NOT EDIT THIS FILE !!!
 */

package com.sun.grid.jgdi.configuration;

import javax.management.*;
import com.sun.grid.jgdi.configuration.GEObject;
import java.util.List;
import java.util.LinkedList;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.logging.Logger;
import java.util.logging.Level;

/**
 *  Java representation of the cull object CK_Type
 *  defined in sge_all_listsL.template
 *
 *  <p><strong>Warning:</strong>  The  CheckpointImpl class will 
 *  not be compatible with future Sun&trade; Grid Engine releases.</p>
 */
public class CheckpointImpl extends    GEObjectImpl implements Checkpoint {


   /**
    *  Create a new instance of CheckpointImpl. The new instance
    *  will not be initialized with the default values.
    */
   public CheckpointImpl() {
      this(false);
   }
   
   /**
    *   Create a new instanceof
    *   @param  initWithDefaultValues if <code>true</code> the new instance will
    *                                 be initialized with the default values as defined
    *                                 in the cull definition.
    */
   public CheckpointImpl(boolean initWithDefaultValues) { 

      if (initWithDefaultValues) { 
       setName("template");
       setInterface("userdefined");
       setCkptCommand("none");
       setMigrCommand("none");
       setRestCommand("none");
       setCkptDir("/tmp");
       setWhen("sx");
       setSignal("none");
       setCleanCommand("none");    
    }

  } // end of default constructor
  
  // --- newInstance method with primary key field
  

   /**
    *  Create a new instance of CheckpointImpl
    */
   public CheckpointImpl(java.lang.String name ) {

   
         setName(name);

    }



    // Attribute name ------------------------------------------------
   
    /**
     *  Determine if the name attribute is set
     *  @return <code>true</code> if the name attribute is set
     */
    public boolean isSetName() {
   
        return  (m_name != null);

    }
   
    private java.lang.String m_name;

    /**
     *   Set the name attribute.
     *
     *   @param aName  the new value for the  name attribute
     */
    public void setName(java.lang.String aName) {   
        m_name = aName;

    }

    /**
     *  Get the value of the name attribute.
     *  @return the value of the name attribute
     */
    public java.lang.String getName() {
        return m_name;
    }


    // Attribute interface ------------------------------------------------
   
    /**
     *  Determine if the interface attribute is set
     *  @return <code>true</code> if the interface attribute is set
     */
    public boolean isSetInterface() {
   
        return  (m_interface != null);

    }
   
    private java.lang.String m_interface;

    /**
     *   Set the interface attribute.
     *
     *   @param aInterface  the new value for the  interface attribute
     */
    public void setInterface(java.lang.String aInterface) {   
        m_interface = aInterface;

    }

    /**
     *  Get the value of the interface attribute.
     *  @return the value of the interface attribute
     */
    public java.lang.String getInterface() {
        return m_interface;
    }


    // Attribute ckptCommand ------------------------------------------------
   
    /**
     *  Determine if the ckptCommand attribute is set
     *  @return <code>true</code> if the ckptCommand attribute is set
     */
    public boolean isSetCkptCommand() {
   
        return  (m_ckptCommand != null);

    }
   
    private java.lang.String m_ckptCommand;

    /**
     *   Set the ckptCommand attribute.
     *
     *   @param aCkptCommand  the new value for the  ckptCommand attribute
     */
    public void setCkptCommand(java.lang.String aCkptCommand) {   
        m_ckptCommand = aCkptCommand;

    }

    /**
     *  Get the value of the ckptCommand attribute.
     *  @return the value of the ckptCommand attribute
     */
    public java.lang.String getCkptCommand() {
        return m_ckptCommand;
    }


    // Attribute migrCommand ------------------------------------------------
   
    /**
     *  Determine if the migrCommand attribute is set
     *  @return <code>true</code> if the migrCommand attribute is set
     */
    public boolean isSetMigrCommand() {
   
        return  (m_migrCommand != null);

    }
   
    private java.lang.String m_migrCommand;

    /**
     *   Set the migrCommand attribute.
     *
     *   @param aMigrCommand  the new value for the  migrCommand attribute
     */
    public void setMigrCommand(java.lang.String aMigrCommand) {   
        m_migrCommand = aMigrCommand;

    }

    /**
     *  Get the value of the migrCommand attribute.
     *  @return the value of the migrCommand attribute
     */
    public java.lang.String getMigrCommand() {
        return m_migrCommand;
    }


    // Attribute restCommand ------------------------------------------------
   
    /**
     *  Determine if the restCommand attribute is set
     *  @return <code>true</code> if the restCommand attribute is set
     */
    public boolean isSetRestCommand() {
   
        return  (m_restCommand != null);

    }
   
    private java.lang.String m_restCommand;

    /**
     *   Set the restCommand attribute.
     *
     *   @param aRestCommand  the new value for the  restCommand attribute
     */
    public void setRestCommand(java.lang.String aRestCommand) {   
        m_restCommand = aRestCommand;

    }

    /**
     *  Get the value of the restCommand attribute.
     *  @return the value of the restCommand attribute
     */
    public java.lang.String getRestCommand() {
        return m_restCommand;
    }


    // Attribute ckptDir ------------------------------------------------
   
    /**
     *  Determine if the ckptDir attribute is set
     *  @return <code>true</code> if the ckptDir attribute is set
     */
    public boolean isSetCkptDir() {
   
        return  (m_ckptDir != null);

    }
   
    private java.lang.String m_ckptDir;

    /**
     *   Set the ckptDir attribute.
     *
     *   @param aCkptDir  the new value for the  ckptDir attribute
     */
    public void setCkptDir(java.lang.String aCkptDir) {   
        m_ckptDir = aCkptDir;

    }

    /**
     *  Get the value of the ckptDir attribute.
     *  @return the value of the ckptDir attribute
     */
    public java.lang.String getCkptDir() {
        return m_ckptDir;
    }


    // Attribute when ------------------------------------------------
   
    /**
     *  Determine if the when attribute is set
     *  @return <code>true</code> if the when attribute is set
     */
    public boolean isSetWhen() {
   
        return  (m_when != null);

    }
   
    private java.lang.String m_when;

    /**
     *   Set the when attribute.
     *
     *   @param aWhen  the new value for the  when attribute
     */
    public void setWhen(java.lang.String aWhen) {   
        m_when = aWhen;

    }

    /**
     *  Get the value of the when attribute.
     *  @return the value of the when attribute
     */
    public java.lang.String getWhen() {
        return m_when;
    }


    // Attribute signal ------------------------------------------------
   
    /**
     *  Determine if the signal attribute is set
     *  @return <code>true</code> if the signal attribute is set
     */
    public boolean isSetSignal() {
   
        return  (m_signal != null);

    }
   
    private java.lang.String m_signal;

    /**
     *   Set the signal attribute.
     *
     *   @param aSignal  the new value for the  signal attribute
     */
    public void setSignal(java.lang.String aSignal) {   
        m_signal = aSignal;

    }

    /**
     *  Get the value of the signal attribute.
     *  @return the value of the signal attribute
     */
    public java.lang.String getSignal() {
        return m_signal;
    }


    // Attribute cleanCommand ------------------------------------------------
   
    /**
     *  Determine if the cleanCommand attribute is set
     *  @return <code>true</code> if the cleanCommand attribute is set
     */
    public boolean isSetCleanCommand() {
   
        return  (m_cleanCommand != null);

    }
   
    private java.lang.String m_cleanCommand;

    /**
     *   Set the cleanCommand attribute.
     *
     *   @param aCleanCommand  the new value for the  cleanCommand attribute
     */
    public void setCleanCommand(java.lang.String aCleanCommand) {   
        m_cleanCommand = aCleanCommand;

    }

    /**
     *  Get the value of the cleanCommand attribute.
     *  @return the value of the cleanCommand attribute
     */
    public java.lang.String getCleanCommand() {
        return m_cleanCommand;
    }




    /**
     *  Is the primary key information equal to the primary key information
     *  of <code>obj</code>.
     *
     *  @param obj   the compared object
     *  @return <code>true</code> if the primary key information is equal to the
     *          primary key informations of <code>obj</code>.
     */
    public boolean equals(Object obj) {

        return (obj instanceof CheckpointImpl && getName().equals(((com.sun.grid.jgdi.configuration.Checkpoint)obj).getName()));

    }

    
    
    public boolean equalsCompletely(Object obj) {
        Logger logger = Logger.getLogger(getClass().getName());
        if (obj instanceof  CheckpointImpl) {
            com.sun.grid.jgdi.configuration.Checkpoint obj1 = (com.sun.grid.jgdi.configuration.Checkpoint)obj;

            {
                java.lang.String value1 = getName();
                java.lang.String value2 = obj1.getName();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute CK_name of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes CK_name are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                java.lang.String value1 = getInterface();
                java.lang.String value2 = obj1.getInterface();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute CK_interface of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes CK_interface are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                java.lang.String value1 = getCkptCommand();
                java.lang.String value2 = obj1.getCkptCommand();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute CK_ckpt_command of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes CK_ckpt_command are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                java.lang.String value1 = getMigrCommand();
                java.lang.String value2 = obj1.getMigrCommand();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute CK_migr_command of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes CK_migr_command are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                java.lang.String value1 = getRestCommand();
                java.lang.String value2 = obj1.getRestCommand();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute CK_rest_command of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes CK_rest_command are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                java.lang.String value1 = getCkptDir();
                java.lang.String value2 = obj1.getCkptDir();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute CK_ckpt_dir of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes CK_ckpt_dir are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                java.lang.String value1 = getWhen();
                java.lang.String value2 = obj1.getWhen();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute CK_when of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes CK_when are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                java.lang.String value1 = getSignal();
                java.lang.String value2 = obj1.getSignal();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute CK_signal of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes CK_signal are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                java.lang.String value1 = getCleanCommand();
                java.lang.String value2 = obj1.getCleanCommand();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute CK_clean_command of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes CK_clean_command are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            return true;
        } else {
            return true;
        }
    }
  
    public java.lang.String toString() {
        StringBuilder ret = new StringBuilder();
        ret.append("CheckpointImpl(");

        ret.append(getName());

        ret.append(")");
        return ret.toString();
    }



    public java.lang.String dump() {
        StringBuilder sb = new StringBuilder();

            {
                java.lang.String value = getName();
                sb.append("Name = " + value + "\n");
            }

            {
                java.lang.String value = getInterface();
                sb.append("Interface = " + value + "\n");
            }

            {
                java.lang.String value = getCkptCommand();
                sb.append("CkptCommand = " + value + "\n");
            }

            {
                java.lang.String value = getMigrCommand();
                sb.append("MigrCommand = " + value + "\n");
            }

            {
                java.lang.String value = getRestCommand();
                sb.append("RestCommand = " + value + "\n");
            }

            {
                java.lang.String value = getCkptDir();
                sb.append("CkptDir = " + value + "\n");
            }

            {
                java.lang.String value = getWhen();
                sb.append("When = " + value + "\n");
            }

            {
                java.lang.String value = getSignal();
                sb.append("Signal = " + value + "\n");
            }

            {
                java.lang.String value = getCleanCommand();
                sb.append("CleanCommand = " + value + "\n");
            }

        return sb.toString();
    }    

 
}
