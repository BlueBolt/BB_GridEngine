/*___INFO__MARK_BEGIN__*/
/*************************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  the Sun Industry Standards Source License Version 1.2
 *
 *  Sun Microsystems Inc., March, 2001
 *
 *
 *  Sun Industry Standards Source License Version 1.2
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.2 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *   Copyright: 2001 by Sun Microsystems, Inc.
 *
 *   All Rights Reserved.
 *
 ************************************************************************/
/*___INFO__MARK_END__*/
/**
 *  Generated from javamodel_impl.jsp
 *  !!! DO NOT EDIT THIS FILE !!!
 */

package com.sun.grid.jgdi.configuration;

import javax.management.*;
import com.sun.grid.jgdi.configuration.GEObject;
import java.util.List;
import java.util.LinkedList;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.logging.Logger;
import java.util.logging.Level;

/**
 *  Java representation of the cull object US_Type
 *  defined in sge_all_listsL.template
 *
 *  <p><strong>Warning:</strong>  The  UserSetImpl class will 
 *  not be compatible with future Sun&trade; Grid Engine releases.</p>
 */
public class UserSetImpl extends    GEObjectImpl implements UserSet {


   /**
    *  Create a new instance of UserSetImpl. The new instance
    *  will not be initialized with the default values.
    */
   public UserSetImpl() {
      this(false);
   }
   
   /**
    *   Create a new instanceof
    *   @param  initWithDefaultValues if <code>true</code> the new instance will
    *                                 be initialized with the default values as defined
    *                                 in the cull definition.
    */
   public UserSetImpl(boolean initWithDefaultValues) { 

      if (initWithDefaultValues) { 
       setType(1);    
    }

  } // end of default constructor
  
  // --- newInstance method with primary key field
  

   /**
    *  Create a new instance of UserSetImpl
    */
   public UserSetImpl(java.lang.String name ) {

   
         setName(name);

    }



    // Attribute name ------------------------------------------------
   
    /**
     *  Determine if the name attribute is set
     *  @return <code>true</code> if the name attribute is set
     */
    public boolean isSetName() {
   
        return  (m_name != null);

    }
   
    private java.lang.String m_name;

    /**
     *   Set the name attribute.
     *
     *   @param aName  the new value for the  name attribute
     */
    public void setName(java.lang.String aName) {   
        m_name = aName;

    }

    /**
     *  Get the value of the name attribute.
     *  @return the value of the name attribute
     */
    public java.lang.String getName() {
        return m_name;
    }


    // Attribute type ------------------------------------------------

    private boolean isTypeSet;
   
    /**
     *  Determine if the type attribute is set
     *  @return <code>true</code> if the type attribute is set
     */
    public boolean isSetType() {

        return isTypeSet;

    }
   
    private int m_type;

    /**
     *   Set the type attribute.
     *
     *   @param aType  the new value for the  type attribute
     */
    public void setType(int aType) {   
        m_type = aType;

        isTypeSet = true;

    }

    /**
     *  Get the value of the type attribute.
     *  @return the value of the type attribute
     */
    public int getType() {
        return m_type;
    }


    // Attribute fshare ------------------------------------------------

    private boolean isFshareSet;
   
    /**
     *  Determine if the fshare attribute is set
     *  @return <code>true</code> if the fshare attribute is set
     */
    public boolean isSetFshare() {

        return isFshareSet;

    }
   
    private int m_fshare;

    /**
     *   Set the fshare attribute.
     *
     *   @param aFshare  the new value for the  fshare attribute
     */
    public void setFshare(int aFshare) {   
        m_fshare = aFshare;

        isFshareSet = true;

    }

    /**
     *  Get the value of the fshare attribute.
     *  @return the value of the fshare attribute
     */
    public int getFshare() {
        return m_fshare;
    }


    // Attribute oticket ------------------------------------------------

    private boolean isOticketSet;
   
    /**
     *  Determine if the oticket attribute is set
     *  @return <code>true</code> if the oticket attribute is set
     */
    public boolean isSetOticket() {

        return isOticketSet;

    }
   
    private int m_oticket;

    /**
     *   Set the oticket attribute.
     *
     *   @param aOticket  the new value for the  oticket attribute
     */
    public void setOticket(int aOticket) {   
        m_oticket = aOticket;

        isOticketSet = true;

    }

    /**
     *  Get the value of the oticket attribute.
     *  @return the value of the oticket attribute
     */
    public int getOticket() {
        return m_oticket;
    }


    // Attribute jobCnt ------------------------------------------------

    private boolean isJobCntSet;
   
    /**
     *  Determine if the jobCnt attribute is set
     *  @return <code>true</code> if the jobCnt attribute is set
     */
    public boolean isSetJobCnt() {

        return isJobCntSet;

    }
   
    private int m_jobCnt;

    /**
     *   Set the jobCnt attribute.
     *
     *   @param aJobCnt  the new value for the  jobCnt attribute
     */
    public void setJobCnt(int aJobCnt) {   
        m_jobCnt = aJobCnt;

        isJobCntSet = true;

    }

    /**
     *  Get the value of the jobCnt attribute.
     *  @return the value of the jobCnt attribute
     */
    public int getJobCnt() {
        return m_jobCnt;
    }


    // Attribute entries ------------------------------------------------

    private List< java.lang.String > m_entriesList;
   
    private void initEntries() {
        if (m_entriesList == null) {
            m_entriesList = new LinkedList< java.lang.String >();
        }
    }

    /**
     *   Add a java.lang.String attribute.

     *   If the value already exists in the list it is not added 
     *   @param aentries  the new java.lang.String attribute
     */
    public void addEntries(java.lang.String aentries) {   
        initEntries();
        
        if (!m_entriesList.contains(aentries)) {
            m_entriesList.add(aentries);
        } 
    }
   
   
    /**
     *   Set a java.lang.String attribute.
     *   @param index   index of the java.lang.String attribute
     *   @param aentries  the new java.lang.String attribute
     */
    public void setEntries(int index, java.lang.String aentries) {
        initEntries();
        m_entriesList.set(index, aentries);
    }

    /**
     *  Remove all java.lang.String attributes.
     */
    public void removeAllEntries() {
        if (m_entriesList != null) {
            m_entriesList.clear();
        }
    }

    /**
     *  Remote a java.lang.String attribute at an index.
     *  @param index  the index of the java.lang.String attribute which should be
     *                removed
     *  @return the removed java.lang.String attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public java.lang.String removeEntries(int index) {
        initEntries();
        return (java.lang.String)m_entriesList.remove(index);
    }

    /**
     *  Remote a specific java.lang.String attribute.
     *  @param aentries  the java.lang.String attribute which should be
     *                         removed
     *  @return <code>true</code> if the java.lang.String attribute has been removed
     */
    public boolean removeEntries(java.lang.String aentries) {
        initEntries();
        return m_entriesList.remove(aentries);
    }
   
    /**
     *   Get a unmodifiable list of all java.lang.String attributes.
     *
     *   @return Unmodifiable list with all java.lang.String attributes
     */
    public List< java.lang.String > getEntriesList() {
        initEntries();
        return Collections.unmodifiableList(m_entriesList);
    }

    /**
     *  Get the number of java.lang.String attributes.
     *
     *  @return The number of java.lang.String attributes.
     */
    public int getEntriesCount() {
        if (m_entriesList != null) {
            return m_entriesList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a java.lang.String attribute at an index.
     *  @param index  the index of the java.lang.String attribute which should be
     *                removed
     *  @return the java.lang.String attribute
     */
    public java.lang.String getEntries(int index) {
        initEntries();
        return (java.lang.String)m_entriesList.get(index);
    }
   
    /**
     *  Determine if the entries attribute is set
     *  @return <code>true</code> if the entries attribute is set
     */
    public boolean isSetEntries () {
        return (m_entriesList != null) && (!m_entriesList.isEmpty());
    }
   



    /**
     *  Is the primary key information equal to the primary key information
     *  of <code>obj</code>.
     *
     *  @param obj   the compared object
     *  @return <code>true</code> if the primary key information is equal to the
     *          primary key informations of <code>obj</code>.
     */
    public boolean equals(Object obj) {

        return (obj instanceof UserSetImpl && getName().equals(((com.sun.grid.jgdi.configuration.UserSet)obj).getName()));

    }

    
    
    public boolean equalsCompletely(Object obj) {
        Logger logger = Logger.getLogger(getClass().getName());
        if (obj instanceof  UserSetImpl) {
            com.sun.grid.jgdi.configuration.UserSet obj1 = (com.sun.grid.jgdi.configuration.UserSet)obj;

            {
                java.lang.String value1 = getName();
                java.lang.String value2 = obj1.getName();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute US_name of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes US_name are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                int value1 = getType();
                int value2 = obj1.getType();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes US_type are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getFshare();
                int value2 = obj1.getFshare();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes US_fshare are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getOticket();
                int value2 = obj1.getOticket();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes US_oticket are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getJobCnt();
                int value2 = obj1.getJobCnt();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes US_job_cnt are not equal");
                }
                return false;
            }

            }

            {
                int entriesCount = getEntriesCount();
                if (entriesCount != obj1.getEntriesCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists entries has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < entriesCount; i++) {
                    java.lang.String value1 = getEntries(i);
                    java.lang.String value2 = obj1.getEntries(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute US_entries of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes US_entries are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

                } // end of for
            }

            return true;
        } else {
            return true;
        }
    }
  
    public java.lang.String toString() {
        StringBuilder ret = new StringBuilder();
        ret.append("UserSetImpl(");

        ret.append(getName());

        ret.append(")");
        return ret.toString();
    }



    public java.lang.String dump() {
        StringBuilder sb = new StringBuilder();

            {
                java.lang.String value = getName();
                sb.append("Name = " + value + "\n");
            }

            {
                int value = getType();
                sb.append("Type = " + value + "\n");
            }

            {
                int value = getFshare();
                sb.append("Fshare = " + value + "\n");
            }

            {
                int value = getOticket();
                sb.append("Oticket = " + value + "\n");
            }

            {
                int value = getJobCnt();
                sb.append("JobCnt = " + value + "\n");
            }

            int entriesCount = getEntriesCount();
            for (int i = 0; i < entriesCount; i++) {
                java.lang.String value = getEntries(i);
                
                sb.append("Entries[" + i + "] = " + value + "\n");
                
            } // end of for

        return sb.toString();
    }    

 
}
