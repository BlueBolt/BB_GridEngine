/*___INFO__MARK_BEGIN__*/
/*************************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  the Sun Industry Standards Source License Version 1.2
 *
 *  Sun Microsystems Inc., March, 2001
 *
 *
 *  Sun Industry Standards Source License Version 1.2
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.2 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *   Copyright: 2001 by Sun Microsystems, Inc.
 *
 *   All Rights Reserved.
 *
 ************************************************************************/
/*___INFO__MARK_END__*/
/**
 *  Generated from java_rmi_jgdi_impl.jsp
 *  !!! DO NOT EDIT THIS FILE !!!
 */

package com.sun.grid.jgdi.rmi;


import com.sun.grid.jgdi.JGDIException;
import java.rmi.RemoteException;
import java.util.List;
import java.util.ArrayList;
import com.sun.grid.jgdi.JGDI;
import com.sun.grid.jgdi.JGDIFactory;
import java.rmi.server.UnicastRemoteObject;
import java.util.logging.*;

import com.sun.grid.jgdi.configuration.Hostgroup;
import com.sun.grid.jgdi.configuration.SubmitHost;
import com.sun.grid.jgdi.configuration.ExecHost;
import com.sun.grid.jgdi.configuration.Manager;
import com.sun.grid.jgdi.configuration.AdvanceReservation;
import com.sun.grid.jgdi.configuration.SchedConf;
import com.sun.grid.jgdi.configuration.Configuration;
import com.sun.grid.jgdi.configuration.Project;
import com.sun.grid.jgdi.configuration.ShareTree;
import com.sun.grid.jgdi.configuration.AdminHost;
import com.sun.grid.jgdi.configuration.Checkpoint;
import com.sun.grid.jgdi.configuration.ParallelEnvironment;
import com.sun.grid.jgdi.configuration.ComplexEntry;
import com.sun.grid.jgdi.configuration.ClusterQueue;
import com.sun.grid.jgdi.configuration.JobSchedulingInfo;
import com.sun.grid.jgdi.configuration.UserSet;
import com.sun.grid.jgdi.configuration.Calendar;
import com.sun.grid.jgdi.configuration.Operator;
import com.sun.grid.jgdi.configuration.Job;
import com.sun.grid.jgdi.configuration.ResourceQuotaSet;
import com.sun.grid.jgdi.configuration.EventClient;
import com.sun.grid.jgdi.configuration.User;

/**
 *   <code>JGDIRemoteImpl</code> implements an RMI service for
 *   the {@link com.sun.grid.jgdi.JGDI} interface.
 * 
 */
public class JGDIRemoteImpl extends JGDIRemoteBaseImpl implements JGDIRemote {
   
   /**
    *   Create a new instance of <code>JGDIRemoteImpl</code>.
    *
    *   @param url JGDI connection url
    */
   public JGDIRemoteImpl(String url) 
         throws RemoteException, JGDIException {
      super(url);
   }
   

   /**
    *  Update the <code>Hostgroup</code> object.
    *
    *  @param  obj  the <code>Hostgroup</code> object with the new values
    *  @throws RemoteException on any error
    */
   public void updateHostgroup(Hostgroup obj) throws RemoteException {
      logger.entering("JGDIRemoteImpl","updateHostgroupList()");
      try {
        jgdi.updateHostgroup(obj);
        logger.exiting("JGDIRemoteImpl","updateHostgroupList()");
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","updateHostgroupList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }      

   /**
    *   Delete a Hostgroup object.
    *
    *   @param obj  the Hostgroup with the primary information
    *   @throws RemoteException on any error
    */
   public void deleteHostgroup(Hostgroup obj) throws RemoteException {
      logger.entering("JGDIRemoteImpl","deleteHostgroupList()");
      try {
        jgdi.deleteHostgroup(obj);
        logger.exiting("JGDIRemoteImpl","deleteHostgroupList()");
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","deleteHostgroupList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }
       
   /**
    *   Delete the <code>Hostgroup</code> object by primary key
    *   @throws RemoteException on any error
    */
   public void deleteHostgroup( String HGRP_name) throws RemoteException {
      logger.entering("JGDIRemoteImpl", "deleteHostgroup()");
      try {
        logger.exiting("JGDIRemoteImpl", "deleteHostgroup()");
        jgdi.deleteHostgroup(HGRP_name);
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl", "deleteHostgroup()", e);
         throw new RemoteException(e.getMessage(), e);
      }
   }  

   /**
    *  Add a new <code>Hostgroup</code> object.
    *
    *  @param obj  the new <code>Hostgroup</code> object
    *  @throws RemoteException on any error
    */
   public void addHostgroup(Hostgroup obj) throws RemoteException {
      logger.entering("JGDIRemoteImpl","addHostgroupList()");
      try {
        jgdi.addHostgroup(obj);
        logger.exiting("JGDIRemoteImpl","addHostgroupList()");
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","addHostgroupList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }
       
   /**
    *  Get all <code>Hostgroup</code> objects.
    *  @return a @{link java.util.List} of <code>Hostgroup</code> objects
    *  @throws RemoteException on any error
    */
   public List getHostgroupList() throws RemoteException {
      logger.entering("JGDIRemoteImpl","getHostgroupList()");
      try {
        logger.exiting("JGDIRemoteImpl","getHostgroupList()");
        return jgdi.getHostgroupList();
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","getHostgroupList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }
       
   /**
    *   Get the <code>Hostgroup</code> object;
    *   @return the <code>Hostgroup</code> object
    *   @throws RemoteException on any error
    */
   public Hostgroup getHostgroup( String HGRP_name) throws RemoteException {
      logger.entering("JGDIRemoteImpl","getHostgroup()");
      try {
        logger.exiting("JGDIRemoteImpl","getHostgroup()");
        return jgdi.getHostgroup(HGRP_name);
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","getHostgroup()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }  

   /**
    *   Delete a SubmitHost object.
    *
    *   @param obj  the SubmitHost with the primary information
    *   @throws RemoteException on any error
    */
   public void deleteSubmitHost(SubmitHost obj) throws RemoteException {
      logger.entering("JGDIRemoteImpl","deleteSubmitHostList()");
      try {
        jgdi.deleteSubmitHost(obj);
        logger.exiting("JGDIRemoteImpl","deleteSubmitHostList()");
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","deleteSubmitHostList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }
       
   /**
    *   Delete the <code>SubmitHost</code> object by primary key
    *   @throws RemoteException on any error
    */
   public void deleteSubmitHost( String SH_name) throws RemoteException {
      logger.entering("JGDIRemoteImpl", "deleteSubmitHost()");
      try {
        logger.exiting("JGDIRemoteImpl", "deleteSubmitHost()");
        jgdi.deleteSubmitHost(SH_name);
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl", "deleteSubmitHost()", e);
         throw new RemoteException(e.getMessage(), e);
      }
   }  

   /**
    *  Add a new <code>SubmitHost</code> object.
    *
    *  @param obj  the new <code>SubmitHost</code> object
    *  @throws RemoteException on any error
    */
   public void addSubmitHost(SubmitHost obj) throws RemoteException {
      logger.entering("JGDIRemoteImpl","addSubmitHostList()");
      try {
        jgdi.addSubmitHost(obj);
        logger.exiting("JGDIRemoteImpl","addSubmitHostList()");
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","addSubmitHostList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }
       
   /**
    *  Get all <code>SubmitHost</code> objects.
    *  @return a @{link java.util.List} of <code>SubmitHost</code> objects
    *  @throws RemoteException on any error
    */
   public List getSubmitHostList() throws RemoteException {
      logger.entering("JGDIRemoteImpl","getSubmitHostList()");
      try {
        logger.exiting("JGDIRemoteImpl","getSubmitHostList()");
        return jgdi.getSubmitHostList();
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","getSubmitHostList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }

   /**
    *  Update the <code>ExecHost</code> object.
    *
    *  @param  obj  the <code>ExecHost</code> object with the new values
    *  @throws RemoteException on any error
    */
   public void updateExecHost(ExecHost obj) throws RemoteException {
      logger.entering("JGDIRemoteImpl","updateExecHostList()");
      try {
        jgdi.updateExecHost(obj);
        logger.exiting("JGDIRemoteImpl","updateExecHostList()");
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","updateExecHostList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }      

   /**
    *   Delete a ExecHost object.
    *
    *   @param obj  the ExecHost with the primary information
    *   @throws RemoteException on any error
    */
   public void deleteExecHost(ExecHost obj) throws RemoteException {
      logger.entering("JGDIRemoteImpl","deleteExecHostList()");
      try {
        jgdi.deleteExecHost(obj);
        logger.exiting("JGDIRemoteImpl","deleteExecHostList()");
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","deleteExecHostList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }
       
   /**
    *   Delete the <code>ExecHost</code> object by primary key
    *   @throws RemoteException on any error
    */
   public void deleteExecHost( String EH_name) throws RemoteException {
      logger.entering("JGDIRemoteImpl", "deleteExecHost()");
      try {
        logger.exiting("JGDIRemoteImpl", "deleteExecHost()");
        jgdi.deleteExecHost(EH_name);
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl", "deleteExecHost()", e);
         throw new RemoteException(e.getMessage(), e);
      }
   }  

   /**
    *  Add a new <code>ExecHost</code> object.
    *
    *  @param obj  the new <code>ExecHost</code> object
    *  @throws RemoteException on any error
    */
   public void addExecHost(ExecHost obj) throws RemoteException {
      logger.entering("JGDIRemoteImpl","addExecHostList()");
      try {
        jgdi.addExecHost(obj);
        logger.exiting("JGDIRemoteImpl","addExecHostList()");
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","addExecHostList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }
       
   /**
    *  Get all <code>ExecHost</code> objects.
    *  @return a @{link java.util.List} of <code>ExecHost</code> objects
    *  @throws RemoteException on any error
    */
   public List getExecHostList() throws RemoteException {
      logger.entering("JGDIRemoteImpl","getExecHostList()");
      try {
        logger.exiting("JGDIRemoteImpl","getExecHostList()");
        return jgdi.getExecHostList();
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","getExecHostList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }
       
   /**
    *   Get the <code>ExecHost</code> object;
    *   @return the <code>ExecHost</code> object
    *   @throws RemoteException on any error
    */
   public ExecHost getExecHost( String EH_name) throws RemoteException {
      logger.entering("JGDIRemoteImpl","getExecHost()");
      try {
        logger.exiting("JGDIRemoteImpl","getExecHost()");
        return jgdi.getExecHost(EH_name);
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","getExecHost()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }  

   /**
    *   Delete a Manager object.
    *
    *   @param obj  the Manager with the primary information
    *   @throws RemoteException on any error
    */
   public void deleteManager(Manager obj) throws RemoteException {
      logger.entering("JGDIRemoteImpl","deleteManagerList()");
      try {
        jgdi.deleteManager(obj);
        logger.exiting("JGDIRemoteImpl","deleteManagerList()");
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","deleteManagerList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }
       
   /**
    *   Delete the <code>Manager</code> object by primary key
    *   @throws RemoteException on any error
    */
   public void deleteManager( String UM_name) throws RemoteException {
      logger.entering("JGDIRemoteImpl", "deleteManager()");
      try {
        logger.exiting("JGDIRemoteImpl", "deleteManager()");
        jgdi.deleteManager(UM_name);
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl", "deleteManager()", e);
         throw new RemoteException(e.getMessage(), e);
      }
   }  

   /**
    *  Add a new <code>Manager</code> object.
    *
    *  @param obj  the new <code>Manager</code> object
    *  @throws RemoteException on any error
    */
   public void addManager(Manager obj) throws RemoteException {
      logger.entering("JGDIRemoteImpl","addManagerList()");
      try {
        jgdi.addManager(obj);
        logger.exiting("JGDIRemoteImpl","addManagerList()");
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","addManagerList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }
       
   /**
    *  Get all <code>Manager</code> objects.
    *  @return a @{link java.util.List} of <code>Manager</code> objects
    *  @throws RemoteException on any error
    */
   public List getManagerList() throws RemoteException {
      logger.entering("JGDIRemoteImpl","getManagerList()");
      try {
        logger.exiting("JGDIRemoteImpl","getManagerList()");
        return jgdi.getManagerList();
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","getManagerList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }
       
   /**
    *   Get the <code>Manager</code> object;
    *   @return the <code>Manager</code> object
    *   @throws RemoteException on any error
    */
   public Manager getManager( String UM_name) throws RemoteException {
      logger.entering("JGDIRemoteImpl","getManager()");
      try {
        logger.exiting("JGDIRemoteImpl","getManager()");
        return jgdi.getManager(UM_name);
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","getManager()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }  

   /**
    *   Delete a AdvanceReservation object.
    *
    *   @param obj  the AdvanceReservation with the primary information
    *   @throws RemoteException on any error
    */
   public void deleteAdvanceReservation(AdvanceReservation obj) throws RemoteException {
      logger.entering("JGDIRemoteImpl","deleteAdvanceReservationList()");
      try {
        jgdi.deleteAdvanceReservation(obj);
        logger.exiting("JGDIRemoteImpl","deleteAdvanceReservationList()");
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","deleteAdvanceReservationList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }
       
   /**
    *   Delete the <code>AdvanceReservation</code> object by primary key
    *   @throws RemoteException on any error
    */
   public void deleteAdvanceReservation( int AR_id) throws RemoteException {
      logger.entering("JGDIRemoteImpl", "deleteAdvanceReservation()");
      try {
        logger.exiting("JGDIRemoteImpl", "deleteAdvanceReservation()");
        jgdi.deleteAdvanceReservation(AR_id);
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl", "deleteAdvanceReservation()", e);
         throw new RemoteException(e.getMessage(), e);
      }
   }  

   /**
    *  Add a new <code>AdvanceReservation</code> object.
    *
    *  @param obj  the new <code>AdvanceReservation</code> object
    *  @throws RemoteException on any error
    */
   public void addAdvanceReservation(AdvanceReservation obj) throws RemoteException {
      logger.entering("JGDIRemoteImpl","addAdvanceReservationList()");
      try {
        jgdi.addAdvanceReservation(obj);
        logger.exiting("JGDIRemoteImpl","addAdvanceReservationList()");
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","addAdvanceReservationList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }
       
   /**
    *  Get all <code>AdvanceReservation</code> objects.
    *  @return a @{link java.util.List} of <code>AdvanceReservation</code> objects
    *  @throws RemoteException on any error
    */
   public List getAdvanceReservationList() throws RemoteException {
      logger.entering("JGDIRemoteImpl","getAdvanceReservationList()");
      try {
        logger.exiting("JGDIRemoteImpl","getAdvanceReservationList()");
        return jgdi.getAdvanceReservationList();
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","getAdvanceReservationList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }
       
   /**
    *   Get the <code>AdvanceReservation</code> object;
    *   @return the <code>AdvanceReservation</code> object
    *   @throws RemoteException on any error
    */
   public AdvanceReservation getAdvanceReservation( int AR_id) throws RemoteException {
      logger.entering("JGDIRemoteImpl","getAdvanceReservation()");
      try {
        logger.exiting("JGDIRemoteImpl","getAdvanceReservation()");
        return jgdi.getAdvanceReservation(AR_id);
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","getAdvanceReservation()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }  

   /**
    *  Update a <code>SchedConf</code> object.
    *
    *  @param  obj  the <code>SchedConf</code> object with the new values
    *  @throws RemoteException on any error
    */
   public void updateSchedConf(SchedConf obj) throws RemoteException {
      logger.entering("JGDIRemoteImpl","updateSchedConfList()");
      try {
        jgdi.updateSchedConf(obj);
        logger.exiting("JGDIRemoteImpl","updateSchedConfList()");
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","updateSchedConfList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }      
 
   /**
    *   Get the <code>SchedConf</code> object;
    *   @return the <code>SchedConf</code> object
    *   @throws RemoteException on any error
    */
   public SchedConf getSchedConf() throws RemoteException {
      logger.entering("JGDIRemoteImpl","getSchedConf()");
      try {
        logger.exiting("JGDIRemoteImpl","getSchedConf()");
        return jgdi.getSchedConf();
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","getSchedConf()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }  

   /**
    *  Update the <code>Configuration</code> object.
    *
    *  @param  obj  the <code>Configuration</code> object with the new values
    *  @throws RemoteException on any error
    */
   public void updateConfiguration(Configuration obj) throws RemoteException {
      logger.entering("JGDIRemoteImpl","updateConfigurationList()");
      try {
        jgdi.updateConfiguration(obj);
        logger.exiting("JGDIRemoteImpl","updateConfigurationList()");
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","updateConfigurationList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }      

   /**
    *   Delete a Configuration object.
    *
    *   @param obj  the Configuration with the primary information
    *   @throws RemoteException on any error
    */
   public void deleteConfiguration(Configuration obj) throws RemoteException {
      logger.entering("JGDIRemoteImpl","deleteConfigurationList()");
      try {
        jgdi.deleteConfiguration(obj);
        logger.exiting("JGDIRemoteImpl","deleteConfigurationList()");
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","deleteConfigurationList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }
       
   /**
    *   Delete the <code>Configuration</code> object by primary key
    *   @throws RemoteException on any error
    */
   public void deleteConfiguration( String CONF_name) throws RemoteException {
      logger.entering("JGDIRemoteImpl", "deleteConfiguration()");
      try {
        logger.exiting("JGDIRemoteImpl", "deleteConfiguration()");
        jgdi.deleteConfiguration(CONF_name);
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl", "deleteConfiguration()", e);
         throw new RemoteException(e.getMessage(), e);
      }
   }  

   /**
    *  Add a new <code>Configuration</code> object.
    *
    *  @param obj  the new <code>Configuration</code> object
    *  @throws RemoteException on any error
    */
   public void addConfiguration(Configuration obj) throws RemoteException {
      logger.entering("JGDIRemoteImpl","addConfigurationList()");
      try {
        jgdi.addConfiguration(obj);
        logger.exiting("JGDIRemoteImpl","addConfigurationList()");
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","addConfigurationList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }
       
   /**
    *  Get all <code>Configuration</code> objects.
    *  @return a @{link java.util.List} of <code>Configuration</code> objects
    *  @throws RemoteException on any error
    */
   public List getConfigurationList() throws RemoteException {
      logger.entering("JGDIRemoteImpl","getConfigurationList()");
      try {
        logger.exiting("JGDIRemoteImpl","getConfigurationList()");
        return jgdi.getConfigurationList();
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","getConfigurationList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }
       
   /**
    *   Get the <code>Configuration</code> object;
    *   @return the <code>Configuration</code> object
    *   @throws RemoteException on any error
    */
   public Configuration getConfiguration( String CONF_name) throws RemoteException {
      logger.entering("JGDIRemoteImpl","getConfiguration()");
      try {
        logger.exiting("JGDIRemoteImpl","getConfiguration()");
        return jgdi.getConfiguration(CONF_name);
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","getConfiguration()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }  

   /**
    *  Update the <code>Project</code> object.
    *
    *  @param  obj  the <code>Project</code> object with the new values
    *  @throws RemoteException on any error
    */
   public void updateProject(Project obj) throws RemoteException {
      logger.entering("JGDIRemoteImpl","updateProjectList()");
      try {
        jgdi.updateProject(obj);
        logger.exiting("JGDIRemoteImpl","updateProjectList()");
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","updateProjectList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }      

   /**
    *   Delete a Project object.
    *
    *   @param obj  the Project with the primary information
    *   @throws RemoteException on any error
    */
   public void deleteProject(Project obj) throws RemoteException {
      logger.entering("JGDIRemoteImpl","deleteProjectList()");
      try {
        jgdi.deleteProject(obj);
        logger.exiting("JGDIRemoteImpl","deleteProjectList()");
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","deleteProjectList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }
       
   /**
    *   Delete the <code>Project</code> object by primary key
    *   @throws RemoteException on any error
    */
   public void deleteProject( String PR_name) throws RemoteException {
      logger.entering("JGDIRemoteImpl", "deleteProject()");
      try {
        logger.exiting("JGDIRemoteImpl", "deleteProject()");
        jgdi.deleteProject(PR_name);
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl", "deleteProject()", e);
         throw new RemoteException(e.getMessage(), e);
      }
   }  

   /**
    *  Add a new <code>Project</code> object.
    *
    *  @param obj  the new <code>Project</code> object
    *  @throws RemoteException on any error
    */
   public void addProject(Project obj) throws RemoteException {
      logger.entering("JGDIRemoteImpl","addProjectList()");
      try {
        jgdi.addProject(obj);
        logger.exiting("JGDIRemoteImpl","addProjectList()");
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","addProjectList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }
       
   /**
    *  Get all <code>Project</code> objects.
    *  @return a @{link java.util.List} of <code>Project</code> objects
    *  @throws RemoteException on any error
    */
   public List getProjectList() throws RemoteException {
      logger.entering("JGDIRemoteImpl","getProjectList()");
      try {
        logger.exiting("JGDIRemoteImpl","getProjectList()");
        return jgdi.getProjectList();
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","getProjectList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }
       
   /**
    *   Get the <code>Project</code> object;
    *   @return the <code>Project</code> object
    *   @throws RemoteException on any error
    */
   public Project getProject( String PR_name) throws RemoteException {
      logger.entering("JGDIRemoteImpl","getProject()");
      try {
        logger.exiting("JGDIRemoteImpl","getProject()");
        return jgdi.getProject(PR_name);
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","getProject()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }  

   /**
    *  Update the <code>ShareTree</code> object.
    *
    *  @param  obj  the <code>ShareTree</code> object with the new values
    *  @throws RemoteException on any error
    */
   public void updateShareTree(ShareTree obj) throws RemoteException {
      logger.entering("JGDIRemoteImpl","updateShareTreeList()");
      try {
        jgdi.updateShareTree(obj);
        logger.exiting("JGDIRemoteImpl","updateShareTreeList()");
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","updateShareTreeList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }      
       
   /**
    *   Get the <code>ShareTree</code> object;
    *   @return the <code>ShareTree</code> object
    *   @throws RemoteException on any error
    */
   public ShareTree getShareTree( String STN_name) throws RemoteException {
      logger.entering("JGDIRemoteImpl","getShareTree()");
      try {
        logger.exiting("JGDIRemoteImpl","getShareTree()");
        return jgdi.getShareTree(STN_name);
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","getShareTree()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }  

   /**
    *   Delete a AdminHost object.
    *
    *   @param obj  the AdminHost with the primary information
    *   @throws RemoteException on any error
    */
   public void deleteAdminHost(AdminHost obj) throws RemoteException {
      logger.entering("JGDIRemoteImpl","deleteAdminHostList()");
      try {
        jgdi.deleteAdminHost(obj);
        logger.exiting("JGDIRemoteImpl","deleteAdminHostList()");
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","deleteAdminHostList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }
       
   /**
    *   Delete the <code>AdminHost</code> object by primary key
    *   @throws RemoteException on any error
    */
   public void deleteAdminHost( String AH_name) throws RemoteException {
      logger.entering("JGDIRemoteImpl", "deleteAdminHost()");
      try {
        logger.exiting("JGDIRemoteImpl", "deleteAdminHost()");
        jgdi.deleteAdminHost(AH_name);
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl", "deleteAdminHost()", e);
         throw new RemoteException(e.getMessage(), e);
      }
   }  

   /**
    *  Add a new <code>AdminHost</code> object.
    *
    *  @param obj  the new <code>AdminHost</code> object
    *  @throws RemoteException on any error
    */
   public void addAdminHost(AdminHost obj) throws RemoteException {
      logger.entering("JGDIRemoteImpl","addAdminHostList()");
      try {
        jgdi.addAdminHost(obj);
        logger.exiting("JGDIRemoteImpl","addAdminHostList()");
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","addAdminHostList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }
       
   /**
    *  Get all <code>AdminHost</code> objects.
    *  @return a @{link java.util.List} of <code>AdminHost</code> objects
    *  @throws RemoteException on any error
    */
   public List getAdminHostList() throws RemoteException {
      logger.entering("JGDIRemoteImpl","getAdminHostList()");
      try {
        logger.exiting("JGDIRemoteImpl","getAdminHostList()");
        return jgdi.getAdminHostList();
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","getAdminHostList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }

   /**
    *  Update the <code>Checkpoint</code> object.
    *
    *  @param  obj  the <code>Checkpoint</code> object with the new values
    *  @throws RemoteException on any error
    */
   public void updateCheckpoint(Checkpoint obj) throws RemoteException {
      logger.entering("JGDIRemoteImpl","updateCheckpointList()");
      try {
        jgdi.updateCheckpoint(obj);
        logger.exiting("JGDIRemoteImpl","updateCheckpointList()");
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","updateCheckpointList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }      

   /**
    *   Delete a Checkpoint object.
    *
    *   @param obj  the Checkpoint with the primary information
    *   @throws RemoteException on any error
    */
   public void deleteCheckpoint(Checkpoint obj) throws RemoteException {
      logger.entering("JGDIRemoteImpl","deleteCheckpointList()");
      try {
        jgdi.deleteCheckpoint(obj);
        logger.exiting("JGDIRemoteImpl","deleteCheckpointList()");
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","deleteCheckpointList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }
       
   /**
    *   Delete the <code>Checkpoint</code> object by primary key
    *   @throws RemoteException on any error
    */
   public void deleteCheckpoint( String CK_name) throws RemoteException {
      logger.entering("JGDIRemoteImpl", "deleteCheckpoint()");
      try {
        logger.exiting("JGDIRemoteImpl", "deleteCheckpoint()");
        jgdi.deleteCheckpoint(CK_name);
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl", "deleteCheckpoint()", e);
         throw new RemoteException(e.getMessage(), e);
      }
   }  

   /**
    *  Add a new <code>Checkpoint</code> object.
    *
    *  @param obj  the new <code>Checkpoint</code> object
    *  @throws RemoteException on any error
    */
   public void addCheckpoint(Checkpoint obj) throws RemoteException {
      logger.entering("JGDIRemoteImpl","addCheckpointList()");
      try {
        jgdi.addCheckpoint(obj);
        logger.exiting("JGDIRemoteImpl","addCheckpointList()");
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","addCheckpointList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }
       
   /**
    *  Get all <code>Checkpoint</code> objects.
    *  @return a @{link java.util.List} of <code>Checkpoint</code> objects
    *  @throws RemoteException on any error
    */
   public List getCheckpointList() throws RemoteException {
      logger.entering("JGDIRemoteImpl","getCheckpointList()");
      try {
        logger.exiting("JGDIRemoteImpl","getCheckpointList()");
        return jgdi.getCheckpointList();
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","getCheckpointList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }
       
   /**
    *   Get the <code>Checkpoint</code> object;
    *   @return the <code>Checkpoint</code> object
    *   @throws RemoteException on any error
    */
   public Checkpoint getCheckpoint( String CK_name) throws RemoteException {
      logger.entering("JGDIRemoteImpl","getCheckpoint()");
      try {
        logger.exiting("JGDIRemoteImpl","getCheckpoint()");
        return jgdi.getCheckpoint(CK_name);
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","getCheckpoint()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }  

   /**
    *  Update the <code>ParallelEnvironment</code> object.
    *
    *  @param  obj  the <code>ParallelEnvironment</code> object with the new values
    *  @throws RemoteException on any error
    */
   public void updateParallelEnvironment(ParallelEnvironment obj) throws RemoteException {
      logger.entering("JGDIRemoteImpl","updateParallelEnvironmentList()");
      try {
        jgdi.updateParallelEnvironment(obj);
        logger.exiting("JGDIRemoteImpl","updateParallelEnvironmentList()");
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","updateParallelEnvironmentList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }      

   /**
    *   Delete a ParallelEnvironment object.
    *
    *   @param obj  the ParallelEnvironment with the primary information
    *   @throws RemoteException on any error
    */
   public void deleteParallelEnvironment(ParallelEnvironment obj) throws RemoteException {
      logger.entering("JGDIRemoteImpl","deleteParallelEnvironmentList()");
      try {
        jgdi.deleteParallelEnvironment(obj);
        logger.exiting("JGDIRemoteImpl","deleteParallelEnvironmentList()");
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","deleteParallelEnvironmentList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }
       
   /**
    *   Delete the <code>ParallelEnvironment</code> object by primary key
    *   @throws RemoteException on any error
    */
   public void deleteParallelEnvironment( String PE_name) throws RemoteException {
      logger.entering("JGDIRemoteImpl", "deleteParallelEnvironment()");
      try {
        logger.exiting("JGDIRemoteImpl", "deleteParallelEnvironment()");
        jgdi.deleteParallelEnvironment(PE_name);
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl", "deleteParallelEnvironment()", e);
         throw new RemoteException(e.getMessage(), e);
      }
   }  

   /**
    *  Add a new <code>ParallelEnvironment</code> object.
    *
    *  @param obj  the new <code>ParallelEnvironment</code> object
    *  @throws RemoteException on any error
    */
   public void addParallelEnvironment(ParallelEnvironment obj) throws RemoteException {
      logger.entering("JGDIRemoteImpl","addParallelEnvironmentList()");
      try {
        jgdi.addParallelEnvironment(obj);
        logger.exiting("JGDIRemoteImpl","addParallelEnvironmentList()");
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","addParallelEnvironmentList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }
       
   /**
    *  Get all <code>ParallelEnvironment</code> objects.
    *  @return a @{link java.util.List} of <code>ParallelEnvironment</code> objects
    *  @throws RemoteException on any error
    */
   public List getParallelEnvironmentList() throws RemoteException {
      logger.entering("JGDIRemoteImpl","getParallelEnvironmentList()");
      try {
        logger.exiting("JGDIRemoteImpl","getParallelEnvironmentList()");
        return jgdi.getParallelEnvironmentList();
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","getParallelEnvironmentList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }
       
   /**
    *   Get the <code>ParallelEnvironment</code> object;
    *   @return the <code>ParallelEnvironment</code> object
    *   @throws RemoteException on any error
    */
   public ParallelEnvironment getParallelEnvironment( String PE_name) throws RemoteException {
      logger.entering("JGDIRemoteImpl","getParallelEnvironment()");
      try {
        logger.exiting("JGDIRemoteImpl","getParallelEnvironment()");
        return jgdi.getParallelEnvironment(PE_name);
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","getParallelEnvironment()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }  

   /**
    *  Update the <code>ComplexEntry</code> object.
    *
    *  @param  obj  the <code>ComplexEntry</code> object with the new values
    *  @throws RemoteException on any error
    */
   public void updateComplexEntry(ComplexEntry obj) throws RemoteException {
      logger.entering("JGDIRemoteImpl","updateComplexEntryList()");
      try {
        jgdi.updateComplexEntry(obj);
        logger.exiting("JGDIRemoteImpl","updateComplexEntryList()");
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","updateComplexEntryList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }      

   /**
    *   Delete a ComplexEntry object.
    *
    *   @param obj  the ComplexEntry with the primary information
    *   @throws RemoteException on any error
    */
   public void deleteComplexEntry(ComplexEntry obj) throws RemoteException {
      logger.entering("JGDIRemoteImpl","deleteComplexEntryList()");
      try {
        jgdi.deleteComplexEntry(obj);
        logger.exiting("JGDIRemoteImpl","deleteComplexEntryList()");
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","deleteComplexEntryList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }
       
   /**
    *   Delete the <code>ComplexEntry</code> object by primary key
    *   @throws RemoteException on any error
    */
   public void deleteComplexEntry( String CE_name) throws RemoteException {
      logger.entering("JGDIRemoteImpl", "deleteComplexEntry()");
      try {
        logger.exiting("JGDIRemoteImpl", "deleteComplexEntry()");
        jgdi.deleteComplexEntry(CE_name);
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl", "deleteComplexEntry()", e);
         throw new RemoteException(e.getMessage(), e);
      }
   }  

   /**
    *  Add a new <code>ComplexEntry</code> object.
    *
    *  @param obj  the new <code>ComplexEntry</code> object
    *  @throws RemoteException on any error
    */
   public void addComplexEntry(ComplexEntry obj) throws RemoteException {
      logger.entering("JGDIRemoteImpl","addComplexEntryList()");
      try {
        jgdi.addComplexEntry(obj);
        logger.exiting("JGDIRemoteImpl","addComplexEntryList()");
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","addComplexEntryList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }
       
   /**
    *  Get all <code>ComplexEntry</code> objects.
    *  @return a @{link java.util.List} of <code>ComplexEntry</code> objects
    *  @throws RemoteException on any error
    */
   public List getComplexEntryList() throws RemoteException {
      logger.entering("JGDIRemoteImpl","getComplexEntryList()");
      try {
        logger.exiting("JGDIRemoteImpl","getComplexEntryList()");
        return jgdi.getComplexEntryList();
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","getComplexEntryList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }
       
   /**
    *   Get the <code>ComplexEntry</code> object;
    *   @return the <code>ComplexEntry</code> object
    *   @throws RemoteException on any error
    */
   public ComplexEntry getComplexEntry( String CE_name) throws RemoteException {
      logger.entering("JGDIRemoteImpl","getComplexEntry()");
      try {
        logger.exiting("JGDIRemoteImpl","getComplexEntry()");
        return jgdi.getComplexEntry(CE_name);
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","getComplexEntry()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }  

   /**
    *  Update the <code>ClusterQueue</code> object.
    *
    *  @param  obj  the <code>ClusterQueue</code> object with the new values
    *  @throws RemoteException on any error
    */
   public void updateClusterQueue(ClusterQueue obj) throws RemoteException {
      logger.entering("JGDIRemoteImpl","updateClusterQueueList()");
      try {
        jgdi.updateClusterQueue(obj);
        logger.exiting("JGDIRemoteImpl","updateClusterQueueList()");
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","updateClusterQueueList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }      

   /**
    *   Delete a ClusterQueue object.
    *
    *   @param obj  the ClusterQueue with the primary information
    *   @throws RemoteException on any error
    */
   public void deleteClusterQueue(ClusterQueue obj) throws RemoteException {
      logger.entering("JGDIRemoteImpl","deleteClusterQueueList()");
      try {
        jgdi.deleteClusterQueue(obj);
        logger.exiting("JGDIRemoteImpl","deleteClusterQueueList()");
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","deleteClusterQueueList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }
       
   /**
    *   Delete the <code>ClusterQueue</code> object by primary key
    *   @throws RemoteException on any error
    */
   public void deleteClusterQueue( String CQ_name) throws RemoteException {
      logger.entering("JGDIRemoteImpl", "deleteClusterQueue()");
      try {
        logger.exiting("JGDIRemoteImpl", "deleteClusterQueue()");
        jgdi.deleteClusterQueue(CQ_name);
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl", "deleteClusterQueue()", e);
         throw new RemoteException(e.getMessage(), e);
      }
   }  

   /**
    *  Add a new <code>ClusterQueue</code> object.
    *
    *  @param obj  the new <code>ClusterQueue</code> object
    *  @throws RemoteException on any error
    */
   public void addClusterQueue(ClusterQueue obj) throws RemoteException {
      logger.entering("JGDIRemoteImpl","addClusterQueueList()");
      try {
        jgdi.addClusterQueue(obj);
        logger.exiting("JGDIRemoteImpl","addClusterQueueList()");
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","addClusterQueueList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }
       
   /**
    *  Get all <code>ClusterQueue</code> objects.
    *  @return a @{link java.util.List} of <code>ClusterQueue</code> objects
    *  @throws RemoteException on any error
    */
   public List getClusterQueueList() throws RemoteException {
      logger.entering("JGDIRemoteImpl","getClusterQueueList()");
      try {
        logger.exiting("JGDIRemoteImpl","getClusterQueueList()");
        return jgdi.getClusterQueueList();
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","getClusterQueueList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }
       
   /**
    *   Get the <code>ClusterQueue</code> object;
    *   @return the <code>ClusterQueue</code> object
    *   @throws RemoteException on any error
    */
   public ClusterQueue getClusterQueue( String CQ_name) throws RemoteException {
      logger.entering("JGDIRemoteImpl","getClusterQueue()");
      try {
        logger.exiting("JGDIRemoteImpl","getClusterQueue()");
        return jgdi.getClusterQueue(CQ_name);
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","getClusterQueue()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }  
 
   /**
    *   Get the <code>JobSchedulingInfo</code> object;
    *   @return the <code>JobSchedulingInfo</code> object
    *   @throws RemoteException on any error
    */
   public JobSchedulingInfo getJobSchedulingInfo() throws RemoteException {
      logger.entering("JGDIRemoteImpl","getJobSchedulingInfo()");
      try {
        logger.exiting("JGDIRemoteImpl","getJobSchedulingInfo()");
        return jgdi.getJobSchedulingInfo();
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","getJobSchedulingInfo()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }  

   /**
    *  Update the <code>UserSet</code> object.
    *
    *  @param  obj  the <code>UserSet</code> object with the new values
    *  @throws RemoteException on any error
    */
   public void updateUserSet(UserSet obj) throws RemoteException {
      logger.entering("JGDIRemoteImpl","updateUserSetList()");
      try {
        jgdi.updateUserSet(obj);
        logger.exiting("JGDIRemoteImpl","updateUserSetList()");
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","updateUserSetList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }      

   /**
    *   Delete a UserSet object.
    *
    *   @param obj  the UserSet with the primary information
    *   @throws RemoteException on any error
    */
   public void deleteUserSet(UserSet obj) throws RemoteException {
      logger.entering("JGDIRemoteImpl","deleteUserSetList()");
      try {
        jgdi.deleteUserSet(obj);
        logger.exiting("JGDIRemoteImpl","deleteUserSetList()");
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","deleteUserSetList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }
       
   /**
    *   Delete the <code>UserSet</code> object by primary key
    *   @throws RemoteException on any error
    */
   public void deleteUserSet( String US_name) throws RemoteException {
      logger.entering("JGDIRemoteImpl", "deleteUserSet()");
      try {
        logger.exiting("JGDIRemoteImpl", "deleteUserSet()");
        jgdi.deleteUserSet(US_name);
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl", "deleteUserSet()", e);
         throw new RemoteException(e.getMessage(), e);
      }
   }  

   /**
    *  Add a new <code>UserSet</code> object.
    *
    *  @param obj  the new <code>UserSet</code> object
    *  @throws RemoteException on any error
    */
   public void addUserSet(UserSet obj) throws RemoteException {
      logger.entering("JGDIRemoteImpl","addUserSetList()");
      try {
        jgdi.addUserSet(obj);
        logger.exiting("JGDIRemoteImpl","addUserSetList()");
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","addUserSetList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }
       
   /**
    *  Get all <code>UserSet</code> objects.
    *  @return a @{link java.util.List} of <code>UserSet</code> objects
    *  @throws RemoteException on any error
    */
   public List getUserSetList() throws RemoteException {
      logger.entering("JGDIRemoteImpl","getUserSetList()");
      try {
        logger.exiting("JGDIRemoteImpl","getUserSetList()");
        return jgdi.getUserSetList();
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","getUserSetList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }
       
   /**
    *   Get the <code>UserSet</code> object;
    *   @return the <code>UserSet</code> object
    *   @throws RemoteException on any error
    */
   public UserSet getUserSet( String US_name) throws RemoteException {
      logger.entering("JGDIRemoteImpl","getUserSet()");
      try {
        logger.exiting("JGDIRemoteImpl","getUserSet()");
        return jgdi.getUserSet(US_name);
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","getUserSet()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }  

   /**
    *  Update the <code>Calendar</code> object.
    *
    *  @param  obj  the <code>Calendar</code> object with the new values
    *  @throws RemoteException on any error
    */
   public void updateCalendar(Calendar obj) throws RemoteException {
      logger.entering("JGDIRemoteImpl","updateCalendarList()");
      try {
        jgdi.updateCalendar(obj);
        logger.exiting("JGDIRemoteImpl","updateCalendarList()");
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","updateCalendarList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }      

   /**
    *   Delete a Calendar object.
    *
    *   @param obj  the Calendar with the primary information
    *   @throws RemoteException on any error
    */
   public void deleteCalendar(Calendar obj) throws RemoteException {
      logger.entering("JGDIRemoteImpl","deleteCalendarList()");
      try {
        jgdi.deleteCalendar(obj);
        logger.exiting("JGDIRemoteImpl","deleteCalendarList()");
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","deleteCalendarList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }
       
   /**
    *   Delete the <code>Calendar</code> object by primary key
    *   @throws RemoteException on any error
    */
   public void deleteCalendar( String CAL_name) throws RemoteException {
      logger.entering("JGDIRemoteImpl", "deleteCalendar()");
      try {
        logger.exiting("JGDIRemoteImpl", "deleteCalendar()");
        jgdi.deleteCalendar(CAL_name);
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl", "deleteCalendar()", e);
         throw new RemoteException(e.getMessage(), e);
      }
   }  

   /**
    *  Add a new <code>Calendar</code> object.
    *
    *  @param obj  the new <code>Calendar</code> object
    *  @throws RemoteException on any error
    */
   public void addCalendar(Calendar obj) throws RemoteException {
      logger.entering("JGDIRemoteImpl","addCalendarList()");
      try {
        jgdi.addCalendar(obj);
        logger.exiting("JGDIRemoteImpl","addCalendarList()");
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","addCalendarList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }
       
   /**
    *  Get all <code>Calendar</code> objects.
    *  @return a @{link java.util.List} of <code>Calendar</code> objects
    *  @throws RemoteException on any error
    */
   public List getCalendarList() throws RemoteException {
      logger.entering("JGDIRemoteImpl","getCalendarList()");
      try {
        logger.exiting("JGDIRemoteImpl","getCalendarList()");
        return jgdi.getCalendarList();
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","getCalendarList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }
       
   /**
    *   Get the <code>Calendar</code> object;
    *   @return the <code>Calendar</code> object
    *   @throws RemoteException on any error
    */
   public Calendar getCalendar( String CAL_name) throws RemoteException {
      logger.entering("JGDIRemoteImpl","getCalendar()");
      try {
        logger.exiting("JGDIRemoteImpl","getCalendar()");
        return jgdi.getCalendar(CAL_name);
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","getCalendar()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }  

   /**
    *   Delete a Operator object.
    *
    *   @param obj  the Operator with the primary information
    *   @throws RemoteException on any error
    */
   public void deleteOperator(Operator obj) throws RemoteException {
      logger.entering("JGDIRemoteImpl","deleteOperatorList()");
      try {
        jgdi.deleteOperator(obj);
        logger.exiting("JGDIRemoteImpl","deleteOperatorList()");
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","deleteOperatorList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }
       
   /**
    *   Delete the <code>Operator</code> object by primary key
    *   @throws RemoteException on any error
    */
   public void deleteOperator( String UO_name) throws RemoteException {
      logger.entering("JGDIRemoteImpl", "deleteOperator()");
      try {
        logger.exiting("JGDIRemoteImpl", "deleteOperator()");
        jgdi.deleteOperator(UO_name);
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl", "deleteOperator()", e);
         throw new RemoteException(e.getMessage(), e);
      }
   }  

   /**
    *  Add a new <code>Operator</code> object.
    *
    *  @param obj  the new <code>Operator</code> object
    *  @throws RemoteException on any error
    */
   public void addOperator(Operator obj) throws RemoteException {
      logger.entering("JGDIRemoteImpl","addOperatorList()");
      try {
        jgdi.addOperator(obj);
        logger.exiting("JGDIRemoteImpl","addOperatorList()");
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","addOperatorList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }
       
   /**
    *  Get all <code>Operator</code> objects.
    *  @return a @{link java.util.List} of <code>Operator</code> objects
    *  @throws RemoteException on any error
    */
   public List getOperatorList() throws RemoteException {
      logger.entering("JGDIRemoteImpl","getOperatorList()");
      try {
        logger.exiting("JGDIRemoteImpl","getOperatorList()");
        return jgdi.getOperatorList();
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","getOperatorList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }
       
   /**
    *   Get the <code>Operator</code> object;
    *   @return the <code>Operator</code> object
    *   @throws RemoteException on any error
    */
   public Operator getOperator( String UO_name) throws RemoteException {
      logger.entering("JGDIRemoteImpl","getOperator()");
      try {
        logger.exiting("JGDIRemoteImpl","getOperator()");
        return jgdi.getOperator(UO_name);
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","getOperator()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }  

   /**
    *  Update the <code>Job</code> object.
    *
    *  @param  obj  the <code>Job</code> object with the new values
    *  @throws RemoteException on any error
    */
   public void updateJob(Job obj) throws RemoteException {
      logger.entering("JGDIRemoteImpl","updateJobList()");
      try {
        jgdi.updateJob(obj);
        logger.exiting("JGDIRemoteImpl","updateJobList()");
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","updateJobList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }      

   /**
    *   Delete a Job object.
    *
    *   @param obj  the Job with the primary information
    *   @throws RemoteException on any error
    */
   public void deleteJob(Job obj) throws RemoteException {
      logger.entering("JGDIRemoteImpl","deleteJobList()");
      try {
        jgdi.deleteJob(obj);
        logger.exiting("JGDIRemoteImpl","deleteJobList()");
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","deleteJobList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }
       
   /**
    *   Delete the <code>Job</code> object by primary key
    *   @throws RemoteException on any error
    */
   public void deleteJob( int JB_job_number) throws RemoteException {
      logger.entering("JGDIRemoteImpl", "deleteJob()");
      try {
        logger.exiting("JGDIRemoteImpl", "deleteJob()");
        jgdi.deleteJob(JB_job_number);
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl", "deleteJob()", e);
         throw new RemoteException(e.getMessage(), e);
      }
   }  

   /**
    *  Add a new <code>Job</code> object.
    *
    *  @param obj  the new <code>Job</code> object
    *  @throws RemoteException on any error
    */
   public void addJob(Job obj) throws RemoteException {
      logger.entering("JGDIRemoteImpl","addJobList()");
      try {
        jgdi.addJob(obj);
        logger.exiting("JGDIRemoteImpl","addJobList()");
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","addJobList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }
       
   /**
    *  Get all <code>Job</code> objects.
    *  @return a @{link java.util.List} of <code>Job</code> objects
    *  @throws RemoteException on any error
    */
   public List getJobList() throws RemoteException {
      logger.entering("JGDIRemoteImpl","getJobList()");
      try {
        logger.exiting("JGDIRemoteImpl","getJobList()");
        return jgdi.getJobList();
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","getJobList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }
       
   /**
    *   Get the <code>Job</code> object;
    *   @return the <code>Job</code> object
    *   @throws RemoteException on any error
    */
   public Job getJob( int JB_job_number) throws RemoteException {
      logger.entering("JGDIRemoteImpl","getJob()");
      try {
        logger.exiting("JGDIRemoteImpl","getJob()");
        return jgdi.getJob(JB_job_number);
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","getJob()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }  

   /**
    *  Update the <code>ResourceQuotaSet</code> object.
    *
    *  @param  obj  the <code>ResourceQuotaSet</code> object with the new values
    *  @throws RemoteException on any error
    */
   public void updateResourceQuotaSet(ResourceQuotaSet obj) throws RemoteException {
      logger.entering("JGDIRemoteImpl","updateResourceQuotaSetList()");
      try {
        jgdi.updateResourceQuotaSet(obj);
        logger.exiting("JGDIRemoteImpl","updateResourceQuotaSetList()");
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","updateResourceQuotaSetList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }      

   /**
    *   Delete a ResourceQuotaSet object.
    *
    *   @param obj  the ResourceQuotaSet with the primary information
    *   @throws RemoteException on any error
    */
   public void deleteResourceQuotaSet(ResourceQuotaSet obj) throws RemoteException {
      logger.entering("JGDIRemoteImpl","deleteResourceQuotaSetList()");
      try {
        jgdi.deleteResourceQuotaSet(obj);
        logger.exiting("JGDIRemoteImpl","deleteResourceQuotaSetList()");
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","deleteResourceQuotaSetList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }
       
   /**
    *   Delete the <code>ResourceQuotaSet</code> object by primary key
    *   @throws RemoteException on any error
    */
   public void deleteResourceQuotaSet( String RQS_name) throws RemoteException {
      logger.entering("JGDIRemoteImpl", "deleteResourceQuotaSet()");
      try {
        logger.exiting("JGDIRemoteImpl", "deleteResourceQuotaSet()");
        jgdi.deleteResourceQuotaSet(RQS_name);
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl", "deleteResourceQuotaSet()", e);
         throw new RemoteException(e.getMessage(), e);
      }
   }  

   /**
    *  Add a new <code>ResourceQuotaSet</code> object.
    *
    *  @param obj  the new <code>ResourceQuotaSet</code> object
    *  @throws RemoteException on any error
    */
   public void addResourceQuotaSet(ResourceQuotaSet obj) throws RemoteException {
      logger.entering("JGDIRemoteImpl","addResourceQuotaSetList()");
      try {
        jgdi.addResourceQuotaSet(obj);
        logger.exiting("JGDIRemoteImpl","addResourceQuotaSetList()");
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","addResourceQuotaSetList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }
       
   /**
    *  Get all <code>ResourceQuotaSet</code> objects.
    *  @return a @{link java.util.List} of <code>ResourceQuotaSet</code> objects
    *  @throws RemoteException on any error
    */
   public List getResourceQuotaSetList() throws RemoteException {
      logger.entering("JGDIRemoteImpl","getResourceQuotaSetList()");
      try {
        logger.exiting("JGDIRemoteImpl","getResourceQuotaSetList()");
        return jgdi.getResourceQuotaSetList();
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","getResourceQuotaSetList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }
       
   /**
    *   Get the <code>ResourceQuotaSet</code> object;
    *   @return the <code>ResourceQuotaSet</code> object
    *   @throws RemoteException on any error
    */
   public ResourceQuotaSet getResourceQuotaSet( String RQS_name) throws RemoteException {
      logger.entering("JGDIRemoteImpl","getResourceQuotaSet()");
      try {
        logger.exiting("JGDIRemoteImpl","getResourceQuotaSet()");
        return jgdi.getResourceQuotaSet(RQS_name);
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","getResourceQuotaSet()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }  
       
   /**
    *  Get all <code>EventClient</code> objects.
    *  @return a @{link java.util.List} of <code>EventClient</code> objects
    *  @throws RemoteException on any error
    */
   public List getEventClientList() throws RemoteException {
      logger.entering("JGDIRemoteImpl","getEventClientList()");
      try {
        logger.exiting("JGDIRemoteImpl","getEventClientList()");
        return jgdi.getEventClientList();
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","getEventClientList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }

   /**
    *  Update the <code>User</code> object.
    *
    *  @param  obj  the <code>User</code> object with the new values
    *  @throws RemoteException on any error
    */
   public void updateUser(User obj) throws RemoteException {
      logger.entering("JGDIRemoteImpl","updateUserList()");
      try {
        jgdi.updateUser(obj);
        logger.exiting("JGDIRemoteImpl","updateUserList()");
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","updateUserList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }      

   /**
    *   Delete a User object.
    *
    *   @param obj  the User with the primary information
    *   @throws RemoteException on any error
    */
   public void deleteUser(User obj) throws RemoteException {
      logger.entering("JGDIRemoteImpl","deleteUserList()");
      try {
        jgdi.deleteUser(obj);
        logger.exiting("JGDIRemoteImpl","deleteUserList()");
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","deleteUserList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }
       
   /**
    *   Delete the <code>User</code> object by primary key
    *   @throws RemoteException on any error
    */
   public void deleteUser( String UU_name) throws RemoteException {
      logger.entering("JGDIRemoteImpl", "deleteUser()");
      try {
        logger.exiting("JGDIRemoteImpl", "deleteUser()");
        jgdi.deleteUser(UU_name);
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl", "deleteUser()", e);
         throw new RemoteException(e.getMessage(), e);
      }
   }  

   /**
    *  Add a new <code>User</code> object.
    *
    *  @param obj  the new <code>User</code> object
    *  @throws RemoteException on any error
    */
   public void addUser(User obj) throws RemoteException {
      logger.entering("JGDIRemoteImpl","addUserList()");
      try {
        jgdi.addUser(obj);
        logger.exiting("JGDIRemoteImpl","addUserList()");
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","addUserList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }
       
   /**
    *  Get all <code>User</code> objects.
    *  @return a @{link java.util.List} of <code>User</code> objects
    *  @throws RemoteException on any error
    */
   public List getUserList() throws RemoteException {
      logger.entering("JGDIRemoteImpl","getUserList()");
      try {
        logger.exiting("JGDIRemoteImpl","getUserList()");
        return jgdi.getUserList();
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","getUserList()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }
       
   /**
    *   Get the <code>User</code> object;
    *   @return the <code>User</code> object
    *   @throws RemoteException on any error
    */
   public User getUser( String UU_name) throws RemoteException {
      logger.entering("JGDIRemoteImpl","getUser()");
      try {
        logger.exiting("JGDIRemoteImpl","getUser()");
        return jgdi.getUser(UU_name);
      } catch( Exception e ) {
         logger.throwing("JGDIRemoteImpl","getUser()",e);
         throw new RemoteException(e.getMessage(), e);
      }
   }  

}
