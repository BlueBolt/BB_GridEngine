/*___INFO__MARK_BEGIN__*/
/*************************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  the Sun Industry Standards Source License Version 1.2
 *
 *  Sun Microsystems Inc., March, 2001
 *
 *
 *  Sun Industry Standards Source License Version 1.2
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.2 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *   Copyright: 2001 by Sun Microsystems, Inc.
 *
 *   All Rights Reserved.
 *
 ************************************************************************/
/*___INFO__MARK_END__*/
/**
 *  Generated from javamodel_impl.jsp
 *  !!! DO NOT EDIT THIS FILE !!!
 */

package com.sun.grid.jgdi.configuration;

import javax.management.*;
import com.sun.grid.jgdi.configuration.GEObject;
import java.util.List;
import java.util.LinkedList;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.logging.Logger;
import java.util.logging.Level;

/**
 *  Java representation of the cull object RQRF_Type
 *  defined in sge_all_listsL.template
 *
 *  <p><strong>Warning:</strong>  The  ResourceQuotaRuleFilterImpl class will 
 *  not be compatible with future Sun&trade; Grid Engine releases.</p>
 */
public class ResourceQuotaRuleFilterImpl extends    GEObjectImpl implements ResourceQuotaRuleFilter {


   /**
    *  Create a new instance of ResourceQuotaRuleFilterImpl. The new instance
    *  will not be initialized with the default values.
    */
   public ResourceQuotaRuleFilterImpl() {
      this(false);
   }
   
   /**
    *   Create a new instanceof
    *   @param  initWithDefaultValues if <code>true</code> the new instance will
    *                                 be initialized with the default values as defined
    *                                 in the cull definition.
    */
   public ResourceQuotaRuleFilterImpl(boolean initWithDefaultValues) { 

      if (initWithDefaultValues) {     
    }

  } // end of default constructor
  
  // --- newInstance method with primary key field
  



    // Attribute expand ------------------------------------------------

    private boolean isExpandSet;
   
    /**
     *  Determine if the expand attribute is set
     *  @return <code>true</code> if the expand attribute is set
     */
    public boolean isSetExpand() {

        return isExpandSet;

    }
   
    private boolean m_expand;

    /**
     *   Set the expand attribute.
     *
     *   @param aExpand  the new value for the  expand attribute
     */
    public void setExpand(boolean aExpand) {   
        m_expand = aExpand;

        isExpandSet = true;

    }

    /**
     *  Get the value of the expand attribute.
     *  @return the value of the expand attribute
     */
    public boolean isExpand() {
        return m_expand;
    }


    // Attribute scope ------------------------------------------------

    private List< java.lang.String > m_scopeList;
   
    private void initScope() {
        if (m_scopeList == null) {
            m_scopeList = new LinkedList< java.lang.String >();
        }
    }

    /**
     *   Add a java.lang.String attribute.

     *   @param ascope  the new java.lang.String attribute
     */
    public void addScope(java.lang.String ascope) {   
        initScope();
        
        m_scopeList.add(ascope);
        
    }
   
   
    /**
     *   Set a java.lang.String attribute.
     *   @param index   index of the java.lang.String attribute
     *   @param ascope  the new java.lang.String attribute
     */
    public void setScope(int index, java.lang.String ascope) {
        initScope();
        m_scopeList.set(index, ascope);
    }

    /**
     *  Remove all java.lang.String attributes.
     */
    public void removeAllScope() {
        if (m_scopeList != null) {
            m_scopeList.clear();
        }
    }

    /**
     *  Remote a java.lang.String attribute at an index.
     *  @param index  the index of the java.lang.String attribute which should be
     *                removed
     *  @return the removed java.lang.String attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public java.lang.String removeScope(int index) {
        initScope();
        return (java.lang.String)m_scopeList.remove(index);
    }

    /**
     *  Remote a specific java.lang.String attribute.
     *  @param ascope  the java.lang.String attribute which should be
     *                         removed
     *  @return <code>true</code> if the java.lang.String attribute has been removed
     */
    public boolean removeScope(java.lang.String ascope) {
        initScope();
        return m_scopeList.remove(ascope);
    }
   
    /**
     *   Get a unmodifiable list of all java.lang.String attributes.
     *
     *   @return Unmodifiable list with all java.lang.String attributes
     */
    public List< java.lang.String > getScopeList() {
        initScope();
        return Collections.unmodifiableList(m_scopeList);
    }

    /**
     *  Get the number of java.lang.String attributes.
     *
     *  @return The number of java.lang.String attributes.
     */
    public int getScopeCount() {
        if (m_scopeList != null) {
            return m_scopeList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a java.lang.String attribute at an index.
     *  @param index  the index of the java.lang.String attribute which should be
     *                removed
     *  @return the java.lang.String attribute
     */
    public java.lang.String getScope(int index) {
        initScope();
        return (java.lang.String)m_scopeList.get(index);
    }
   
    /**
     *  Determine if the scope attribute is set
     *  @return <code>true</code> if the scope attribute is set
     */
    public boolean isSetScope () {
        return (m_scopeList != null) && (!m_scopeList.isEmpty());
    }
   

    // Attribute xscope ------------------------------------------------

    private List< java.lang.String > m_xscopeList;
   
    private void initXscope() {
        if (m_xscopeList == null) {
            m_xscopeList = new LinkedList< java.lang.String >();
        }
    }

    /**
     *   Add a java.lang.String attribute.

     *   @param axscope  the new java.lang.String attribute
     */
    public void addXscope(java.lang.String axscope) {   
        initXscope();
        
        m_xscopeList.add(axscope);
        
    }
   
   
    /**
     *   Set a java.lang.String attribute.
     *   @param index   index of the java.lang.String attribute
     *   @param axscope  the new java.lang.String attribute
     */
    public void setXscope(int index, java.lang.String axscope) {
        initXscope();
        m_xscopeList.set(index, axscope);
    }

    /**
     *  Remove all java.lang.String attributes.
     */
    public void removeAllXscope() {
        if (m_xscopeList != null) {
            m_xscopeList.clear();
        }
    }

    /**
     *  Remote a java.lang.String attribute at an index.
     *  @param index  the index of the java.lang.String attribute which should be
     *                removed
     *  @return the removed java.lang.String attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public java.lang.String removeXscope(int index) {
        initXscope();
        return (java.lang.String)m_xscopeList.remove(index);
    }

    /**
     *  Remote a specific java.lang.String attribute.
     *  @param axscope  the java.lang.String attribute which should be
     *                         removed
     *  @return <code>true</code> if the java.lang.String attribute has been removed
     */
    public boolean removeXscope(java.lang.String axscope) {
        initXscope();
        return m_xscopeList.remove(axscope);
    }
   
    /**
     *   Get a unmodifiable list of all java.lang.String attributes.
     *
     *   @return Unmodifiable list with all java.lang.String attributes
     */
    public List< java.lang.String > getXscopeList() {
        initXscope();
        return Collections.unmodifiableList(m_xscopeList);
    }

    /**
     *  Get the number of java.lang.String attributes.
     *
     *  @return The number of java.lang.String attributes.
     */
    public int getXscopeCount() {
        if (m_xscopeList != null) {
            return m_xscopeList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a java.lang.String attribute at an index.
     *  @param index  the index of the java.lang.String attribute which should be
     *                removed
     *  @return the java.lang.String attribute
     */
    public java.lang.String getXscope(int index) {
        initXscope();
        return (java.lang.String)m_xscopeList.get(index);
    }
   
    /**
     *  Determine if the xscope attribute is set
     *  @return <code>true</code> if the xscope attribute is set
     */
    public boolean isSetXscope () {
        return (m_xscopeList != null) && (!m_xscopeList.isEmpty());
    }
   



    /**
     *  Is the primary key information equal to the primary key information
     *  of <code>obj</code>.
     *
     *  @param obj   the compared object
     *  @return <code>true</code> if the primary key information is equal to the
     *          primary key informations of <code>obj</code>.
     */
    public boolean equals(Object obj) {
            
            return obj instanceof ResourceQuotaRuleFilterImpl;

    }

    
    
    public boolean equalsCompletely(Object obj) {
        Logger logger = Logger.getLogger(getClass().getName());
        if (obj instanceof  ResourceQuotaRuleFilterImpl) {
            com.sun.grid.jgdi.configuration.ResourceQuotaRuleFilter obj1 = (com.sun.grid.jgdi.configuration.ResourceQuotaRuleFilter)obj;

            {
                boolean value1 = isExpand();
                boolean value2 = obj1.isExpand();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes RQRF_expand are not equal");
                }
                return false;
            }

            }

            {
                int scopeCount = getScopeCount();
                if (scopeCount != obj1.getScopeCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists scope has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < scopeCount; i++) {
                    java.lang.String value1 = getScope(i);
                    java.lang.String value2 = obj1.getScope(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute RQRF_scope of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes RQRF_scope are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

                } // end of for
            }

            {
                int xscopeCount = getXscopeCount();
                if (xscopeCount != obj1.getXscopeCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists xscope has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < xscopeCount; i++) {
                    java.lang.String value1 = getXscope(i);
                    java.lang.String value2 = obj1.getXscope(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute RQRF_xscope of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes RQRF_xscope are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

                } // end of for
            }

            return true;
        } else {
            return true;
        }
    }
  
    public java.lang.String toString() {
        StringBuilder ret = new StringBuilder();
        ret.append("ResourceQuotaRuleFilterImpl(");

        ret.append(")");
        return ret.toString();
    }



    public java.lang.String dump() {
        StringBuilder sb = new StringBuilder();

            {
                boolean value = isExpand();
                sb.append("Expand = " + value + "\n");
            }

            int scopeCount = getScopeCount();
            for (int i = 0; i < scopeCount; i++) {
                java.lang.String value = getScope(i);
                
                sb.append("Scope[" + i + "] = " + value + "\n");
                
            } // end of for

            int xscopeCount = getXscopeCount();
            for (int i = 0; i < xscopeCount; i++) {
                java.lang.String value = getXscope(i);
                
                sb.append("Xscope[" + i + "] = " + value + "\n");
                
            } // end of for

        return sb.toString();
    }    

 
}
