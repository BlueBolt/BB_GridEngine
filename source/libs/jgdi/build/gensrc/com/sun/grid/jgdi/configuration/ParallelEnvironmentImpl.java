/*___INFO__MARK_BEGIN__*/
/*************************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  the Sun Industry Standards Source License Version 1.2
 *
 *  Sun Microsystems Inc., March, 2001
 *
 *
 *  Sun Industry Standards Source License Version 1.2
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.2 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *   Copyright: 2001 by Sun Microsystems, Inc.
 *
 *   All Rights Reserved.
 *
 ************************************************************************/
/*___INFO__MARK_END__*/
/**
 *  Generated from javamodel_impl.jsp
 *  !!! DO NOT EDIT THIS FILE !!!
 */

package com.sun.grid.jgdi.configuration;

import javax.management.*;
import com.sun.grid.jgdi.configuration.GEObject;
import java.util.List;
import java.util.LinkedList;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.logging.Logger;
import java.util.logging.Level;

/**
 *  Java representation of the cull object PE_Type
 *  defined in sge_all_listsL.template
 *
 *  <p><strong>Warning:</strong>  The  ParallelEnvironmentImpl class will 
 *  not be compatible with future Sun&trade; Grid Engine releases.</p>
 */
public class ParallelEnvironmentImpl extends    GEObjectImpl implements ParallelEnvironment {


   /**
    *  Create a new instance of ParallelEnvironmentImpl. The new instance
    *  will not be initialized with the default values.
    */
   public ParallelEnvironmentImpl() {
      this(false);
   }
   
   /**
    *   Create a new instanceof
    *   @param  initWithDefaultValues if <code>true</code> the new instance will
    *                                 be initialized with the default values as defined
    *                                 in the cull definition.
    */
   public ParallelEnvironmentImpl(boolean initWithDefaultValues) { 

      if (initWithDefaultValues) { 
       setName("template");
       setStartProcArgs("/bin/true");
       setStopProcArgs("/bin/true");
       setAllocationRule("$pe_slots");
       setControlSlaves(false);
       setJobIsFirstTask(true);
       setUrgencySlots("min");
       setAccountingSummary(false);    
    }

  } // end of default constructor
  
  // --- newInstance method with primary key field
  

   /**
    *  Create a new instance of ParallelEnvironmentImpl
    */
   public ParallelEnvironmentImpl(java.lang.String name ) {

   
         setName(name);

    }



    // Attribute name ------------------------------------------------
   
    /**
     *  Determine if the name attribute is set
     *  @return <code>true</code> if the name attribute is set
     */
    public boolean isSetName() {
   
        return  (m_name != null);

    }
   
    private java.lang.String m_name;

    /**
     *   Set the name attribute.
     *
     *   @param aName  the new value for the  name attribute
     */
    public void setName(java.lang.String aName) {   
        m_name = aName;

    }

    /**
     *  Get the value of the name attribute.
     *  @return the value of the name attribute
     */
    public java.lang.String getName() {
        return m_name;
    }


    // Attribute slots ------------------------------------------------

    private boolean isSlotsSet;
   
    /**
     *  Determine if the slots attribute is set
     *  @return <code>true</code> if the slots attribute is set
     */
    public boolean isSetSlots() {

        return isSlotsSet;

    }
   
    private int m_slots;

    /**
     *   Set the slots attribute.
     *
     *   @param aSlots  the new value for the  slots attribute
     */
    public void setSlots(int aSlots) {   
        m_slots = aSlots;

        isSlotsSet = true;

    }

    /**
     *  Get the value of the slots attribute.
     *  @return the value of the slots attribute
     */
    public int getSlots() {
        return m_slots;
    }


    // Attribute userList ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.UserSet > m_userList;
   
    private void initUser() {
        if (m_userList == null) {
            m_userList = new LinkedList< com.sun.grid.jgdi.configuration.UserSet >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.UserSet attribute.

     *   @param auser  the new com.sun.grid.jgdi.configuration.UserSet attribute
     */
    public void addUser(com.sun.grid.jgdi.configuration.UserSet auser) {   
        initUser();
        
        m_userList.add(auser);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.UserSet attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.UserSet attribute
     *   @param auser  the new com.sun.grid.jgdi.configuration.UserSet attribute
     */
    public void setUser(int index, com.sun.grid.jgdi.configuration.UserSet auser) {
        initUser();
        m_userList.set(index, auser);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.UserSet attributes.
     */
    public void removeAllUser() {
        if (m_userList != null) {
            m_userList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.UserSet attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.UserSet attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.UserSet attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.UserSet removeUser(int index) {
        initUser();
        return (com.sun.grid.jgdi.configuration.UserSet)m_userList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.UserSet attribute.
     *  @param auser  the com.sun.grid.jgdi.configuration.UserSet attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.UserSet attribute has been removed
     */
    public boolean removeUser(com.sun.grid.jgdi.configuration.UserSet auser) {
        initUser();
        return m_userList.remove(auser);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.UserSet attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.UserSet attributes
     */
    public List< com.sun.grid.jgdi.configuration.UserSet > getUserList() {
        initUser();
        return Collections.unmodifiableList(m_userList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.UserSet attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.UserSet attributes.
     */
    public int getUserCount() {
        if (m_userList != null) {
            return m_userList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.UserSet attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.UserSet attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.UserSet attribute
     */
    public com.sun.grid.jgdi.configuration.UserSet getUser(int index) {
        initUser();
        return (com.sun.grid.jgdi.configuration.UserSet)m_userList.get(index);
    }
   
    /**
     *  Determine if the user attribute is set
     *  @return <code>true</code> if the user attribute is set
     */
    public boolean isSetUser () {
        return (m_userList != null) && (!m_userList.isEmpty());
    }
   

    // Attribute xuserList ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.UserSet > m_xuserList;
   
    private void initXuser() {
        if (m_xuserList == null) {
            m_xuserList = new LinkedList< com.sun.grid.jgdi.configuration.UserSet >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.UserSet attribute.

     *   @param axuser  the new com.sun.grid.jgdi.configuration.UserSet attribute
     */
    public void addXuser(com.sun.grid.jgdi.configuration.UserSet axuser) {   
        initXuser();
        
        m_xuserList.add(axuser);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.UserSet attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.UserSet attribute
     *   @param axuser  the new com.sun.grid.jgdi.configuration.UserSet attribute
     */
    public void setXuser(int index, com.sun.grid.jgdi.configuration.UserSet axuser) {
        initXuser();
        m_xuserList.set(index, axuser);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.UserSet attributes.
     */
    public void removeAllXuser() {
        if (m_xuserList != null) {
            m_xuserList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.UserSet attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.UserSet attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.UserSet attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.UserSet removeXuser(int index) {
        initXuser();
        return (com.sun.grid.jgdi.configuration.UserSet)m_xuserList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.UserSet attribute.
     *  @param axuser  the com.sun.grid.jgdi.configuration.UserSet attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.UserSet attribute has been removed
     */
    public boolean removeXuser(com.sun.grid.jgdi.configuration.UserSet axuser) {
        initXuser();
        return m_xuserList.remove(axuser);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.UserSet attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.UserSet attributes
     */
    public List< com.sun.grid.jgdi.configuration.UserSet > getXuserList() {
        initXuser();
        return Collections.unmodifiableList(m_xuserList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.UserSet attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.UserSet attributes.
     */
    public int getXuserCount() {
        if (m_xuserList != null) {
            return m_xuserList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.UserSet attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.UserSet attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.UserSet attribute
     */
    public com.sun.grid.jgdi.configuration.UserSet getXuser(int index) {
        initXuser();
        return (com.sun.grid.jgdi.configuration.UserSet)m_xuserList.get(index);
    }
   
    /**
     *  Determine if the xuser attribute is set
     *  @return <code>true</code> if the xuser attribute is set
     */
    public boolean isSetXuser () {
        return (m_xuserList != null) && (!m_xuserList.isEmpty());
    }
   

    // Attribute startProcArgs ------------------------------------------------
   
    /**
     *  Determine if the startProcArgs attribute is set
     *  @return <code>true</code> if the startProcArgs attribute is set
     */
    public boolean isSetStartProcArgs() {
   
        return  (m_startProcArgs != null);

    }
   
    private java.lang.String m_startProcArgs;

    /**
     *   Set the startProcArgs attribute.
     *
     *   @param aStartProcArgs  the new value for the  startProcArgs attribute
     */
    public void setStartProcArgs(java.lang.String aStartProcArgs) {   
        m_startProcArgs = aStartProcArgs;

    }

    /**
     *  Get the value of the startProcArgs attribute.
     *  @return the value of the startProcArgs attribute
     */
    public java.lang.String getStartProcArgs() {
        return m_startProcArgs;
    }


    // Attribute stopProcArgs ------------------------------------------------
   
    /**
     *  Determine if the stopProcArgs attribute is set
     *  @return <code>true</code> if the stopProcArgs attribute is set
     */
    public boolean isSetStopProcArgs() {
   
        return  (m_stopProcArgs != null);

    }
   
    private java.lang.String m_stopProcArgs;

    /**
     *   Set the stopProcArgs attribute.
     *
     *   @param aStopProcArgs  the new value for the  stopProcArgs attribute
     */
    public void setStopProcArgs(java.lang.String aStopProcArgs) {   
        m_stopProcArgs = aStopProcArgs;

    }

    /**
     *  Get the value of the stopProcArgs attribute.
     *  @return the value of the stopProcArgs attribute
     */
    public java.lang.String getStopProcArgs() {
        return m_stopProcArgs;
    }


    // Attribute allocationRule ------------------------------------------------
   
    /**
     *  Determine if the allocationRule attribute is set
     *  @return <code>true</code> if the allocationRule attribute is set
     */
    public boolean isSetAllocationRule() {
   
        return  (m_allocationRule != null);

    }
   
    private java.lang.String m_allocationRule;

    /**
     *   Set the allocationRule attribute.
     *
     *   @param aAllocationRule  the new value for the  allocationRule attribute
     */
    public void setAllocationRule(java.lang.String aAllocationRule) {   
        m_allocationRule = aAllocationRule;

    }

    /**
     *  Get the value of the allocationRule attribute.
     *  @return the value of the allocationRule attribute
     */
    public java.lang.String getAllocationRule() {
        return m_allocationRule;
    }


    // Attribute controlSlaves ------------------------------------------------

    private boolean isControlSlavesSet;
   
    /**
     *  Determine if the controlSlaves attribute is set
     *  @return <code>true</code> if the controlSlaves attribute is set
     */
    public boolean isSetControlSlaves() {

        return isControlSlavesSet;

    }
   
    private boolean m_controlSlaves;

    /**
     *   Set the controlSlaves attribute.
     *
     *   @param aControlSlaves  the new value for the  controlSlaves attribute
     */
    public void setControlSlaves(boolean aControlSlaves) {   
        m_controlSlaves = aControlSlaves;

        isControlSlavesSet = true;

    }

    /**
     *  Get the value of the controlSlaves attribute.
     *  @return the value of the controlSlaves attribute
     */
    public boolean isControlSlaves() {
        return m_controlSlaves;
    }


    // Attribute jobIsFirstTask ------------------------------------------------

    private boolean isJobIsFirstTaskSet;
   
    /**
     *  Determine if the jobIsFirstTask attribute is set
     *  @return <code>true</code> if the jobIsFirstTask attribute is set
     */
    public boolean isSetJobIsFirstTask() {

        return isJobIsFirstTaskSet;

    }
   
    private boolean m_jobIsFirstTask;

    /**
     *   Set the jobIsFirstTask attribute.
     *
     *   @param aJobIsFirstTask  the new value for the  jobIsFirstTask attribute
     */
    public void setJobIsFirstTask(boolean aJobIsFirstTask) {   
        m_jobIsFirstTask = aJobIsFirstTask;

        isJobIsFirstTaskSet = true;

    }

    /**
     *  Get the value of the jobIsFirstTask attribute.
     *  @return the value of the jobIsFirstTask attribute
     */
    public boolean isJobIsFirstTask() {
        return m_jobIsFirstTask;
    }


    // Attribute urgencySlots ------------------------------------------------
   
    /**
     *  Determine if the urgencySlots attribute is set
     *  @return <code>true</code> if the urgencySlots attribute is set
     */
    public boolean isSetUrgencySlots() {
   
        return  (m_urgencySlots != null);

    }
   
    private java.lang.String m_urgencySlots;

    /**
     *   Set the urgencySlots attribute.
     *
     *   @param aUrgencySlots  the new value for the  urgencySlots attribute
     */
    public void setUrgencySlots(java.lang.String aUrgencySlots) {   
        m_urgencySlots = aUrgencySlots;

    }

    /**
     *  Get the value of the urgencySlots attribute.
     *  @return the value of the urgencySlots attribute
     */
    public java.lang.String getUrgencySlots() {
        return m_urgencySlots;
    }


    // Attribute accountingSummary ------------------------------------------------

    private boolean isAccountingSummarySet;
   
    /**
     *  Determine if the accountingSummary attribute is set
     *  @return <code>true</code> if the accountingSummary attribute is set
     */
    public boolean isSetAccountingSummary() {

        return isAccountingSummarySet;

    }
   
    private boolean m_accountingSummary;

    /**
     *   Set the accountingSummary attribute.
     *
     *   @param aAccountingSummary  the new value for the  accountingSummary attribute
     */
    public void setAccountingSummary(boolean aAccountingSummary) {   
        m_accountingSummary = aAccountingSummary;

        isAccountingSummarySet = true;

    }

    /**
     *  Get the value of the accountingSummary attribute.
     *  @return the value of the accountingSummary attribute
     */
    public boolean isAccountingSummary() {
        return m_accountingSummary;
    }




    /**
     *  Is the primary key information equal to the primary key information
     *  of <code>obj</code>.
     *
     *  @param obj   the compared object
     *  @return <code>true</code> if the primary key information is equal to the
     *          primary key informations of <code>obj</code>.
     */
    public boolean equals(Object obj) {

        return (obj instanceof ParallelEnvironmentImpl && getName().equals(((com.sun.grid.jgdi.configuration.ParallelEnvironment)obj).getName()));

    }

    
    
    public boolean equalsCompletely(Object obj) {
        Logger logger = Logger.getLogger(getClass().getName());
        if (obj instanceof  ParallelEnvironmentImpl) {
            com.sun.grid.jgdi.configuration.ParallelEnvironment obj1 = (com.sun.grid.jgdi.configuration.ParallelEnvironment)obj;

            {
                java.lang.String value1 = getName();
                java.lang.String value2 = obj1.getName();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute PE_name of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes PE_name are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                int value1 = getSlots();
                int value2 = obj1.getSlots();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes PE_slots are not equal");
                }
                return false;
            }

            }

            {
                int userCount = getUserCount();
                if (userCount != obj1.getUserCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists user has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < userCount; i++) {
                    com.sun.grid.jgdi.configuration.UserSet value1 = getUser(i);
                    com.sun.grid.jgdi.configuration.UserSet value2 = obj1.getUser(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute PE_user_list of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

                } // end of for
            }

            {
                int xuserCount = getXuserCount();
                if (xuserCount != obj1.getXuserCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists xuser has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < xuserCount; i++) {
                    com.sun.grid.jgdi.configuration.UserSet value1 = getXuser(i);
                    com.sun.grid.jgdi.configuration.UserSet value2 = obj1.getXuser(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute PE_xuser_list of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

                } // end of for
            }

            {
                java.lang.String value1 = getStartProcArgs();
                java.lang.String value2 = obj1.getStartProcArgs();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute PE_start_proc_args of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes PE_start_proc_args are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                java.lang.String value1 = getStopProcArgs();
                java.lang.String value2 = obj1.getStopProcArgs();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute PE_stop_proc_args of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes PE_stop_proc_args are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                java.lang.String value1 = getAllocationRule();
                java.lang.String value2 = obj1.getAllocationRule();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute PE_allocation_rule of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes PE_allocation_rule are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                boolean value1 = isControlSlaves();
                boolean value2 = obj1.isControlSlaves();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes PE_control_slaves are not equal");
                }
                return false;
            }

            }

            {
                boolean value1 = isJobIsFirstTask();
                boolean value2 = obj1.isJobIsFirstTask();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes PE_job_is_first_task are not equal");
                }
                return false;
            }

            }

            {
                java.lang.String value1 = getUrgencySlots();
                java.lang.String value2 = obj1.getUrgencySlots();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute PE_urgency_slots of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes PE_urgency_slots are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                boolean value1 = isAccountingSummary();
                boolean value2 = obj1.isAccountingSummary();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes PE_accounting_summary are not equal");
                }
                return false;
            }

            }

            return true;
        } else {
            return true;
        }
    }
  
    public java.lang.String toString() {
        StringBuilder ret = new StringBuilder();
        ret.append("ParallelEnvironmentImpl(");

        ret.append(getName());

        ret.append(")");
        return ret.toString();
    }



    public java.lang.String dump() {
        StringBuilder sb = new StringBuilder();

            {
                java.lang.String value = getName();
                sb.append("Name = " + value + "\n");
            }

            {
                int value = getSlots();
                sb.append("Slots = " + value + "\n");
            }

            int userCount = getUserCount();
            for (int i = 0; i < userCount; i++) {
                com.sun.grid.jgdi.configuration.UserSet value = getUser(i);
                
                sb.append("User[" + i + "] = " + value.dump() + "\n");
                
            } // end of for

            int xuserCount = getXuserCount();
            for (int i = 0; i < xuserCount; i++) {
                com.sun.grid.jgdi.configuration.UserSet value = getXuser(i);
                
                sb.append("Xuser[" + i + "] = " + value.dump() + "\n");
                
            } // end of for

            {
                java.lang.String value = getStartProcArgs();
                sb.append("StartProcArgs = " + value + "\n");
            }

            {
                java.lang.String value = getStopProcArgs();
                sb.append("StopProcArgs = " + value + "\n");
            }

            {
                java.lang.String value = getAllocationRule();
                sb.append("AllocationRule = " + value + "\n");
            }

            {
                boolean value = isControlSlaves();
                sb.append("ControlSlaves = " + value + "\n");
            }

            {
                boolean value = isJobIsFirstTask();
                sb.append("JobIsFirstTask = " + value + "\n");
            }

            {
                java.lang.String value = getUrgencySlots();
                sb.append("UrgencySlots = " + value + "\n");
            }

            {
                boolean value = isAccountingSummary();
                sb.append("AccountingSummary = " + value + "\n");
            }

        return sb.toString();
    }    

 
}
