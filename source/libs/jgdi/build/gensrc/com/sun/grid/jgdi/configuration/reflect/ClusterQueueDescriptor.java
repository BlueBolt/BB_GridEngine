/*___INFO__MARK_BEGIN__*/
/*************************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  the Sun Industry Standards Source License Version 1.2
 *
 *  Sun Microsystems Inc., March, 2001
 *
 *
 *  Sun Industry Standards Source License Version 1.2
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.2 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *   Copyright: 2001 by Sun Microsystems, Inc.
 *
 *   All Rights Reserved.
 *
 ************************************************************************/
/*___INFO__MARK_END__*/
/**
 *  Generated from javadescriptor.jsp
 *  !!! DO NOT EDIT THIS FILE !!!
 */

package com.sun.grid.jgdi.configuration.reflect;

import com.sun.grid.jgdi.configuration.*;
import com.sun.grid.jgdi.CullConstants;

/**
 *  Java descriptor of the cull object CQ_Type
 *  defined in sge_all_listsL.template
 */
public class ClusterQueueDescriptor extends  GEObjectDescriptor {

   public ClusterQueueDescriptor() {
      this(ClusterQueueImpl.class, "CQ_Type" );
      setImplClass(ClusterQueueImpl.class);
   }
      
   protected ClusterQueueDescriptor(Class type, String name) {
      super(type, name);
     
      PropertyDescriptor propDescr = null;

      propDescr = addSimple("name", String.class, "SGE_STRING_D", CullConstants.CQ_name, true, false, true); 

      propDescr = addList("hostlist", String.class, "HR_Type", CullConstants.CQ_hostlist, true, false, true);

         propDescr.setHasCullWrapper(true);
         propDescr.setCullContentField(CullConstants.HR_name);

      propDescr = addList("qinstances", QueueInstance.class, "QU_Type", CullConstants.CQ_qinstances, true, true, false);

      // keyAttr = AULNG_href (type = SGE_HOST)
      // valueAttr = AULNG_value (type = SGE_ULONG)
      propDescr = addMap("seqNo", Integer.TYPE, "AULNG_Type", String.class,
             CullConstants.CQ_seq_no, CullConstants.AULNG_href, CullConstants.AULNG_value,
             "0", false, true);

      // keyAttr = AULNG_href (type = SGE_HOST)
      // valueAttr = AULNG_value (type = SGE_ULONG)
      propDescr = addMap("nsuspend", Integer.TYPE, "AULNG_Type", String.class,
             CullConstants.CQ_nsuspend, CullConstants.AULNG_href, CullConstants.AULNG_value,
             "1", false, true);

      // keyAttr = AULNG_href (type = SGE_HOST)
      // valueAttr = AULNG_value (type = SGE_ULONG)
      propDescr = addMap("jobSlots", Integer.TYPE, "AULNG_Type", String.class,
             CullConstants.CQ_job_slots, CullConstants.AULNG_href, CullConstants.AULNG_value,
             "1", false, true);

      // keyAttr = ABOOL_href (type = SGE_HOST)
      // valueAttr = ABOOL_value (type = SGE_BOOL)
      propDescr = addMap("rerun", Boolean.TYPE, "ABOOL_Type", String.class,
             CullConstants.CQ_rerun, CullConstants.ABOOL_href, CullConstants.ABOOL_value,
             "0", false, true);

      // keyAttr = AMEM_href (type = SGE_HOST)
      // valueAttr = AMEM_value (type = SGE_STRING)
      propDescr = addMap("sFsize", String.class, "AMEM_Type", String.class,
             CullConstants.CQ_s_fsize, CullConstants.AMEM_href, CullConstants.AMEM_value,
             "INFINITY", false, true);

      // keyAttr = AMEM_href (type = SGE_HOST)
      // valueAttr = AMEM_value (type = SGE_STRING)
      propDescr = addMap("hFsize", String.class, "AMEM_Type", String.class,
             CullConstants.CQ_h_fsize, CullConstants.AMEM_href, CullConstants.AMEM_value,
             "INFINITY", false, true);

      // keyAttr = AMEM_href (type = SGE_HOST)
      // valueAttr = AMEM_value (type = SGE_STRING)
      propDescr = addMap("sData", String.class, "AMEM_Type", String.class,
             CullConstants.CQ_s_data, CullConstants.AMEM_href, CullConstants.AMEM_value,
             "INFINITY", false, true);

      // keyAttr = AMEM_href (type = SGE_HOST)
      // valueAttr = AMEM_value (type = SGE_STRING)
      propDescr = addMap("hData", String.class, "AMEM_Type", String.class,
             CullConstants.CQ_h_data, CullConstants.AMEM_href, CullConstants.AMEM_value,
             "INFINITY", false, true);

      // keyAttr = AMEM_href (type = SGE_HOST)
      // valueAttr = AMEM_value (type = SGE_STRING)
      propDescr = addMap("sStack", String.class, "AMEM_Type", String.class,
             CullConstants.CQ_s_stack, CullConstants.AMEM_href, CullConstants.AMEM_value,
             "INFINITY", false, true);

      // keyAttr = AMEM_href (type = SGE_HOST)
      // valueAttr = AMEM_value (type = SGE_STRING)
      propDescr = addMap("hStack", String.class, "AMEM_Type", String.class,
             CullConstants.CQ_h_stack, CullConstants.AMEM_href, CullConstants.AMEM_value,
             "INFINITY", false, true);

      // keyAttr = AMEM_href (type = SGE_HOST)
      // valueAttr = AMEM_value (type = SGE_STRING)
      propDescr = addMap("sCore", String.class, "AMEM_Type", String.class,
             CullConstants.CQ_s_core, CullConstants.AMEM_href, CullConstants.AMEM_value,
             "INFINITY", false, true);

      // keyAttr = AMEM_href (type = SGE_HOST)
      // valueAttr = AMEM_value (type = SGE_STRING)
      propDescr = addMap("hCore", String.class, "AMEM_Type", String.class,
             CullConstants.CQ_h_core, CullConstants.AMEM_href, CullConstants.AMEM_value,
             "INFINITY", false, true);

      // keyAttr = AMEM_href (type = SGE_HOST)
      // valueAttr = AMEM_value (type = SGE_STRING)
      propDescr = addMap("sRss", String.class, "AMEM_Type", String.class,
             CullConstants.CQ_s_rss, CullConstants.AMEM_href, CullConstants.AMEM_value,
             "INFINITY", false, true);

      // keyAttr = AMEM_href (type = SGE_HOST)
      // valueAttr = AMEM_value (type = SGE_STRING)
      propDescr = addMap("hRss", String.class, "AMEM_Type", String.class,
             CullConstants.CQ_h_rss, CullConstants.AMEM_href, CullConstants.AMEM_value,
             "INFINITY", false, true);

      // keyAttr = AMEM_href (type = SGE_HOST)
      // valueAttr = AMEM_value (type = SGE_STRING)
      propDescr = addMap("sVmem", String.class, "AMEM_Type", String.class,
             CullConstants.CQ_s_vmem, CullConstants.AMEM_href, CullConstants.AMEM_value,
             "INFINITY", false, true);

      // keyAttr = AMEM_href (type = SGE_HOST)
      // valueAttr = AMEM_value (type = SGE_STRING)
      propDescr = addMap("hVmem", String.class, "AMEM_Type", String.class,
             CullConstants.CQ_h_vmem, CullConstants.AMEM_href, CullConstants.AMEM_value,
             "INFINITY", false, true);

      // keyAttr = ATIME_href (type = SGE_HOST)
      // valueAttr = ATIME_value (type = SGE_STRING)
      propDescr = addMap("sRt", String.class, "ATIME_Type", String.class,
             CullConstants.CQ_s_rt, CullConstants.ATIME_href, CullConstants.ATIME_value,
             "INFINITY", false, true);

      // keyAttr = ATIME_href (type = SGE_HOST)
      // valueAttr = ATIME_value (type = SGE_STRING)
      propDescr = addMap("hRt", String.class, "ATIME_Type", String.class,
             CullConstants.CQ_h_rt, CullConstants.ATIME_href, CullConstants.ATIME_value,
             "INFINITY", false, true);

      // keyAttr = ATIME_href (type = SGE_HOST)
      // valueAttr = ATIME_value (type = SGE_STRING)
      propDescr = addMap("sCpu", String.class, "ATIME_Type", String.class,
             CullConstants.CQ_s_cpu, CullConstants.ATIME_href, CullConstants.ATIME_value,
             "INFINITY", false, true);

      // keyAttr = ATIME_href (type = SGE_HOST)
      // valueAttr = ATIME_value (type = SGE_STRING)
      propDescr = addMap("hCpu", String.class, "ATIME_Type", String.class,
             CullConstants.CQ_h_cpu, CullConstants.ATIME_href, CullConstants.ATIME_value,
             "INFINITY", false, true);

      // keyAttr = AINTER_href (type = SGE_HOST)
      // valueAttr = AINTER_value (type = SGE_STRING)
      propDescr = addMap("suspendInterval", String.class, "AINTER_Type", String.class,
             CullConstants.CQ_suspend_interval, CullConstants.AINTER_href, CullConstants.AINTER_value,
             "00:05:00", false, true);

      // keyAttr = AINTER_href (type = SGE_HOST)
      // valueAttr = AINTER_value (type = SGE_STRING)
      propDescr = addMap("minCpuInterval", String.class, "AINTER_Type", String.class,
             CullConstants.CQ_min_cpu_interval, CullConstants.AINTER_href, CullConstants.AINTER_value,
             "00:05:00", false, true);

      // keyAttr = AINTER_href (type = SGE_HOST)
      // valueAttr = AINTER_value (type = SGE_STRING)
      propDescr = addMap("notify", String.class, "AINTER_Type", String.class,
             CullConstants.CQ_notify, CullConstants.AINTER_href, CullConstants.AINTER_value,
             "00:00:60", false, true);

      // keyAttr = ASTR_href (type = SGE_HOST)
      // valueAttr = ASTR_value (type = SGE_STRING)
      propDescr = addMap("tmpdir", String.class, "ASTR_Type", String.class,
             CullConstants.CQ_tmpdir, CullConstants.ASTR_href, CullConstants.ASTR_value,
             "/tmp", false, true);

      // keyAttr = ASTR_href (type = SGE_HOST)
      // valueAttr = ASTR_value (type = SGE_STRING)
      propDescr = addMap("shell", String.class, "ASTR_Type", String.class,
             CullConstants.CQ_shell, CullConstants.ASTR_href, CullConstants.ASTR_value,
             "/bin/csh", false, true);

      // keyAttr = ASTR_href (type = SGE_HOST)
      // valueAttr = ASTR_value (type = SGE_STRING)
      propDescr = addMap("calendar", String.class, "ASTR_Type", String.class,
             CullConstants.CQ_calendar, CullConstants.ASTR_href, CullConstants.ASTR_value,
             "NONE", false, true);

      // keyAttr = ASTR_href (type = SGE_HOST)
      // valueAttr = ASTR_value (type = SGE_STRING)
      propDescr = addMap("priority", String.class, "ASTR_Type", String.class,
             CullConstants.CQ_priority, CullConstants.ASTR_href, CullConstants.ASTR_value,
             "0", false, true);

      // keyAttr = ASTR_href (type = SGE_HOST)
      // valueAttr = ASTR_value (type = SGE_STRING)
      propDescr = addMap("processors", String.class, "ASTR_Type", String.class,
             CullConstants.CQ_processors, CullConstants.ASTR_href, CullConstants.ASTR_value,
             "UNDEFINED", false, true);

      // keyAttr = ASTR_href (type = SGE_HOST)
      // valueAttr = ASTR_value (type = SGE_STRING)
      propDescr = addMap("prolog", String.class, "ASTR_Type", String.class,
             CullConstants.CQ_prolog, CullConstants.ASTR_href, CullConstants.ASTR_value,
             "NONE", false, true);

      // keyAttr = ASTR_href (type = SGE_HOST)
      // valueAttr = ASTR_value (type = SGE_STRING)
      propDescr = addMap("epilog", String.class, "ASTR_Type", String.class,
             CullConstants.CQ_epilog, CullConstants.ASTR_href, CullConstants.ASTR_value,
             "NONE", false, true);

      // keyAttr = ASTR_href (type = SGE_HOST)
      // valueAttr = ASTR_value (type = SGE_STRING)
      propDescr = addMap("shellStartMode", String.class, "ASTR_Type", String.class,
             CullConstants.CQ_shell_start_mode, CullConstants.ASTR_href, CullConstants.ASTR_value,
             "posix_compliant", false, true);

      // keyAttr = ASTR_href (type = SGE_HOST)
      // valueAttr = ASTR_value (type = SGE_STRING)
      propDescr = addMap("starterMethod", String.class, "ASTR_Type", String.class,
             CullConstants.CQ_starter_method, CullConstants.ASTR_href, CullConstants.ASTR_value,
             "NONE", false, true);

      // keyAttr = ASTR_href (type = SGE_HOST)
      // valueAttr = ASTR_value (type = SGE_STRING)
      propDescr = addMap("suspendMethod", String.class, "ASTR_Type", String.class,
             CullConstants.CQ_suspend_method, CullConstants.ASTR_href, CullConstants.ASTR_value,
             "NONE", false, true);

      // keyAttr = ASTR_href (type = SGE_HOST)
      // valueAttr = ASTR_value (type = SGE_STRING)
      propDescr = addMap("resumeMethod", String.class, "ASTR_Type", String.class,
             CullConstants.CQ_resume_method, CullConstants.ASTR_href, CullConstants.ASTR_value,
             "NONE", false, true);

      // keyAttr = ASTR_href (type = SGE_HOST)
      // valueAttr = ASTR_value (type = SGE_STRING)
      propDescr = addMap("terminateMethod", String.class, "ASTR_Type", String.class,
             CullConstants.CQ_terminate_method, CullConstants.ASTR_href, CullConstants.ASTR_value,
             "NONE", false, true);

      // keyAttr = ASTR_href (type = SGE_HOST)
      // valueAttr = ASTR_value (type = SGE_STRING)
      propDescr = addMap("initialState", String.class, "ASTR_Type", String.class,
             CullConstants.CQ_initial_state, CullConstants.ASTR_href, CullConstants.ASTR_value,
             "default", false, true);
       
      // keyAttr = ASTRLIST_href (type = SGE_HOST)
      // valueAttr = ASTRLIST_value (type = ST_Type)
      propDescr = addMapList("pe", String.class, "ASTRLIST_Type", String.class, "ST_Type",
             CullConstants.CQ_pe_list, CullConstants.ASTRLIST_href, CullConstants.ASTRLIST_value,
             "make",false, true);

         propDescr.setHasCullWrapper(true);
         propDescr.setCullContentField(CullConstants.ST_name);
       
      // keyAttr = ASTRLIST_href (type = SGE_HOST)
      // valueAttr = ASTRLIST_value (type = ST_Type)
      propDescr = addMapList("ckpt", String.class, "ASTRLIST_Type", String.class, "ST_Type",
             CullConstants.CQ_ckpt_list, CullConstants.ASTRLIST_href, CullConstants.ASTRLIST_value,
             "NONE",false, true);

         propDescr.setHasCullWrapper(true);
         propDescr.setCullContentField(CullConstants.ST_name);
       
      // keyAttr = AUSRLIST_href (type = SGE_HOST)
      // valueAttr = AUSRLIST_value (type = US_Type)
      propDescr = addMapList("owner", UserSet.class, "AUSRLIST_Type", String.class, "US_Type",
             CullConstants.CQ_owner_list, CullConstants.AUSRLIST_href, CullConstants.AUSRLIST_value,
             "NONE",false, true);
       
      // keyAttr = AUSRLIST_href (type = SGE_HOST)
      // valueAttr = AUSRLIST_value (type = US_Type)
      propDescr = addMapList("acl", UserSet.class, "AUSRLIST_Type", String.class, "US_Type",
             CullConstants.CQ_acl, CullConstants.AUSRLIST_href, CullConstants.AUSRLIST_value,
             "NONE",false, true);
       
      // keyAttr = AUSRLIST_href (type = SGE_HOST)
      // valueAttr = AUSRLIST_value (type = US_Type)
      propDescr = addMapList("xacl", UserSet.class, "AUSRLIST_Type", String.class, "US_Type",
             CullConstants.CQ_xacl, CullConstants.AUSRLIST_href, CullConstants.AUSRLIST_value,
             "NONE",false, true);
       
      // keyAttr = APRJLIST_href (type = SGE_HOST)
      // valueAttr = APRJLIST_value (type = PR_Type)
      propDescr = addMapList("projects", Project.class, "APRJLIST_Type", String.class, "PR_Type",
             CullConstants.CQ_projects, CullConstants.APRJLIST_href, CullConstants.APRJLIST_value,
             "NONE",false, true);
       
      // keyAttr = APRJLIST_href (type = SGE_HOST)
      // valueAttr = APRJLIST_value (type = PR_Type)
      propDescr = addMapList("xprojects", Project.class, "APRJLIST_Type", String.class, "PR_Type",
             CullConstants.CQ_xprojects, CullConstants.APRJLIST_href, CullConstants.APRJLIST_value,
             "NONE",false, true);
       
      // keyAttr = ACELIST_href (type = SGE_HOST)
      // valueAttr = ACELIST_value (type = CE_Type)
      propDescr = addMapList("loadThresholds", ComplexEntry.class, "ACELIST_Type", String.class, "CE_Type",
             CullConstants.CQ_load_thresholds, CullConstants.ACELIST_href, CullConstants.ACELIST_value,
             "np_load_avg=1.75",false, true);
       
      // keyAttr = ACELIST_href (type = SGE_HOST)
      // valueAttr = ACELIST_value (type = CE_Type)
      propDescr = addMapList("suspendThresholds", ComplexEntry.class, "ACELIST_Type", String.class, "CE_Type",
             CullConstants.CQ_suspend_thresholds, CullConstants.ACELIST_href, CullConstants.ACELIST_value,
             "NONE",false, true);
       
      // keyAttr = ACELIST_href (type = SGE_HOST)
      // valueAttr = ACELIST_value (type = CE_Type)
      propDescr = addMapList("consumableConfig", ComplexEntry.class, "ACELIST_Type", String.class, "CE_Type",
             CullConstants.CQ_consumable_config_list, CullConstants.ACELIST_href, CullConstants.ACELIST_value,
             "NONE",false, true);
       
      // keyAttr = ASOLIST_href (type = SGE_HOST)
      // valueAttr = ASOLIST_value (type = SO_Type)
      propDescr = addMapList("subordinate", Subordinate.class, "ASOLIST_Type", String.class, "SO_Type",
             CullConstants.CQ_subordinate_list, CullConstants.ASOLIST_href, CullConstants.ASOLIST_value,
             "NONE",false, true);

      // keyAttr = AQTLIST_href (type = SGE_HOST)
      // valueAttr = AQTLIST_value (type = SGE_ULONG)
      propDescr = addMap("qtype", Integer.TYPE, "AQTLIST_Type", String.class,
             CullConstants.CQ_qtype, CullConstants.AQTLIST_href, CullConstants.AQTLIST_value,
             "3", false, true);

      propDescr = addSimple("tag", Integer.TYPE, "SGE_ULONG", CullConstants.CQ_tag, false, false, true); 

   }
   
   public void validate(Object obj) throws InvalidObjectException {
   
      if (!(obj instanceof ClusterQueue)) {
         throw new InvalidObjectException(obj, "obj is not an instanceof ClusterQueue");
      }

      ClusterQueue cullObj = (ClusterQueue)obj;
      InvalidObjectException exc = null;
   
       if (!cullObj.isSetName()) {
          if (exc == null) {
             exc = new InvalidObjectException(obj, "Primary key fields are not set");
          }
          exc.addPropertyError("name", "primary key field is required");
       }

       if (exc != null) {
           throw exc;
       }

   }
}
