/*___INFO__MARK_BEGIN__*/
/*************************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  the Sun Industry Standards Source License Version 1.2
 *
 *  Sun Microsystems Inc., March, 2001
 *
 *
 *  Sun Industry Standards Source License Version 1.2
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.2 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *   Copyright: 2001 by Sun Microsystems, Inc.
 *
 *   All Rights Reserved.
 *
 ************************************************************************/
/*___INFO__MARK_END__*/
/**
 *  Generated from javadescriptor.jsp
 *  !!! DO NOT EDIT THIS FILE !!!
 */

package com.sun.grid.jgdi.configuration.reflect;

import com.sun.grid.jgdi.configuration.*;
import com.sun.grid.jgdi.CullConstants;

/**
 *  Java descriptor of the cull object AR_Type
 *  defined in sge_all_listsL.template
 */
public class AdvanceReservationDescriptor extends  GEObjectDescriptor {

   public AdvanceReservationDescriptor() {
      this(AdvanceReservationImpl.class, "AR_Type" );
      setImplClass(AdvanceReservationImpl.class);
   }
      
   protected AdvanceReservationDescriptor(Class type, String name) {
      super(type, name);
     
      PropertyDescriptor propDescr = null;

      propDescr = addSimple("id", Integer.TYPE, "SGE_ULONG", CullConstants.AR_id, true, false, false); 

      propDescr = addSimple("name", String.class, "SGE_STRING", CullConstants.AR_name, false, false, true); 

      propDescr = addSimple("account", String.class, "SGE_STRING", CullConstants.AR_account, false, false, true); 

      propDescr = addSimple("owner", String.class, "SGE_STRING", CullConstants.AR_owner, false, true, false); 

      propDescr = addSimple("group", String.class, "SGE_STRING", CullConstants.AR_group, false, true, false); 

      propDescr = addSimple("submissionTime", Integer.TYPE, "SGE_ULONG", CullConstants.AR_submission_time, false, false, false); 

      propDescr = addSimple("startTime", Integer.TYPE, "SGE_ULONG", CullConstants.AR_start_time, false, false, true); 

      propDescr = addSimple("endTime", Integer.TYPE, "SGE_ULONG", CullConstants.AR_end_time, false, false, true); 

      propDescr = addSimple("duration", Integer.TYPE, "SGE_ULONG", CullConstants.AR_duration, false, false, true); 

      propDescr = addSimple("verify", Integer.TYPE, "SGE_ULONG", CullConstants.AR_verify, false, false, true); 

      propDescr = addSimple("errorHandling", Integer.TYPE, "SGE_ULONG", CullConstants.AR_error_handling, false, false, true); 

      propDescr = addSimple("state", Integer.TYPE, "SGE_ULONG", CullConstants.AR_state, false, true, false); 

      propDescr = addSimple("checkpointName", String.class, "SGE_STRING", CullConstants.AR_checkpoint_name, false, false, true); 

      propDescr = addList("resource", ComplexEntry.class, "CE_Type", CullConstants.AR_resource_list, true, false, true);

      propDescr = addList("resourceUtilization", ResourceUtilization.class, "RUE_Type", CullConstants.AR_resource_utilization, true, true, false);

      propDescr = addList("queue", String.class, "QR_Type", CullConstants.AR_queue_list, true, false, true);

         propDescr.setHasCullWrapper(true);
         propDescr.setCullContentField(CullConstants.QR_name);

      propDescr = addList("grantedSlots", JG.class, "JG_Type", CullConstants.AR_granted_slots, true, true, false);

      propDescr = addList("reservedQueues", QueueInstance.class, "QU_Type", CullConstants.AR_reserved_queues, true, true, false);

      propDescr = addSimple("mailOptions", Integer.TYPE, "SGE_ULONG", CullConstants.AR_mail_options, false, false, true); 

      propDescr = addList("mail", MailReceiver.class, "MR_Type", CullConstants.AR_mail_list, true, false, true);

      propDescr = addSimple("pe", String.class, "SGE_STRING", CullConstants.AR_pe, false, false, true); 

      propDescr = addList("peRange", Range.class, "RN_Type", CullConstants.AR_pe_range, true, false, true);

      propDescr = addSimple("grantedPe", String.class, "SGE_STRING", CullConstants.AR_granted_pe, false, false, true); 

      propDescr = addList("masterQueue", String.class, "QR_Type", CullConstants.AR_master_queue_list, true, false, false);

         propDescr.setHasCullWrapper(true);
         propDescr.setCullContentField(CullConstants.QR_name);

      propDescr = addList("acl", ARA.class, "ARA_Type", CullConstants.AR_acl_list, true, false, true);

      propDescr = addList("xacl", ARA.class, "ARA_Type", CullConstants.AR_xacl_list, true, false, true);

      propDescr = addSimple("type", Integer.TYPE, "SGE_ULONG", CullConstants.AR_type, false, false, true); 

   }
   
   public void validate(Object obj) throws InvalidObjectException {
   
      if (!(obj instanceof AdvanceReservation)) {
         throw new InvalidObjectException(obj, "obj is not an instanceof AdvanceReservation");
      }

      AdvanceReservation cullObj = (AdvanceReservation)obj;
      InvalidObjectException exc = null;
   
       if (!cullObj.isSetId()) {
          if (exc == null) {
             exc = new InvalidObjectException(obj, "Primary key fields are not set");
          }
          exc.addPropertyError("id", "primary key field is required");
       }

       if (exc != null) {
           throw exc;
       }

   }
}
