/*___INFO__MARK_BEGIN__*/
/*************************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  the Sun Industry Standards Source License Version 1.2
 *
 *  Sun Microsystems Inc., March, 2001
 *
 *
 *  Sun Industry Standards Source License Version 1.2
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.2 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *   Copyright: 2001 by Sun Microsystems, Inc.
 *
 *   All Rights Reserved.
 *
 ************************************************************************/
/*___INFO__MARK_END__*/
/**
 *  Generated from java_rmi_jgdi.jsp
 *  !!! DO NOT EDIT THIS FILE !!!
 */

package com.sun.grid.jgdi.rmi;


import java.rmi.RemoteException; 
import java.rmi.Remote;

import com.sun.grid.jgdi.configuration.Hostgroup;        
import com.sun.grid.jgdi.configuration.SubmitHost;        
import com.sun.grid.jgdi.configuration.ExecHost;        
import com.sun.grid.jgdi.configuration.Manager;        
import com.sun.grid.jgdi.configuration.AdvanceReservation;        
import com.sun.grid.jgdi.configuration.SchedConf;        
import com.sun.grid.jgdi.configuration.Configuration;        
import com.sun.grid.jgdi.configuration.Project;        
import com.sun.grid.jgdi.configuration.ShareTree;        
import com.sun.grid.jgdi.configuration.AdminHost;        
import com.sun.grid.jgdi.configuration.Checkpoint;        
import com.sun.grid.jgdi.configuration.ParallelEnvironment;        
import com.sun.grid.jgdi.configuration.ComplexEntry;        
import com.sun.grid.jgdi.configuration.ClusterQueue;        
import com.sun.grid.jgdi.configuration.JobSchedulingInfo;        
import com.sun.grid.jgdi.configuration.UserSet;        
import com.sun.grid.jgdi.configuration.Calendar;        
import com.sun.grid.jgdi.configuration.Operator;        
import com.sun.grid.jgdi.configuration.Job;        
import com.sun.grid.jgdi.configuration.ResourceQuotaSet;        
import com.sun.grid.jgdi.configuration.EventClient;        
import com.sun.grid.jgdi.configuration.User;        

    
    
/**
 *   Remote interface of {@link com.sun.grid.jgdi.JGDI} for a RMI service.
 *   Defines all method as {@link com.sun.grid.jgdi.JGDI}, but throws a
 *   {@link java.rmi.RemoteException} which includes the
 *   {@link com.sun.grid.jgdi.JGDIException} as cause.
 */
public interface JGDIRemote extends JGDIRemoteBase {
   
   /**
    *   Update a <code>Hostgroup</code> object.
    *
    *   @param obj the <code>Hostgroup</code> object
    *   @throws RemoteException on any error
    */
   public void updateHostgroup(Hostgroup obj) throws RemoteException;
   

   /**
    *   Add a delete <code>Hostgroup</code> object.
    *
    *   @param obj the <code>Hostgroup</code> object with the primary key information
    *   @throws RemoteException on any error
    */
   public void deleteHostgroup(Hostgroup obj) throws RemoteException;
   

   /**
    *   Delete a <code>Hostgroup</code> object by its primary key
    *
    *   @param HGRP_name  the HGRP_name of the <code>Hostgroup</code> object       
    *   @throws RemoteException on any error
    */
   public void deleteHostgroup( String HGRP_name) throws RemoteException;
   
   /**
    *   Add a new <code>Hostgroup</code> object.
    *
    *   @param obj the new <code>Hostgroup</code> object
    *   @throws RemoteException on any error
    */
   public void addHostgroup(Hostgroup obj) throws RemoteException;
   

   /**
    *   Get all <code>Hostgroup</code> objects.
    *
    *   @return a list of <code>Hostgroup</code> objects
    *   @throws RemoteException on any error
    */
   public java.util.List getHostgroupList() throws RemoteException;

   /**
    *   Get a a <code>Hostgroup</code> object by its primary key
    *
    *   @param HGRP_name  the HGRP_name of the <code>Hostgroup</code> object       
    *   @return the <code>Hostgroup</code> object or <code>null</code>
    *   @throws RemoteException on any error
    */
   public Hostgroup getHostgroup( String HGRP_name) throws RemoteException;

   /**
    *   Add a delete <code>SubmitHost</code> object.
    *
    *   @param obj the <code>SubmitHost</code> object with the primary key information
    *   @throws RemoteException on any error
    */
   public void deleteSubmitHost(SubmitHost obj) throws RemoteException;
   

   /**
    *   Delete a <code>SubmitHost</code> object by its primary key
    *
    *   @param SH_name  the SH_name of the <code>SubmitHost</code> object       
    *   @throws RemoteException on any error
    */
   public void deleteSubmitHost( String SH_name) throws RemoteException;
   
   /**
    *   Add a new <code>SubmitHost</code> object.
    *
    *   @param obj the new <code>SubmitHost</code> object
    *   @throws RemoteException on any error
    */
   public void addSubmitHost(SubmitHost obj) throws RemoteException;
   

   /**
    *   Get all <code>SubmitHost</code> objects.
    *
    *   @return a list of <code>SubmitHost</code> objects
    *   @throws RemoteException on any error
    */
   public java.util.List getSubmitHostList() throws RemoteException;
   
   /**
    *   Update a <code>ExecHost</code> object.
    *
    *   @param obj the <code>ExecHost</code> object
    *   @throws RemoteException on any error
    */
   public void updateExecHost(ExecHost obj) throws RemoteException;
   

   /**
    *   Add a delete <code>ExecHost</code> object.
    *
    *   @param obj the <code>ExecHost</code> object with the primary key information
    *   @throws RemoteException on any error
    */
   public void deleteExecHost(ExecHost obj) throws RemoteException;
   

   /**
    *   Delete a <code>ExecHost</code> object by its primary key
    *
    *   @param EH_name  the EH_name of the <code>ExecHost</code> object       
    *   @throws RemoteException on any error
    */
   public void deleteExecHost( String EH_name) throws RemoteException;
   
   /**
    *   Add a new <code>ExecHost</code> object.
    *
    *   @param obj the new <code>ExecHost</code> object
    *   @throws RemoteException on any error
    */
   public void addExecHost(ExecHost obj) throws RemoteException;
   

   /**
    *   Get all <code>ExecHost</code> objects.
    *
    *   @return a list of <code>ExecHost</code> objects
    *   @throws RemoteException on any error
    */
   public java.util.List getExecHostList() throws RemoteException;

   /**
    *   Get a a <code>ExecHost</code> object by its primary key
    *
    *   @param EH_name  the EH_name of the <code>ExecHost</code> object       
    *   @return the <code>ExecHost</code> object or <code>null</code>
    *   @throws RemoteException on any error
    */
   public ExecHost getExecHost( String EH_name) throws RemoteException;

   /**
    *   Add a delete <code>Manager</code> object.
    *
    *   @param obj the <code>Manager</code> object with the primary key information
    *   @throws RemoteException on any error
    */
   public void deleteManager(Manager obj) throws RemoteException;
   

   /**
    *   Delete a <code>Manager</code> object by its primary key
    *
    *   @param UM_name  the UM_name of the <code>Manager</code> object       
    *   @throws RemoteException on any error
    */
   public void deleteManager( String UM_name) throws RemoteException;
   
   /**
    *   Add a new <code>Manager</code> object.
    *
    *   @param obj the new <code>Manager</code> object
    *   @throws RemoteException on any error
    */
   public void addManager(Manager obj) throws RemoteException;
   

   /**
    *   Get all <code>Manager</code> objects.
    *
    *   @return a list of <code>Manager</code> objects
    *   @throws RemoteException on any error
    */
   public java.util.List getManagerList() throws RemoteException;

   /**
    *   Get a a <code>Manager</code> object by its primary key
    *
    *   @param UM_name  the UM_name of the <code>Manager</code> object       
    *   @return the <code>Manager</code> object or <code>null</code>
    *   @throws RemoteException on any error
    */
   public Manager getManager( String UM_name) throws RemoteException;

   /**
    *   Add a delete <code>AdvanceReservation</code> object.
    *
    *   @param obj the <code>AdvanceReservation</code> object with the primary key information
    *   @throws RemoteException on any error
    */
   public void deleteAdvanceReservation(AdvanceReservation obj) throws RemoteException;
   

   /**
    *   Delete a <code>AdvanceReservation</code> object by its primary key
    *
    *   @param AR_id  the AR_id of the <code>AdvanceReservation</code> object       
    *   @throws RemoteException on any error
    */
   public void deleteAdvanceReservation( int AR_id) throws RemoteException;
   
   /**
    *   Add a new <code>AdvanceReservation</code> object.
    *
    *   @param obj the new <code>AdvanceReservation</code> object
    *   @throws RemoteException on any error
    */
   public void addAdvanceReservation(AdvanceReservation obj) throws RemoteException;
   

   /**
    *   Get all <code>AdvanceReservation</code> objects.
    *
    *   @return a list of <code>AdvanceReservation</code> objects
    *   @throws RemoteException on any error
    */
   public java.util.List getAdvanceReservationList() throws RemoteException;

   /**
    *   Get a a <code>AdvanceReservation</code> object by its primary key
    *
    *   @param AR_id  the AR_id of the <code>AdvanceReservation</code> object       
    *   @return the <code>AdvanceReservation</code> object or <code>null</code>
    *   @throws RemoteException on any error
    */
   public AdvanceReservation getAdvanceReservation( int AR_id) throws RemoteException;
   
   /**
    *   Update a <code>SchedConf</code> object.
    *
    *   @param obj the <code>SchedConf</code> object
    *   @throws RemoteException on any error
    */
   public void updateSchedConf(SchedConf obj) throws RemoteException;
   
   
   /**
    *   Get the <code>SchedConf</code> object.
    *   @return the <code>SchedConf</code> object
    *   @throws RemoteException on any error
    */
   public SchedConf getSchedConf() throws RemoteException;     
   
   /**
    *   Update a <code>Configuration</code> object.
    *
    *   @param obj the <code>Configuration</code> object
    *   @throws RemoteException on any error
    */
   public void updateConfiguration(Configuration obj) throws RemoteException;
   

   /**
    *   Add a delete <code>Configuration</code> object.
    *
    *   @param obj the <code>Configuration</code> object with the primary key information
    *   @throws RemoteException on any error
    */
   public void deleteConfiguration(Configuration obj) throws RemoteException;
   

   /**
    *   Delete a <code>Configuration</code> object by its primary key
    *
    *   @param CONF_name  the CONF_name of the <code>Configuration</code> object       
    *   @throws RemoteException on any error
    */
   public void deleteConfiguration( String CONF_name) throws RemoteException;
   
   /**
    *   Add a new <code>Configuration</code> object.
    *
    *   @param obj the new <code>Configuration</code> object
    *   @throws RemoteException on any error
    */
   public void addConfiguration(Configuration obj) throws RemoteException;
   

   /**
    *   Get all <code>Configuration</code> objects.
    *
    *   @return a list of <code>Configuration</code> objects
    *   @throws RemoteException on any error
    */
   public java.util.List getConfigurationList() throws RemoteException;

   /**
    *   Get a a <code>Configuration</code> object by its primary key
    *
    *   @param CONF_name  the CONF_name of the <code>Configuration</code> object       
    *   @return the <code>Configuration</code> object or <code>null</code>
    *   @throws RemoteException on any error
    */
   public Configuration getConfiguration( String CONF_name) throws RemoteException;
   
   /**
    *   Update a <code>Project</code> object.
    *
    *   @param obj the <code>Project</code> object
    *   @throws RemoteException on any error
    */
   public void updateProject(Project obj) throws RemoteException;
   

   /**
    *   Add a delete <code>Project</code> object.
    *
    *   @param obj the <code>Project</code> object with the primary key information
    *   @throws RemoteException on any error
    */
   public void deleteProject(Project obj) throws RemoteException;
   

   /**
    *   Delete a <code>Project</code> object by its primary key
    *
    *   @param PR_name  the PR_name of the <code>Project</code> object       
    *   @throws RemoteException on any error
    */
   public void deleteProject( String PR_name) throws RemoteException;
   
   /**
    *   Add a new <code>Project</code> object.
    *
    *   @param obj the new <code>Project</code> object
    *   @throws RemoteException on any error
    */
   public void addProject(Project obj) throws RemoteException;
   

   /**
    *   Get all <code>Project</code> objects.
    *
    *   @return a list of <code>Project</code> objects
    *   @throws RemoteException on any error
    */
   public java.util.List getProjectList() throws RemoteException;

   /**
    *   Get a a <code>Project</code> object by its primary key
    *
    *   @param PR_name  the PR_name of the <code>Project</code> object       
    *   @return the <code>Project</code> object or <code>null</code>
    *   @throws RemoteException on any error
    */
   public Project getProject( String PR_name) throws RemoteException;
   
   /**
    *   Update a <code>ShareTree</code> object.
    *
    *   @param obj the <code>ShareTree</code> object
    *   @throws RemoteException on any error
    */
   public void updateShareTree(ShareTree obj) throws RemoteException;
   

   /**
    *   Get a a <code>ShareTree</code> object by its primary key
    *
    *   @param STN_name  the STN_name of the <code>ShareTree</code> object       
    *   @return the <code>ShareTree</code> object or <code>null</code>
    *   @throws RemoteException on any error
    */
   public ShareTree getShareTree( String STN_name) throws RemoteException;

   /**
    *   Add a delete <code>AdminHost</code> object.
    *
    *   @param obj the <code>AdminHost</code> object with the primary key information
    *   @throws RemoteException on any error
    */
   public void deleteAdminHost(AdminHost obj) throws RemoteException;
   

   /**
    *   Delete a <code>AdminHost</code> object by its primary key
    *
    *   @param AH_name  the AH_name of the <code>AdminHost</code> object       
    *   @throws RemoteException on any error
    */
   public void deleteAdminHost( String AH_name) throws RemoteException;
   
   /**
    *   Add a new <code>AdminHost</code> object.
    *
    *   @param obj the new <code>AdminHost</code> object
    *   @throws RemoteException on any error
    */
   public void addAdminHost(AdminHost obj) throws RemoteException;
   

   /**
    *   Get all <code>AdminHost</code> objects.
    *
    *   @return a list of <code>AdminHost</code> objects
    *   @throws RemoteException on any error
    */
   public java.util.List getAdminHostList() throws RemoteException;
   
   /**
    *   Update a <code>Checkpoint</code> object.
    *
    *   @param obj the <code>Checkpoint</code> object
    *   @throws RemoteException on any error
    */
   public void updateCheckpoint(Checkpoint obj) throws RemoteException;
   

   /**
    *   Add a delete <code>Checkpoint</code> object.
    *
    *   @param obj the <code>Checkpoint</code> object with the primary key information
    *   @throws RemoteException on any error
    */
   public void deleteCheckpoint(Checkpoint obj) throws RemoteException;
   

   /**
    *   Delete a <code>Checkpoint</code> object by its primary key
    *
    *   @param CK_name  the CK_name of the <code>Checkpoint</code> object       
    *   @throws RemoteException on any error
    */
   public void deleteCheckpoint( String CK_name) throws RemoteException;
   
   /**
    *   Add a new <code>Checkpoint</code> object.
    *
    *   @param obj the new <code>Checkpoint</code> object
    *   @throws RemoteException on any error
    */
   public void addCheckpoint(Checkpoint obj) throws RemoteException;
   

   /**
    *   Get all <code>Checkpoint</code> objects.
    *
    *   @return a list of <code>Checkpoint</code> objects
    *   @throws RemoteException on any error
    */
   public java.util.List getCheckpointList() throws RemoteException;

   /**
    *   Get a a <code>Checkpoint</code> object by its primary key
    *
    *   @param CK_name  the CK_name of the <code>Checkpoint</code> object       
    *   @return the <code>Checkpoint</code> object or <code>null</code>
    *   @throws RemoteException on any error
    */
   public Checkpoint getCheckpoint( String CK_name) throws RemoteException;
   
   /**
    *   Update a <code>ParallelEnvironment</code> object.
    *
    *   @param obj the <code>ParallelEnvironment</code> object
    *   @throws RemoteException on any error
    */
   public void updateParallelEnvironment(ParallelEnvironment obj) throws RemoteException;
   

   /**
    *   Add a delete <code>ParallelEnvironment</code> object.
    *
    *   @param obj the <code>ParallelEnvironment</code> object with the primary key information
    *   @throws RemoteException on any error
    */
   public void deleteParallelEnvironment(ParallelEnvironment obj) throws RemoteException;
   

   /**
    *   Delete a <code>ParallelEnvironment</code> object by its primary key
    *
    *   @param PE_name  the PE_name of the <code>ParallelEnvironment</code> object       
    *   @throws RemoteException on any error
    */
   public void deleteParallelEnvironment( String PE_name) throws RemoteException;
   
   /**
    *   Add a new <code>ParallelEnvironment</code> object.
    *
    *   @param obj the new <code>ParallelEnvironment</code> object
    *   @throws RemoteException on any error
    */
   public void addParallelEnvironment(ParallelEnvironment obj) throws RemoteException;
   

   /**
    *   Get all <code>ParallelEnvironment</code> objects.
    *
    *   @return a list of <code>ParallelEnvironment</code> objects
    *   @throws RemoteException on any error
    */
   public java.util.List getParallelEnvironmentList() throws RemoteException;

   /**
    *   Get a a <code>ParallelEnvironment</code> object by its primary key
    *
    *   @param PE_name  the PE_name of the <code>ParallelEnvironment</code> object       
    *   @return the <code>ParallelEnvironment</code> object or <code>null</code>
    *   @throws RemoteException on any error
    */
   public ParallelEnvironment getParallelEnvironment( String PE_name) throws RemoteException;
   
   /**
    *   Update a <code>ComplexEntry</code> object.
    *
    *   @param obj the <code>ComplexEntry</code> object
    *   @throws RemoteException on any error
    */
   public void updateComplexEntry(ComplexEntry obj) throws RemoteException;
   

   /**
    *   Add a delete <code>ComplexEntry</code> object.
    *
    *   @param obj the <code>ComplexEntry</code> object with the primary key information
    *   @throws RemoteException on any error
    */
   public void deleteComplexEntry(ComplexEntry obj) throws RemoteException;
   

   /**
    *   Delete a <code>ComplexEntry</code> object by its primary key
    *
    *   @param CE_name  the CE_name of the <code>ComplexEntry</code> object       
    *   @throws RemoteException on any error
    */
   public void deleteComplexEntry( String CE_name) throws RemoteException;
   
   /**
    *   Add a new <code>ComplexEntry</code> object.
    *
    *   @param obj the new <code>ComplexEntry</code> object
    *   @throws RemoteException on any error
    */
   public void addComplexEntry(ComplexEntry obj) throws RemoteException;
   

   /**
    *   Get all <code>ComplexEntry</code> objects.
    *
    *   @return a list of <code>ComplexEntry</code> objects
    *   @throws RemoteException on any error
    */
   public java.util.List getComplexEntryList() throws RemoteException;

   /**
    *   Get a a <code>ComplexEntry</code> object by its primary key
    *
    *   @param CE_name  the CE_name of the <code>ComplexEntry</code> object       
    *   @return the <code>ComplexEntry</code> object or <code>null</code>
    *   @throws RemoteException on any error
    */
   public ComplexEntry getComplexEntry( String CE_name) throws RemoteException;
   
   /**
    *   Update a <code>ClusterQueue</code> object.
    *
    *   @param obj the <code>ClusterQueue</code> object
    *   @throws RemoteException on any error
    */
   public void updateClusterQueue(ClusterQueue obj) throws RemoteException;
   

   /**
    *   Add a delete <code>ClusterQueue</code> object.
    *
    *   @param obj the <code>ClusterQueue</code> object with the primary key information
    *   @throws RemoteException on any error
    */
   public void deleteClusterQueue(ClusterQueue obj) throws RemoteException;
   

   /**
    *   Delete a <code>ClusterQueue</code> object by its primary key
    *
    *   @param CQ_name  the CQ_name of the <code>ClusterQueue</code> object       
    *   @throws RemoteException on any error
    */
   public void deleteClusterQueue( String CQ_name) throws RemoteException;
   
   /**
    *   Add a new <code>ClusterQueue</code> object.
    *
    *   @param obj the new <code>ClusterQueue</code> object
    *   @throws RemoteException on any error
    */
   public void addClusterQueue(ClusterQueue obj) throws RemoteException;
   

   /**
    *   Get all <code>ClusterQueue</code> objects.
    *
    *   @return a list of <code>ClusterQueue</code> objects
    *   @throws RemoteException on any error
    */
   public java.util.List getClusterQueueList() throws RemoteException;

   /**
    *   Get a a <code>ClusterQueue</code> object by its primary key
    *
    *   @param CQ_name  the CQ_name of the <code>ClusterQueue</code> object       
    *   @return the <code>ClusterQueue</code> object or <code>null</code>
    *   @throws RemoteException on any error
    */
   public ClusterQueue getClusterQueue( String CQ_name) throws RemoteException;
   
   /**
    *   Get the <code>JobSchedulingInfo</code> object.
    *   @return the <code>JobSchedulingInfo</code> object
    *   @throws RemoteException on any error
    */
   public JobSchedulingInfo getJobSchedulingInfo() throws RemoteException;     
   
   /**
    *   Update a <code>UserSet</code> object.
    *
    *   @param obj the <code>UserSet</code> object
    *   @throws RemoteException on any error
    */
   public void updateUserSet(UserSet obj) throws RemoteException;
   

   /**
    *   Add a delete <code>UserSet</code> object.
    *
    *   @param obj the <code>UserSet</code> object with the primary key information
    *   @throws RemoteException on any error
    */
   public void deleteUserSet(UserSet obj) throws RemoteException;
   

   /**
    *   Delete a <code>UserSet</code> object by its primary key
    *
    *   @param US_name  the US_name of the <code>UserSet</code> object       
    *   @throws RemoteException on any error
    */
   public void deleteUserSet( String US_name) throws RemoteException;
   
   /**
    *   Add a new <code>UserSet</code> object.
    *
    *   @param obj the new <code>UserSet</code> object
    *   @throws RemoteException on any error
    */
   public void addUserSet(UserSet obj) throws RemoteException;
   

   /**
    *   Get all <code>UserSet</code> objects.
    *
    *   @return a list of <code>UserSet</code> objects
    *   @throws RemoteException on any error
    */
   public java.util.List getUserSetList() throws RemoteException;

   /**
    *   Get a a <code>UserSet</code> object by its primary key
    *
    *   @param US_name  the US_name of the <code>UserSet</code> object       
    *   @return the <code>UserSet</code> object or <code>null</code>
    *   @throws RemoteException on any error
    */
   public UserSet getUserSet( String US_name) throws RemoteException;
   
   /**
    *   Update a <code>Calendar</code> object.
    *
    *   @param obj the <code>Calendar</code> object
    *   @throws RemoteException on any error
    */
   public void updateCalendar(Calendar obj) throws RemoteException;
   

   /**
    *   Add a delete <code>Calendar</code> object.
    *
    *   @param obj the <code>Calendar</code> object with the primary key information
    *   @throws RemoteException on any error
    */
   public void deleteCalendar(Calendar obj) throws RemoteException;
   

   /**
    *   Delete a <code>Calendar</code> object by its primary key
    *
    *   @param CAL_name  the CAL_name of the <code>Calendar</code> object       
    *   @throws RemoteException on any error
    */
   public void deleteCalendar( String CAL_name) throws RemoteException;
   
   /**
    *   Add a new <code>Calendar</code> object.
    *
    *   @param obj the new <code>Calendar</code> object
    *   @throws RemoteException on any error
    */
   public void addCalendar(Calendar obj) throws RemoteException;
   

   /**
    *   Get all <code>Calendar</code> objects.
    *
    *   @return a list of <code>Calendar</code> objects
    *   @throws RemoteException on any error
    */
   public java.util.List getCalendarList() throws RemoteException;

   /**
    *   Get a a <code>Calendar</code> object by its primary key
    *
    *   @param CAL_name  the CAL_name of the <code>Calendar</code> object       
    *   @return the <code>Calendar</code> object or <code>null</code>
    *   @throws RemoteException on any error
    */
   public Calendar getCalendar( String CAL_name) throws RemoteException;

   /**
    *   Add a delete <code>Operator</code> object.
    *
    *   @param obj the <code>Operator</code> object with the primary key information
    *   @throws RemoteException on any error
    */
   public void deleteOperator(Operator obj) throws RemoteException;
   

   /**
    *   Delete a <code>Operator</code> object by its primary key
    *
    *   @param UO_name  the UO_name of the <code>Operator</code> object       
    *   @throws RemoteException on any error
    */
   public void deleteOperator( String UO_name) throws RemoteException;
   
   /**
    *   Add a new <code>Operator</code> object.
    *
    *   @param obj the new <code>Operator</code> object
    *   @throws RemoteException on any error
    */
   public void addOperator(Operator obj) throws RemoteException;
   

   /**
    *   Get all <code>Operator</code> objects.
    *
    *   @return a list of <code>Operator</code> objects
    *   @throws RemoteException on any error
    */
   public java.util.List getOperatorList() throws RemoteException;

   /**
    *   Get a a <code>Operator</code> object by its primary key
    *
    *   @param UO_name  the UO_name of the <code>Operator</code> object       
    *   @return the <code>Operator</code> object or <code>null</code>
    *   @throws RemoteException on any error
    */
   public Operator getOperator( String UO_name) throws RemoteException;
   
   /**
    *   Update a <code>Job</code> object.
    *
    *   @param obj the <code>Job</code> object
    *   @throws RemoteException on any error
    */
   public void updateJob(Job obj) throws RemoteException;
   

   /**
    *   Add a delete <code>Job</code> object.
    *
    *   @param obj the <code>Job</code> object with the primary key information
    *   @throws RemoteException on any error
    */
   public void deleteJob(Job obj) throws RemoteException;
   

   /**
    *   Delete a <code>Job</code> object by its primary key
    *
    *   @param JB_job_number  the JB_job_number of the <code>Job</code> object       
    *   @throws RemoteException on any error
    */
   public void deleteJob( int JB_job_number) throws RemoteException;
   
   /**
    *   Add a new <code>Job</code> object.
    *
    *   @param obj the new <code>Job</code> object
    *   @throws RemoteException on any error
    */
   public void addJob(Job obj) throws RemoteException;
   

   /**
    *   Get all <code>Job</code> objects.
    *
    *   @return a list of <code>Job</code> objects
    *   @throws RemoteException on any error
    */
   public java.util.List getJobList() throws RemoteException;

   /**
    *   Get a a <code>Job</code> object by its primary key
    *
    *   @param JB_job_number  the JB_job_number of the <code>Job</code> object       
    *   @return the <code>Job</code> object or <code>null</code>
    *   @throws RemoteException on any error
    */
   public Job getJob( int JB_job_number) throws RemoteException;
   
   /**
    *   Update a <code>ResourceQuotaSet</code> object.
    *
    *   @param obj the <code>ResourceQuotaSet</code> object
    *   @throws RemoteException on any error
    */
   public void updateResourceQuotaSet(ResourceQuotaSet obj) throws RemoteException;
   

   /**
    *   Add a delete <code>ResourceQuotaSet</code> object.
    *
    *   @param obj the <code>ResourceQuotaSet</code> object with the primary key information
    *   @throws RemoteException on any error
    */
   public void deleteResourceQuotaSet(ResourceQuotaSet obj) throws RemoteException;
   

   /**
    *   Delete a <code>ResourceQuotaSet</code> object by its primary key
    *
    *   @param RQS_name  the RQS_name of the <code>ResourceQuotaSet</code> object       
    *   @throws RemoteException on any error
    */
   public void deleteResourceQuotaSet( String RQS_name) throws RemoteException;
   
   /**
    *   Add a new <code>ResourceQuotaSet</code> object.
    *
    *   @param obj the new <code>ResourceQuotaSet</code> object
    *   @throws RemoteException on any error
    */
   public void addResourceQuotaSet(ResourceQuotaSet obj) throws RemoteException;
   

   /**
    *   Get all <code>ResourceQuotaSet</code> objects.
    *
    *   @return a list of <code>ResourceQuotaSet</code> objects
    *   @throws RemoteException on any error
    */
   public java.util.List getResourceQuotaSetList() throws RemoteException;

   /**
    *   Get a a <code>ResourceQuotaSet</code> object by its primary key
    *
    *   @param RQS_name  the RQS_name of the <code>ResourceQuotaSet</code> object       
    *   @return the <code>ResourceQuotaSet</code> object or <code>null</code>
    *   @throws RemoteException on any error
    */
   public ResourceQuotaSet getResourceQuotaSet( String RQS_name) throws RemoteException;

   /**
    *   Get all <code>EventClient</code> objects.
    *
    *   @return a list of <code>EventClient</code> objects
    *   @throws RemoteException on any error
    */
   public java.util.List getEventClientList() throws RemoteException;
   
   /**
    *   Update a <code>User</code> object.
    *
    *   @param obj the <code>User</code> object
    *   @throws RemoteException on any error
    */
   public void updateUser(User obj) throws RemoteException;
   

   /**
    *   Add a delete <code>User</code> object.
    *
    *   @param obj the <code>User</code> object with the primary key information
    *   @throws RemoteException on any error
    */
   public void deleteUser(User obj) throws RemoteException;
   

   /**
    *   Delete a <code>User</code> object by its primary key
    *
    *   @param UU_name  the UU_name of the <code>User</code> object       
    *   @throws RemoteException on any error
    */
   public void deleteUser( String UU_name) throws RemoteException;
   
   /**
    *   Add a new <code>User</code> object.
    *
    *   @param obj the new <code>User</code> object
    *   @throws RemoteException on any error
    */
   public void addUser(User obj) throws RemoteException;
   

   /**
    *   Get all <code>User</code> objects.
    *
    *   @return a list of <code>User</code> objects
    *   @throws RemoteException on any error
    */
   public java.util.List getUserList() throws RemoteException;

   /**
    *   Get a a <code>User</code> object by its primary key
    *
    *   @param UU_name  the UU_name of the <code>User</code> object       
    *   @return the <code>User</code> object or <code>null</code>
    *   @throws RemoteException on any error
    */
   public User getUser( String UU_name) throws RemoteException;

}
