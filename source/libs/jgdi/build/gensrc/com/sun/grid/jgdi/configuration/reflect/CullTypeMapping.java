/*___INFO__MARK_BEGIN__*/
/*************************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  the Sun Industry Standards Source License Version 1.2
 *
 *  Sun Microsystems Inc., March, 2001
 *
 *
 *  Sun Industry Standards Source License Version 1.2
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.2 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *   Copyright: 2001 by Sun Microsystems, Inc.
 *
 *   All Rights Reserved.
 *
 ************************************************************************/
/*___INFO__MARK_END__*/
/**
 *  Generated from java_mapping.jsp
 *  !!! DO NOT EDIT THIS FILE !!!
 */

package com.sun.grid.jgdi.configuration.reflect;

import java.util.Map;
import java.util.HashMap;

/**
 *  This class provides the mapping from cull type to its java classes
 */
public class CullTypeMapping {
   
   private static Map<String, Class> typeMap;
   
   private static void reg(String cullType, Class clazz) {
      typeMap.put(cullType, clazz);
   }
   
   private static void init() {
      if (typeMap == null) {
        synchronized(CullTypeMapping.class) {
           if (typeMap == null ) {
               typeMap = new HashMap<String, Class>();
              reg("QIM_Type", com.sun.grid.jgdi.configuration.QueueInstanceMessage.class);   
              reg("CQU_Type", com.sun.grid.jgdi.configuration.CalendarQueueState.class);   
              reg("EH_Type", com.sun.grid.jgdi.configuration.ExecHost.class);   
              reg("UM_Type", com.sun.grid.jgdi.configuration.Manager.class);   
              reg("RUE_Type", com.sun.grid.jgdi.configuration.ResourceUtilization.class);   
              reg("PR_Type", com.sun.grid.jgdi.configuration.Project.class);   
              reg("STN_Type", com.sun.grid.jgdi.configuration.ShareTree.class);   
              reg("RDE_Type", com.sun.grid.jgdi.configuration.ResourceDiagramEntry.class);   
              reg("BN_Type", com.sun.grid.jgdi.configuration.Binding.class);   
              reg("PA_Type", com.sun.grid.jgdi.configuration.PathAlias.class);   
              reg("JAT_Type", com.sun.grid.jgdi.configuration.JobTask.class);   
              reg("CE_Type", com.sun.grid.jgdi.configuration.ComplexEntry.class);   
              reg("CF_Type", com.sun.grid.jgdi.configuration.ConfigurationElement.class);   
              reg("RN_Type", com.sun.grid.jgdi.configuration.Range.class);   
              reg("PN_Type", com.sun.grid.jgdi.configuration.PathName.class);   
              reg("UO_Type", com.sun.grid.jgdi.configuration.Operator.class);   
              reg("SO_Type", com.sun.grid.jgdi.configuration.Subordinate.class);   
              reg("RQRF_Type", com.sun.grid.jgdi.configuration.ResourceQuotaRuleFilter.class);   
              reg("UU_Type", com.sun.grid.jgdi.configuration.User.class);   
              reg("ULNG_Type", com.sun.grid.jgdi.configuration.ULNG.class);   
              reg("HGRP_Type", com.sun.grid.jgdi.configuration.Hostgroup.class);   
              reg("SH_Type", com.sun.grid.jgdi.configuration.SubmitHost.class);   
              reg("ARA_Type", com.sun.grid.jgdi.configuration.ARA.class);   
              reg("EVS_Type", com.sun.grid.jgdi.configuration.EventSubcribtion.class);   
              reg("JG_Type", com.sun.grid.jgdi.configuration.JG.class);   
              reg("AR_Type", com.sun.grid.jgdi.configuration.AdvanceReservation.class);   
              reg("PET_Type", com.sun.grid.jgdi.configuration.PETask.class);   
              reg("SC_Type", com.sun.grid.jgdi.configuration.SchedConf.class);   
              reg("JRE_Type", com.sun.grid.jgdi.configuration.JobReference.class);   
              reg("CONF_Type", com.sun.grid.jgdi.configuration.Configuration.class);   
              reg("RQR_Type", com.sun.grid.jgdi.configuration.ResourceQuotaRule.class);   
              reg("FPET_Type", com.sun.grid.jgdi.configuration.FPET.class);   
              reg("AH_Type", com.sun.grid.jgdi.configuration.AdminHost.class);   
              reg("CK_Type", com.sun.grid.jgdi.configuration.Checkpoint.class);   
              reg("PE_Type", com.sun.grid.jgdi.configuration.ParallelEnvironment.class);   
              reg("CQ_Type", com.sun.grid.jgdi.configuration.ClusterQueue.class);   
              reg("MR_Type", com.sun.grid.jgdi.configuration.MailReceiver.class);   
              reg("RQRL_Type", com.sun.grid.jgdi.configuration.ResourceQuotaRuleLimit.class);   
              reg("SME_Type", com.sun.grid.jgdi.configuration.JobSchedulingInfo.class);   
              reg("US_Type", com.sun.grid.jgdi.configuration.UserSet.class);   
              reg("CAL_Type", com.sun.grid.jgdi.configuration.Calendar.class);   
              reg("ET_Type", com.sun.grid.jgdi.configuration.Event.class);   
              reg("JB_Type", com.sun.grid.jgdi.configuration.Job.class);   
              reg("QU_Type", com.sun.grid.jgdi.configuration.QueueInstance.class);   
              reg("MES_Type", com.sun.grid.jgdi.configuration.JobSchedulingMessage.class);   
              reg("RQS_Type", com.sun.grid.jgdi.configuration.ResourceQuotaSet.class);   
              reg("EV_Type", com.sun.grid.jgdi.configuration.EventClient.class);   

            }
         }
      }
   }
   
   /**
    *   Get the java class which represents a cull type
    *   @param  cullType  name of the cull type
    *   @return the java class
    *   @throws IllegalArgumentException if the cull type is unknown
    */
   public static Class getClassForCullType(String cullType) {
      init();
      Class ret = typeMap.get(cullType);
      if (ret == null) {
         throw new IllegalArgumentException("Unknown cull type '" + cullType + "'");
      }
      return ret;
   }
}
