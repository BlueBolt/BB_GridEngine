/*___INFO__MARK_BEGIN__*/
/*************************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  the Sun Industry Standards Source License Version 1.2
 *
 *  Sun Microsystems Inc., March, 2001
 *
 *
 *  Sun Industry Standards Source License Version 1.2
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.2 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *   Copyright: 2001 by Sun Microsystems, Inc.
 *
 *   All Rights Reserved.
 *
 ************************************************************************/
/*___INFO__MARK_END__*/
/**
 *  Generated from javamodel_impl.jsp
 *  !!! DO NOT EDIT THIS FILE !!!
 */

package com.sun.grid.jgdi.configuration;

import javax.management.*;
import com.sun.grid.jgdi.configuration.GEObject;
import java.util.List;
import java.util.LinkedList;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.logging.Logger;
import java.util.logging.Level;

/**
 *  Java representation of the cull object BN_Type
 *  defined in sge_all_listsL.template
 *
 *  <p><strong>Warning:</strong>  The  BindingImpl class will 
 *  not be compatible with future Sun&trade; Grid Engine releases.</p>
 */
public class BindingImpl extends    GEObjectImpl implements Binding {


   /**
    *  Create a new instance of BindingImpl. The new instance
    *  will not be initialized with the default values.
    */
   public BindingImpl() {
      this(false);
   }
   
   /**
    *   Create a new instanceof
    *   @param  initWithDefaultValues if <code>true</code> the new instance will
    *                                 be initialized with the default values as defined
    *                                 in the cull definition.
    */
   public BindingImpl(boolean initWithDefaultValues) { 

      if (initWithDefaultValues) {     
    }

  } // end of default constructor
  
  // --- newInstance method with primary key field
  

   /**
    *  Create a new instance of BindingImpl
    */
   public BindingImpl(java.lang.String strategy ) {

   
         setStrategy(strategy);

    }



    // Attribute strategy ------------------------------------------------
   
    /**
     *  Determine if the strategy attribute is set
     *  @return <code>true</code> if the strategy attribute is set
     */
    public boolean isSetStrategy() {
   
        return  (m_strategy != null);

    }
   
    private java.lang.String m_strategy;

    /**
     *   Set the strategy attribute.
     *
     *   @param aStrategy  the new value for the  strategy attribute
     */
    public void setStrategy(java.lang.String aStrategy) {   
        m_strategy = aStrategy;

    }

    /**
     *  Get the value of the strategy attribute.
     *  @return the value of the strategy attribute
     */
    public java.lang.String getStrategy() {
        return m_strategy;
    }


    // Attribute type ------------------------------------------------

    private boolean isTypeSet;
   
    /**
     *  Determine if the type attribute is set
     *  @return <code>true</code> if the type attribute is set
     */
    public boolean isSetType() {

        return isTypeSet;

    }
   
    private int m_type;

    /**
     *   Set the type attribute.
     *
     *   @param aType  the new value for the  type attribute
     */
    public void setType(int aType) {   
        m_type = aType;

        isTypeSet = true;

    }

    /**
     *  Get the value of the type attribute.
     *  @return the value of the type attribute
     */
    public int getType() {
        return m_type;
    }


    // Attribute parameterN ------------------------------------------------

    private boolean isParameterNSet;
   
    /**
     *  Determine if the parameterN attribute is set
     *  @return <code>true</code> if the parameterN attribute is set
     */
    public boolean isSetParameterN() {

        return isParameterNSet;

    }
   
    private int m_parameterN;

    /**
     *   Set the parameterN attribute.
     *
     *   @param aParameterN  the new value for the  parameterN attribute
     */
    public void setParameterN(int aParameterN) {   
        m_parameterN = aParameterN;

        isParameterNSet = true;

    }

    /**
     *  Get the value of the parameterN attribute.
     *  @return the value of the parameterN attribute
     */
    public int getParameterN() {
        return m_parameterN;
    }


    // Attribute parameterSocketOffset ------------------------------------------------

    private boolean isParameterSocketOffsetSet;
   
    /**
     *  Determine if the parameterSocketOffset attribute is set
     *  @return <code>true</code> if the parameterSocketOffset attribute is set
     */
    public boolean isSetParameterSocketOffset() {

        return isParameterSocketOffsetSet;

    }
   
    private int m_parameterSocketOffset;

    /**
     *   Set the parameterSocketOffset attribute.
     *
     *   @param aParameterSocketOffset  the new value for the  parameterSocketOffset attribute
     */
    public void setParameterSocketOffset(int aParameterSocketOffset) {   
        m_parameterSocketOffset = aParameterSocketOffset;

        isParameterSocketOffsetSet = true;

    }

    /**
     *  Get the value of the parameterSocketOffset attribute.
     *  @return the value of the parameterSocketOffset attribute
     */
    public int getParameterSocketOffset() {
        return m_parameterSocketOffset;
    }


    // Attribute parameterCoreOffset ------------------------------------------------

    private boolean isParameterCoreOffsetSet;
   
    /**
     *  Determine if the parameterCoreOffset attribute is set
     *  @return <code>true</code> if the parameterCoreOffset attribute is set
     */
    public boolean isSetParameterCoreOffset() {

        return isParameterCoreOffsetSet;

    }
   
    private int m_parameterCoreOffset;

    /**
     *   Set the parameterCoreOffset attribute.
     *
     *   @param aParameterCoreOffset  the new value for the  parameterCoreOffset attribute
     */
    public void setParameterCoreOffset(int aParameterCoreOffset) {   
        m_parameterCoreOffset = aParameterCoreOffset;

        isParameterCoreOffsetSet = true;

    }

    /**
     *  Get the value of the parameterCoreOffset attribute.
     *  @return the value of the parameterCoreOffset attribute
     */
    public int getParameterCoreOffset() {
        return m_parameterCoreOffset;
    }


    // Attribute parameterStridingStepSize ------------------------------------------------

    private boolean isParameterStridingStepSizeSet;
   
    /**
     *  Determine if the parameterStridingStepSize attribute is set
     *  @return <code>true</code> if the parameterStridingStepSize attribute is set
     */
    public boolean isSetParameterStridingStepSize() {

        return isParameterStridingStepSizeSet;

    }
   
    private int m_parameterStridingStepSize;

    /**
     *   Set the parameterStridingStepSize attribute.
     *
     *   @param aParameterStridingStepSize  the new value for the  parameterStridingStepSize attribute
     */
    public void setParameterStridingStepSize(int aParameterStridingStepSize) {   
        m_parameterStridingStepSize = aParameterStridingStepSize;

        isParameterStridingStepSizeSet = true;

    }

    /**
     *  Get the value of the parameterStridingStepSize attribute.
     *  @return the value of the parameterStridingStepSize attribute
     */
    public int getParameterStridingStepSize() {
        return m_parameterStridingStepSize;
    }


    // Attribute parameterExplicit ------------------------------------------------
   
    /**
     *  Determine if the parameterExplicit attribute is set
     *  @return <code>true</code> if the parameterExplicit attribute is set
     */
    public boolean isSetParameterExplicit() {
   
        return  (m_parameterExplicit != null);

    }
   
    private java.lang.String m_parameterExplicit;

    /**
     *   Set the parameterExplicit attribute.
     *
     *   @param aParameterExplicit  the new value for the  parameterExplicit attribute
     */
    public void setParameterExplicit(java.lang.String aParameterExplicit) {   
        m_parameterExplicit = aParameterExplicit;

    }

    /**
     *  Get the value of the parameterExplicit attribute.
     *  @return the value of the parameterExplicit attribute
     */
    public java.lang.String getParameterExplicit() {
        return m_parameterExplicit;
    }




    /**
     *  Is the primary key information equal to the primary key information
     *  of <code>obj</code>.
     *
     *  @param obj   the compared object
     *  @return <code>true</code> if the primary key information is equal to the
     *          primary key informations of <code>obj</code>.
     */
    public boolean equals(Object obj) {

        return (obj instanceof BindingImpl && getStrategy().equals(((com.sun.grid.jgdi.configuration.Binding)obj).getStrategy()));

    }

    
    
    public boolean equalsCompletely(Object obj) {
        Logger logger = Logger.getLogger(getClass().getName());
        if (obj instanceof  BindingImpl) {
            com.sun.grid.jgdi.configuration.Binding obj1 = (com.sun.grid.jgdi.configuration.Binding)obj;

            {
                java.lang.String value1 = getStrategy();
                java.lang.String value2 = obj1.getStrategy();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute BN_strategy of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes BN_strategy are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                int value1 = getType();
                int value2 = obj1.getType();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes BN_type are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getParameterN();
                int value2 = obj1.getParameterN();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes BN_parameter_n are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getParameterSocketOffset();
                int value2 = obj1.getParameterSocketOffset();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes BN_parameter_socket_offset are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getParameterCoreOffset();
                int value2 = obj1.getParameterCoreOffset();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes BN_parameter_core_offset are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getParameterStridingStepSize();
                int value2 = obj1.getParameterStridingStepSize();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes BN_parameter_striding_step_size are not equal");
                }
                return false;
            }

            }

            {
                java.lang.String value1 = getParameterExplicit();
                java.lang.String value2 = obj1.getParameterExplicit();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute BN_parameter_explicit of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes BN_parameter_explicit are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            return true;
        } else {
            return true;
        }
    }
  
    public java.lang.String toString() {
        StringBuilder ret = new StringBuilder();
        ret.append("BindingImpl(");

        ret.append(getStrategy());

        ret.append(")");
        return ret.toString();
    }



    public java.lang.String dump() {
        StringBuilder sb = new StringBuilder();

            {
                java.lang.String value = getStrategy();
                sb.append("Strategy = " + value + "\n");
            }

            {
                int value = getType();
                sb.append("Type = " + value + "\n");
            }

            {
                int value = getParameterN();
                sb.append("ParameterN = " + value + "\n");
            }

            {
                int value = getParameterSocketOffset();
                sb.append("ParameterSocketOffset = " + value + "\n");
            }

            {
                int value = getParameterCoreOffset();
                sb.append("ParameterCoreOffset = " + value + "\n");
            }

            {
                int value = getParameterStridingStepSize();
                sb.append("ParameterStridingStepSize = " + value + "\n");
            }

            {
                java.lang.String value = getParameterExplicit();
                sb.append("ParameterExplicit = " + value + "\n");
            }

        return sb.toString();
    }    

 
}
