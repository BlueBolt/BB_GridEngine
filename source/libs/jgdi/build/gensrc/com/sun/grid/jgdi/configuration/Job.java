/*___INFO__MARK_BEGIN__*/
/*************************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  the Sun Industry Standards Source License Version 1.2
 *
 *  Sun Microsystems Inc., March, 2001
 *
 *
 *  Sun Industry Standards Source License Version 1.2
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.2 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *   Copyright: 2001 by Sun Microsystems, Inc.
 *
 *   All Rights Reserved.
 *
 ************************************************************************/
/*___INFO__MARK_END__*/
/**
 *  Generated from javamodel.jsp
 *  !!! DO NOT EDIT THIS FILE !!!
 */

package com.sun.grid.jgdi.configuration;

import com.sun.grid.jgdi.configuration.GEObject;
import java.util.List;
import java.util.Set;

/**
 *  Java representation of the cull object JB_Type
 *  defined in sge_all_listsL.template
 *
 *  <p><strong>Warning:</strong>  The  Job class will 
 *  not be compatible with future Sun&trade; Grid Engine releases.</p>
 *
 */
public interface Job extends 
    GEObject  { 

    // Attribute jobNumber ------------------------------------------------

       
    /**
     *   Set the jobNumber attribute.
     *
     *   @param aJobNumber  the new value for the  jobNumber attribute
     */
    public void setJobNumber(int aJobNumber);
  
    /**
     *  Get the value of the jobNumber attribute.
     *  @return the value of the jobNumber attribute
     */
    public int getJobNumber();
   

 
    /**
     *  Determine if any jobNumber attribute is set
     *  @return <code>true</code> if the jobNumber attribute is set
     */
    public boolean isSetJobNumber();


    // Attribute jobName ------------------------------------------------

       
    /**
     *   Set the jobName attribute.
     *
     *   @param aJobName  the new value for the  jobName attribute
     */
    public void setJobName(java.lang.String aJobName);
  
    /**
     *  Get the value of the jobName attribute.
     *  @return the value of the jobName attribute
     */
    public java.lang.String getJobName();
   

 
    /**
     *  Determine if any jobName attribute is set
     *  @return <code>true</code> if the jobName attribute is set
     */
    public boolean isSetJobName();


    // Attribute version ------------------------------------------------

  
    /**
     *  Get the value of the version attribute.
     *  @return the value of the version attribute
     */
    public int getVersion();
   

 
    /**
     *  Determine if any version attribute is set
     *  @return <code>true</code> if the version attribute is set
     */
    public boolean isSetVersion();


    // Attribute jidRequestList ------------------------------------------------


    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.JobReference attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.JobReference attributes
     */
    public List< com.sun.grid.jgdi.configuration.JobReference >  getJidRequestList();

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.JobReference attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.JobReference attributes.
     */
    public int getJidRequestCount();
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.JobReference attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.JobReference attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.JobReference attribute
     */
    public com.sun.grid.jgdi.configuration.JobReference getJidRequest(int index);
   

    /**
     *   Add a com.sun.grid.jgdi.configuration.JobReference attribute.
     *   @param ajidRequest  the new com.sun.grid.jgdi.configuration.JobReference attribute
     */
    public void addJidRequest(com.sun.grid.jgdi.configuration.JobReference ajidRequest);
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.JobReference attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.JobReference attribute
     *   @param ajidRequest  the new com.sun.grid.jgdi.configuration.JobReference attribute
     */
    public void setJidRequest(int index, com.sun.grid.jgdi.configuration.JobReference ajidRequest);

    /**
     *  Remove all com.sun.grid.jgdi.configuration.JobReference attributes.
     */
    public void removeAllJidRequest();
   
    /**
     *  Remote a com.sun.grid.jgdi.configuration.JobReference attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.JobReference attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.JobReference attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.JobReference removeJidRequest(int index);

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.JobReference attribute.
     *  @param ajidRequest  the com.sun.grid.jgdi.configuration.JobReference attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.JobReference attribute has been removed
     */
    public boolean removeJidRequest(com.sun.grid.jgdi.configuration.JobReference ajidRequest);
   
       
 
    /**
     *  Determine if any jidRequest attribute is set
     *  @return <code>true</code> if the jidRequest attribute is set
     */
    public boolean isSetJidRequest();


    // Attribute jidPredecessorList ------------------------------------------------


    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.JobReference attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.JobReference attributes
     */
    public List< com.sun.grid.jgdi.configuration.JobReference >  getJidPredecessorList();

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.JobReference attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.JobReference attributes.
     */
    public int getJidPredecessorCount();
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.JobReference attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.JobReference attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.JobReference attribute
     */
    public com.sun.grid.jgdi.configuration.JobReference getJidPredecessor(int index);
   
       
 
    /**
     *  Determine if any jidPredecessor attribute is set
     *  @return <code>true</code> if the jidPredecessor attribute is set
     */
    public boolean isSetJidPredecessor();


    // Attribute jidSuccessorList ------------------------------------------------


    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.JobReference attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.JobReference attributes
     */
    public List< com.sun.grid.jgdi.configuration.JobReference >  getJidSuccessorList();

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.JobReference attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.JobReference attributes.
     */
    public int getJidSuccessorCount();
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.JobReference attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.JobReference attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.JobReference attribute
     */
    public com.sun.grid.jgdi.configuration.JobReference getJidSuccessor(int index);
   
       
 
    /**
     *  Determine if any jidSuccessor attribute is set
     *  @return <code>true</code> if the jidSuccessor attribute is set
     */
    public boolean isSetJidSuccessor();


    // Attribute jaAdRequestList ------------------------------------------------


    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.JobReference attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.JobReference attributes
     */
    public List< com.sun.grid.jgdi.configuration.JobReference >  getJaAdRequestList();

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.JobReference attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.JobReference attributes.
     */
    public int getJaAdRequestCount();
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.JobReference attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.JobReference attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.JobReference attribute
     */
    public com.sun.grid.jgdi.configuration.JobReference getJaAdRequest(int index);
   

    /**
     *   Add a com.sun.grid.jgdi.configuration.JobReference attribute.
     *   @param ajaAdRequest  the new com.sun.grid.jgdi.configuration.JobReference attribute
     */
    public void addJaAdRequest(com.sun.grid.jgdi.configuration.JobReference ajaAdRequest);
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.JobReference attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.JobReference attribute
     *   @param ajaAdRequest  the new com.sun.grid.jgdi.configuration.JobReference attribute
     */
    public void setJaAdRequest(int index, com.sun.grid.jgdi.configuration.JobReference ajaAdRequest);

    /**
     *  Remove all com.sun.grid.jgdi.configuration.JobReference attributes.
     */
    public void removeAllJaAdRequest();
   
    /**
     *  Remote a com.sun.grid.jgdi.configuration.JobReference attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.JobReference attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.JobReference attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.JobReference removeJaAdRequest(int index);

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.JobReference attribute.
     *  @param ajaAdRequest  the com.sun.grid.jgdi.configuration.JobReference attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.JobReference attribute has been removed
     */
    public boolean removeJaAdRequest(com.sun.grid.jgdi.configuration.JobReference ajaAdRequest);
   
       
 
    /**
     *  Determine if any jaAdRequest attribute is set
     *  @return <code>true</code> if the jaAdRequest attribute is set
     */
    public boolean isSetJaAdRequest();


    // Attribute jaAdPredecessorList ------------------------------------------------


    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.JobReference attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.JobReference attributes
     */
    public List< com.sun.grid.jgdi.configuration.JobReference >  getJaAdPredecessorList();

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.JobReference attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.JobReference attributes.
     */
    public int getJaAdPredecessorCount();
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.JobReference attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.JobReference attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.JobReference attribute
     */
    public com.sun.grid.jgdi.configuration.JobReference getJaAdPredecessor(int index);
   
       
 
    /**
     *  Determine if any jaAdPredecessor attribute is set
     *  @return <code>true</code> if the jaAdPredecessor attribute is set
     */
    public boolean isSetJaAdPredecessor();


    // Attribute jaAdSuccessorList ------------------------------------------------


    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.JobReference attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.JobReference attributes
     */
    public List< com.sun.grid.jgdi.configuration.JobReference >  getJaAdSuccessorList();

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.JobReference attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.JobReference attributes.
     */
    public int getJaAdSuccessorCount();
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.JobReference attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.JobReference attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.JobReference attribute
     */
    public com.sun.grid.jgdi.configuration.JobReference getJaAdSuccessor(int index);
   
       
 
    /**
     *  Determine if any jaAdSuccessor attribute is set
     *  @return <code>true</code> if the jaAdSuccessor attribute is set
     */
    public boolean isSetJaAdSuccessor();


    // Attribute session ------------------------------------------------

       
    /**
     *   Set the session attribute.
     *
     *   @param aSession  the new value for the  session attribute
     */
    public void setSession(java.lang.String aSession);
  
    /**
     *  Get the value of the session attribute.
     *  @return the value of the session attribute
     */
    public java.lang.String getSession();
   

 
    /**
     *  Determine if any session attribute is set
     *  @return <code>true</code> if the session attribute is set
     */
    public boolean isSetSession();


    // Attribute project ------------------------------------------------

       
    /**
     *   Set the project attribute.
     *
     *   @param aProject  the new value for the  project attribute
     */
    public void setProject(java.lang.String aProject);
  
    /**
     *  Get the value of the project attribute.
     *  @return the value of the project attribute
     */
    public java.lang.String getProject();
   

 
    /**
     *  Determine if any project attribute is set
     *  @return <code>true</code> if the project attribute is set
     */
    public boolean isSetProject();


    // Attribute department ------------------------------------------------

       
    /**
     *   Set the department attribute.
     *
     *   @param aDepartment  the new value for the  department attribute
     */
    public void setDepartment(java.lang.String aDepartment);
  
    /**
     *  Get the value of the department attribute.
     *  @return the value of the department attribute
     */
    public java.lang.String getDepartment();
   

 
    /**
     *  Determine if any department attribute is set
     *  @return <code>true</code> if the department attribute is set
     */
    public boolean isSetDepartment();


    // Attribute directivePrefix ------------------------------------------------

       
    /**
     *   Set the directivePrefix attribute.
     *
     *   @param aDirectivePrefix  the new value for the  directivePrefix attribute
     */
    public void setDirectivePrefix(java.lang.String aDirectivePrefix);
  
    /**
     *  Get the value of the directivePrefix attribute.
     *  @return the value of the directivePrefix attribute
     */
    public java.lang.String getDirectivePrefix();
   

 
    /**
     *  Determine if any directivePrefix attribute is set
     *  @return <code>true</code> if the directivePrefix attribute is set
     */
    public boolean isSetDirectivePrefix();


    // Attribute execFile ------------------------------------------------

       
    /**
     *   Set the execFile attribute.
     *
     *   @param aExecFile  the new value for the  execFile attribute
     */
    public void setExecFile(java.lang.String aExecFile);
  
    /**
     *  Get the value of the execFile attribute.
     *  @return the value of the execFile attribute
     */
    public java.lang.String getExecFile();
   

 
    /**
     *  Determine if any execFile attribute is set
     *  @return <code>true</code> if the execFile attribute is set
     */
    public boolean isSetExecFile();


    // Attribute scriptFile ------------------------------------------------

       
    /**
     *   Set the scriptFile attribute.
     *
     *   @param aScriptFile  the new value for the  scriptFile attribute
     */
    public void setScriptFile(java.lang.String aScriptFile);
  
    /**
     *  Get the value of the scriptFile attribute.
     *  @return the value of the scriptFile attribute
     */
    public java.lang.String getScriptFile();
   

 
    /**
     *  Determine if any scriptFile attribute is set
     *  @return <code>true</code> if the scriptFile attribute is set
     */
    public boolean isSetScriptFile();


    // Attribute scriptSize ------------------------------------------------

       
    /**
     *   Set the scriptSize attribute.
     *
     *   @param aScriptSize  the new value for the  scriptSize attribute
     */
    public void setScriptSize(int aScriptSize);
  
    /**
     *  Get the value of the scriptSize attribute.
     *  @return the value of the scriptSize attribute
     */
    public int getScriptSize();
   

 
    /**
     *  Determine if any scriptSize attribute is set
     *  @return <code>true</code> if the scriptSize attribute is set
     */
    public boolean isSetScriptSize();


    // Attribute scriptPtr ------------------------------------------------

       
    /**
     *   Set the scriptPtr attribute.
     *
     *   @param aScriptPtr  the new value for the  scriptPtr attribute
     */
    public void setScriptPtr(java.lang.String aScriptPtr);
  
    /**
     *  Get the value of the scriptPtr attribute.
     *  @return the value of the scriptPtr attribute
     */
    public java.lang.String getScriptPtr();
   

 
    /**
     *  Determine if any scriptPtr attribute is set
     *  @return <code>true</code> if the scriptPtr attribute is set
     */
    public boolean isSetScriptPtr();


    // Attribute submissionTime ------------------------------------------------

  
    /**
     *  Get the value of the submissionTime attribute.
     *  @return the value of the submissionTime attribute
     */
    public int getSubmissionTime();
   

 
    /**
     *  Determine if any submissionTime attribute is set
     *  @return <code>true</code> if the submissionTime attribute is set
     */
    public boolean isSetSubmissionTime();


    // Attribute executionTime ------------------------------------------------

       
    /**
     *   Set the executionTime attribute.
     *
     *   @param aExecutionTime  the new value for the  executionTime attribute
     */
    public void setExecutionTime(int aExecutionTime);
  
    /**
     *  Get the value of the executionTime attribute.
     *  @return the value of the executionTime attribute
     */
    public int getExecutionTime();
   

 
    /**
     *  Determine if any executionTime attribute is set
     *  @return <code>true</code> if the executionTime attribute is set
     */
    public boolean isSetExecutionTime();


    // Attribute deadline ------------------------------------------------

       
    /**
     *   Set the deadline attribute.
     *
     *   @param aDeadline  the new value for the  deadline attribute
     */
    public void setDeadline(int aDeadline);
  
    /**
     *  Get the value of the deadline attribute.
     *  @return the value of the deadline attribute
     */
    public int getDeadline();
   

 
    /**
     *  Determine if any deadline attribute is set
     *  @return <code>true</code> if the deadline attribute is set
     */
    public boolean isSetDeadline();


    // Attribute owner ------------------------------------------------

  
    /**
     *  Get the value of the owner attribute.
     *  @return the value of the owner attribute
     */
    public java.lang.String getOwner();
   

 
    /**
     *  Determine if any owner attribute is set
     *  @return <code>true</code> if the owner attribute is set
     */
    public boolean isSetOwner();


    // Attribute uid ------------------------------------------------

  
    /**
     *  Get the value of the uid attribute.
     *  @return the value of the uid attribute
     */
    public int getUid();
   

 
    /**
     *  Determine if any uid attribute is set
     *  @return <code>true</code> if the uid attribute is set
     */
    public boolean isSetUid();


    // Attribute group ------------------------------------------------

  
    /**
     *  Get the value of the group attribute.
     *  @return the value of the group attribute
     */
    public java.lang.String getGroup();
   

 
    /**
     *  Determine if any group attribute is set
     *  @return <code>true</code> if the group attribute is set
     */
    public boolean isSetGroup();


    // Attribute gid ------------------------------------------------

  
    /**
     *  Get the value of the gid attribute.
     *  @return the value of the gid attribute
     */
    public int getGid();
   

 
    /**
     *  Determine if any gid attribute is set
     *  @return <code>true</code> if the gid attribute is set
     */
    public boolean isSetGid();


    // Attribute account ------------------------------------------------

       
    /**
     *   Set the account attribute.
     *
     *   @param aAccount  the new value for the  account attribute
     */
    public void setAccount(java.lang.String aAccount);
  
    /**
     *  Get the value of the account attribute.
     *  @return the value of the account attribute
     */
    public java.lang.String getAccount();
   

 
    /**
     *  Determine if any account attribute is set
     *  @return <code>true</code> if the account attribute is set
     */
    public boolean isSetAccount();


    // Attribute cwd ------------------------------------------------

       
    /**
     *   Set the cwd attribute.
     *
     *   @param aCwd  the new value for the  cwd attribute
     */
    public void setCwd(java.lang.String aCwd);
  
    /**
     *  Get the value of the cwd attribute.
     *  @return the value of the cwd attribute
     */
    public java.lang.String getCwd();
   

 
    /**
     *  Determine if any cwd attribute is set
     *  @return <code>true</code> if the cwd attribute is set
     */
    public boolean isSetCwd();


    // Attribute notify ------------------------------------------------

       
    /**
     *   Set the notify attribute.
     *
     *   @param aNotify  the new value for the  notify attribute
     */
    public void setNotify(boolean aNotify);
  
    /**
     *  Get the value of the notify attribute.
     *  @return the value of the notify attribute
     */
    public boolean isNotify();
   

 
    /**
     *  Determine if any notify attribute is set
     *  @return <code>true</code> if the notify attribute is set
     */
    public boolean isSetNotify();


    // Attribute type ------------------------------------------------

       
    /**
     *   Set the type attribute.
     *
     *   @param aType  the new value for the  type attribute
     */
    public void setType(int aType);
  
    /**
     *  Get the value of the type attribute.
     *  @return the value of the type attribute
     */
    public int getType();
   

 
    /**
     *  Determine if any type attribute is set
     *  @return <code>true</code> if the type attribute is set
     */
    public boolean isSetType();


    // Attribute reserve ------------------------------------------------

       
    /**
     *   Set the reserve attribute.
     *
     *   @param aReserve  the new value for the  reserve attribute
     */
    public void setReserve(boolean aReserve);
  
    /**
     *  Get the value of the reserve attribute.
     *  @return the value of the reserve attribute
     */
    public boolean isReserve();
   

 
    /**
     *  Determine if any reserve attribute is set
     *  @return <code>true</code> if the reserve attribute is set
     */
    public boolean isSetReserve();


    // Attribute priority ------------------------------------------------

       
    /**
     *   Set the priority attribute.
     *
     *   @param aPriority  the new value for the  priority attribute
     */
    public void setPriority(int aPriority);
  
    /**
     *  Get the value of the priority attribute.
     *  @return the value of the priority attribute
     */
    public int getPriority();
   

 
    /**
     *  Determine if any priority attribute is set
     *  @return <code>true</code> if the priority attribute is set
     */
    public boolean isSetPriority();


    // Attribute jobshare ------------------------------------------------

       
    /**
     *   Set the jobshare attribute.
     *
     *   @param aJobshare  the new value for the  jobshare attribute
     */
    public void setJobshare(int aJobshare);
  
    /**
     *  Get the value of the jobshare attribute.
     *  @return the value of the jobshare attribute
     */
    public int getJobshare();
   

 
    /**
     *  Determine if any jobshare attribute is set
     *  @return <code>true</code> if the jobshare attribute is set
     */
    public boolean isSetJobshare();


    // Attribute shellList ------------------------------------------------


    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.PathName attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.PathName attributes
     */
    public List< com.sun.grid.jgdi.configuration.PathName >  getShellList();

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.PathName attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.PathName attributes.
     */
    public int getShellCount();
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.PathName attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.PathName attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.PathName attribute
     */
    public com.sun.grid.jgdi.configuration.PathName getShell(int index);
   

    /**
     *   Add a com.sun.grid.jgdi.configuration.PathName attribute.
     *   @param ashell  the new com.sun.grid.jgdi.configuration.PathName attribute
     */
    public void addShell(com.sun.grid.jgdi.configuration.PathName ashell);
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.PathName attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.PathName attribute
     *   @param ashell  the new com.sun.grid.jgdi.configuration.PathName attribute
     */
    public void setShell(int index, com.sun.grid.jgdi.configuration.PathName ashell);

    /**
     *  Remove all com.sun.grid.jgdi.configuration.PathName attributes.
     */
    public void removeAllShell();
   
    /**
     *  Remote a com.sun.grid.jgdi.configuration.PathName attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.PathName attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.PathName attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.PathName removeShell(int index);

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.PathName attribute.
     *  @param ashell  the com.sun.grid.jgdi.configuration.PathName attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.PathName attribute has been removed
     */
    public boolean removeShell(com.sun.grid.jgdi.configuration.PathName ashell);
   
       
 
    /**
     *  Determine if any shell attribute is set
     *  @return <code>true</code> if the shell attribute is set
     */
    public boolean isSetShell();


    // Attribute verify ------------------------------------------------

  
    /**
     *  Get the value of the verify attribute.
     *  @return the value of the verify attribute
     */
    public int getVerify();
   

 
    /**
     *  Determine if any verify attribute is set
     *  @return <code>true</code> if the verify attribute is set
     */
    public boolean isSetVerify();


    // Attribute envList ------------------------------------------------

        // keyClassName for SGE_STRING = String
     
   
    /**
     *  <p>Get the default value of the attribute env.</p>
     *  @return the default value of the attribute env
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultEnv();

    /**
     *  <p>Get the env attribute for <code>key</code>.</p>
     *  @param   key   the key
     *  @return  the env attribute for <code>key</code> or the
     *           default value of  env
     */
    public String getEnv(String key);
   
    /**
     *  Get the set of <code>key</code>s which have the attribute env set.
     *  @return set of <code>key</code>s
     */
    public Set<String> getEnvKeys();
   
    /**
     *  Get the number of keys which have the attribute env set.
     *  @return the number of keys which have the attribute env set.
     */
    public int getEnvCount();
   
    /**
     *  Determine if any env attribute is for <code>key</code> is set
     *  @param  key the key
     *  @return <code>true</code> if the env attribute is set
     */
    public boolean isSetEnv(String key);
   
   
          
    /**
     *  <p>Put the attribute env for <code>key</code>.</p>
     *
     *  @param key   the key
     *  @param value the value
     */
    public void putEnv(String key, String value);
   


    /**
     *  <p>remove the attribute env for <code>key</code>.</p>
     *
     *  @param key  The key
     *  @return the value of the attribute for <code>key</code> or <code>null</code>
     *          if the attribute was not defined for <code>key</code>.
     */
    public java.lang.String removeEnv(String key);
   
    /**
     *  <p>Remove the attribute env for all keys.</p>
     */
    public void removeAllEnv();


 
    /**
     *  Determine if any env attribute is set
     *  @return <code>true</code> if the env attribute is set
     */
    public boolean isSetEnv();


    // Attribute context ------------------------------------------------

        // keyClassName for SGE_STRING = String
     
   
    /**
     *  <p>Get the default value of the attribute context.</p>
     *  @return the default value of the attribute context
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultContext();

    /**
     *  <p>Get the context attribute for <code>key</code>.</p>
     *  @param   key   the key
     *  @return  the context attribute for <code>key</code> or the
     *           default value of  context
     */
    public String getContext(String key);
   
    /**
     *  Get the set of <code>key</code>s which have the attribute context set.
     *  @return set of <code>key</code>s
     */
    public Set<String> getContextKeys();
   
    /**
     *  Get the number of keys which have the attribute context set.
     *  @return the number of keys which have the attribute context set.
     */
    public int getContextCount();
   
    /**
     *  Determine if any context attribute is for <code>key</code> is set
     *  @param  key the key
     *  @return <code>true</code> if the context attribute is set
     */
    public boolean isSetContext(String key);
   
   
          
    /**
     *  <p>Put the attribute context for <code>key</code>.</p>
     *
     *  @param key   the key
     *  @param value the value
     */
    public void putContext(String key, String value);
   


    /**
     *  <p>remove the attribute context for <code>key</code>.</p>
     *
     *  @param key  The key
     *  @return the value of the attribute for <code>key</code> or <code>null</code>
     *          if the attribute was not defined for <code>key</code>.
     */
    public java.lang.String removeContext(String key);
   
    /**
     *  <p>Remove the attribute context for all keys.</p>
     */
    public void removeAllContext();


 
    /**
     *  Determine if any context attribute is set
     *  @return <code>true</code> if the context attribute is set
     */
    public boolean isSetContext();


    // Attribute jobArgs ------------------------------------------------


    /**
     *   Get a unmodifiable list of all java.lang.String attributes.
     *
     *   @return Unmodifiable list with all java.lang.String attributes
     */
    public List< java.lang.String >  getJobArgsList();

    /**
     *  Get the number of java.lang.String attributes.
     *
     *  @return The number of java.lang.String attributes.
     */
    public int getJobArgsCount();
 
    /**
     *  Get a java.lang.String attribute at an index.
     *  @param index  the index of the java.lang.String attribute which should be
     *                removed
     *  @return the java.lang.String attribute
     */
    public java.lang.String getJobArgs(int index);
   

    /**
     *   Add a java.lang.String attribute.
     *   @param ajobArgs  the new java.lang.String attribute
     */
    public void addJobArgs(java.lang.String ajobArgs);
   
    /**
     *   Set a java.lang.String attribute.
     *   @param index   index of the java.lang.String attribute
     *   @param ajobArgs  the new java.lang.String attribute
     */
    public void setJobArgs(int index, java.lang.String ajobArgs);

    /**
     *  Remove all java.lang.String attributes.
     */
    public void removeAllJobArgs();
   
    /**
     *  Remote a java.lang.String attribute at an index.
     *  @param index  the index of the java.lang.String attribute which should be
     *                removed
     *  @return the removed java.lang.String attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public java.lang.String removeJobArgs(int index);

    /**
     *  Remote a specific java.lang.String attribute.
     *  @param ajobArgs  the java.lang.String attribute which should be
     *                         removed
     *  @return <code>true</code> if the java.lang.String attribute has been removed
     */
    public boolean removeJobArgs(java.lang.String ajobArgs);
   
       
 
    /**
     *  Determine if any jobArgs attribute is set
     *  @return <code>true</code> if the jobArgs attribute is set
     */
    public boolean isSetJobArgs();


    // Attribute checkpointAttr ------------------------------------------------

  
    /**
     *  Get the value of the checkpointAttr attribute.
     *  @return the value of the checkpointAttr attribute
     */
    public int getCheckpointAttr();
   

 
    /**
     *  Determine if any checkpointAttr attribute is set
     *  @return <code>true</code> if the checkpointAttr attribute is set
     */
    public boolean isSetCheckpointAttr();


    // Attribute checkpointName ------------------------------------------------

       
    /**
     *   Set the checkpointName attribute.
     *
     *   @param aCheckpointName  the new value for the  checkpointName attribute
     */
    public void setCheckpointName(java.lang.String aCheckpointName);
  
    /**
     *  Get the value of the checkpointName attribute.
     *  @return the value of the checkpointName attribute
     */
    public java.lang.String getCheckpointName();
   

 
    /**
     *  Determine if any checkpointName attribute is set
     *  @return <code>true</code> if the checkpointName attribute is set
     */
    public boolean isSetCheckpointName();


    // Attribute checkpointObject ------------------------------------------------

  
    /**
     *  Get the value of the checkpointObject attribute.
     *  @return the value of the checkpointObject attribute
     */
    public com.sun.grid.jgdi.configuration.Checkpoint getCheckpointObject();
   

 
    /**
     *  Determine if any checkpointObject attribute is set
     *  @return <code>true</code> if the checkpointObject attribute is set
     */
    public boolean isSetCheckpointObject();


    // Attribute checkpointInterval ------------------------------------------------

  
    /**
     *  Get the value of the checkpointInterval attribute.
     *  @return the value of the checkpointInterval attribute
     */
    public int getCheckpointInterval();
   

 
    /**
     *  Determine if any checkpointInterval attribute is set
     *  @return <code>true</code> if the checkpointInterval attribute is set
     */
    public boolean isSetCheckpointInterval();


    // Attribute restart ------------------------------------------------

       
    /**
     *   Set the restart attribute.
     *
     *   @param aRestart  the new value for the  restart attribute
     */
    public void setRestart(int aRestart);
  
    /**
     *  Get the value of the restart attribute.
     *  @return the value of the restart attribute
     */
    public int getRestart();
   

 
    /**
     *  Determine if any restart attribute is set
     *  @return <code>true</code> if the restart attribute is set
     */
    public boolean isSetRestart();


    // Attribute stdoutPathList ------------------------------------------------


    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.PathName attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.PathName attributes
     */
    public List< com.sun.grid.jgdi.configuration.PathName >  getStdoutPathList();

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.PathName attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.PathName attributes.
     */
    public int getStdoutPathCount();
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.PathName attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.PathName attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.PathName attribute
     */
    public com.sun.grid.jgdi.configuration.PathName getStdoutPath(int index);
   

    /**
     *   Add a com.sun.grid.jgdi.configuration.PathName attribute.
     *   @param astdoutPath  the new com.sun.grid.jgdi.configuration.PathName attribute
     */
    public void addStdoutPath(com.sun.grid.jgdi.configuration.PathName astdoutPath);
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.PathName attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.PathName attribute
     *   @param astdoutPath  the new com.sun.grid.jgdi.configuration.PathName attribute
     */
    public void setStdoutPath(int index, com.sun.grid.jgdi.configuration.PathName astdoutPath);

    /**
     *  Remove all com.sun.grid.jgdi.configuration.PathName attributes.
     */
    public void removeAllStdoutPath();
   
    /**
     *  Remote a com.sun.grid.jgdi.configuration.PathName attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.PathName attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.PathName attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.PathName removeStdoutPath(int index);

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.PathName attribute.
     *  @param astdoutPath  the com.sun.grid.jgdi.configuration.PathName attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.PathName attribute has been removed
     */
    public boolean removeStdoutPath(com.sun.grid.jgdi.configuration.PathName astdoutPath);
   
       
 
    /**
     *  Determine if any stdoutPath attribute is set
     *  @return <code>true</code> if the stdoutPath attribute is set
     */
    public boolean isSetStdoutPath();


    // Attribute stderrPathList ------------------------------------------------


    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.PathName attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.PathName attributes
     */
    public List< com.sun.grid.jgdi.configuration.PathName >  getStderrPathList();

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.PathName attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.PathName attributes.
     */
    public int getStderrPathCount();
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.PathName attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.PathName attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.PathName attribute
     */
    public com.sun.grid.jgdi.configuration.PathName getStderrPath(int index);
   

    /**
     *   Add a com.sun.grid.jgdi.configuration.PathName attribute.
     *   @param astderrPath  the new com.sun.grid.jgdi.configuration.PathName attribute
     */
    public void addStderrPath(com.sun.grid.jgdi.configuration.PathName astderrPath);
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.PathName attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.PathName attribute
     *   @param astderrPath  the new com.sun.grid.jgdi.configuration.PathName attribute
     */
    public void setStderrPath(int index, com.sun.grid.jgdi.configuration.PathName astderrPath);

    /**
     *  Remove all com.sun.grid.jgdi.configuration.PathName attributes.
     */
    public void removeAllStderrPath();
   
    /**
     *  Remote a com.sun.grid.jgdi.configuration.PathName attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.PathName attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.PathName attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.PathName removeStderrPath(int index);

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.PathName attribute.
     *  @param astderrPath  the com.sun.grid.jgdi.configuration.PathName attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.PathName attribute has been removed
     */
    public boolean removeStderrPath(com.sun.grid.jgdi.configuration.PathName astderrPath);
   
       
 
    /**
     *  Determine if any stderrPath attribute is set
     *  @return <code>true</code> if the stderrPath attribute is set
     */
    public boolean isSetStderrPath();


    // Attribute stdinPathList ------------------------------------------------


    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.PathName attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.PathName attributes
     */
    public List< com.sun.grid.jgdi.configuration.PathName >  getStdinPathList();

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.PathName attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.PathName attributes.
     */
    public int getStdinPathCount();
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.PathName attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.PathName attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.PathName attribute
     */
    public com.sun.grid.jgdi.configuration.PathName getStdinPath(int index);
   

    /**
     *   Add a com.sun.grid.jgdi.configuration.PathName attribute.
     *   @param astdinPath  the new com.sun.grid.jgdi.configuration.PathName attribute
     */
    public void addStdinPath(com.sun.grid.jgdi.configuration.PathName astdinPath);
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.PathName attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.PathName attribute
     *   @param astdinPath  the new com.sun.grid.jgdi.configuration.PathName attribute
     */
    public void setStdinPath(int index, com.sun.grid.jgdi.configuration.PathName astdinPath);

    /**
     *  Remove all com.sun.grid.jgdi.configuration.PathName attributes.
     */
    public void removeAllStdinPath();
   
    /**
     *  Remote a com.sun.grid.jgdi.configuration.PathName attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.PathName attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.PathName attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.PathName removeStdinPath(int index);

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.PathName attribute.
     *  @param astdinPath  the com.sun.grid.jgdi.configuration.PathName attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.PathName attribute has been removed
     */
    public boolean removeStdinPath(com.sun.grid.jgdi.configuration.PathName astdinPath);
   
       
 
    /**
     *  Determine if any stdinPath attribute is set
     *  @return <code>true</code> if the stdinPath attribute is set
     */
    public boolean isSetStdinPath();


    // Attribute mergeStderr ------------------------------------------------

       
    /**
     *   Set the mergeStderr attribute.
     *
     *   @param aMergeStderr  the new value for the  mergeStderr attribute
     */
    public void setMergeStderr(boolean aMergeStderr);
  
    /**
     *  Get the value of the mergeStderr attribute.
     *  @return the value of the mergeStderr attribute
     */
    public boolean isMergeStderr();
   

 
    /**
     *  Determine if any mergeStderr attribute is set
     *  @return <code>true</code> if the mergeStderr attribute is set
     */
    public boolean isSetMergeStderr();


    // Attribute hardResourceList ------------------------------------------------


    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.ComplexEntry attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.ComplexEntry attributes
     */
    public List< com.sun.grid.jgdi.configuration.ComplexEntry >  getHardResourceList();

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.ComplexEntry attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.ComplexEntry attributes.
     */
    public int getHardResourceCount();
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.ComplexEntry attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.ComplexEntry attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.ComplexEntry attribute
     */
    public com.sun.grid.jgdi.configuration.ComplexEntry getHardResource(int index);
   

    /**
     *   Add a com.sun.grid.jgdi.configuration.ComplexEntry attribute.
     *   @param ahardResource  the new com.sun.grid.jgdi.configuration.ComplexEntry attribute
     */
    public void addHardResource(com.sun.grid.jgdi.configuration.ComplexEntry ahardResource);
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.ComplexEntry attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.ComplexEntry attribute
     *   @param ahardResource  the new com.sun.grid.jgdi.configuration.ComplexEntry attribute
     */
    public void setHardResource(int index, com.sun.grid.jgdi.configuration.ComplexEntry ahardResource);

    /**
     *  Remove all com.sun.grid.jgdi.configuration.ComplexEntry attributes.
     */
    public void removeAllHardResource();
   
    /**
     *  Remote a com.sun.grid.jgdi.configuration.ComplexEntry attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.ComplexEntry attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.ComplexEntry attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.ComplexEntry removeHardResource(int index);

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.ComplexEntry attribute.
     *  @param ahardResource  the com.sun.grid.jgdi.configuration.ComplexEntry attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.ComplexEntry attribute has been removed
     */
    public boolean removeHardResource(com.sun.grid.jgdi.configuration.ComplexEntry ahardResource);
   
       
 
    /**
     *  Determine if any hardResource attribute is set
     *  @return <code>true</code> if the hardResource attribute is set
     */
    public boolean isSetHardResource();


    // Attribute softResourceList ------------------------------------------------


    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.ComplexEntry attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.ComplexEntry attributes
     */
    public List< com.sun.grid.jgdi.configuration.ComplexEntry >  getSoftResourceList();

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.ComplexEntry attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.ComplexEntry attributes.
     */
    public int getSoftResourceCount();
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.ComplexEntry attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.ComplexEntry attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.ComplexEntry attribute
     */
    public com.sun.grid.jgdi.configuration.ComplexEntry getSoftResource(int index);
   

    /**
     *   Add a com.sun.grid.jgdi.configuration.ComplexEntry attribute.
     *   @param asoftResource  the new com.sun.grid.jgdi.configuration.ComplexEntry attribute
     */
    public void addSoftResource(com.sun.grid.jgdi.configuration.ComplexEntry asoftResource);
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.ComplexEntry attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.ComplexEntry attribute
     *   @param asoftResource  the new com.sun.grid.jgdi.configuration.ComplexEntry attribute
     */
    public void setSoftResource(int index, com.sun.grid.jgdi.configuration.ComplexEntry asoftResource);

    /**
     *  Remove all com.sun.grid.jgdi.configuration.ComplexEntry attributes.
     */
    public void removeAllSoftResource();
   
    /**
     *  Remote a com.sun.grid.jgdi.configuration.ComplexEntry attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.ComplexEntry attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.ComplexEntry attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.ComplexEntry removeSoftResource(int index);

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.ComplexEntry attribute.
     *  @param asoftResource  the com.sun.grid.jgdi.configuration.ComplexEntry attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.ComplexEntry attribute has been removed
     */
    public boolean removeSoftResource(com.sun.grid.jgdi.configuration.ComplexEntry asoftResource);
   
       
 
    /**
     *  Determine if any softResource attribute is set
     *  @return <code>true</code> if the softResource attribute is set
     */
    public boolean isSetSoftResource();


    // Attribute hardQueueList ------------------------------------------------


    /**
     *   Get a unmodifiable list of all java.lang.String attributes.
     *
     *   @return Unmodifiable list with all java.lang.String attributes
     */
    public List< java.lang.String >  getHardQueueList();

    /**
     *  Get the number of java.lang.String attributes.
     *
     *  @return The number of java.lang.String attributes.
     */
    public int getHardQueueCount();
 
    /**
     *  Get a java.lang.String attribute at an index.
     *  @param index  the index of the java.lang.String attribute which should be
     *                removed
     *  @return the java.lang.String attribute
     */
    public java.lang.String getHardQueue(int index);
   

    /**
     *   Add a java.lang.String attribute.
     *   @param ahardQueue  the new java.lang.String attribute
     */
    public void addHardQueue(java.lang.String ahardQueue);
   
    /**
     *   Set a java.lang.String attribute.
     *   @param index   index of the java.lang.String attribute
     *   @param ahardQueue  the new java.lang.String attribute
     */
    public void setHardQueue(int index, java.lang.String ahardQueue);

    /**
     *  Remove all java.lang.String attributes.
     */
    public void removeAllHardQueue();
   
    /**
     *  Remote a java.lang.String attribute at an index.
     *  @param index  the index of the java.lang.String attribute which should be
     *                removed
     *  @return the removed java.lang.String attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public java.lang.String removeHardQueue(int index);

    /**
     *  Remote a specific java.lang.String attribute.
     *  @param ahardQueue  the java.lang.String attribute which should be
     *                         removed
     *  @return <code>true</code> if the java.lang.String attribute has been removed
     */
    public boolean removeHardQueue(java.lang.String ahardQueue);
   
       
 
    /**
     *  Determine if any hardQueue attribute is set
     *  @return <code>true</code> if the hardQueue attribute is set
     */
    public boolean isSetHardQueue();


    // Attribute softQueueList ------------------------------------------------


    /**
     *   Get a unmodifiable list of all java.lang.String attributes.
     *
     *   @return Unmodifiable list with all java.lang.String attributes
     */
    public List< java.lang.String >  getSoftQueueList();

    /**
     *  Get the number of java.lang.String attributes.
     *
     *  @return The number of java.lang.String attributes.
     */
    public int getSoftQueueCount();
 
    /**
     *  Get a java.lang.String attribute at an index.
     *  @param index  the index of the java.lang.String attribute which should be
     *                removed
     *  @return the java.lang.String attribute
     */
    public java.lang.String getSoftQueue(int index);
   

    /**
     *   Add a java.lang.String attribute.
     *   @param asoftQueue  the new java.lang.String attribute
     */
    public void addSoftQueue(java.lang.String asoftQueue);
   
    /**
     *   Set a java.lang.String attribute.
     *   @param index   index of the java.lang.String attribute
     *   @param asoftQueue  the new java.lang.String attribute
     */
    public void setSoftQueue(int index, java.lang.String asoftQueue);

    /**
     *  Remove all java.lang.String attributes.
     */
    public void removeAllSoftQueue();
   
    /**
     *  Remote a java.lang.String attribute at an index.
     *  @param index  the index of the java.lang.String attribute which should be
     *                removed
     *  @return the removed java.lang.String attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public java.lang.String removeSoftQueue(int index);

    /**
     *  Remote a specific java.lang.String attribute.
     *  @param asoftQueue  the java.lang.String attribute which should be
     *                         removed
     *  @return <code>true</code> if the java.lang.String attribute has been removed
     */
    public boolean removeSoftQueue(java.lang.String asoftQueue);
   
       
 
    /**
     *  Determine if any softQueue attribute is set
     *  @return <code>true</code> if the softQueue attribute is set
     */
    public boolean isSetSoftQueue();


    // Attribute mailOptions ------------------------------------------------

       
    /**
     *   Set the mailOptions attribute.
     *
     *   @param aMailOptions  the new value for the  mailOptions attribute
     */
    public void setMailOptions(int aMailOptions);
  
    /**
     *  Get the value of the mailOptions attribute.
     *  @return the value of the mailOptions attribute
     */
    public int getMailOptions();
   

 
    /**
     *  Determine if any mailOptions attribute is set
     *  @return <code>true</code> if the mailOptions attribute is set
     */
    public boolean isSetMailOptions();


    // Attribute mailList ------------------------------------------------


    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.MailReceiver attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.MailReceiver attributes
     */
    public List< com.sun.grid.jgdi.configuration.MailReceiver >  getMailList();

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.MailReceiver attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.MailReceiver attributes.
     */
    public int getMailCount();
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.MailReceiver attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.MailReceiver attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.MailReceiver attribute
     */
    public com.sun.grid.jgdi.configuration.MailReceiver getMail(int index);
   

    /**
     *   Add a com.sun.grid.jgdi.configuration.MailReceiver attribute.
     *   @param amail  the new com.sun.grid.jgdi.configuration.MailReceiver attribute
     */
    public void addMail(com.sun.grid.jgdi.configuration.MailReceiver amail);
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.MailReceiver attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.MailReceiver attribute
     *   @param amail  the new com.sun.grid.jgdi.configuration.MailReceiver attribute
     */
    public void setMail(int index, com.sun.grid.jgdi.configuration.MailReceiver amail);

    /**
     *  Remove all com.sun.grid.jgdi.configuration.MailReceiver attributes.
     */
    public void removeAllMail();
   
    /**
     *  Remote a com.sun.grid.jgdi.configuration.MailReceiver attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.MailReceiver attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.MailReceiver attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.MailReceiver removeMail(int index);

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.MailReceiver attribute.
     *  @param amail  the com.sun.grid.jgdi.configuration.MailReceiver attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.MailReceiver attribute has been removed
     */
    public boolean removeMail(com.sun.grid.jgdi.configuration.MailReceiver amail);
   
       
 
    /**
     *  Determine if any mail attribute is set
     *  @return <code>true</code> if the mail attribute is set
     */
    public boolean isSetMail();


    // Attribute pe ------------------------------------------------

       
    /**
     *   Set the pe attribute.
     *
     *   @param aPe  the new value for the  pe attribute
     */
    public void setPe(java.lang.String aPe);
  
    /**
     *  Get the value of the pe attribute.
     *  @return the value of the pe attribute
     */
    public java.lang.String getPe();
   

 
    /**
     *  Determine if any pe attribute is set
     *  @return <code>true</code> if the pe attribute is set
     */
    public boolean isSetPe();


    // Attribute peRange ------------------------------------------------


    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.Range attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.Range attributes
     */
    public List< com.sun.grid.jgdi.configuration.Range >  getPeRangeList();

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.Range attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.Range attributes.
     */
    public int getPeRangeCount();
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.Range attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.Range attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.Range attribute
     */
    public com.sun.grid.jgdi.configuration.Range getPeRange(int index);
   

    /**
     *   Add a com.sun.grid.jgdi.configuration.Range attribute.
     *   @param apeRange  the new com.sun.grid.jgdi.configuration.Range attribute
     */
    public void addPeRange(com.sun.grid.jgdi.configuration.Range apeRange);
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.Range attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.Range attribute
     *   @param apeRange  the new com.sun.grid.jgdi.configuration.Range attribute
     */
    public void setPeRange(int index, com.sun.grid.jgdi.configuration.Range apeRange);

    /**
     *  Remove all com.sun.grid.jgdi.configuration.Range attributes.
     */
    public void removeAllPeRange();
   
    /**
     *  Remote a com.sun.grid.jgdi.configuration.Range attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.Range attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.Range attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.Range removePeRange(int index);

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.Range attribute.
     *  @param apeRange  the com.sun.grid.jgdi.configuration.Range attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.Range attribute has been removed
     */
    public boolean removePeRange(com.sun.grid.jgdi.configuration.Range apeRange);
   
       
 
    /**
     *  Determine if any peRange attribute is set
     *  @return <code>true</code> if the peRange attribute is set
     */
    public boolean isSetPeRange();


    // Attribute masterHardQueueList ------------------------------------------------


    /**
     *   Get a unmodifiable list of all java.lang.String attributes.
     *
     *   @return Unmodifiable list with all java.lang.String attributes
     */
    public List< java.lang.String >  getMasterHardQueueList();

    /**
     *  Get the number of java.lang.String attributes.
     *
     *  @return The number of java.lang.String attributes.
     */
    public int getMasterHardQueueCount();
 
    /**
     *  Get a java.lang.String attribute at an index.
     *  @param index  the index of the java.lang.String attribute which should be
     *                removed
     *  @return the java.lang.String attribute
     */
    public java.lang.String getMasterHardQueue(int index);
   

    /**
     *   Add a java.lang.String attribute.
     *   @param amasterHardQueue  the new java.lang.String attribute
     */
    public void addMasterHardQueue(java.lang.String amasterHardQueue);
   
    /**
     *   Set a java.lang.String attribute.
     *   @param index   index of the java.lang.String attribute
     *   @param amasterHardQueue  the new java.lang.String attribute
     */
    public void setMasterHardQueue(int index, java.lang.String amasterHardQueue);

    /**
     *  Remove all java.lang.String attributes.
     */
    public void removeAllMasterHardQueue();
   
    /**
     *  Remote a java.lang.String attribute at an index.
     *  @param index  the index of the java.lang.String attribute which should be
     *                removed
     *  @return the removed java.lang.String attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public java.lang.String removeMasterHardQueue(int index);

    /**
     *  Remote a specific java.lang.String attribute.
     *  @param amasterHardQueue  the java.lang.String attribute which should be
     *                         removed
     *  @return <code>true</code> if the java.lang.String attribute has been removed
     */
    public boolean removeMasterHardQueue(java.lang.String amasterHardQueue);
   
       
 
    /**
     *  Determine if any masterHardQueue attribute is set
     *  @return <code>true</code> if the masterHardQueue attribute is set
     */
    public boolean isSetMasterHardQueue();


    // Attribute tgt ------------------------------------------------

       
    /**
     *   Set the tgt attribute.
     *
     *   @param aTgt  the new value for the  tgt attribute
     */
    public void setTgt(java.lang.String aTgt);
  
    /**
     *  Get the value of the tgt attribute.
     *  @return the value of the tgt attribute
     */
    public java.lang.String getTgt();
   

 
    /**
     *  Determine if any tgt attribute is set
     *  @return <code>true</code> if the tgt attribute is set
     */
    public boolean isSetTgt();


    // Attribute cred ------------------------------------------------

       
    /**
     *   Set the cred attribute.
     *
     *   @param aCred  the new value for the  cred attribute
     */
    public void setCred(java.lang.String aCred);
  
    /**
     *  Get the value of the cred attribute.
     *  @return the value of the cred attribute
     */
    public java.lang.String getCred();
   

 
    /**
     *  Determine if any cred attribute is set
     *  @return <code>true</code> if the cred attribute is set
     */
    public boolean isSetCred();


    // Attribute jaStructure ------------------------------------------------


    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.Range attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.Range attributes
     */
    public List< com.sun.grid.jgdi.configuration.Range >  getJaStructureList();

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.Range attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.Range attributes.
     */
    public int getJaStructureCount();
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.Range attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.Range attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.Range attribute
     */
    public com.sun.grid.jgdi.configuration.Range getJaStructure(int index);
   

    /**
     *   Add a com.sun.grid.jgdi.configuration.Range attribute.
     *   @param ajaStructure  the new com.sun.grid.jgdi.configuration.Range attribute
     */
    public void addJaStructure(com.sun.grid.jgdi.configuration.Range ajaStructure);
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.Range attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.Range attribute
     *   @param ajaStructure  the new com.sun.grid.jgdi.configuration.Range attribute
     */
    public void setJaStructure(int index, com.sun.grid.jgdi.configuration.Range ajaStructure);

    /**
     *  Remove all com.sun.grid.jgdi.configuration.Range attributes.
     */
    public void removeAllJaStructure();
   
    /**
     *  Remote a com.sun.grid.jgdi.configuration.Range attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.Range attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.Range attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.Range removeJaStructure(int index);

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.Range attribute.
     *  @param ajaStructure  the com.sun.grid.jgdi.configuration.Range attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.Range attribute has been removed
     */
    public boolean removeJaStructure(com.sun.grid.jgdi.configuration.Range ajaStructure);
   
       
 
    /**
     *  Determine if any jaStructure attribute is set
     *  @return <code>true</code> if the jaStructure attribute is set
     */
    public boolean isSetJaStructure();


    // Attribute jaNHIds ------------------------------------------------


    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.Range attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.Range attributes
     */
    public List< com.sun.grid.jgdi.configuration.Range >  getJaNHIdsList();

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.Range attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.Range attributes.
     */
    public int getJaNHIdsCount();
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.Range attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.Range attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.Range attribute
     */
    public com.sun.grid.jgdi.configuration.Range getJaNHIds(int index);
   

    /**
     *   Add a com.sun.grid.jgdi.configuration.Range attribute.
     *   @param ajaNHIds  the new com.sun.grid.jgdi.configuration.Range attribute
     */
    public void addJaNHIds(com.sun.grid.jgdi.configuration.Range ajaNHIds);
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.Range attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.Range attribute
     *   @param ajaNHIds  the new com.sun.grid.jgdi.configuration.Range attribute
     */
    public void setJaNHIds(int index, com.sun.grid.jgdi.configuration.Range ajaNHIds);

    /**
     *  Remove all com.sun.grid.jgdi.configuration.Range attributes.
     */
    public void removeAllJaNHIds();
   
    /**
     *  Remote a com.sun.grid.jgdi.configuration.Range attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.Range attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.Range attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.Range removeJaNHIds(int index);

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.Range attribute.
     *  @param ajaNHIds  the com.sun.grid.jgdi.configuration.Range attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.Range attribute has been removed
     */
    public boolean removeJaNHIds(com.sun.grid.jgdi.configuration.Range ajaNHIds);
   
       
 
    /**
     *  Determine if any jaNHIds attribute is set
     *  @return <code>true</code> if the jaNHIds attribute is set
     */
    public boolean isSetJaNHIds();


    // Attribute jaUHIds ------------------------------------------------


    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.Range attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.Range attributes
     */
    public List< com.sun.grid.jgdi.configuration.Range >  getJaUHIdsList();

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.Range attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.Range attributes.
     */
    public int getJaUHIdsCount();
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.Range attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.Range attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.Range attribute
     */
    public com.sun.grid.jgdi.configuration.Range getJaUHIds(int index);
   

    /**
     *   Add a com.sun.grid.jgdi.configuration.Range attribute.
     *   @param ajaUHIds  the new com.sun.grid.jgdi.configuration.Range attribute
     */
    public void addJaUHIds(com.sun.grid.jgdi.configuration.Range ajaUHIds);
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.Range attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.Range attribute
     *   @param ajaUHIds  the new com.sun.grid.jgdi.configuration.Range attribute
     */
    public void setJaUHIds(int index, com.sun.grid.jgdi.configuration.Range ajaUHIds);

    /**
     *  Remove all com.sun.grid.jgdi.configuration.Range attributes.
     */
    public void removeAllJaUHIds();
   
    /**
     *  Remote a com.sun.grid.jgdi.configuration.Range attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.Range attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.Range attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.Range removeJaUHIds(int index);

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.Range attribute.
     *  @param ajaUHIds  the com.sun.grid.jgdi.configuration.Range attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.Range attribute has been removed
     */
    public boolean removeJaUHIds(com.sun.grid.jgdi.configuration.Range ajaUHIds);
   
       
 
    /**
     *  Determine if any jaUHIds attribute is set
     *  @return <code>true</code> if the jaUHIds attribute is set
     */
    public boolean isSetJaUHIds();


    // Attribute jaSHIds ------------------------------------------------


    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.Range attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.Range attributes
     */
    public List< com.sun.grid.jgdi.configuration.Range >  getJaSHIdsList();

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.Range attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.Range attributes.
     */
    public int getJaSHIdsCount();
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.Range attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.Range attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.Range attribute
     */
    public com.sun.grid.jgdi.configuration.Range getJaSHIds(int index);
   

    /**
     *   Add a com.sun.grid.jgdi.configuration.Range attribute.
     *   @param ajaSHIds  the new com.sun.grid.jgdi.configuration.Range attribute
     */
    public void addJaSHIds(com.sun.grid.jgdi.configuration.Range ajaSHIds);
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.Range attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.Range attribute
     *   @param ajaSHIds  the new com.sun.grid.jgdi.configuration.Range attribute
     */
    public void setJaSHIds(int index, com.sun.grid.jgdi.configuration.Range ajaSHIds);

    /**
     *  Remove all com.sun.grid.jgdi.configuration.Range attributes.
     */
    public void removeAllJaSHIds();
   
    /**
     *  Remote a com.sun.grid.jgdi.configuration.Range attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.Range attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.Range attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.Range removeJaSHIds(int index);

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.Range attribute.
     *  @param ajaSHIds  the com.sun.grid.jgdi.configuration.Range attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.Range attribute has been removed
     */
    public boolean removeJaSHIds(com.sun.grid.jgdi.configuration.Range ajaSHIds);
   
       
 
    /**
     *  Determine if any jaSHIds attribute is set
     *  @return <code>true</code> if the jaSHIds attribute is set
     */
    public boolean isSetJaSHIds();


    // Attribute jaOHIds ------------------------------------------------


    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.Range attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.Range attributes
     */
    public List< com.sun.grid.jgdi.configuration.Range >  getJaOHIdsList();

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.Range attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.Range attributes.
     */
    public int getJaOHIdsCount();
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.Range attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.Range attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.Range attribute
     */
    public com.sun.grid.jgdi.configuration.Range getJaOHIds(int index);
   

    /**
     *   Add a com.sun.grid.jgdi.configuration.Range attribute.
     *   @param ajaOHIds  the new com.sun.grid.jgdi.configuration.Range attribute
     */
    public void addJaOHIds(com.sun.grid.jgdi.configuration.Range ajaOHIds);
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.Range attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.Range attribute
     *   @param ajaOHIds  the new com.sun.grid.jgdi.configuration.Range attribute
     */
    public void setJaOHIds(int index, com.sun.grid.jgdi.configuration.Range ajaOHIds);

    /**
     *  Remove all com.sun.grid.jgdi.configuration.Range attributes.
     */
    public void removeAllJaOHIds();
   
    /**
     *  Remote a com.sun.grid.jgdi.configuration.Range attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.Range attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.Range attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.Range removeJaOHIds(int index);

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.Range attribute.
     *  @param ajaOHIds  the com.sun.grid.jgdi.configuration.Range attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.Range attribute has been removed
     */
    public boolean removeJaOHIds(com.sun.grid.jgdi.configuration.Range ajaOHIds);
   
       
 
    /**
     *  Determine if any jaOHIds attribute is set
     *  @return <code>true</code> if the jaOHIds attribute is set
     */
    public boolean isSetJaOHIds();


    // Attribute jaAHIds ------------------------------------------------


    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.Range attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.Range attributes
     */
    public List< com.sun.grid.jgdi.configuration.Range >  getJaAHIdsList();

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.Range attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.Range attributes.
     */
    public int getJaAHIdsCount();
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.Range attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.Range attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.Range attribute
     */
    public com.sun.grid.jgdi.configuration.Range getJaAHIds(int index);
   

    /**
     *   Add a com.sun.grid.jgdi.configuration.Range attribute.
     *   @param ajaAHIds  the new com.sun.grid.jgdi.configuration.Range attribute
     */
    public void addJaAHIds(com.sun.grid.jgdi.configuration.Range ajaAHIds);
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.Range attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.Range attribute
     *   @param ajaAHIds  the new com.sun.grid.jgdi.configuration.Range attribute
     */
    public void setJaAHIds(int index, com.sun.grid.jgdi.configuration.Range ajaAHIds);

    /**
     *  Remove all com.sun.grid.jgdi.configuration.Range attributes.
     */
    public void removeAllJaAHIds();
   
    /**
     *  Remote a com.sun.grid.jgdi.configuration.Range attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.Range attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.Range attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.Range removeJaAHIds(int index);

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.Range attribute.
     *  @param ajaAHIds  the com.sun.grid.jgdi.configuration.Range attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.Range attribute has been removed
     */
    public boolean removeJaAHIds(com.sun.grid.jgdi.configuration.Range ajaAHIds);
   
       
 
    /**
     *  Determine if any jaAHIds attribute is set
     *  @return <code>true</code> if the jaAHIds attribute is set
     */
    public boolean isSetJaAHIds();


    // Attribute jaTemplate ------------------------------------------------


    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.JobTask attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.JobTask attributes
     */
    public List< com.sun.grid.jgdi.configuration.JobTask >  getJaTemplateList();

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.JobTask attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.JobTask attributes.
     */
    public int getJaTemplateCount();
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.JobTask attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.JobTask attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.JobTask attribute
     */
    public com.sun.grid.jgdi.configuration.JobTask getJaTemplate(int index);
   

    /**
     *   Add a com.sun.grid.jgdi.configuration.JobTask attribute.
     *   @param ajaTemplate  the new com.sun.grid.jgdi.configuration.JobTask attribute
     */
    public void addJaTemplate(com.sun.grid.jgdi.configuration.JobTask ajaTemplate);
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.JobTask attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.JobTask attribute
     *   @param ajaTemplate  the new com.sun.grid.jgdi.configuration.JobTask attribute
     */
    public void setJaTemplate(int index, com.sun.grid.jgdi.configuration.JobTask ajaTemplate);

    /**
     *  Remove all com.sun.grid.jgdi.configuration.JobTask attributes.
     */
    public void removeAllJaTemplate();
   
    /**
     *  Remote a com.sun.grid.jgdi.configuration.JobTask attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.JobTask attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.JobTask attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.JobTask removeJaTemplate(int index);

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.JobTask attribute.
     *  @param ajaTemplate  the com.sun.grid.jgdi.configuration.JobTask attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.JobTask attribute has been removed
     */
    public boolean removeJaTemplate(com.sun.grid.jgdi.configuration.JobTask ajaTemplate);
   
       
 
    /**
     *  Determine if any jaTemplate attribute is set
     *  @return <code>true</code> if the jaTemplate attribute is set
     */
    public boolean isSetJaTemplate();


    // Attribute jaTasks ------------------------------------------------


    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.JobTask attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.JobTask attributes
     */
    public List< com.sun.grid.jgdi.configuration.JobTask >  getJaTasksList();

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.JobTask attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.JobTask attributes.
     */
    public int getJaTasksCount();
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.JobTask attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.JobTask attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.JobTask attribute
     */
    public com.sun.grid.jgdi.configuration.JobTask getJaTasks(int index);
   

    /**
     *   Add a com.sun.grid.jgdi.configuration.JobTask attribute.
     *   @param ajaTasks  the new com.sun.grid.jgdi.configuration.JobTask attribute
     */
    public void addJaTasks(com.sun.grid.jgdi.configuration.JobTask ajaTasks);
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.JobTask attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.JobTask attribute
     *   @param ajaTasks  the new com.sun.grid.jgdi.configuration.JobTask attribute
     */
    public void setJaTasks(int index, com.sun.grid.jgdi.configuration.JobTask ajaTasks);

    /**
     *  Remove all com.sun.grid.jgdi.configuration.JobTask attributes.
     */
    public void removeAllJaTasks();
   
    /**
     *  Remote a com.sun.grid.jgdi.configuration.JobTask attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.JobTask attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.JobTask attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.JobTask removeJaTasks(int index);

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.JobTask attribute.
     *  @param ajaTasks  the com.sun.grid.jgdi.configuration.JobTask attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.JobTask attribute has been removed
     */
    public boolean removeJaTasks(com.sun.grid.jgdi.configuration.JobTask ajaTasks);
   
       
 
    /**
     *  Determine if any jaTasks attribute is set
     *  @return <code>true</code> if the jaTasks attribute is set
     */
    public boolean isSetJaTasks();


    // Attribute host ------------------------------------------------

  
    /**
     *  Get the value of the host attribute.
     *  @return the value of the host attribute
     */
    public java.lang.String getHost();
   

 
    /**
     *  Determine if any host attribute is set
     *  @return <code>true</code> if the host attribute is set
     */
    public boolean isSetHost();


    // Attribute userList ------------------------------------------------


    /**
     *   Get a unmodifiable list of all java.lang.String attributes.
     *
     *   @return Unmodifiable list with all java.lang.String attributes
     */
    public List< java.lang.String >  getUserList();

    /**
     *  Get the number of java.lang.String attributes.
     *
     *  @return The number of java.lang.String attributes.
     */
    public int getUserCount();
 
    /**
     *  Get a java.lang.String attribute at an index.
     *  @param index  the index of the java.lang.String attribute which should be
     *                removed
     *  @return the java.lang.String attribute
     */
    public java.lang.String getUser(int index);
   

    /**
     *   Add a java.lang.String attribute.
     *   @param auser  the new java.lang.String attribute
     */
    public void addUser(java.lang.String auser);
   
    /**
     *   Set a java.lang.String attribute.
     *   @param index   index of the java.lang.String attribute
     *   @param auser  the new java.lang.String attribute
     */
    public void setUser(int index, java.lang.String auser);

    /**
     *  Remove all java.lang.String attributes.
     */
    public void removeAllUser();
   
    /**
     *  Remote a java.lang.String attribute at an index.
     *  @param index  the index of the java.lang.String attribute which should be
     *                removed
     *  @return the removed java.lang.String attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public java.lang.String removeUser(int index);

    /**
     *  Remote a specific java.lang.String attribute.
     *  @param auser  the java.lang.String attribute which should be
     *                         removed
     *  @return <code>true</code> if the java.lang.String attribute has been removed
     */
    public boolean removeUser(java.lang.String auser);
   
       
 
    /**
     *  Determine if any user attribute is set
     *  @return <code>true</code> if the user attribute is set
     */
    public boolean isSetUser();


    // Attribute verifySuitableQueues ------------------------------------------------

       
    /**
     *   Set the verifySuitableQueues attribute.
     *
     *   @param aVerifySuitableQueues  the new value for the  verifySuitableQueues attribute
     */
    public void setVerifySuitableQueues(int aVerifySuitableQueues);
  
    /**
     *  Get the value of the verifySuitableQueues attribute.
     *  @return the value of the verifySuitableQueues attribute
     */
    public int getVerifySuitableQueues();
   

 
    /**
     *  Determine if any verifySuitableQueues attribute is set
     *  @return <code>true</code> if the verifySuitableQueues attribute is set
     */
    public boolean isSetVerifySuitableQueues();


    // Attribute overrideTickets ------------------------------------------------

       
    /**
     *   Set the overrideTickets attribute.
     *
     *   @param aOverrideTickets  the new value for the  overrideTickets attribute
     */
    public void setOverrideTickets(int aOverrideTickets);
  
    /**
     *  Get the value of the overrideTickets attribute.
     *  @return the value of the overrideTickets attribute
     */
    public int getOverrideTickets();
   

 
    /**
     *  Determine if any overrideTickets attribute is set
     *  @return <code>true</code> if the overrideTickets attribute is set
     */
    public boolean isSetOverrideTickets();


    // Attribute pathAliases ------------------------------------------------


    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.PathAlias attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.PathAlias attributes
     */
    public List< com.sun.grid.jgdi.configuration.PathAlias >  getPathAliasesList();

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.PathAlias attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.PathAlias attributes.
     */
    public int getPathAliasesCount();
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.PathAlias attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.PathAlias attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.PathAlias attribute
     */
    public com.sun.grid.jgdi.configuration.PathAlias getPathAliases(int index);
   

    /**
     *   Add a com.sun.grid.jgdi.configuration.PathAlias attribute.
     *   @param apathAliases  the new com.sun.grid.jgdi.configuration.PathAlias attribute
     */
    public void addPathAliases(com.sun.grid.jgdi.configuration.PathAlias apathAliases);
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.PathAlias attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.PathAlias attribute
     *   @param apathAliases  the new com.sun.grid.jgdi.configuration.PathAlias attribute
     */
    public void setPathAliases(int index, com.sun.grid.jgdi.configuration.PathAlias apathAliases);

    /**
     *  Remove all com.sun.grid.jgdi.configuration.PathAlias attributes.
     */
    public void removeAllPathAliases();
   
    /**
     *  Remote a com.sun.grid.jgdi.configuration.PathAlias attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.PathAlias attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.PathAlias attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.PathAlias removePathAliases(int index);

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.PathAlias attribute.
     *  @param apathAliases  the com.sun.grid.jgdi.configuration.PathAlias attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.PathAlias attribute has been removed
     */
    public boolean removePathAliases(com.sun.grid.jgdi.configuration.PathAlias apathAliases);
   
       
 
    /**
     *  Determine if any pathAliases attribute is set
     *  @return <code>true</code> if the pathAliases attribute is set
     */
    public boolean isSetPathAliases();


    // Attribute urg ------------------------------------------------

       
    /**
     *   Set the urg attribute.
     *
     *   @param aUrg  the new value for the  urg attribute
     */
    public void setUrg(double aUrg);
  
    /**
     *  Get the value of the urg attribute.
     *  @return the value of the urg attribute
     */
    public double getUrg();
   

 
    /**
     *  Determine if any urg attribute is set
     *  @return <code>true</code> if the urg attribute is set
     */
    public boolean isSetUrg();


    // Attribute nurg ------------------------------------------------

  
    /**
     *  Get the value of the nurg attribute.
     *  @return the value of the nurg attribute
     */
    public double getNurg();
   

 
    /**
     *  Determine if any nurg attribute is set
     *  @return <code>true</code> if the nurg attribute is set
     */
    public boolean isSetNurg();


    // Attribute nppri ------------------------------------------------

  
    /**
     *  Get the value of the nppri attribute.
     *  @return the value of the nppri attribute
     */
    public double getNppri();
   

 
    /**
     *  Determine if any nppri attribute is set
     *  @return <code>true</code> if the nppri attribute is set
     */
    public boolean isSetNppri();


    // Attribute rrcontr ------------------------------------------------

  
    /**
     *  Get the value of the rrcontr attribute.
     *  @return the value of the rrcontr attribute
     */
    public double getRrcontr();
   

 
    /**
     *  Determine if any rrcontr attribute is set
     *  @return <code>true</code> if the rrcontr attribute is set
     */
    public boolean isSetRrcontr();


    // Attribute dlcontr ------------------------------------------------

  
    /**
     *  Get the value of the dlcontr attribute.
     *  @return the value of the dlcontr attribute
     */
    public double getDlcontr();
   

 
    /**
     *  Determine if any dlcontr attribute is set
     *  @return <code>true</code> if the dlcontr attribute is set
     */
    public boolean isSetDlcontr();


    // Attribute wtcontr ------------------------------------------------

  
    /**
     *  Get the value of the wtcontr attribute.
     *  @return the value of the wtcontr attribute
     */
    public double getWtcontr();
   

 
    /**
     *  Determine if any wtcontr attribute is set
     *  @return <code>true</code> if the wtcontr attribute is set
     */
    public boolean isSetWtcontr();


    // Attribute ar ------------------------------------------------

       
    /**
     *   Set the ar attribute.
     *
     *   @param aAr  the new value for the  ar attribute
     */
    public void setAr(int aAr);
  
    /**
     *  Get the value of the ar attribute.
     *  @return the value of the ar attribute
     */
    public int getAr();
   

 
    /**
     *  Determine if any ar attribute is set
     *  @return <code>true</code> if the ar attribute is set
     */
    public boolean isSetAr();


    // Attribute pty ------------------------------------------------

       
    /**
     *   Set the pty attribute.
     *
     *   @param aPty  the new value for the  pty attribute
     */
    public void setPty(int aPty);
  
    /**
     *  Get the value of the pty attribute.
     *  @return the value of the pty attribute
     */
    public int getPty();
   

 
    /**
     *  Determine if any pty attribute is set
     *  @return <code>true</code> if the pty attribute is set
     */
    public boolean isSetPty();


    // Attribute jaTaskConcurrency ------------------------------------------------

       
    /**
     *   Set the jaTaskConcurrency attribute.
     *
     *   @param aJaTaskConcurrency  the new value for the  jaTaskConcurrency attribute
     */
    public void setJaTaskConcurrency(int aJaTaskConcurrency);
  
    /**
     *  Get the value of the jaTaskConcurrency attribute.
     *  @return the value of the jaTaskConcurrency attribute
     */
    public int getJaTaskConcurrency();
   

 
    /**
     *  Determine if any jaTaskConcurrency attribute is set
     *  @return <code>true</code> if the jaTaskConcurrency attribute is set
     */
    public boolean isSetJaTaskConcurrency();


    // Attribute binding ------------------------------------------------


    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.Binding attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.Binding attributes
     */
    public List< com.sun.grid.jgdi.configuration.Binding >  getBindingList();

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.Binding attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.Binding attributes.
     */
    public int getBindingCount();
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.Binding attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.Binding attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.Binding attribute
     */
    public com.sun.grid.jgdi.configuration.Binding getBinding(int index);
   

    /**
     *   Add a com.sun.grid.jgdi.configuration.Binding attribute.
     *   @param abinding  the new com.sun.grid.jgdi.configuration.Binding attribute
     */
    public void addBinding(com.sun.grid.jgdi.configuration.Binding abinding);
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.Binding attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.Binding attribute
     *   @param abinding  the new com.sun.grid.jgdi.configuration.Binding attribute
     */
    public void setBinding(int index, com.sun.grid.jgdi.configuration.Binding abinding);

    /**
     *  Remove all com.sun.grid.jgdi.configuration.Binding attributes.
     */
    public void removeAllBinding();
   
    /**
     *  Remote a com.sun.grid.jgdi.configuration.Binding attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.Binding attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.Binding attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.Binding removeBinding(int index);

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.Binding attribute.
     *  @param abinding  the com.sun.grid.jgdi.configuration.Binding attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.Binding attribute has been removed
     */
    public boolean removeBinding(com.sun.grid.jgdi.configuration.Binding abinding);
   
       
 
    /**
     *  Determine if any binding attribute is set
     *  @return <code>true</code> if the binding attribute is set
     */
    public boolean isSetBinding();



    /*
     * Dump the object
     * @return <code>String</code> the dump string
     */
     public String dump();
     

}
