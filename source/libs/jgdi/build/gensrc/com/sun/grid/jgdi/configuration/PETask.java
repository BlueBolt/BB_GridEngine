/*___INFO__MARK_BEGIN__*/
/*************************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  the Sun Industry Standards Source License Version 1.2
 *
 *  Sun Microsystems Inc., March, 2001
 *
 *
 *  Sun Industry Standards Source License Version 1.2
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.2 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *   Copyright: 2001 by Sun Microsystems, Inc.
 *
 *   All Rights Reserved.
 *
 ************************************************************************/
/*___INFO__MARK_END__*/
/**
 *  Generated from javamodel.jsp
 *  !!! DO NOT EDIT THIS FILE !!!
 */

package com.sun.grid.jgdi.configuration;

import com.sun.grid.jgdi.configuration.GEObject;
import java.util.List;
import java.util.Set;

/**
 *  Java representation of the cull object PET_Type
 *  defined in sge_all_listsL.template
 *
 *  <p><strong>Warning:</strong>  The  PETask class will 
 *  not be compatible with future Sun&trade; Grid Engine releases.</p>
 *
 */
public interface PETask extends 
    GEObject  { 

    // Attribute id ------------------------------------------------

       
    /**
     *   Set the id attribute.
     *
     *   @param aId  the new value for the  id attribute
     */
    public void setId(java.lang.String aId);
  
    /**
     *  Get the value of the id attribute.
     *  @return the value of the id attribute
     */
    public java.lang.String getId();
   

 
    /**
     *  Determine if any id attribute is set
     *  @return <code>true</code> if the id attribute is set
     */
    public boolean isSetId();


    // Attribute name ------------------------------------------------

       
    /**
     *   Set the name attribute.
     *
     *   @param aName  the new value for the  name attribute
     */
    public void setName(java.lang.String aName);
  
    /**
     *  Get the value of the name attribute.
     *  @return the value of the name attribute
     */
    public java.lang.String getName();
   

 
    /**
     *  Determine if any name attribute is set
     *  @return <code>true</code> if the name attribute is set
     */
    public boolean isSetName();


    // Attribute status ------------------------------------------------

       
    /**
     *   Set the status attribute.
     *
     *   @param aStatus  the new value for the  status attribute
     */
    public void setStatus(int aStatus);
  
    /**
     *  Get the value of the status attribute.
     *  @return the value of the status attribute
     */
    public int getStatus();
   

 
    /**
     *  Determine if any status attribute is set
     *  @return <code>true</code> if the status attribute is set
     */
    public boolean isSetStatus();


    // Attribute grantedDestinIdentifierList ------------------------------------------------


    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.JG attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.JG attributes
     */
    public List< com.sun.grid.jgdi.configuration.JG >  getGrantedDestinIdentifierList();

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.JG attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.JG attributes.
     */
    public int getGrantedDestinIdentifierCount();
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.JG attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.JG attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.JG attribute
     */
    public com.sun.grid.jgdi.configuration.JG getGrantedDestinIdentifier(int index);
   

    /**
     *   Add a com.sun.grid.jgdi.configuration.JG attribute.
     *   @param agrantedDestinIdentifier  the new com.sun.grid.jgdi.configuration.JG attribute
     */
    public void addGrantedDestinIdentifier(com.sun.grid.jgdi.configuration.JG agrantedDestinIdentifier);
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.JG attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.JG attribute
     *   @param agrantedDestinIdentifier  the new com.sun.grid.jgdi.configuration.JG attribute
     */
    public void setGrantedDestinIdentifier(int index, com.sun.grid.jgdi.configuration.JG agrantedDestinIdentifier);

    /**
     *  Remove all com.sun.grid.jgdi.configuration.JG attributes.
     */
    public void removeAllGrantedDestinIdentifier();
   
    /**
     *  Remote a com.sun.grid.jgdi.configuration.JG attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.JG attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.JG attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.JG removeGrantedDestinIdentifier(int index);

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.JG attribute.
     *  @param agrantedDestinIdentifier  the com.sun.grid.jgdi.configuration.JG attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.JG attribute has been removed
     */
    public boolean removeGrantedDestinIdentifier(com.sun.grid.jgdi.configuration.JG agrantedDestinIdentifier);
   
       
 
    /**
     *  Determine if any grantedDestinIdentifier attribute is set
     *  @return <code>true</code> if the grantedDestinIdentifier attribute is set
     */
    public boolean isSetGrantedDestinIdentifier();


    // Attribute pid ------------------------------------------------

       
    /**
     *   Set the pid attribute.
     *
     *   @param aPid  the new value for the  pid attribute
     */
    public void setPid(int aPid);
  
    /**
     *  Get the value of the pid attribute.
     *  @return the value of the pid attribute
     */
    public int getPid();
   

 
    /**
     *  Determine if any pid attribute is set
     *  @return <code>true</code> if the pid attribute is set
     */
    public boolean isSetPid();


    // Attribute osjobid ------------------------------------------------

       
    /**
     *   Set the osjobid attribute.
     *
     *   @param aOsjobid  the new value for the  osjobid attribute
     */
    public void setOsjobid(java.lang.String aOsjobid);
  
    /**
     *  Get the value of the osjobid attribute.
     *  @return the value of the osjobid attribute
     */
    public java.lang.String getOsjobid();
   

 
    /**
     *  Determine if any osjobid attribute is set
     *  @return <code>true</code> if the osjobid attribute is set
     */
    public boolean isSetOsjobid();


    // Attribute usage ------------------------------------------------

        // keyClassName for SGE_STRING = String
     
   
    /**
     *  <p>Get the default value of the attribute usage.</p>
     *  @return the default value of the attribute usage
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public double getDefaultUsage();

    /**
     *  <p>Get the usage attribute for <code>key</code>.</p>
     *  @param   key   the key
     *  @return  the usage attribute for <code>key</code> or the
     *           default value of  usage
     */
    public double getUsage(String key);
   
    /**
     *  Get the set of <code>key</code>s which have the attribute usage set.
     *  @return set of <code>key</code>s
     */
    public Set<String> getUsageKeys();
   
    /**
     *  Get the number of keys which have the attribute usage set.
     *  @return the number of keys which have the attribute usage set.
     */
    public int getUsageCount();
   
    /**
     *  Determine if any usage attribute is for <code>key</code> is set
     *  @param  key the key
     *  @return <code>true</code> if the usage attribute is set
     */
    public boolean isSetUsage(String key);
   
   
          
    /**
     *  <p>Put the attribute usage for <code>key</code>.</p>
     *
     *  @param key   the key
     *  @param value the value
     */
    public void putUsage(String key, double value);
   


    /**
     *  <p>remove the attribute usage for <code>key</code>.</p>
     *
     *  @param key  The key
     *  @return the value of the attribute for <code>key</code> or <code>null</code>
     *          if the attribute was not defined for <code>key</code>.
     */
    public java.lang.Double removeUsage(String key);
   
    /**
     *  <p>Remove the attribute usage for all keys.</p>
     */
    public void removeAllUsage();


 
    /**
     *  Determine if any usage attribute is set
     *  @return <code>true</code> if the usage attribute is set
     */
    public boolean isSetUsage();


    // Attribute scaledUsage ------------------------------------------------

        // keyClassName for SGE_STRING = String
     
   
    /**
     *  <p>Get the default value of the attribute scaledUsage.</p>
     *  @return the default value of the attribute scaledUsage
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public double getDefaultScaledUsage();

    /**
     *  <p>Get the scaledUsage attribute for <code>key</code>.</p>
     *  @param   key   the key
     *  @return  the scaledUsage attribute for <code>key</code> or the
     *           default value of  scaledUsage
     */
    public double getScaledUsage(String key);
   
    /**
     *  Get the set of <code>key</code>s which have the attribute scaledUsage set.
     *  @return set of <code>key</code>s
     */
    public Set<String> getScaledUsageKeys();
   
    /**
     *  Get the number of keys which have the attribute scaledUsage set.
     *  @return the number of keys which have the attribute scaledUsage set.
     */
    public int getScaledUsageCount();
   
    /**
     *  Determine if any scaledUsage attribute is for <code>key</code> is set
     *  @param  key the key
     *  @return <code>true</code> if the scaledUsage attribute is set
     */
    public boolean isSetScaledUsage(String key);
   
   
          
    /**
     *  <p>Put the attribute scaledUsage for <code>key</code>.</p>
     *
     *  @param key   the key
     *  @param value the value
     */
    public void putScaledUsage(String key, double value);
   


    /**
     *  <p>remove the attribute scaledUsage for <code>key</code>.</p>
     *
     *  @param key  The key
     *  @return the value of the attribute for <code>key</code> or <code>null</code>
     *          if the attribute was not defined for <code>key</code>.
     */
    public java.lang.Double removeScaledUsage(String key);
   
    /**
     *  <p>Remove the attribute scaledUsage for all keys.</p>
     */
    public void removeAllScaledUsage();


 
    /**
     *  Determine if any scaledUsage attribute is set
     *  @return <code>true</code> if the scaledUsage attribute is set
     */
    public boolean isSetScaledUsage();


    // Attribute reportedUsage ------------------------------------------------

        // keyClassName for SGE_STRING = String
     
   
    /**
     *  <p>Get the default value of the attribute reportedUsage.</p>
     *  @return the default value of the attribute reportedUsage
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public double getDefaultReportedUsage();

    /**
     *  <p>Get the reportedUsage attribute for <code>key</code>.</p>
     *  @param   key   the key
     *  @return  the reportedUsage attribute for <code>key</code> or the
     *           default value of  reportedUsage
     */
    public double getReportedUsage(String key);
   
    /**
     *  Get the set of <code>key</code>s which have the attribute reportedUsage set.
     *  @return set of <code>key</code>s
     */
    public Set<String> getReportedUsageKeys();
   
    /**
     *  Get the number of keys which have the attribute reportedUsage set.
     *  @return the number of keys which have the attribute reportedUsage set.
     */
    public int getReportedUsageCount();
   
    /**
     *  Determine if any reportedUsage attribute is for <code>key</code> is set
     *  @param  key the key
     *  @return <code>true</code> if the reportedUsage attribute is set
     */
    public boolean isSetReportedUsage(String key);
   
   
          
    /**
     *  <p>Put the attribute reportedUsage for <code>key</code>.</p>
     *
     *  @param key   the key
     *  @param value the value
     */
    public void putReportedUsage(String key, double value);
   


    /**
     *  <p>remove the attribute reportedUsage for <code>key</code>.</p>
     *
     *  @param key  The key
     *  @return the value of the attribute for <code>key</code> or <code>null</code>
     *          if the attribute was not defined for <code>key</code>.
     */
    public java.lang.Double removeReportedUsage(String key);
   
    /**
     *  <p>Remove the attribute reportedUsage for all keys.</p>
     */
    public void removeAllReportedUsage();


 
    /**
     *  Determine if any reportedUsage attribute is set
     *  @return <code>true</code> if the reportedUsage attribute is set
     */
    public boolean isSetReportedUsage();


    // Attribute previousUsage ------------------------------------------------

        // keyClassName for SGE_STRING = String
     
   
    /**
     *  <p>Get the default value of the attribute previousUsage.</p>
     *  @return the default value of the attribute previousUsage
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public double getDefaultPreviousUsage();

    /**
     *  <p>Get the previousUsage attribute for <code>key</code>.</p>
     *  @param   key   the key
     *  @return  the previousUsage attribute for <code>key</code> or the
     *           default value of  previousUsage
     */
    public double getPreviousUsage(String key);
   
    /**
     *  Get the set of <code>key</code>s which have the attribute previousUsage set.
     *  @return set of <code>key</code>s
     */
    public Set<String> getPreviousUsageKeys();
   
    /**
     *  Get the number of keys which have the attribute previousUsage set.
     *  @return the number of keys which have the attribute previousUsage set.
     */
    public int getPreviousUsageCount();
   
    /**
     *  Determine if any previousUsage attribute is for <code>key</code> is set
     *  @param  key the key
     *  @return <code>true</code> if the previousUsage attribute is set
     */
    public boolean isSetPreviousUsage(String key);
   
   
          
    /**
     *  <p>Put the attribute previousUsage for <code>key</code>.</p>
     *
     *  @param key   the key
     *  @param value the value
     */
    public void putPreviousUsage(String key, double value);
   


    /**
     *  <p>remove the attribute previousUsage for <code>key</code>.</p>
     *
     *  @param key  The key
     *  @return the value of the attribute for <code>key</code> or <code>null</code>
     *          if the attribute was not defined for <code>key</code>.
     */
    public java.lang.Double removePreviousUsage(String key);
   
    /**
     *  <p>Remove the attribute previousUsage for all keys.</p>
     */
    public void removeAllPreviousUsage();


 
    /**
     *  Determine if any previousUsage attribute is set
     *  @return <code>true</code> if the previousUsage attribute is set
     */
    public boolean isSetPreviousUsage();


    // Attribute submissionTime ------------------------------------------------

       
    /**
     *   Set the submissionTime attribute.
     *
     *   @param aSubmissionTime  the new value for the  submissionTime attribute
     */
    public void setSubmissionTime(int aSubmissionTime);
  
    /**
     *  Get the value of the submissionTime attribute.
     *  @return the value of the submissionTime attribute
     */
    public int getSubmissionTime();
   

 
    /**
     *  Determine if any submissionTime attribute is set
     *  @return <code>true</code> if the submissionTime attribute is set
     */
    public boolean isSetSubmissionTime();


    // Attribute startTime ------------------------------------------------

       
    /**
     *   Set the startTime attribute.
     *
     *   @param aStartTime  the new value for the  startTime attribute
     */
    public void setStartTime(int aStartTime);
  
    /**
     *  Get the value of the startTime attribute.
     *  @return the value of the startTime attribute
     */
    public int getStartTime();
   

 
    /**
     *  Determine if any startTime attribute is set
     *  @return <code>true</code> if the startTime attribute is set
     */
    public boolean isSetStartTime();


    // Attribute endTime ------------------------------------------------

       
    /**
     *   Set the endTime attribute.
     *
     *   @param aEndTime  the new value for the  endTime attribute
     */
    public void setEndTime(int aEndTime);
  
    /**
     *  Get the value of the endTime attribute.
     *  @return the value of the endTime attribute
     */
    public int getEndTime();
   

 
    /**
     *  Determine if any endTime attribute is set
     *  @return <code>true</code> if the endTime attribute is set
     */
    public boolean isSetEndTime();


    // Attribute cwd ------------------------------------------------

       
    /**
     *   Set the cwd attribute.
     *
     *   @param aCwd  the new value for the  cwd attribute
     */
    public void setCwd(java.lang.String aCwd);
  
    /**
     *  Get the value of the cwd attribute.
     *  @return the value of the cwd attribute
     */
    public java.lang.String getCwd();
   

 
    /**
     *  Determine if any cwd attribute is set
     *  @return <code>true</code> if the cwd attribute is set
     */
    public boolean isSetCwd();


    // Attribute pathAliases ------------------------------------------------


    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.PathAlias attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.PathAlias attributes
     */
    public List< com.sun.grid.jgdi.configuration.PathAlias >  getPathAliasesList();

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.PathAlias attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.PathAlias attributes.
     */
    public int getPathAliasesCount();
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.PathAlias attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.PathAlias attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.PathAlias attribute
     */
    public com.sun.grid.jgdi.configuration.PathAlias getPathAliases(int index);
   

    /**
     *   Add a com.sun.grid.jgdi.configuration.PathAlias attribute.
     *   @param apathAliases  the new com.sun.grid.jgdi.configuration.PathAlias attribute
     */
    public void addPathAliases(com.sun.grid.jgdi.configuration.PathAlias apathAliases);
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.PathAlias attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.PathAlias attribute
     *   @param apathAliases  the new com.sun.grid.jgdi.configuration.PathAlias attribute
     */
    public void setPathAliases(int index, com.sun.grid.jgdi.configuration.PathAlias apathAliases);

    /**
     *  Remove all com.sun.grid.jgdi.configuration.PathAlias attributes.
     */
    public void removeAllPathAliases();
   
    /**
     *  Remote a com.sun.grid.jgdi.configuration.PathAlias attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.PathAlias attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.PathAlias attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.PathAlias removePathAliases(int index);

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.PathAlias attribute.
     *  @param apathAliases  the com.sun.grid.jgdi.configuration.PathAlias attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.PathAlias attribute has been removed
     */
    public boolean removePathAliases(com.sun.grid.jgdi.configuration.PathAlias apathAliases);
   
       
 
    /**
     *  Determine if any pathAliases attribute is set
     *  @return <code>true</code> if the pathAliases attribute is set
     */
    public boolean isSetPathAliases();


    // Attribute environment ------------------------------------------------

        // keyClassName for SGE_STRING = String
     
   
    /**
     *  <p>Get the default value of the attribute environment.</p>
     *  @return the default value of the attribute environment
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultEnvironment();

    /**
     *  <p>Get the environment attribute for <code>key</code>.</p>
     *  @param   key   the key
     *  @return  the environment attribute for <code>key</code> or the
     *           default value of  environment
     */
    public String getEnvironment(String key);
   
    /**
     *  Get the set of <code>key</code>s which have the attribute environment set.
     *  @return set of <code>key</code>s
     */
    public Set<String> getEnvironmentKeys();
   
    /**
     *  Get the number of keys which have the attribute environment set.
     *  @return the number of keys which have the attribute environment set.
     */
    public int getEnvironmentCount();
   
    /**
     *  Determine if any environment attribute is for <code>key</code> is set
     *  @param  key the key
     *  @return <code>true</code> if the environment attribute is set
     */
    public boolean isSetEnvironment(String key);
   
   
          
    /**
     *  <p>Put the attribute environment for <code>key</code>.</p>
     *
     *  @param key   the key
     *  @param value the value
     */
    public void putEnvironment(String key, String value);
   


    /**
     *  <p>remove the attribute environment for <code>key</code>.</p>
     *
     *  @param key  The key
     *  @return the value of the attribute for <code>key</code> or <code>null</code>
     *          if the attribute was not defined for <code>key</code>.
     */
    public java.lang.String removeEnvironment(String key);
   
    /**
     *  <p>Remove the attribute environment for all keys.</p>
     */
    public void removeAllEnvironment();


 
    /**
     *  Determine if any environment attribute is set
     *  @return <code>true</code> if the environment attribute is set
     */
    public boolean isSetEnvironment();


    // Attribute doContact ------------------------------------------------

       
    /**
     *   Set the doContact attribute.
     *
     *   @param aDoContact  the new value for the  doContact attribute
     */
    public void setDoContact(boolean aDoContact);
  
    /**
     *  Get the value of the doContact attribute.
     *  @return the value of the doContact attribute
     */
    public boolean isDoContact();
   

 
    /**
     *  Determine if any doContact attribute is set
     *  @return <code>true</code> if the doContact attribute is set
     */
    public boolean isSetDoContact();



    /*
     * Dump the object
     * @return <code>String</code> the dump string
     */
     public String dump();
     

}
