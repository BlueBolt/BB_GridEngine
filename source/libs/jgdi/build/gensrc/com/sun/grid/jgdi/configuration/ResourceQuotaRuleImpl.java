/*___INFO__MARK_BEGIN__*/
/*************************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  the Sun Industry Standards Source License Version 1.2
 *
 *  Sun Microsystems Inc., March, 2001
 *
 *
 *  Sun Industry Standards Source License Version 1.2
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.2 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *   Copyright: 2001 by Sun Microsystems, Inc.
 *
 *   All Rights Reserved.
 *
 ************************************************************************/
/*___INFO__MARK_END__*/
/**
 *  Generated from javamodel_impl.jsp
 *  !!! DO NOT EDIT THIS FILE !!!
 */

package com.sun.grid.jgdi.configuration;

import javax.management.*;
import com.sun.grid.jgdi.configuration.GEObject;
import java.util.List;
import java.util.LinkedList;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.logging.Logger;
import java.util.logging.Level;

/**
 *  Java representation of the cull object RQR_Type
 *  defined in sge_all_listsL.template
 *
 *  <p><strong>Warning:</strong>  The  ResourceQuotaRuleImpl class will 
 *  not be compatible with future Sun&trade; Grid Engine releases.</p>
 */
public class ResourceQuotaRuleImpl extends    GEObjectImpl implements ResourceQuotaRule {


   /**
    *  Create a new instance of ResourceQuotaRuleImpl. The new instance
    *  will not be initialized with the default values.
    */
   public ResourceQuotaRuleImpl() {
      this(false);
   }
   
   /**
    *   Create a new instanceof
    *   @param  initWithDefaultValues if <code>true</code> the new instance will
    *                                 be initialized with the default values as defined
    *                                 in the cull definition.
    */
   public ResourceQuotaRuleImpl(boolean initWithDefaultValues) { 

      if (initWithDefaultValues) {     
    }

  } // end of default constructor
  
  // --- newInstance method with primary key field
  

   /**
    *  Create a new instance of ResourceQuotaRuleImpl
    */
   public ResourceQuotaRuleImpl(java.lang.String name ) {

   
         setName(name);

    }



    // Attribute name ------------------------------------------------
   
    /**
     *  Determine if the name attribute is set
     *  @return <code>true</code> if the name attribute is set
     */
    public boolean isSetName() {
   
        return  (m_name != null);

    }
   
    private java.lang.String m_name;

    /**
     *   Set the name attribute.
     *
     *   @param aName  the new value for the  name attribute
     */
    public void setName(java.lang.String aName) {   
        m_name = aName;

    }

    /**
     *  Get the value of the name attribute.
     *  @return the value of the name attribute
     */
    public java.lang.String getName() {
        return m_name;
    }


    // Attribute filterUsers ------------------------------------------------
   
    /**
     *  Determine if the filterUsers attribute is set
     *  @return <code>true</code> if the filterUsers attribute is set
     */
    public boolean isSetFilterUsers() {
   
        return  (m_filterUsers != null);

    }
   
    private com.sun.grid.jgdi.configuration.ResourceQuotaRuleFilter m_filterUsers;

    /**
     *   Set the filterUsers attribute.
     *
     *   @param aFilterUsers  the new value for the  filterUsers attribute
     */
    public void setFilterUsers(com.sun.grid.jgdi.configuration.ResourceQuotaRuleFilter aFilterUsers) {   
        m_filterUsers = aFilterUsers;

    }

    /**
     *  Get the value of the filterUsers attribute.
     *  @return the value of the filterUsers attribute
     */
    public com.sun.grid.jgdi.configuration.ResourceQuotaRuleFilter getFilterUsers() {
        return m_filterUsers;
    }


    // Attribute filterProjects ------------------------------------------------
   
    /**
     *  Determine if the filterProjects attribute is set
     *  @return <code>true</code> if the filterProjects attribute is set
     */
    public boolean isSetFilterProjects() {
   
        return  (m_filterProjects != null);

    }
   
    private com.sun.grid.jgdi.configuration.ResourceQuotaRuleFilter m_filterProjects;

    /**
     *   Set the filterProjects attribute.
     *
     *   @param aFilterProjects  the new value for the  filterProjects attribute
     */
    public void setFilterProjects(com.sun.grid.jgdi.configuration.ResourceQuotaRuleFilter aFilterProjects) {   
        m_filterProjects = aFilterProjects;

    }

    /**
     *  Get the value of the filterProjects attribute.
     *  @return the value of the filterProjects attribute
     */
    public com.sun.grid.jgdi.configuration.ResourceQuotaRuleFilter getFilterProjects() {
        return m_filterProjects;
    }


    // Attribute filterPes ------------------------------------------------
   
    /**
     *  Determine if the filterPes attribute is set
     *  @return <code>true</code> if the filterPes attribute is set
     */
    public boolean isSetFilterPes() {
   
        return  (m_filterPes != null);

    }
   
    private com.sun.grid.jgdi.configuration.ResourceQuotaRuleFilter m_filterPes;

    /**
     *   Set the filterPes attribute.
     *
     *   @param aFilterPes  the new value for the  filterPes attribute
     */
    public void setFilterPes(com.sun.grid.jgdi.configuration.ResourceQuotaRuleFilter aFilterPes) {   
        m_filterPes = aFilterPes;

    }

    /**
     *  Get the value of the filterPes attribute.
     *  @return the value of the filterPes attribute
     */
    public com.sun.grid.jgdi.configuration.ResourceQuotaRuleFilter getFilterPes() {
        return m_filterPes;
    }


    // Attribute filterQueues ------------------------------------------------
   
    /**
     *  Determine if the filterQueues attribute is set
     *  @return <code>true</code> if the filterQueues attribute is set
     */
    public boolean isSetFilterQueues() {
   
        return  (m_filterQueues != null);

    }
   
    private com.sun.grid.jgdi.configuration.ResourceQuotaRuleFilter m_filterQueues;

    /**
     *   Set the filterQueues attribute.
     *
     *   @param aFilterQueues  the new value for the  filterQueues attribute
     */
    public void setFilterQueues(com.sun.grid.jgdi.configuration.ResourceQuotaRuleFilter aFilterQueues) {   
        m_filterQueues = aFilterQueues;

    }

    /**
     *  Get the value of the filterQueues attribute.
     *  @return the value of the filterQueues attribute
     */
    public com.sun.grid.jgdi.configuration.ResourceQuotaRuleFilter getFilterQueues() {
        return m_filterQueues;
    }


    // Attribute filterHosts ------------------------------------------------
   
    /**
     *  Determine if the filterHosts attribute is set
     *  @return <code>true</code> if the filterHosts attribute is set
     */
    public boolean isSetFilterHosts() {
   
        return  (m_filterHosts != null);

    }
   
    private com.sun.grid.jgdi.configuration.ResourceQuotaRuleFilter m_filterHosts;

    /**
     *   Set the filterHosts attribute.
     *
     *   @param aFilterHosts  the new value for the  filterHosts attribute
     */
    public void setFilterHosts(com.sun.grid.jgdi.configuration.ResourceQuotaRuleFilter aFilterHosts) {   
        m_filterHosts = aFilterHosts;

    }

    /**
     *  Get the value of the filterHosts attribute.
     *  @return the value of the filterHosts attribute
     */
    public com.sun.grid.jgdi.configuration.ResourceQuotaRuleFilter getFilterHosts() {
        return m_filterHosts;
    }


    // Attribute limit ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.ResourceQuotaRuleLimit > m_limitList;
   
    private void initLimit() {
        if (m_limitList == null) {
            m_limitList = new LinkedList< com.sun.grid.jgdi.configuration.ResourceQuotaRuleLimit >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.ResourceQuotaRuleLimit attribute.

     *   @param alimit  the new com.sun.grid.jgdi.configuration.ResourceQuotaRuleLimit attribute
     */
    public void addLimit(com.sun.grid.jgdi.configuration.ResourceQuotaRuleLimit alimit) {   
        initLimit();
        
        m_limitList.add(alimit);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.ResourceQuotaRuleLimit attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.ResourceQuotaRuleLimit attribute
     *   @param alimit  the new com.sun.grid.jgdi.configuration.ResourceQuotaRuleLimit attribute
     */
    public void setLimit(int index, com.sun.grid.jgdi.configuration.ResourceQuotaRuleLimit alimit) {
        initLimit();
        m_limitList.set(index, alimit);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.ResourceQuotaRuleLimit attributes.
     */
    public void removeAllLimit() {
        if (m_limitList != null) {
            m_limitList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.ResourceQuotaRuleLimit attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.ResourceQuotaRuleLimit attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.ResourceQuotaRuleLimit attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.ResourceQuotaRuleLimit removeLimit(int index) {
        initLimit();
        return (com.sun.grid.jgdi.configuration.ResourceQuotaRuleLimit)m_limitList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.ResourceQuotaRuleLimit attribute.
     *  @param alimit  the com.sun.grid.jgdi.configuration.ResourceQuotaRuleLimit attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.ResourceQuotaRuleLimit attribute has been removed
     */
    public boolean removeLimit(com.sun.grid.jgdi.configuration.ResourceQuotaRuleLimit alimit) {
        initLimit();
        return m_limitList.remove(alimit);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.ResourceQuotaRuleLimit attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.ResourceQuotaRuleLimit attributes
     */
    public List< com.sun.grid.jgdi.configuration.ResourceQuotaRuleLimit > getLimitList() {
        initLimit();
        return Collections.unmodifiableList(m_limitList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.ResourceQuotaRuleLimit attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.ResourceQuotaRuleLimit attributes.
     */
    public int getLimitCount() {
        if (m_limitList != null) {
            return m_limitList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.ResourceQuotaRuleLimit attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.ResourceQuotaRuleLimit attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.ResourceQuotaRuleLimit attribute
     */
    public com.sun.grid.jgdi.configuration.ResourceQuotaRuleLimit getLimit(int index) {
        initLimit();
        return (com.sun.grid.jgdi.configuration.ResourceQuotaRuleLimit)m_limitList.get(index);
    }
   
    /**
     *  Determine if the limit attribute is set
     *  @return <code>true</code> if the limit attribute is set
     */
    public boolean isSetLimit () {
        return (m_limitList != null) && (!m_limitList.isEmpty());
    }
   

    // Attribute level ------------------------------------------------

    private boolean isLevelSet;
   
    /**
     *  Determine if the level attribute is set
     *  @return <code>true</code> if the level attribute is set
     */
    public boolean isSetLevel() {

        return isLevelSet;

    }
   
    private int m_level;

    /**
     *   Set the level attribute.
     *
     *   @param aLevel  the new value for the  level attribute
     */
    public void setLevel(int aLevel) {   
        m_level = aLevel;

        isLevelSet = true;

    }

    /**
     *  Get the value of the level attribute.
     *  @return the value of the level attribute
     */
    public int getLevel() {
        return m_level;
    }




    /**
     *  Is the primary key information equal to the primary key information
     *  of <code>obj</code>.
     *
     *  @param obj   the compared object
     *  @return <code>true</code> if the primary key information is equal to the
     *          primary key informations of <code>obj</code>.
     */
    public boolean equals(Object obj) {

        return (obj instanceof ResourceQuotaRuleImpl && getName().equals(((com.sun.grid.jgdi.configuration.ResourceQuotaRule)obj).getName()));

    }

    
    
    public boolean equalsCompletely(Object obj) {
        Logger logger = Logger.getLogger(getClass().getName());
        if (obj instanceof  ResourceQuotaRuleImpl) {
            com.sun.grid.jgdi.configuration.ResourceQuotaRule obj1 = (com.sun.grid.jgdi.configuration.ResourceQuotaRule)obj;

            {
                java.lang.String value1 = getName();
                java.lang.String value2 = obj1.getName();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute RQR_name of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes RQR_name are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                com.sun.grid.jgdi.configuration.ResourceQuotaRuleFilter value1 = getFilterUsers();
                com.sun.grid.jgdi.configuration.ResourceQuotaRuleFilter value2 = obj1.getFilterUsers();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute RQR_filter_users of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

            }

            {
                com.sun.grid.jgdi.configuration.ResourceQuotaRuleFilter value1 = getFilterProjects();
                com.sun.grid.jgdi.configuration.ResourceQuotaRuleFilter value2 = obj1.getFilterProjects();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute RQR_filter_projects of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

            }

            {
                com.sun.grid.jgdi.configuration.ResourceQuotaRuleFilter value1 = getFilterPes();
                com.sun.grid.jgdi.configuration.ResourceQuotaRuleFilter value2 = obj1.getFilterPes();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute RQR_filter_pes of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

            }

            {
                com.sun.grid.jgdi.configuration.ResourceQuotaRuleFilter value1 = getFilterQueues();
                com.sun.grid.jgdi.configuration.ResourceQuotaRuleFilter value2 = obj1.getFilterQueues();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute RQR_filter_queues of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

            }

            {
                com.sun.grid.jgdi.configuration.ResourceQuotaRuleFilter value1 = getFilterHosts();
                com.sun.grid.jgdi.configuration.ResourceQuotaRuleFilter value2 = obj1.getFilterHosts();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute RQR_filter_hosts of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

            }

            {
                int limitCount = getLimitCount();
                if (limitCount != obj1.getLimitCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists limit has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < limitCount; i++) {
                    com.sun.grid.jgdi.configuration.ResourceQuotaRuleLimit value1 = getLimit(i);
                    com.sun.grid.jgdi.configuration.ResourceQuotaRuleLimit value2 = obj1.getLimit(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute RQR_limit of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

                } // end of for
            }

            return true;
        } else {
            return true;
        }
    }
  
    public java.lang.String toString() {
        StringBuilder ret = new StringBuilder();
        ret.append("ResourceQuotaRuleImpl(");

        ret.append(getName());

        ret.append(")");
        return ret.toString();
    }



    public java.lang.String dump() {
        StringBuilder sb = new StringBuilder();

            {
                java.lang.String value = getName();
                sb.append("Name = " + value + "\n");
            }

            {
                com.sun.grid.jgdi.configuration.ResourceQuotaRuleFilter value = getFilterUsers();
                sb.append("FilterUsers = " + value + "\n");
            }

            {
                com.sun.grid.jgdi.configuration.ResourceQuotaRuleFilter value = getFilterProjects();
                sb.append("FilterProjects = " + value + "\n");
            }

            {
                com.sun.grid.jgdi.configuration.ResourceQuotaRuleFilter value = getFilterPes();
                sb.append("FilterPes = " + value + "\n");
            }

            {
                com.sun.grid.jgdi.configuration.ResourceQuotaRuleFilter value = getFilterQueues();
                sb.append("FilterQueues = " + value + "\n");
            }

            {
                com.sun.grid.jgdi.configuration.ResourceQuotaRuleFilter value = getFilterHosts();
                sb.append("FilterHosts = " + value + "\n");
            }

            int limitCount = getLimitCount();
            for (int i = 0; i < limitCount; i++) {
                com.sun.grid.jgdi.configuration.ResourceQuotaRuleLimit value = getLimit(i);
                
                sb.append("Limit[" + i + "] = " + value.dump() + "\n");
                
            } // end of for

        return sb.toString();
    }    

 
}
