/*___INFO__MARK_BEGIN__*/
/*************************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  the Sun Industry Standards Source License Version 1.2
 *
 *  Sun Microsystems Inc., March, 2001
 *
 *
 *  Sun Industry Standards Source License Version 1.2
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.2 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *   Copyright: 2001 by Sun Microsystems, Inc.
 *
 *   All Rights Reserved.
 *
 ************************************************************************/
/*___INFO__MARK_END__*/
/**
 *  Generated from java_rmi_jgdi_cache.jsp
 *  !!! DO NOT EDIT THIS FILE !!!
 */

package com.sun.grid.jgdi.rmi;


import java.rmi.RemoteException; 
import java.rmi.Remote;
import java.util.List;
import java.util.Collections;
import com.sun.grid.jgdi.JGDI;
import com.sun.grid.jgdi.JGDIException;

import com.sun.grid.jgdi.configuration.Hostgroup;        
import com.sun.grid.jgdi.configuration.SubmitHost;        
import com.sun.grid.jgdi.configuration.ExecHost;        
import com.sun.grid.jgdi.configuration.Manager;        
import com.sun.grid.jgdi.configuration.AdvanceReservation;        
import com.sun.grid.jgdi.configuration.SchedConf;        
import com.sun.grid.jgdi.configuration.Configuration;        
import com.sun.grid.jgdi.configuration.Project;        
import com.sun.grid.jgdi.configuration.ShareTree;        
import com.sun.grid.jgdi.configuration.AdminHost;        
import com.sun.grid.jgdi.configuration.Checkpoint;        
import com.sun.grid.jgdi.configuration.ParallelEnvironment;        
import com.sun.grid.jgdi.configuration.ComplexEntry;        
import com.sun.grid.jgdi.configuration.ClusterQueue;        
import com.sun.grid.jgdi.configuration.JobSchedulingInfo;        
import com.sun.grid.jgdi.configuration.UserSet;        
import com.sun.grid.jgdi.configuration.Calendar;        
import com.sun.grid.jgdi.configuration.Operator;        
import com.sun.grid.jgdi.configuration.Job;        
import com.sun.grid.jgdi.configuration.ResourceQuotaSet;        
import com.sun.grid.jgdi.configuration.EventClient;        
import com.sun.grid.jgdi.configuration.User;        

    
    
/**
 *  This class implements a cache for the {@link JGDIRemote} interface.
 */
public class JGDIRemoteCache extends JGDIRemoteCacheBase implements JGDIRemote {

   /** Creates a new instance of JGDIRemoteCache */
   public JGDIRemoteCache() {
   }
   
   /**
    *  Create a new instanceof of JGDIRemoteCache
    *  @param jgdi  the jgdi remote service
    */
   public JGDIRemoteCache(JGDIRemote jgdi) {
      super(jgdi);
   }
   


   /**
    *  Update a Hostgroup object
    *
    *  @param obj  the Hostgroup object with the new values
    *  @throws RemoteException on any error
    */
   public void updateHostgroup(Hostgroup obj) throws RemoteException {
      try {
         jgdi.updateHostgroup(obj);
      } catch( RemoteException re ) {
         handleError(re);
         throw re;
      }
     
       finally {      
         HostgroupCache = null;
       }
      
   }
  
   
   /**
    *   Add a delete <code>Hostgroup</code> object.
    *
    *   @param obj the <code>Hostgroup</code> object with the primary key information
    *   @throws RemoteException on any error
    */
   public void deleteHostgroup(Hostgroup obj) throws RemoteException {
     try {
        jgdi.deleteHostgroup(obj);
     } catch( RemoteException re ) {
        handleError(re);
        throw re;
     }  finally {      
         HostgroupCache = null;
       }

   }
  
   /**
    *   Delete a a <code>Hostgroup</code> object by its primary key
    *
    *   @param HGRP_name  the HGRP_name of the <code>Hostgroup</code> object       
    *   @throws RemoteException on any error
    */
   public void deleteHostgroup( String HGRP_name) throws RemoteException {
   
      try {
          jgdi.deleteHostgroup(HGRP_name);
       } catch( RemoteException re ) {
          handleError(re);
       }            
   }

   /**
    *   Add a new <code>Hostgroup</code> object.
    *
    *   @param obj the new <code>Hostgroup</code> object
    *   @throws RemoteException on any error
    */
   public void addHostgroup(Hostgroup obj) throws RemoteException {
     try {
        jgdi.addHostgroup(obj);
     } catch( RemoteException re ) {
        handleError(re);
        throw re;
     }  finally {      
         HostgroupCache = null;
       }
      
   }
   

   private List HostgroupCache = null;
   /**
    *   Get all <code>Hostgroup</code> objects.
    *
    *   @return a list of <code>Hostgroup</code> objects
    *   @throws RemoteException on any error
    */
   public List getHostgroupList() throws RemoteException {
   
      if ( jgdi == null ) {
         return Collections.EMPTY_LIST;
      }
      if (HostgroupCache == null ) {
         try {
             HostgroupCache = jgdi.getHostgroupList();
         } catch( RemoteException re ) {
            handleError(re);
            return Collections.EMPTY_LIST;
         }
      }
      return HostgroupCache;
   }
  
   /**
    *   Get a a <code>Hostgroup</code> object by its primary key
    *
    *   @param HGRP_name  the HGRP_name of the <code>Hostgroup</code> object       
    *   @return the <code>Hostgroup</code> object or <code>null</code>
    *   @throws RemoteException on any error
    */
   public Hostgroup getHostgroup( String HGRP_name) throws RemoteException {
   
      try {
          return jgdi.getHostgroup(HGRP_name);
       } catch( RemoteException re ) {
          handleError(re);
          return null;
       }            
   }
  
   
   /**
    *   Add a delete <code>SubmitHost</code> object.
    *
    *   @param obj the <code>SubmitHost</code> object with the primary key information
    *   @throws RemoteException on any error
    */
   public void deleteSubmitHost(SubmitHost obj) throws RemoteException {
     try {
        jgdi.deleteSubmitHost(obj);
     } catch( RemoteException re ) {
        handleError(re);
        throw re;
     }  finally {      
         SubmitHostCache = null;
       }

   }
  
   /**
    *   Delete a a <code>SubmitHost</code> object by its primary key
    *
    *   @param SH_name  the SH_name of the <code>SubmitHost</code> object       
    *   @throws RemoteException on any error
    */
   public void deleteSubmitHost( String SH_name) throws RemoteException {
   
      try {
          jgdi.deleteSubmitHost(SH_name);
       } catch( RemoteException re ) {
          handleError(re);
       }            
   }

   /**
    *   Add a new <code>SubmitHost</code> object.
    *
    *   @param obj the new <code>SubmitHost</code> object
    *   @throws RemoteException on any error
    */
   public void addSubmitHost(SubmitHost obj) throws RemoteException {
     try {
        jgdi.addSubmitHost(obj);
     } catch( RemoteException re ) {
        handleError(re);
        throw re;
     }  finally {      
         SubmitHostCache = null;
       }
      
   }
   

   private List SubmitHostCache = null;
   /**
    *   Get all <code>SubmitHost</code> objects.
    *
    *   @return a list of <code>SubmitHost</code> objects
    *   @throws RemoteException on any error
    */
   public List getSubmitHostList() throws RemoteException {
   
      if ( jgdi == null ) {
         return Collections.EMPTY_LIST;
      }
      if (SubmitHostCache == null ) {
         try {
             SubmitHostCache = jgdi.getSubmitHostList();
         } catch( RemoteException re ) {
            handleError(re);
            return Collections.EMPTY_LIST;
         }
      }
      return SubmitHostCache;
   }


   /**
    *  Update a ExecHost object
    *
    *  @param obj  the ExecHost object with the new values
    *  @throws RemoteException on any error
    */
   public void updateExecHost(ExecHost obj) throws RemoteException {
      try {
         jgdi.updateExecHost(obj);
      } catch( RemoteException re ) {
         handleError(re);
         throw re;
      }
     
       finally {      
         ExecHostCache = null;
       }
      
   }
  
   
   /**
    *   Add a delete <code>ExecHost</code> object.
    *
    *   @param obj the <code>ExecHost</code> object with the primary key information
    *   @throws RemoteException on any error
    */
   public void deleteExecHost(ExecHost obj) throws RemoteException {
     try {
        jgdi.deleteExecHost(obj);
     } catch( RemoteException re ) {
        handleError(re);
        throw re;
     }  finally {      
         ExecHostCache = null;
       }

   }
  
   /**
    *   Delete a a <code>ExecHost</code> object by its primary key
    *
    *   @param EH_name  the EH_name of the <code>ExecHost</code> object       
    *   @throws RemoteException on any error
    */
   public void deleteExecHost( String EH_name) throws RemoteException {
   
      try {
          jgdi.deleteExecHost(EH_name);
       } catch( RemoteException re ) {
          handleError(re);
       }            
   }

   /**
    *   Add a new <code>ExecHost</code> object.
    *
    *   @param obj the new <code>ExecHost</code> object
    *   @throws RemoteException on any error
    */
   public void addExecHost(ExecHost obj) throws RemoteException {
     try {
        jgdi.addExecHost(obj);
     } catch( RemoteException re ) {
        handleError(re);
        throw re;
     }  finally {      
         ExecHostCache = null;
       }
      
   }
   

   private List ExecHostCache = null;
   /**
    *   Get all <code>ExecHost</code> objects.
    *
    *   @return a list of <code>ExecHost</code> objects
    *   @throws RemoteException on any error
    */
   public List getExecHostList() throws RemoteException {
   
      if ( jgdi == null ) {
         return Collections.EMPTY_LIST;
      }
      if (ExecHostCache == null ) {
         try {
             ExecHostCache = jgdi.getExecHostList();
         } catch( RemoteException re ) {
            handleError(re);
            return Collections.EMPTY_LIST;
         }
      }
      return ExecHostCache;
   }
  
   /**
    *   Get a a <code>ExecHost</code> object by its primary key
    *
    *   @param EH_name  the EH_name of the <code>ExecHost</code> object       
    *   @return the <code>ExecHost</code> object or <code>null</code>
    *   @throws RemoteException on any error
    */
   public ExecHost getExecHost( String EH_name) throws RemoteException {
   
      try {
          return jgdi.getExecHost(EH_name);
       } catch( RemoteException re ) {
          handleError(re);
          return null;
       }            
   }
  
   
   /**
    *   Add a delete <code>Manager</code> object.
    *
    *   @param obj the <code>Manager</code> object with the primary key information
    *   @throws RemoteException on any error
    */
   public void deleteManager(Manager obj) throws RemoteException {
     try {
        jgdi.deleteManager(obj);
     } catch( RemoteException re ) {
        handleError(re);
        throw re;
     }  finally {      
         ManagerCache = null;
       }

   }
  
   /**
    *   Delete a a <code>Manager</code> object by its primary key
    *
    *   @param UM_name  the UM_name of the <code>Manager</code> object       
    *   @throws RemoteException on any error
    */
   public void deleteManager( String UM_name) throws RemoteException {
   
      try {
          jgdi.deleteManager(UM_name);
       } catch( RemoteException re ) {
          handleError(re);
       }            
   }

   /**
    *   Add a new <code>Manager</code> object.
    *
    *   @param obj the new <code>Manager</code> object
    *   @throws RemoteException on any error
    */
   public void addManager(Manager obj) throws RemoteException {
     try {
        jgdi.addManager(obj);
     } catch( RemoteException re ) {
        handleError(re);
        throw re;
     }  finally {      
         ManagerCache = null;
       }
      
   }
   

   private List ManagerCache = null;
   /**
    *   Get all <code>Manager</code> objects.
    *
    *   @return a list of <code>Manager</code> objects
    *   @throws RemoteException on any error
    */
   public List getManagerList() throws RemoteException {
   
      if ( jgdi == null ) {
         return Collections.EMPTY_LIST;
      }
      if (ManagerCache == null ) {
         try {
             ManagerCache = jgdi.getManagerList();
         } catch( RemoteException re ) {
            handleError(re);
            return Collections.EMPTY_LIST;
         }
      }
      return ManagerCache;
   }
  
   /**
    *   Get a a <code>Manager</code> object by its primary key
    *
    *   @param UM_name  the UM_name of the <code>Manager</code> object       
    *   @return the <code>Manager</code> object or <code>null</code>
    *   @throws RemoteException on any error
    */
   public Manager getManager( String UM_name) throws RemoteException {
   
      try {
          return jgdi.getManager(UM_name);
       } catch( RemoteException re ) {
          handleError(re);
          return null;
       }            
   }
  
   
   /**
    *   Add a delete <code>AdvanceReservation</code> object.
    *
    *   @param obj the <code>AdvanceReservation</code> object with the primary key information
    *   @throws RemoteException on any error
    */
   public void deleteAdvanceReservation(AdvanceReservation obj) throws RemoteException {
     try {
        jgdi.deleteAdvanceReservation(obj);
     } catch( RemoteException re ) {
        handleError(re);
        throw re;
     }  finally {      
         AdvanceReservationCache = null;
       }

   }
  
   /**
    *   Delete a a <code>AdvanceReservation</code> object by its primary key
    *
    *   @param AR_id  the AR_id of the <code>AdvanceReservation</code> object       
    *   @throws RemoteException on any error
    */
   public void deleteAdvanceReservation( int AR_id) throws RemoteException {
   
      try {
          jgdi.deleteAdvanceReservation(AR_id);
       } catch( RemoteException re ) {
          handleError(re);
       }            
   }

   /**
    *   Add a new <code>AdvanceReservation</code> object.
    *
    *   @param obj the new <code>AdvanceReservation</code> object
    *   @throws RemoteException on any error
    */
   public void addAdvanceReservation(AdvanceReservation obj) throws RemoteException {
     try {
        jgdi.addAdvanceReservation(obj);
     } catch( RemoteException re ) {
        handleError(re);
        throw re;
     }  finally {      
         AdvanceReservationCache = null;
       }
      
   }
   

   private List AdvanceReservationCache = null;
   /**
    *   Get all <code>AdvanceReservation</code> objects.
    *
    *   @return a list of <code>AdvanceReservation</code> objects
    *   @throws RemoteException on any error
    */
   public List getAdvanceReservationList() throws RemoteException {
   
      if ( jgdi == null ) {
         return Collections.EMPTY_LIST;
      }
      if (AdvanceReservationCache == null ) {
         try {
             AdvanceReservationCache = jgdi.getAdvanceReservationList();
         } catch( RemoteException re ) {
            handleError(re);
            return Collections.EMPTY_LIST;
         }
      }
      return AdvanceReservationCache;
   }
  
   /**
    *   Get a a <code>AdvanceReservation</code> object by its primary key
    *
    *   @param AR_id  the AR_id of the <code>AdvanceReservation</code> object       
    *   @return the <code>AdvanceReservation</code> object or <code>null</code>
    *   @throws RemoteException on any error
    */
   public AdvanceReservation getAdvanceReservation( int AR_id) throws RemoteException {
   
      try {
          return jgdi.getAdvanceReservation(AR_id);
       } catch( RemoteException re ) {
          handleError(re);
          return null;
       }            
   }


   /**
    *  Update the SchedConf object
    *
    *  @param obj  the SchedConf object with the new values
    *  @throws RemoteException on any error
    */
   public void updateSchedConf(SchedConf obj) throws RemoteException {
      try {
         jgdi.updateSchedConf(obj);
      } catch( RemoteException re ) {
         handleError(re);
         throw re;
      }
      
   }
      
   private SchedConf SchedConfCache = null;
   /**
    *   Get the <code>SchedConf</code> object.
    *   @return the <code>SchedConf</code> object
    *   @throws RemoteException on any error
    */
   public SchedConf getSchedConf() throws RemoteException {
   
      if ( jgdi == null ) {
         return null;
      }
      if (SchedConfCache == null ) {
         try {
             SchedConfCache = jgdi.getSchedConf();
         } catch( RemoteException re ) {
            handleError(re);
            return null;
         }
      }
      return SchedConfCache;
   }
   


   /**
    *  Update a Configuration object
    *
    *  @param obj  the Configuration object with the new values
    *  @throws RemoteException on any error
    */
   public void updateConfiguration(Configuration obj) throws RemoteException {
      try {
         jgdi.updateConfiguration(obj);
      } catch( RemoteException re ) {
         handleError(re);
         throw re;
      }
     
       finally {      
         ConfigurationCache = null;
       }
      
   }
  
   
   /**
    *   Add a delete <code>Configuration</code> object.
    *
    *   @param obj the <code>Configuration</code> object with the primary key information
    *   @throws RemoteException on any error
    */
   public void deleteConfiguration(Configuration obj) throws RemoteException {
     try {
        jgdi.deleteConfiguration(obj);
     } catch( RemoteException re ) {
        handleError(re);
        throw re;
     }  finally {      
         ConfigurationCache = null;
       }

   }
  
   /**
    *   Delete a a <code>Configuration</code> object by its primary key
    *
    *   @param CONF_name  the CONF_name of the <code>Configuration</code> object       
    *   @throws RemoteException on any error
    */
   public void deleteConfiguration( String CONF_name) throws RemoteException {
   
      try {
          jgdi.deleteConfiguration(CONF_name);
       } catch( RemoteException re ) {
          handleError(re);
       }            
   }

   /**
    *   Add a new <code>Configuration</code> object.
    *
    *   @param obj the new <code>Configuration</code> object
    *   @throws RemoteException on any error
    */
   public void addConfiguration(Configuration obj) throws RemoteException {
     try {
        jgdi.addConfiguration(obj);
     } catch( RemoteException re ) {
        handleError(re);
        throw re;
     }  finally {      
         ConfigurationCache = null;
       }
      
   }
   

   private List ConfigurationCache = null;
   /**
    *   Get all <code>Configuration</code> objects.
    *
    *   @return a list of <code>Configuration</code> objects
    *   @throws RemoteException on any error
    */
   public List getConfigurationList() throws RemoteException {
   
      if ( jgdi == null ) {
         return Collections.EMPTY_LIST;
      }
      if (ConfigurationCache == null ) {
         try {
             ConfigurationCache = jgdi.getConfigurationList();
         } catch( RemoteException re ) {
            handleError(re);
            return Collections.EMPTY_LIST;
         }
      }
      return ConfigurationCache;
   }
  
   /**
    *   Get a a <code>Configuration</code> object by its primary key
    *
    *   @param CONF_name  the CONF_name of the <code>Configuration</code> object       
    *   @return the <code>Configuration</code> object or <code>null</code>
    *   @throws RemoteException on any error
    */
   public Configuration getConfiguration( String CONF_name) throws RemoteException {
   
      try {
          return jgdi.getConfiguration(CONF_name);
       } catch( RemoteException re ) {
          handleError(re);
          return null;
       }            
   }


   /**
    *  Update a Project object
    *
    *  @param obj  the Project object with the new values
    *  @throws RemoteException on any error
    */
   public void updateProject(Project obj) throws RemoteException {
      try {
         jgdi.updateProject(obj);
      } catch( RemoteException re ) {
         handleError(re);
         throw re;
      }
     
       finally {      
         ProjectCache = null;
       }
      
   }
  
   
   /**
    *   Add a delete <code>Project</code> object.
    *
    *   @param obj the <code>Project</code> object with the primary key information
    *   @throws RemoteException on any error
    */
   public void deleteProject(Project obj) throws RemoteException {
     try {
        jgdi.deleteProject(obj);
     } catch( RemoteException re ) {
        handleError(re);
        throw re;
     }  finally {      
         ProjectCache = null;
       }

   }
  
   /**
    *   Delete a a <code>Project</code> object by its primary key
    *
    *   @param PR_name  the PR_name of the <code>Project</code> object       
    *   @throws RemoteException on any error
    */
   public void deleteProject( String PR_name) throws RemoteException {
   
      try {
          jgdi.deleteProject(PR_name);
       } catch( RemoteException re ) {
          handleError(re);
       }            
   }

   /**
    *   Add a new <code>Project</code> object.
    *
    *   @param obj the new <code>Project</code> object
    *   @throws RemoteException on any error
    */
   public void addProject(Project obj) throws RemoteException {
     try {
        jgdi.addProject(obj);
     } catch( RemoteException re ) {
        handleError(re);
        throw re;
     }  finally {      
         ProjectCache = null;
       }
      
   }
   

   private List ProjectCache = null;
   /**
    *   Get all <code>Project</code> objects.
    *
    *   @return a list of <code>Project</code> objects
    *   @throws RemoteException on any error
    */
   public List getProjectList() throws RemoteException {
   
      if ( jgdi == null ) {
         return Collections.EMPTY_LIST;
      }
      if (ProjectCache == null ) {
         try {
             ProjectCache = jgdi.getProjectList();
         } catch( RemoteException re ) {
            handleError(re);
            return Collections.EMPTY_LIST;
         }
      }
      return ProjectCache;
   }
  
   /**
    *   Get a a <code>Project</code> object by its primary key
    *
    *   @param PR_name  the PR_name of the <code>Project</code> object       
    *   @return the <code>Project</code> object or <code>null</code>
    *   @throws RemoteException on any error
    */
   public Project getProject( String PR_name) throws RemoteException {
   
      try {
          return jgdi.getProject(PR_name);
       } catch( RemoteException re ) {
          handleError(re);
          return null;
       }            
   }


   /**
    *  Update a ShareTree object
    *
    *  @param obj  the ShareTree object with the new values
    *  @throws RemoteException on any error
    */
   public void updateShareTree(ShareTree obj) throws RemoteException {
      try {
         jgdi.updateShareTree(obj);
      } catch( RemoteException re ) {
         handleError(re);
         throw re;
      }
      
   }
  
   /**
    *   Get a a <code>ShareTree</code> object by its primary key
    *
    *   @param STN_name  the STN_name of the <code>ShareTree</code> object       
    *   @return the <code>ShareTree</code> object or <code>null</code>
    *   @throws RemoteException on any error
    */
   public ShareTree getShareTree( String STN_name) throws RemoteException {
   
      try {
          return jgdi.getShareTree(STN_name);
       } catch( RemoteException re ) {
          handleError(re);
          return null;
       }            
   }
  
   
   /**
    *   Add a delete <code>AdminHost</code> object.
    *
    *   @param obj the <code>AdminHost</code> object with the primary key information
    *   @throws RemoteException on any error
    */
   public void deleteAdminHost(AdminHost obj) throws RemoteException {
     try {
        jgdi.deleteAdminHost(obj);
     } catch( RemoteException re ) {
        handleError(re);
        throw re;
     }  finally {      
         AdminHostCache = null;
       }

   }
  
   /**
    *   Delete a a <code>AdminHost</code> object by its primary key
    *
    *   @param AH_name  the AH_name of the <code>AdminHost</code> object       
    *   @throws RemoteException on any error
    */
   public void deleteAdminHost( String AH_name) throws RemoteException {
   
      try {
          jgdi.deleteAdminHost(AH_name);
       } catch( RemoteException re ) {
          handleError(re);
       }            
   }

   /**
    *   Add a new <code>AdminHost</code> object.
    *
    *   @param obj the new <code>AdminHost</code> object
    *   @throws RemoteException on any error
    */
   public void addAdminHost(AdminHost obj) throws RemoteException {
     try {
        jgdi.addAdminHost(obj);
     } catch( RemoteException re ) {
        handleError(re);
        throw re;
     }  finally {      
         AdminHostCache = null;
       }
      
   }
   

   private List AdminHostCache = null;
   /**
    *   Get all <code>AdminHost</code> objects.
    *
    *   @return a list of <code>AdminHost</code> objects
    *   @throws RemoteException on any error
    */
   public List getAdminHostList() throws RemoteException {
   
      if ( jgdi == null ) {
         return Collections.EMPTY_LIST;
      }
      if (AdminHostCache == null ) {
         try {
             AdminHostCache = jgdi.getAdminHostList();
         } catch( RemoteException re ) {
            handleError(re);
            return Collections.EMPTY_LIST;
         }
      }
      return AdminHostCache;
   }


   /**
    *  Update a Checkpoint object
    *
    *  @param obj  the Checkpoint object with the new values
    *  @throws RemoteException on any error
    */
   public void updateCheckpoint(Checkpoint obj) throws RemoteException {
      try {
         jgdi.updateCheckpoint(obj);
      } catch( RemoteException re ) {
         handleError(re);
         throw re;
      }
     
       finally {      
         CheckpointCache = null;
       }
      
   }
  
   
   /**
    *   Add a delete <code>Checkpoint</code> object.
    *
    *   @param obj the <code>Checkpoint</code> object with the primary key information
    *   @throws RemoteException on any error
    */
   public void deleteCheckpoint(Checkpoint obj) throws RemoteException {
     try {
        jgdi.deleteCheckpoint(obj);
     } catch( RemoteException re ) {
        handleError(re);
        throw re;
     }  finally {      
         CheckpointCache = null;
       }

   }
  
   /**
    *   Delete a a <code>Checkpoint</code> object by its primary key
    *
    *   @param CK_name  the CK_name of the <code>Checkpoint</code> object       
    *   @throws RemoteException on any error
    */
   public void deleteCheckpoint( String CK_name) throws RemoteException {
   
      try {
          jgdi.deleteCheckpoint(CK_name);
       } catch( RemoteException re ) {
          handleError(re);
       }            
   }

   /**
    *   Add a new <code>Checkpoint</code> object.
    *
    *   @param obj the new <code>Checkpoint</code> object
    *   @throws RemoteException on any error
    */
   public void addCheckpoint(Checkpoint obj) throws RemoteException {
     try {
        jgdi.addCheckpoint(obj);
     } catch( RemoteException re ) {
        handleError(re);
        throw re;
     }  finally {      
         CheckpointCache = null;
       }
      
   }
   

   private List CheckpointCache = null;
   /**
    *   Get all <code>Checkpoint</code> objects.
    *
    *   @return a list of <code>Checkpoint</code> objects
    *   @throws RemoteException on any error
    */
   public List getCheckpointList() throws RemoteException {
   
      if ( jgdi == null ) {
         return Collections.EMPTY_LIST;
      }
      if (CheckpointCache == null ) {
         try {
             CheckpointCache = jgdi.getCheckpointList();
         } catch( RemoteException re ) {
            handleError(re);
            return Collections.EMPTY_LIST;
         }
      }
      return CheckpointCache;
   }
  
   /**
    *   Get a a <code>Checkpoint</code> object by its primary key
    *
    *   @param CK_name  the CK_name of the <code>Checkpoint</code> object       
    *   @return the <code>Checkpoint</code> object or <code>null</code>
    *   @throws RemoteException on any error
    */
   public Checkpoint getCheckpoint( String CK_name) throws RemoteException {
   
      try {
          return jgdi.getCheckpoint(CK_name);
       } catch( RemoteException re ) {
          handleError(re);
          return null;
       }            
   }


   /**
    *  Update a ParallelEnvironment object
    *
    *  @param obj  the ParallelEnvironment object with the new values
    *  @throws RemoteException on any error
    */
   public void updateParallelEnvironment(ParallelEnvironment obj) throws RemoteException {
      try {
         jgdi.updateParallelEnvironment(obj);
      } catch( RemoteException re ) {
         handleError(re);
         throw re;
      }
     
       finally {      
         ParallelEnvironmentCache = null;
       }
      
   }
  
   
   /**
    *   Add a delete <code>ParallelEnvironment</code> object.
    *
    *   @param obj the <code>ParallelEnvironment</code> object with the primary key information
    *   @throws RemoteException on any error
    */
   public void deleteParallelEnvironment(ParallelEnvironment obj) throws RemoteException {
     try {
        jgdi.deleteParallelEnvironment(obj);
     } catch( RemoteException re ) {
        handleError(re);
        throw re;
     }  finally {      
         ParallelEnvironmentCache = null;
       }

   }
  
   /**
    *   Delete a a <code>ParallelEnvironment</code> object by its primary key
    *
    *   @param PE_name  the PE_name of the <code>ParallelEnvironment</code> object       
    *   @throws RemoteException on any error
    */
   public void deleteParallelEnvironment( String PE_name) throws RemoteException {
   
      try {
          jgdi.deleteParallelEnvironment(PE_name);
       } catch( RemoteException re ) {
          handleError(re);
       }            
   }

   /**
    *   Add a new <code>ParallelEnvironment</code> object.
    *
    *   @param obj the new <code>ParallelEnvironment</code> object
    *   @throws RemoteException on any error
    */
   public void addParallelEnvironment(ParallelEnvironment obj) throws RemoteException {
     try {
        jgdi.addParallelEnvironment(obj);
     } catch( RemoteException re ) {
        handleError(re);
        throw re;
     }  finally {      
         ParallelEnvironmentCache = null;
       }
      
   }
   

   private List ParallelEnvironmentCache = null;
   /**
    *   Get all <code>ParallelEnvironment</code> objects.
    *
    *   @return a list of <code>ParallelEnvironment</code> objects
    *   @throws RemoteException on any error
    */
   public List getParallelEnvironmentList() throws RemoteException {
   
      if ( jgdi == null ) {
         return Collections.EMPTY_LIST;
      }
      if (ParallelEnvironmentCache == null ) {
         try {
             ParallelEnvironmentCache = jgdi.getParallelEnvironmentList();
         } catch( RemoteException re ) {
            handleError(re);
            return Collections.EMPTY_LIST;
         }
      }
      return ParallelEnvironmentCache;
   }
  
   /**
    *   Get a a <code>ParallelEnvironment</code> object by its primary key
    *
    *   @param PE_name  the PE_name of the <code>ParallelEnvironment</code> object       
    *   @return the <code>ParallelEnvironment</code> object or <code>null</code>
    *   @throws RemoteException on any error
    */
   public ParallelEnvironment getParallelEnvironment( String PE_name) throws RemoteException {
   
      try {
          return jgdi.getParallelEnvironment(PE_name);
       } catch( RemoteException re ) {
          handleError(re);
          return null;
       }            
   }


   /**
    *  Update a ComplexEntry object
    *
    *  @param obj  the ComplexEntry object with the new values
    *  @throws RemoteException on any error
    */
   public void updateComplexEntry(ComplexEntry obj) throws RemoteException {
      try {
         jgdi.updateComplexEntry(obj);
      } catch( RemoteException re ) {
         handleError(re);
         throw re;
      }
     
       finally {      
         ComplexEntryCache = null;
       }
      
   }
  
   
   /**
    *   Add a delete <code>ComplexEntry</code> object.
    *
    *   @param obj the <code>ComplexEntry</code> object with the primary key information
    *   @throws RemoteException on any error
    */
   public void deleteComplexEntry(ComplexEntry obj) throws RemoteException {
     try {
        jgdi.deleteComplexEntry(obj);
     } catch( RemoteException re ) {
        handleError(re);
        throw re;
     }  finally {      
         ComplexEntryCache = null;
       }

   }
  
   /**
    *   Delete a a <code>ComplexEntry</code> object by its primary key
    *
    *   @param CE_name  the CE_name of the <code>ComplexEntry</code> object       
    *   @throws RemoteException on any error
    */
   public void deleteComplexEntry( String CE_name) throws RemoteException {
   
      try {
          jgdi.deleteComplexEntry(CE_name);
       } catch( RemoteException re ) {
          handleError(re);
       }            
   }

   /**
    *   Add a new <code>ComplexEntry</code> object.
    *
    *   @param obj the new <code>ComplexEntry</code> object
    *   @throws RemoteException on any error
    */
   public void addComplexEntry(ComplexEntry obj) throws RemoteException {
     try {
        jgdi.addComplexEntry(obj);
     } catch( RemoteException re ) {
        handleError(re);
        throw re;
     }  finally {      
         ComplexEntryCache = null;
       }
      
   }
   

   private List ComplexEntryCache = null;
   /**
    *   Get all <code>ComplexEntry</code> objects.
    *
    *   @return a list of <code>ComplexEntry</code> objects
    *   @throws RemoteException on any error
    */
   public List getComplexEntryList() throws RemoteException {
   
      if ( jgdi == null ) {
         return Collections.EMPTY_LIST;
      }
      if (ComplexEntryCache == null ) {
         try {
             ComplexEntryCache = jgdi.getComplexEntryList();
         } catch( RemoteException re ) {
            handleError(re);
            return Collections.EMPTY_LIST;
         }
      }
      return ComplexEntryCache;
   }
  
   /**
    *   Get a a <code>ComplexEntry</code> object by its primary key
    *
    *   @param CE_name  the CE_name of the <code>ComplexEntry</code> object       
    *   @return the <code>ComplexEntry</code> object or <code>null</code>
    *   @throws RemoteException on any error
    */
   public ComplexEntry getComplexEntry( String CE_name) throws RemoteException {
   
      try {
          return jgdi.getComplexEntry(CE_name);
       } catch( RemoteException re ) {
          handleError(re);
          return null;
       }            
   }


   /**
    *  Update a ClusterQueue object
    *
    *  @param obj  the ClusterQueue object with the new values
    *  @throws RemoteException on any error
    */
   public void updateClusterQueue(ClusterQueue obj) throws RemoteException {
      try {
         jgdi.updateClusterQueue(obj);
      } catch( RemoteException re ) {
         handleError(re);
         throw re;
      }
     
       finally {      
         ClusterQueueCache = null;
       }
      
   }
  
   
   /**
    *   Add a delete <code>ClusterQueue</code> object.
    *
    *   @param obj the <code>ClusterQueue</code> object with the primary key information
    *   @throws RemoteException on any error
    */
   public void deleteClusterQueue(ClusterQueue obj) throws RemoteException {
     try {
        jgdi.deleteClusterQueue(obj);
     } catch( RemoteException re ) {
        handleError(re);
        throw re;
     }  finally {      
         ClusterQueueCache = null;
       }

   }
  
   /**
    *   Delete a a <code>ClusterQueue</code> object by its primary key
    *
    *   @param CQ_name  the CQ_name of the <code>ClusterQueue</code> object       
    *   @throws RemoteException on any error
    */
   public void deleteClusterQueue( String CQ_name) throws RemoteException {
   
      try {
          jgdi.deleteClusterQueue(CQ_name);
       } catch( RemoteException re ) {
          handleError(re);
       }            
   }

   /**
    *   Add a new <code>ClusterQueue</code> object.
    *
    *   @param obj the new <code>ClusterQueue</code> object
    *   @throws RemoteException on any error
    */
   public void addClusterQueue(ClusterQueue obj) throws RemoteException {
     try {
        jgdi.addClusterQueue(obj);
     } catch( RemoteException re ) {
        handleError(re);
        throw re;
     }  finally {      
         ClusterQueueCache = null;
       }
      
   }
   

   private List ClusterQueueCache = null;
   /**
    *   Get all <code>ClusterQueue</code> objects.
    *
    *   @return a list of <code>ClusterQueue</code> objects
    *   @throws RemoteException on any error
    */
   public List getClusterQueueList() throws RemoteException {
   
      if ( jgdi == null ) {
         return Collections.EMPTY_LIST;
      }
      if (ClusterQueueCache == null ) {
         try {
             ClusterQueueCache = jgdi.getClusterQueueList();
         } catch( RemoteException re ) {
            handleError(re);
            return Collections.EMPTY_LIST;
         }
      }
      return ClusterQueueCache;
   }
  
   /**
    *   Get a a <code>ClusterQueue</code> object by its primary key
    *
    *   @param CQ_name  the CQ_name of the <code>ClusterQueue</code> object       
    *   @return the <code>ClusterQueue</code> object or <code>null</code>
    *   @throws RemoteException on any error
    */
   public ClusterQueue getClusterQueue( String CQ_name) throws RemoteException {
   
      try {
          return jgdi.getClusterQueue(CQ_name);
       } catch( RemoteException re ) {
          handleError(re);
          return null;
       }            
   }
      
   private JobSchedulingInfo JobSchedulingInfoCache = null;
   /**
    *   Get the <code>JobSchedulingInfo</code> object.
    *   @return the <code>JobSchedulingInfo</code> object
    *   @throws RemoteException on any error
    */
   public JobSchedulingInfo getJobSchedulingInfo() throws RemoteException {
   
      if ( jgdi == null ) {
         return null;
      }
      if (JobSchedulingInfoCache == null ) {
         try {
             JobSchedulingInfoCache = jgdi.getJobSchedulingInfo();
         } catch( RemoteException re ) {
            handleError(re);
            return null;
         }
      }
      return JobSchedulingInfoCache;
   }
   


   /**
    *  Update a UserSet object
    *
    *  @param obj  the UserSet object with the new values
    *  @throws RemoteException on any error
    */
   public void updateUserSet(UserSet obj) throws RemoteException {
      try {
         jgdi.updateUserSet(obj);
      } catch( RemoteException re ) {
         handleError(re);
         throw re;
      }
     
       finally {      
         UserSetCache = null;
       }
      
   }
  
   
   /**
    *   Add a delete <code>UserSet</code> object.
    *
    *   @param obj the <code>UserSet</code> object with the primary key information
    *   @throws RemoteException on any error
    */
   public void deleteUserSet(UserSet obj) throws RemoteException {
     try {
        jgdi.deleteUserSet(obj);
     } catch( RemoteException re ) {
        handleError(re);
        throw re;
     }  finally {      
         UserSetCache = null;
       }

   }
  
   /**
    *   Delete a a <code>UserSet</code> object by its primary key
    *
    *   @param US_name  the US_name of the <code>UserSet</code> object       
    *   @throws RemoteException on any error
    */
   public void deleteUserSet( String US_name) throws RemoteException {
   
      try {
          jgdi.deleteUserSet(US_name);
       } catch( RemoteException re ) {
          handleError(re);
       }            
   }

   /**
    *   Add a new <code>UserSet</code> object.
    *
    *   @param obj the new <code>UserSet</code> object
    *   @throws RemoteException on any error
    */
   public void addUserSet(UserSet obj) throws RemoteException {
     try {
        jgdi.addUserSet(obj);
     } catch( RemoteException re ) {
        handleError(re);
        throw re;
     }  finally {      
         UserSetCache = null;
       }
      
   }
   

   private List UserSetCache = null;
   /**
    *   Get all <code>UserSet</code> objects.
    *
    *   @return a list of <code>UserSet</code> objects
    *   @throws RemoteException on any error
    */
   public List getUserSetList() throws RemoteException {
   
      if ( jgdi == null ) {
         return Collections.EMPTY_LIST;
      }
      if (UserSetCache == null ) {
         try {
             UserSetCache = jgdi.getUserSetList();
         } catch( RemoteException re ) {
            handleError(re);
            return Collections.EMPTY_LIST;
         }
      }
      return UserSetCache;
   }
  
   /**
    *   Get a a <code>UserSet</code> object by its primary key
    *
    *   @param US_name  the US_name of the <code>UserSet</code> object       
    *   @return the <code>UserSet</code> object or <code>null</code>
    *   @throws RemoteException on any error
    */
   public UserSet getUserSet( String US_name) throws RemoteException {
   
      try {
          return jgdi.getUserSet(US_name);
       } catch( RemoteException re ) {
          handleError(re);
          return null;
       }            
   }


   /**
    *  Update a Calendar object
    *
    *  @param obj  the Calendar object with the new values
    *  @throws RemoteException on any error
    */
   public void updateCalendar(Calendar obj) throws RemoteException {
      try {
         jgdi.updateCalendar(obj);
      } catch( RemoteException re ) {
         handleError(re);
         throw re;
      }
     
       finally {      
         CalendarCache = null;
       }
      
   }
  
   
   /**
    *   Add a delete <code>Calendar</code> object.
    *
    *   @param obj the <code>Calendar</code> object with the primary key information
    *   @throws RemoteException on any error
    */
   public void deleteCalendar(Calendar obj) throws RemoteException {
     try {
        jgdi.deleteCalendar(obj);
     } catch( RemoteException re ) {
        handleError(re);
        throw re;
     }  finally {      
         CalendarCache = null;
       }

   }
  
   /**
    *   Delete a a <code>Calendar</code> object by its primary key
    *
    *   @param CAL_name  the CAL_name of the <code>Calendar</code> object       
    *   @throws RemoteException on any error
    */
   public void deleteCalendar( String CAL_name) throws RemoteException {
   
      try {
          jgdi.deleteCalendar(CAL_name);
       } catch( RemoteException re ) {
          handleError(re);
       }            
   }

   /**
    *   Add a new <code>Calendar</code> object.
    *
    *   @param obj the new <code>Calendar</code> object
    *   @throws RemoteException on any error
    */
   public void addCalendar(Calendar obj) throws RemoteException {
     try {
        jgdi.addCalendar(obj);
     } catch( RemoteException re ) {
        handleError(re);
        throw re;
     }  finally {      
         CalendarCache = null;
       }
      
   }
   

   private List CalendarCache = null;
   /**
    *   Get all <code>Calendar</code> objects.
    *
    *   @return a list of <code>Calendar</code> objects
    *   @throws RemoteException on any error
    */
   public List getCalendarList() throws RemoteException {
   
      if ( jgdi == null ) {
         return Collections.EMPTY_LIST;
      }
      if (CalendarCache == null ) {
         try {
             CalendarCache = jgdi.getCalendarList();
         } catch( RemoteException re ) {
            handleError(re);
            return Collections.EMPTY_LIST;
         }
      }
      return CalendarCache;
   }
  
   /**
    *   Get a a <code>Calendar</code> object by its primary key
    *
    *   @param CAL_name  the CAL_name of the <code>Calendar</code> object       
    *   @return the <code>Calendar</code> object or <code>null</code>
    *   @throws RemoteException on any error
    */
   public Calendar getCalendar( String CAL_name) throws RemoteException {
   
      try {
          return jgdi.getCalendar(CAL_name);
       } catch( RemoteException re ) {
          handleError(re);
          return null;
       }            
   }
  
   
   /**
    *   Add a delete <code>Operator</code> object.
    *
    *   @param obj the <code>Operator</code> object with the primary key information
    *   @throws RemoteException on any error
    */
   public void deleteOperator(Operator obj) throws RemoteException {
     try {
        jgdi.deleteOperator(obj);
     } catch( RemoteException re ) {
        handleError(re);
        throw re;
     }  finally {      
         OperatorCache = null;
       }

   }
  
   /**
    *   Delete a a <code>Operator</code> object by its primary key
    *
    *   @param UO_name  the UO_name of the <code>Operator</code> object       
    *   @throws RemoteException on any error
    */
   public void deleteOperator( String UO_name) throws RemoteException {
   
      try {
          jgdi.deleteOperator(UO_name);
       } catch( RemoteException re ) {
          handleError(re);
       }            
   }

   /**
    *   Add a new <code>Operator</code> object.
    *
    *   @param obj the new <code>Operator</code> object
    *   @throws RemoteException on any error
    */
   public void addOperator(Operator obj) throws RemoteException {
     try {
        jgdi.addOperator(obj);
     } catch( RemoteException re ) {
        handleError(re);
        throw re;
     }  finally {      
         OperatorCache = null;
       }
      
   }
   

   private List OperatorCache = null;
   /**
    *   Get all <code>Operator</code> objects.
    *
    *   @return a list of <code>Operator</code> objects
    *   @throws RemoteException on any error
    */
   public List getOperatorList() throws RemoteException {
   
      if ( jgdi == null ) {
         return Collections.EMPTY_LIST;
      }
      if (OperatorCache == null ) {
         try {
             OperatorCache = jgdi.getOperatorList();
         } catch( RemoteException re ) {
            handleError(re);
            return Collections.EMPTY_LIST;
         }
      }
      return OperatorCache;
   }
  
   /**
    *   Get a a <code>Operator</code> object by its primary key
    *
    *   @param UO_name  the UO_name of the <code>Operator</code> object       
    *   @return the <code>Operator</code> object or <code>null</code>
    *   @throws RemoteException on any error
    */
   public Operator getOperator( String UO_name) throws RemoteException {
   
      try {
          return jgdi.getOperator(UO_name);
       } catch( RemoteException re ) {
          handleError(re);
          return null;
       }            
   }


   /**
    *  Update a Job object
    *
    *  @param obj  the Job object with the new values
    *  @throws RemoteException on any error
    */
   public void updateJob(Job obj) throws RemoteException {
      try {
         jgdi.updateJob(obj);
      } catch( RemoteException re ) {
         handleError(re);
         throw re;
      }
     
       finally {      
         JobCache = null;
       }
      
   }
  
   
   /**
    *   Add a delete <code>Job</code> object.
    *
    *   @param obj the <code>Job</code> object with the primary key information
    *   @throws RemoteException on any error
    */
   public void deleteJob(Job obj) throws RemoteException {
     try {
        jgdi.deleteJob(obj);
     } catch( RemoteException re ) {
        handleError(re);
        throw re;
     }  finally {      
         JobCache = null;
       }

   }
  
   /**
    *   Delete a a <code>Job</code> object by its primary key
    *
    *   @param JB_job_number  the JB_job_number of the <code>Job</code> object       
    *   @throws RemoteException on any error
    */
   public void deleteJob( int JB_job_number) throws RemoteException {
   
      try {
          jgdi.deleteJob(JB_job_number);
       } catch( RemoteException re ) {
          handleError(re);
       }            
   }

   /**
    *   Add a new <code>Job</code> object.
    *
    *   @param obj the new <code>Job</code> object
    *   @throws RemoteException on any error
    */
   public void addJob(Job obj) throws RemoteException {
     try {
        jgdi.addJob(obj);
     } catch( RemoteException re ) {
        handleError(re);
        throw re;
     }  finally {      
         JobCache = null;
       }
      
   }
   

   private List JobCache = null;
   /**
    *   Get all <code>Job</code> objects.
    *
    *   @return a list of <code>Job</code> objects
    *   @throws RemoteException on any error
    */
   public List getJobList() throws RemoteException {
   
      if ( jgdi == null ) {
         return Collections.EMPTY_LIST;
      }
      if (JobCache == null ) {
         try {
             JobCache = jgdi.getJobList();
         } catch( RemoteException re ) {
            handleError(re);
            return Collections.EMPTY_LIST;
         }
      }
      return JobCache;
   }
  
   /**
    *   Get a a <code>Job</code> object by its primary key
    *
    *   @param JB_job_number  the JB_job_number of the <code>Job</code> object       
    *   @return the <code>Job</code> object or <code>null</code>
    *   @throws RemoteException on any error
    */
   public Job getJob( int JB_job_number) throws RemoteException {
   
      try {
          return jgdi.getJob(JB_job_number);
       } catch( RemoteException re ) {
          handleError(re);
          return null;
       }            
   }


   /**
    *  Update a ResourceQuotaSet object
    *
    *  @param obj  the ResourceQuotaSet object with the new values
    *  @throws RemoteException on any error
    */
   public void updateResourceQuotaSet(ResourceQuotaSet obj) throws RemoteException {
      try {
         jgdi.updateResourceQuotaSet(obj);
      } catch( RemoteException re ) {
         handleError(re);
         throw re;
      }
     
       finally {      
         ResourceQuotaSetCache = null;
       }
      
   }
  
   
   /**
    *   Add a delete <code>ResourceQuotaSet</code> object.
    *
    *   @param obj the <code>ResourceQuotaSet</code> object with the primary key information
    *   @throws RemoteException on any error
    */
   public void deleteResourceQuotaSet(ResourceQuotaSet obj) throws RemoteException {
     try {
        jgdi.deleteResourceQuotaSet(obj);
     } catch( RemoteException re ) {
        handleError(re);
        throw re;
     }  finally {      
         ResourceQuotaSetCache = null;
       }

   }
  
   /**
    *   Delete a a <code>ResourceQuotaSet</code> object by its primary key
    *
    *   @param RQS_name  the RQS_name of the <code>ResourceQuotaSet</code> object       
    *   @throws RemoteException on any error
    */
   public void deleteResourceQuotaSet( String RQS_name) throws RemoteException {
   
      try {
          jgdi.deleteResourceQuotaSet(RQS_name);
       } catch( RemoteException re ) {
          handleError(re);
       }            
   }

   /**
    *   Add a new <code>ResourceQuotaSet</code> object.
    *
    *   @param obj the new <code>ResourceQuotaSet</code> object
    *   @throws RemoteException on any error
    */
   public void addResourceQuotaSet(ResourceQuotaSet obj) throws RemoteException {
     try {
        jgdi.addResourceQuotaSet(obj);
     } catch( RemoteException re ) {
        handleError(re);
        throw re;
     }  finally {      
         ResourceQuotaSetCache = null;
       }
      
   }
   

   private List ResourceQuotaSetCache = null;
   /**
    *   Get all <code>ResourceQuotaSet</code> objects.
    *
    *   @return a list of <code>ResourceQuotaSet</code> objects
    *   @throws RemoteException on any error
    */
   public List getResourceQuotaSetList() throws RemoteException {
   
      if ( jgdi == null ) {
         return Collections.EMPTY_LIST;
      }
      if (ResourceQuotaSetCache == null ) {
         try {
             ResourceQuotaSetCache = jgdi.getResourceQuotaSetList();
         } catch( RemoteException re ) {
            handleError(re);
            return Collections.EMPTY_LIST;
         }
      }
      return ResourceQuotaSetCache;
   }
  
   /**
    *   Get a a <code>ResourceQuotaSet</code> object by its primary key
    *
    *   @param RQS_name  the RQS_name of the <code>ResourceQuotaSet</code> object       
    *   @return the <code>ResourceQuotaSet</code> object or <code>null</code>
    *   @throws RemoteException on any error
    */
   public ResourceQuotaSet getResourceQuotaSet( String RQS_name) throws RemoteException {
   
      try {
          return jgdi.getResourceQuotaSet(RQS_name);
       } catch( RemoteException re ) {
          handleError(re);
          return null;
       }            
   }

   private List EventClientCache = null;
   /**
    *   Get all <code>EventClient</code> objects.
    *
    *   @return a list of <code>EventClient</code> objects
    *   @throws RemoteException on any error
    */
   public List getEventClientList() throws RemoteException {
   
      if ( jgdi == null ) {
         return Collections.EMPTY_LIST;
      }
      if (EventClientCache == null ) {
         try {
             EventClientCache = jgdi.getEventClientList();
         } catch( RemoteException re ) {
            handleError(re);
            return Collections.EMPTY_LIST;
         }
      }
      return EventClientCache;
   }


   /**
    *  Update a User object
    *
    *  @param obj  the User object with the new values
    *  @throws RemoteException on any error
    */
   public void updateUser(User obj) throws RemoteException {
      try {
         jgdi.updateUser(obj);
      } catch( RemoteException re ) {
         handleError(re);
         throw re;
      }
     
       finally {      
         UserCache = null;
       }
      
   }
  
   
   /**
    *   Add a delete <code>User</code> object.
    *
    *   @param obj the <code>User</code> object with the primary key information
    *   @throws RemoteException on any error
    */
   public void deleteUser(User obj) throws RemoteException {
     try {
        jgdi.deleteUser(obj);
     } catch( RemoteException re ) {
        handleError(re);
        throw re;
     }  finally {      
         UserCache = null;
       }

   }
  
   /**
    *   Delete a a <code>User</code> object by its primary key
    *
    *   @param UU_name  the UU_name of the <code>User</code> object       
    *   @throws RemoteException on any error
    */
   public void deleteUser( String UU_name) throws RemoteException {
   
      try {
          jgdi.deleteUser(UU_name);
       } catch( RemoteException re ) {
          handleError(re);
       }            
   }

   /**
    *   Add a new <code>User</code> object.
    *
    *   @param obj the new <code>User</code> object
    *   @throws RemoteException on any error
    */
   public void addUser(User obj) throws RemoteException {
     try {
        jgdi.addUser(obj);
     } catch( RemoteException re ) {
        handleError(re);
        throw re;
     }  finally {      
         UserCache = null;
       }
      
   }
   

   private List UserCache = null;
   /**
    *   Get all <code>User</code> objects.
    *
    *   @return a list of <code>User</code> objects
    *   @throws RemoteException on any error
    */
   public List getUserList() throws RemoteException {
   
      if ( jgdi == null ) {
         return Collections.EMPTY_LIST;
      }
      if (UserCache == null ) {
         try {
             UserCache = jgdi.getUserList();
         } catch( RemoteException re ) {
            handleError(re);
            return Collections.EMPTY_LIST;
         }
      }
      return UserCache;
   }
  
   /**
    *   Get a a <code>User</code> object by its primary key
    *
    *   @param UU_name  the UU_name of the <code>User</code> object       
    *   @return the <code>User</code> object or <code>null</code>
    *   @throws RemoteException on any error
    */
   public User getUser( String UU_name) throws RemoteException {
   
      try {
          return jgdi.getUser(UU_name);
       } catch( RemoteException re ) {
          handleError(re);
          return null;
       }            
   }

}
