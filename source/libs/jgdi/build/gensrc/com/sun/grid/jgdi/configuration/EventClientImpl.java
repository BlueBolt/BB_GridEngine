/*___INFO__MARK_BEGIN__*/
/*************************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  the Sun Industry Standards Source License Version 1.2
 *
 *  Sun Microsystems Inc., March, 2001
 *
 *
 *  Sun Industry Standards Source License Version 1.2
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.2 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *   Copyright: 2001 by Sun Microsystems, Inc.
 *
 *   All Rights Reserved.
 *
 ************************************************************************/
/*___INFO__MARK_END__*/
/**
 *  Generated from javamodel_impl.jsp
 *  !!! DO NOT EDIT THIS FILE !!!
 */

package com.sun.grid.jgdi.configuration;

import javax.management.*;
import com.sun.grid.jgdi.configuration.GEObject;
import java.util.List;
import java.util.LinkedList;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.logging.Logger;
import java.util.logging.Level;

/**
 *  Java representation of the cull object EV_Type
 *  defined in sge_all_listsL.template
 *
 *  <p><strong>Warning:</strong>  The  EventClientImpl class will 
 *  not be compatible with future Sun&trade; Grid Engine releases.</p>
 */
public class EventClientImpl extends    GEObjectImpl implements EventClient {


   /**
    *  Create a new instance of EventClientImpl. The new instance
    *  will not be initialized with the default values.
    */
   public EventClientImpl() {
      this(false);
   }
   
   /**
    *   Create a new instanceof
    *   @param  initWithDefaultValues if <code>true</code> the new instance will
    *                                 be initialized with the default values as defined
    *                                 in the cull definition.
    */
   public EventClientImpl(boolean initWithDefaultValues) { 

      if (initWithDefaultValues) {     
    }

  } // end of default constructor
  
  // --- newInstance method with primary key field
  

   /**
    *  Create a new instance of EventClientImpl
    */
   public EventClientImpl(int id ) {

   
         setId(id);

    }



    // Attribute id ------------------------------------------------

    private boolean isIdSet;
   
    /**
     *  Determine if the id attribute is set
     *  @return <code>true</code> if the id attribute is set
     */
    public boolean isSetId() {

        return isIdSet;

    }
   
    private int m_id;

    /**
     *   Set the id attribute.
     *
     *   @param aId  the new value for the  id attribute
     */
    public void setId(int aId) {   
        m_id = aId;

        isIdSet = true;

    }

    /**
     *  Get the value of the id attribute.
     *  @return the value of the id attribute
     */
    public int getId() {
        return m_id;
    }


    // Attribute name ------------------------------------------------
   
    /**
     *  Determine if the name attribute is set
     *  @return <code>true</code> if the name attribute is set
     */
    public boolean isSetName() {
   
        return  (m_name != null);

    }
   
    private java.lang.String m_name;

    /**
     *   Set the name attribute.
     *
     *   @param aName  the new value for the  name attribute
     */
    public void setName(java.lang.String aName) {   
        m_name = aName;

    }

    /**
     *  Get the value of the name attribute.
     *  @return the value of the name attribute
     */
    public java.lang.String getName() {
        return m_name;
    }


    // Attribute host ------------------------------------------------
   
    /**
     *  Determine if the host attribute is set
     *  @return <code>true</code> if the host attribute is set
     */
    public boolean isSetHost() {
   
        return  (m_host != null);

    }
   
    private java.lang.String m_host;

    /**
     *   Set the host attribute.
     *
     *   @param aHost  the new value for the  host attribute
     */
    public void setHost(java.lang.String aHost) {   
        m_host = aHost;

    }

    /**
     *  Get the value of the host attribute.
     *  @return the value of the host attribute
     */
    public java.lang.String getHost() {
        return m_host;
    }


    // Attribute commproc ------------------------------------------------
   
    /**
     *  Determine if the commproc attribute is set
     *  @return <code>true</code> if the commproc attribute is set
     */
    public boolean isSetCommproc() {
   
        return  (m_commproc != null);

    }
   
    private java.lang.String m_commproc;

    /**
     *   Set the commproc attribute.
     *
     *   @param aCommproc  the new value for the  commproc attribute
     */
    public void setCommproc(java.lang.String aCommproc) {   
        m_commproc = aCommproc;

    }

    /**
     *  Get the value of the commproc attribute.
     *  @return the value of the commproc attribute
     */
    public java.lang.String getCommproc() {
        return m_commproc;
    }


    // Attribute commid ------------------------------------------------

    private boolean isCommidSet;
   
    /**
     *  Determine if the commid attribute is set
     *  @return <code>true</code> if the commid attribute is set
     */
    public boolean isSetCommid() {

        return isCommidSet;

    }
   
    private int m_commid;

    /**
     *   Set the commid attribute.
     *
     *   @param aCommid  the new value for the  commid attribute
     */
    public void setCommid(int aCommid) {   
        m_commid = aCommid;

        isCommidSet = true;

    }

    /**
     *  Get the value of the commid attribute.
     *  @return the value of the commid attribute
     */
    public int getCommid() {
        return m_commid;
    }


    // Attribute uid ------------------------------------------------

    private boolean isUidSet;
   
    /**
     *  Determine if the uid attribute is set
     *  @return <code>true</code> if the uid attribute is set
     */
    public boolean isSetUid() {

        return isUidSet;

    }
   
    private int m_uid;

    /**
     *   Set the uid attribute.
     *
     *   @param aUid  the new value for the  uid attribute
     */
    public void setUid(int aUid) {   
        m_uid = aUid;

        isUidSet = true;

    }

    /**
     *  Get the value of the uid attribute.
     *  @return the value of the uid attribute
     */
    public int getUid() {
        return m_uid;
    }


    // Attribute dTime ------------------------------------------------

    private boolean isDTimeSet;
   
    /**
     *  Determine if the dTime attribute is set
     *  @return <code>true</code> if the dTime attribute is set
     */
    public boolean isSetDTime() {

        return isDTimeSet;

    }
   
    private int m_dTime;

    /**
     *   Set the dTime attribute.
     *
     *   @param aDTime  the new value for the  dTime attribute
     */
    public void setDTime(int aDTime) {   
        m_dTime = aDTime;

        isDTimeSet = true;

    }

    /**
     *  Get the value of the dTime attribute.
     *  @return the value of the dTime attribute
     */
    public int getDTime() {
        return m_dTime;
    }


    // Attribute flushDelay ------------------------------------------------

    private boolean isFlushDelaySet;
   
    /**
     *  Determine if the flushDelay attribute is set
     *  @return <code>true</code> if the flushDelay attribute is set
     */
    public boolean isSetFlushDelay() {

        return isFlushDelaySet;

    }
   
    private int m_flushDelay;

    /**
     *   Set the flushDelay attribute.
     *
     *   @param aFlushDelay  the new value for the  flushDelay attribute
     */
    public void setFlushDelay(int aFlushDelay) {   
        m_flushDelay = aFlushDelay;

        isFlushDelaySet = true;

    }

    /**
     *  Get the value of the flushDelay attribute.
     *  @return the value of the flushDelay attribute
     */
    public int getFlushDelay() {
        return m_flushDelay;
    }


    // Attribute subscribed ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.EventSubcribtion > m_subscribedList;
   
    private void initSubscribed() {
        if (m_subscribedList == null) {
            m_subscribedList = new LinkedList< com.sun.grid.jgdi.configuration.EventSubcribtion >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.EventSubcribtion attribute.

     *   @param asubscribed  the new com.sun.grid.jgdi.configuration.EventSubcribtion attribute
     */
    public void addSubscribed(com.sun.grid.jgdi.configuration.EventSubcribtion asubscribed) {   
        initSubscribed();
        
        m_subscribedList.add(asubscribed);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.EventSubcribtion attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.EventSubcribtion attribute
     *   @param asubscribed  the new com.sun.grid.jgdi.configuration.EventSubcribtion attribute
     */
    public void setSubscribed(int index, com.sun.grid.jgdi.configuration.EventSubcribtion asubscribed) {
        initSubscribed();
        m_subscribedList.set(index, asubscribed);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.EventSubcribtion attributes.
     */
    public void removeAllSubscribed() {
        if (m_subscribedList != null) {
            m_subscribedList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.EventSubcribtion attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.EventSubcribtion attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.EventSubcribtion attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.EventSubcribtion removeSubscribed(int index) {
        initSubscribed();
        return (com.sun.grid.jgdi.configuration.EventSubcribtion)m_subscribedList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.EventSubcribtion attribute.
     *  @param asubscribed  the com.sun.grid.jgdi.configuration.EventSubcribtion attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.EventSubcribtion attribute has been removed
     */
    public boolean removeSubscribed(com.sun.grid.jgdi.configuration.EventSubcribtion asubscribed) {
        initSubscribed();
        return m_subscribedList.remove(asubscribed);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.EventSubcribtion attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.EventSubcribtion attributes
     */
    public List< com.sun.grid.jgdi.configuration.EventSubcribtion > getSubscribedList() {
        initSubscribed();
        return Collections.unmodifiableList(m_subscribedList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.EventSubcribtion attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.EventSubcribtion attributes.
     */
    public int getSubscribedCount() {
        if (m_subscribedList != null) {
            return m_subscribedList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.EventSubcribtion attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.EventSubcribtion attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.EventSubcribtion attribute
     */
    public com.sun.grid.jgdi.configuration.EventSubcribtion getSubscribed(int index) {
        initSubscribed();
        return (com.sun.grid.jgdi.configuration.EventSubcribtion)m_subscribedList.get(index);
    }
   
    /**
     *  Determine if the subscribed attribute is set
     *  @return <code>true</code> if the subscribed attribute is set
     */
    public boolean isSetSubscribed () {
        return (m_subscribedList != null) && (!m_subscribedList.isEmpty());
    }
   

    // Attribute changed ------------------------------------------------

    private boolean isChangedSet;
   
    /**
     *  Determine if the changed attribute is set
     *  @return <code>true</code> if the changed attribute is set
     */
    public boolean isSetChanged() {

        return isChangedSet;

    }
   
    private boolean m_changed;

    /**
     *   Set the changed attribute.
     *
     *   @param aChanged  the new value for the  changed attribute
     */
    public void setChanged(boolean aChanged) {   
        m_changed = aChanged;

        isChangedSet = true;

    }

    /**
     *  Get the value of the changed attribute.
     *  @return the value of the changed attribute
     */
    public boolean isChanged() {
        return m_changed;
    }


    // Attribute busyHandling ------------------------------------------------

    private boolean isBusyHandlingSet;
   
    /**
     *  Determine if the busyHandling attribute is set
     *  @return <code>true</code> if the busyHandling attribute is set
     */
    public boolean isSetBusyHandling() {

        return isBusyHandlingSet;

    }
   
    private int m_busyHandling;

    /**
     *   Set the busyHandling attribute.
     *
     *   @param aBusyHandling  the new value for the  busyHandling attribute
     */
    public void setBusyHandling(int aBusyHandling) {   
        m_busyHandling = aBusyHandling;

        isBusyHandlingSet = true;

    }

    /**
     *  Get the value of the busyHandling attribute.
     *  @return the value of the busyHandling attribute
     */
    public int getBusyHandling() {
        return m_busyHandling;
    }


    // Attribute session ------------------------------------------------
   
    /**
     *  Determine if the session attribute is set
     *  @return <code>true</code> if the session attribute is set
     */
    public boolean isSetSession() {
   
        return  (m_session != null);

    }
   
    private java.lang.String m_session;

    /**
     *   Set the session attribute.
     *
     *   @param aSession  the new value for the  session attribute
     */
    public void setSession(java.lang.String aSession) {   
        m_session = aSession;

    }

    /**
     *  Get the value of the session attribute.
     *  @return the value of the session attribute
     */
    public java.lang.String getSession() {
        return m_session;
    }


    // Attribute lastHeardFrom ------------------------------------------------

    private boolean isLastHeardFromSet;
   
    /**
     *  Determine if the lastHeardFrom attribute is set
     *  @return <code>true</code> if the lastHeardFrom attribute is set
     */
    public boolean isSetLastHeardFrom() {

        return isLastHeardFromSet;

    }
   
    private int m_lastHeardFrom;

    /**
     *   Set the lastHeardFrom attribute.
     *
     *   @param aLastHeardFrom  the new value for the  lastHeardFrom attribute
     */
    public void setLastHeardFrom(int aLastHeardFrom) {   
        m_lastHeardFrom = aLastHeardFrom;

        isLastHeardFromSet = true;

    }

    /**
     *  Get the value of the lastHeardFrom attribute.
     *  @return the value of the lastHeardFrom attribute
     */
    public int getLastHeardFrom() {
        return m_lastHeardFrom;
    }


    // Attribute lastSendTime ------------------------------------------------

    private boolean isLastSendTimeSet;
   
    /**
     *  Determine if the lastSendTime attribute is set
     *  @return <code>true</code> if the lastSendTime attribute is set
     */
    public boolean isSetLastSendTime() {

        return isLastSendTimeSet;

    }
   
    private int m_lastSendTime;

    /**
     *   Set the lastSendTime attribute.
     *
     *   @param aLastSendTime  the new value for the  lastSendTime attribute
     */
    public void setLastSendTime(int aLastSendTime) {   
        m_lastSendTime = aLastSendTime;

        isLastSendTimeSet = true;

    }

    /**
     *  Get the value of the lastSendTime attribute.
     *  @return the value of the lastSendTime attribute
     */
    public int getLastSendTime() {
        return m_lastSendTime;
    }


    // Attribute nextSendTime ------------------------------------------------

    private boolean isNextSendTimeSet;
   
    /**
     *  Determine if the nextSendTime attribute is set
     *  @return <code>true</code> if the nextSendTime attribute is set
     */
    public boolean isSetNextSendTime() {

        return isNextSendTimeSet;

    }
   
    private int m_nextSendTime;

    /**
     *   Set the nextSendTime attribute.
     *
     *   @param aNextSendTime  the new value for the  nextSendTime attribute
     */
    public void setNextSendTime(int aNextSendTime) {   
        m_nextSendTime = aNextSendTime;

        isNextSendTimeSet = true;

    }

    /**
     *  Get the value of the nextSendTime attribute.
     *  @return the value of the nextSendTime attribute
     */
    public int getNextSendTime() {
        return m_nextSendTime;
    }


    // Attribute nextNumber ------------------------------------------------

    private boolean isNextNumberSet;
   
    /**
     *  Determine if the nextNumber attribute is set
     *  @return <code>true</code> if the nextNumber attribute is set
     */
    public boolean isSetNextNumber() {

        return isNextNumberSet;

    }
   
    private int m_nextNumber;

    /**
     *   Set the nextNumber attribute.
     *
     *   @param aNextNumber  the new value for the  nextNumber attribute
     */
    public void setNextNumber(int aNextNumber) {   
        m_nextNumber = aNextNumber;

        isNextNumberSet = true;

    }

    /**
     *  Get the value of the nextNumber attribute.
     *  @return the value of the nextNumber attribute
     */
    public int getNextNumber() {
        return m_nextNumber;
    }


    // Attribute busy ------------------------------------------------

    private boolean isBusySet;
   
    /**
     *  Determine if the busy attribute is set
     *  @return <code>true</code> if the busy attribute is set
     */
    public boolean isSetBusy() {

        return isBusySet;

    }
   
    private int m_busy;

    /**
     *   Set the busy attribute.
     *
     *   @param aBusy  the new value for the  busy attribute
     */
    public void setBusy(int aBusy) {   
        m_busy = aBusy;

        isBusySet = true;

    }

    /**
     *  Get the value of the busy attribute.
     *  @return the value of the busy attribute
     */
    public int getBusy() {
        return m_busy;
    }


    // Attribute events ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.Event > m_eventsList;
   
    private void initEvents() {
        if (m_eventsList == null) {
            m_eventsList = new LinkedList< com.sun.grid.jgdi.configuration.Event >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.Event attribute.

     *   @param aevents  the new com.sun.grid.jgdi.configuration.Event attribute
     */
    public void addEvents(com.sun.grid.jgdi.configuration.Event aevents) {   
        initEvents();
        
        m_eventsList.add(aevents);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.Event attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.Event attribute
     *   @param aevents  the new com.sun.grid.jgdi.configuration.Event attribute
     */
    public void setEvents(int index, com.sun.grid.jgdi.configuration.Event aevents) {
        initEvents();
        m_eventsList.set(index, aevents);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.Event attributes.
     */
    public void removeAllEvents() {
        if (m_eventsList != null) {
            m_eventsList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.Event attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.Event attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.Event attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.Event removeEvents(int index) {
        initEvents();
        return (com.sun.grid.jgdi.configuration.Event)m_eventsList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.Event attribute.
     *  @param aevents  the com.sun.grid.jgdi.configuration.Event attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.Event attribute has been removed
     */
    public boolean removeEvents(com.sun.grid.jgdi.configuration.Event aevents) {
        initEvents();
        return m_eventsList.remove(aevents);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.Event attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.Event attributes
     */
    public List< com.sun.grid.jgdi.configuration.Event > getEventsList() {
        initEvents();
        return Collections.unmodifiableList(m_eventsList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.Event attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.Event attributes.
     */
    public int getEventsCount() {
        if (m_eventsList != null) {
            return m_eventsList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.Event attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.Event attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.Event attribute
     */
    public com.sun.grid.jgdi.configuration.Event getEvents(int index) {
        initEvents();
        return (com.sun.grid.jgdi.configuration.Event)m_eventsList.get(index);
    }
   
    /**
     *  Determine if the events attribute is set
     *  @return <code>true</code> if the events attribute is set
     */
    public boolean isSetEvents () {
        return (m_eventsList != null) && (!m_eventsList.isEmpty());
    }
   

    // Attribute state ------------------------------------------------

    private boolean isStateSet;
   
    /**
     *  Determine if the state attribute is set
     *  @return <code>true</code> if the state attribute is set
     */
    public boolean isSetState() {

        return isStateSet;

    }
   
    private int m_state;

    /**
     *   Set the state attribute.
     *
     *   @param aState  the new value for the  state attribute
     */
    public void setState(int aState) {   
        m_state = aState;

        isStateSet = true;

    }

    /**
     *  Get the value of the state attribute.
     *  @return the value of the state attribute
     */
    public int getState() {
        return m_state;
    }




    /**
     *  Is the primary key information equal to the primary key information
     *  of <code>obj</code>.
     *
     *  @param obj   the compared object
     *  @return <code>true</code> if the primary key information is equal to the
     *          primary key informations of <code>obj</code>.
     */
    public boolean equals(Object obj) {

        return (obj instanceof EventClientImpl && getId() == ((com.sun.grid.jgdi.configuration.EventClient)obj).getId());

    }

    
    
    public boolean equalsCompletely(Object obj) {
        Logger logger = Logger.getLogger(getClass().getName());
        if (obj instanceof  EventClientImpl) {
            com.sun.grid.jgdi.configuration.EventClient obj1 = (com.sun.grid.jgdi.configuration.EventClient)obj;

            {
                int value1 = getId();
                int value2 = obj1.getId();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes EV_id are not equal");
                }
                return false;
            }

            }

            {
                java.lang.String value1 = getName();
                java.lang.String value2 = obj1.getName();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute EV_name of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes EV_name are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                java.lang.String value1 = getHost();
                java.lang.String value2 = obj1.getHost();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute EV_host of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes EV_host are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                java.lang.String value1 = getCommproc();
                java.lang.String value2 = obj1.getCommproc();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute EV_commproc of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes EV_commproc are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                int value1 = getCommid();
                int value2 = obj1.getCommid();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes EV_commid are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getUid();
                int value2 = obj1.getUid();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes EV_uid are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getDTime();
                int value2 = obj1.getDTime();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes EV_d_time are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getFlushDelay();
                int value2 = obj1.getFlushDelay();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes EV_flush_delay are not equal");
                }
                return false;
            }

            }

            {
                int subscribedCount = getSubscribedCount();
                if (subscribedCount != obj1.getSubscribedCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists subscribed has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < subscribedCount; i++) {
                    com.sun.grid.jgdi.configuration.EventSubcribtion value1 = getSubscribed(i);
                    com.sun.grid.jgdi.configuration.EventSubcribtion value2 = obj1.getSubscribed(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute EV_subscribed of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

                } // end of for
            }

            {
                boolean value1 = isChanged();
                boolean value2 = obj1.isChanged();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes EV_changed are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getBusyHandling();
                int value2 = obj1.getBusyHandling();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes EV_busy_handling are not equal");
                }
                return false;
            }

            }

            {
                java.lang.String value1 = getSession();
                java.lang.String value2 = obj1.getSession();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute EV_session of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes EV_session are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                int value1 = getLastHeardFrom();
                int value2 = obj1.getLastHeardFrom();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes EV_last_heard_from are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getLastSendTime();
                int value2 = obj1.getLastSendTime();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes EV_last_send_time are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getNextSendTime();
                int value2 = obj1.getNextSendTime();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes EV_next_send_time are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getNextNumber();
                int value2 = obj1.getNextNumber();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes EV_next_number are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getBusy();
                int value2 = obj1.getBusy();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes EV_busy are not equal");
                }
                return false;
            }

            }

            {
                int eventsCount = getEventsCount();
                if (eventsCount != obj1.getEventsCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists events has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < eventsCount; i++) {
                    com.sun.grid.jgdi.configuration.Event value1 = getEvents(i);
                    com.sun.grid.jgdi.configuration.Event value2 = obj1.getEvents(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute EV_events of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

                } // end of for
            }

            {
                int value1 = getState();
                int value2 = obj1.getState();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes EV_state are not equal");
                }
                return false;
            }

            }

            return true;
        } else {
            return true;
        }
    }
  
    public java.lang.String toString() {
        StringBuilder ret = new StringBuilder();
        ret.append("EventClientImpl(");

        ret.append(getId());

        ret.append(")");
        return ret.toString();
    }



    public java.lang.String dump() {
        StringBuilder sb = new StringBuilder();

            {
                int value = getId();
                sb.append("Id = " + value + "\n");
            }

            {
                java.lang.String value = getName();
                sb.append("Name = " + value + "\n");
            }

            {
                java.lang.String value = getHost();
                sb.append("Host = " + value + "\n");
            }

            {
                java.lang.String value = getCommproc();
                sb.append("Commproc = " + value + "\n");
            }

            {
                int value = getCommid();
                sb.append("Commid = " + value + "\n");
            }

            {
                int value = getUid();
                sb.append("Uid = " + value + "\n");
            }

            {
                int value = getDTime();
                sb.append("DTime = " + value + "\n");
            }

            {
                int value = getFlushDelay();
                sb.append("FlushDelay = " + value + "\n");
            }

            int subscribedCount = getSubscribedCount();
            for (int i = 0; i < subscribedCount; i++) {
                com.sun.grid.jgdi.configuration.EventSubcribtion value = getSubscribed(i);
                
                sb.append("Subscribed[" + i + "] = " + value.dump() + "\n");
                
            } // end of for

            {
                boolean value = isChanged();
                sb.append("Changed = " + value + "\n");
            }

            {
                int value = getBusyHandling();
                sb.append("BusyHandling = " + value + "\n");
            }

            {
                java.lang.String value = getSession();
                sb.append("Session = " + value + "\n");
            }

            {
                int value = getLastHeardFrom();
                sb.append("LastHeardFrom = " + value + "\n");
            }

            {
                int value = getLastSendTime();
                sb.append("LastSendTime = " + value + "\n");
            }

            {
                int value = getNextSendTime();
                sb.append("NextSendTime = " + value + "\n");
            }

            {
                int value = getNextNumber();
                sb.append("NextNumber = " + value + "\n");
            }

            {
                int value = getBusy();
                sb.append("Busy = " + value + "\n");
            }

            int eventsCount = getEventsCount();
            for (int i = 0; i < eventsCount; i++) {
                com.sun.grid.jgdi.configuration.Event value = getEvents(i);
                
                sb.append("Events[" + i + "] = " + value.dump() + "\n");
                
            } // end of for

            {
                int value = getState();
                sb.append("State = " + value + "\n");
            }

        return sb.toString();
    }    

 
}
