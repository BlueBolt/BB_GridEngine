/*___INFO__MARK_BEGIN__*/
/*************************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  the Sun Industry Standards Source License Version 1.2
 *
 *  Sun Microsystems Inc., March, 2001
 *
 *
 *  Sun Industry Standards Source License Version 1.2
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.2 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *   Copyright: 2001 by Sun Microsystems, Inc.
 *
 *   All Rights Reserved.
 *
 ************************************************************************/
/*___INFO__MARK_END__*/
/**
 *  Generated from javamodel_impl.jsp
 *  !!! DO NOT EDIT THIS FILE !!!
 */

package com.sun.grid.jgdi.configuration;

import javax.management.*;
import com.sun.grid.jgdi.configuration.GEObject;
import java.util.List;
import java.util.LinkedList;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.logging.Logger;
import java.util.logging.Level;

/**
 *  Java representation of the cull object PN_Type
 *  defined in sge_all_listsL.template
 *
 *  <p><strong>Warning:</strong>  The  PathNameImpl class will 
 *  not be compatible with future Sun&trade; Grid Engine releases.</p>
 */
public class PathNameImpl extends    GEObjectImpl implements PathName {


   /**
    *  Create a new instance of PathNameImpl. The new instance
    *  will not be initialized with the default values.
    */
   public PathNameImpl() {
      this(false);
   }
   
   /**
    *   Create a new instanceof
    *   @param  initWithDefaultValues if <code>true</code> the new instance will
    *                                 be initialized with the default values as defined
    *                                 in the cull definition.
    */
   public PathNameImpl(boolean initWithDefaultValues) { 

      if (initWithDefaultValues) {     
    }

  } // end of default constructor
  
  // --- newInstance method with primary key field
  

   /**
    *  Create a new instance of PathNameImpl
    */
   public PathNameImpl(java.lang.String path ) {

   
         setPath(path);

    }



    // Attribute path ------------------------------------------------
   
    /**
     *  Determine if the path attribute is set
     *  @return <code>true</code> if the path attribute is set
     */
    public boolean isSetPath() {
   
        return  (m_path != null);

    }
   
    private java.lang.String m_path;

    /**
     *   Set the path attribute.
     *
     *   @param aPath  the new value for the  path attribute
     */
    public void setPath(java.lang.String aPath) {   
        m_path = aPath;

    }

    /**
     *  Get the value of the path attribute.
     *  @return the value of the path attribute
     */
    public java.lang.String getPath() {
        return m_path;
    }


    // Attribute host ------------------------------------------------
   
    /**
     *  Determine if the host attribute is set
     *  @return <code>true</code> if the host attribute is set
     */
    public boolean isSetHost() {
   
        return  (m_host != null);

    }
   
    private java.lang.String m_host;

    /**
     *   Set the host attribute.
     *
     *   @param aHost  the new value for the  host attribute
     */
    public void setHost(java.lang.String aHost) {   
        m_host = aHost;

    }

    /**
     *  Get the value of the host attribute.
     *  @return the value of the host attribute
     */
    public java.lang.String getHost() {
        return m_host;
    }


    // Attribute fileHost ------------------------------------------------
   
    /**
     *  Determine if the fileHost attribute is set
     *  @return <code>true</code> if the fileHost attribute is set
     */
    public boolean isSetFileHost() {
   
        return  (m_fileHost != null);

    }
   
    private java.lang.String m_fileHost;

    /**
     *   Set the fileHost attribute.
     *
     *   @param aFileHost  the new value for the  fileHost attribute
     */
    public void setFileHost(java.lang.String aFileHost) {   
        m_fileHost = aFileHost;

    }

    /**
     *  Get the value of the fileHost attribute.
     *  @return the value of the fileHost attribute
     */
    public java.lang.String getFileHost() {
        return m_fileHost;
    }


    // Attribute fileStaging ------------------------------------------------

    private boolean isFileStagingSet;
   
    /**
     *  Determine if the fileStaging attribute is set
     *  @return <code>true</code> if the fileStaging attribute is set
     */
    public boolean isSetFileStaging() {

        return isFileStagingSet;

    }
   
    private boolean m_fileStaging;

    /**
     *   Set the fileStaging attribute.
     *
     *   @param aFileStaging  the new value for the  fileStaging attribute
     */
    public void setFileStaging(boolean aFileStaging) {   
        m_fileStaging = aFileStaging;

        isFileStagingSet = true;

    }

    /**
     *  Get the value of the fileStaging attribute.
     *  @return the value of the fileStaging attribute
     */
    public boolean isFileStaging() {
        return m_fileStaging;
    }




    /**
     *  Is the primary key information equal to the primary key information
     *  of <code>obj</code>.
     *
     *  @param obj   the compared object
     *  @return <code>true</code> if the primary key information is equal to the
     *          primary key informations of <code>obj</code>.
     */
    public boolean equals(Object obj) {

        return (obj instanceof PathNameImpl && getPath().equals(((com.sun.grid.jgdi.configuration.PathName)obj).getPath()));

    }

    
    
    public boolean equalsCompletely(Object obj) {
        Logger logger = Logger.getLogger(getClass().getName());
        if (obj instanceof  PathNameImpl) {
            com.sun.grid.jgdi.configuration.PathName obj1 = (com.sun.grid.jgdi.configuration.PathName)obj;

            {
                java.lang.String value1 = getPath();
                java.lang.String value2 = obj1.getPath();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute PN_path of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes PN_path are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                java.lang.String value1 = getHost();
                java.lang.String value2 = obj1.getHost();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute PN_host of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes PN_host are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                java.lang.String value1 = getFileHost();
                java.lang.String value2 = obj1.getFileHost();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute PN_file_host of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes PN_file_host are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                boolean value1 = isFileStaging();
                boolean value2 = obj1.isFileStaging();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes PN_file_staging are not equal");
                }
                return false;
            }

            }

            return true;
        } else {
            return true;
        }
    }
  
    public java.lang.String toString() {
        StringBuilder ret = new StringBuilder();
        ret.append("PathNameImpl(");

        ret.append(getPath());

        ret.append(")");
        return ret.toString();
    }



    public java.lang.String dump() {
        StringBuilder sb = new StringBuilder();

            {
                java.lang.String value = getPath();
                sb.append("Path = " + value + "\n");
            }

            {
                java.lang.String value = getHost();
                sb.append("Host = " + value + "\n");
            }

            {
                java.lang.String value = getFileHost();
                sb.append("FileHost = " + value + "\n");
            }

            {
                boolean value = isFileStaging();
                sb.append("FileStaging = " + value + "\n");
            }

        return sb.toString();
    }    

 
}
