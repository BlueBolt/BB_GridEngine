/*___INFO__MARK_BEGIN__*/
/*************************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  the Sun Industry Standards Source License Version 1.2
 *
 *  Sun Microsystems Inc., March, 2001
 *
 *
 *  Sun Industry Standards Source License Version 1.2
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.2 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *   Copyright: 2001 by Sun Microsystems, Inc.
 *
 *   All Rights Reserved.
 *
 ************************************************************************/
/*___INFO__MARK_END__*/
/**
 *  Generated from javamodel.jsp
 *  !!! DO NOT EDIT THIS FILE !!!
 */

package com.sun.grid.jgdi.configuration;

import com.sun.grid.jgdi.configuration.GEObject;
import java.util.List;
import java.util.Set;

/**
 *  Java representation of the cull object CQ_Type
 *  defined in sge_all_listsL.template
 *
 *  <p><strong>Warning:</strong>  The  ClusterQueue class will 
 *  not be compatible with future Sun&trade; Grid Engine releases.</p>
 *
 */
public interface ClusterQueue extends 
    GEObject  { 

    // Attribute name ------------------------------------------------

       
    /**
     *   Set the name attribute.
     *
     *   @param aName  the new value for the  name attribute
     */
    public void setName(java.lang.String aName);
  
    /**
     *  Get the value of the name attribute.
     *  @return the value of the name attribute
     */
    public java.lang.String getName();
   

 
    /**
     *  Determine if any name attribute is set
     *  @return <code>true</code> if the name attribute is set
     */
    public boolean isSetName();


    // Attribute hostlist ------------------------------------------------


    /**
     *   Get a unmodifiable list of all java.lang.String attributes.
     *
     *   @return Unmodifiable list with all java.lang.String attributes
     */
    public List< java.lang.String >  getHostlistList();

    /**
     *  Get the number of java.lang.String attributes.
     *
     *  @return The number of java.lang.String attributes.
     */
    public int getHostlistCount();
 
    /**
     *  Get a java.lang.String attribute at an index.
     *  @param index  the index of the java.lang.String attribute which should be
     *                removed
     *  @return the java.lang.String attribute
     */
    public java.lang.String getHostlist(int index);
   

    /**
     *   Add a java.lang.String attribute.
     *   @param ahostlist  the new java.lang.String attribute
     */
    public void addHostlist(java.lang.String ahostlist);
   
    /**
     *   Set a java.lang.String attribute.
     *   @param index   index of the java.lang.String attribute
     *   @param ahostlist  the new java.lang.String attribute
     */
    public void setHostlist(int index, java.lang.String ahostlist);

    /**
     *  Remove all java.lang.String attributes.
     */
    public void removeAllHostlist();
   
    /**
     *  Remote a java.lang.String attribute at an index.
     *  @param index  the index of the java.lang.String attribute which should be
     *                removed
     *  @return the removed java.lang.String attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public java.lang.String removeHostlist(int index);

    /**
     *  Remote a specific java.lang.String attribute.
     *  @param ahostlist  the java.lang.String attribute which should be
     *                         removed
     *  @return <code>true</code> if the java.lang.String attribute has been removed
     */
    public boolean removeHostlist(java.lang.String ahostlist);
   
       
 
    /**
     *  Determine if any hostlist attribute is set
     *  @return <code>true</code> if the hostlist attribute is set
     */
    public boolean isSetHostlist();


    // Attribute qinstances ------------------------------------------------


    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.QueueInstance attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.QueueInstance attributes
     */
    public List< com.sun.grid.jgdi.configuration.QueueInstance >  getQinstancesList();

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.QueueInstance attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.QueueInstance attributes.
     */
    public int getQinstancesCount();
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.QueueInstance attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.QueueInstance attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.QueueInstance attribute
     */
    public com.sun.grid.jgdi.configuration.QueueInstance getQinstances(int index);
   
       
 
    /**
     *  Determine if any qinstances attribute is set
     *  @return <code>true</code> if the qinstances attribute is set
     */
    public boolean isSetQinstances();


    // Attribute seqNo ------------------------------------------------

        // keyClassName for SGE_HOST = String
     
   
    /**
     *  <p>Get the default value of the attribute seqNo.</p>
     *  @return the default value of the attribute seqNo
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public int getDefaultSeqNo();

    /**
     *  <p>Get the seqNo attribute for <code>hostname</code>.</p>
     *  @param   hostname   the hostname
     *  @return  the seqNo attribute for <code>hostname</code> or the
     *           default value of  seqNo
     */
    public int getSeqNo(String hostname);
   
    /**
     *  Get the set of <code>hostname</code>s which have the attribute seqNo set.
     *  @return set of <code>hostname</code>s
     */
    public Set<String> getSeqNoKeys();
   
    /**
     *  Get the number of hostnames which have the attribute seqNo set.
     *  @return the number of hostnames which have the attribute seqNo set.
     */
    public int getSeqNoCount();
   
    /**
     *  Determine if any seqNo attribute is for <code>hostname</code> is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the seqNo attribute is set
     */
    public boolean isSetSeqNo(String hostname);
   
   
          
    /**
     *  <p>Put the attribute seqNo for <code>hostname</code>.</p>
     *
     *  @param hostname   the hostname
     *  @param seqNo the seqNo
     */
    public void putSeqNo(String hostname, int seqNo);
   
   
    /**
     *  Set <code>seqNo</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param seqNo  the seqNo attribute
     */
    public void setDefaultSeqNo(int seqNo);



    /**
     *  <p>remove the attribute seqNo for <code>hostname</code>.</p>
     *
     *  @param hostname  The hostname
     *  @return the value of the attribute for <code>hostname</code> or <code>null</code>
     *          if the attribute was not defined for <code>hostname</code>.
     */
    public java.lang.Integer removeSeqNo(String hostname);
   
    /**
     *  <p>Remove the attribute seqNo for all hostnames.</p>
     */
    public void removeAllSeqNo();


 
    /**
     *  Determine if any seqNo attribute is set
     *  @return <code>true</code> if the seqNo attribute is set
     */
    public boolean isSetSeqNo();


    // Attribute nsuspend ------------------------------------------------

        // keyClassName for SGE_HOST = String
     
   
    /**
     *  <p>Get the default value of the attribute nsuspend.</p>
     *  @return the default value of the attribute nsuspend
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public int getDefaultNsuspend();

    /**
     *  <p>Get the nsuspend attribute for <code>hostname</code>.</p>
     *  @param   hostname   the hostname
     *  @return  the nsuspend attribute for <code>hostname</code> or the
     *           default value of  nsuspend
     */
    public int getNsuspend(String hostname);
   
    /**
     *  Get the set of <code>hostname</code>s which have the attribute nsuspend set.
     *  @return set of <code>hostname</code>s
     */
    public Set<String> getNsuspendKeys();
   
    /**
     *  Get the number of hostnames which have the attribute nsuspend set.
     *  @return the number of hostnames which have the attribute nsuspend set.
     */
    public int getNsuspendCount();
   
    /**
     *  Determine if any nsuspend attribute is for <code>hostname</code> is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the nsuspend attribute is set
     */
    public boolean isSetNsuspend(String hostname);
   
   
          
    /**
     *  <p>Put the attribute nsuspend for <code>hostname</code>.</p>
     *
     *  @param hostname   the hostname
     *  @param nsuspend the nsuspend
     */
    public void putNsuspend(String hostname, int nsuspend);
   
   
    /**
     *  Set <code>nsuspend</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param nsuspend  the nsuspend attribute
     */
    public void setDefaultNsuspend(int nsuspend);



    /**
     *  <p>remove the attribute nsuspend for <code>hostname</code>.</p>
     *
     *  @param hostname  The hostname
     *  @return the value of the attribute for <code>hostname</code> or <code>null</code>
     *          if the attribute was not defined for <code>hostname</code>.
     */
    public java.lang.Integer removeNsuspend(String hostname);
   
    /**
     *  <p>Remove the attribute nsuspend for all hostnames.</p>
     */
    public void removeAllNsuspend();


 
    /**
     *  Determine if any nsuspend attribute is set
     *  @return <code>true</code> if the nsuspend attribute is set
     */
    public boolean isSetNsuspend();


    // Attribute jobSlots ------------------------------------------------

        // keyClassName for SGE_HOST = String
     
   
    /**
     *  <p>Get the default value of the attribute jobSlots.</p>
     *  @return the default value of the attribute jobSlots
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public int getDefaultJobSlots();

    /**
     *  <p>Get the jobSlots attribute for <code>hostname</code>.</p>
     *  @param   hostname   the hostname
     *  @return  the jobSlots attribute for <code>hostname</code> or the
     *           default value of  jobSlots
     */
    public int getJobSlots(String hostname);
   
    /**
     *  Get the set of <code>hostname</code>s which have the attribute jobSlots set.
     *  @return set of <code>hostname</code>s
     */
    public Set<String> getJobSlotsKeys();
   
    /**
     *  Get the number of hostnames which have the attribute jobSlots set.
     *  @return the number of hostnames which have the attribute jobSlots set.
     */
    public int getJobSlotsCount();
   
    /**
     *  Determine if any jobSlots attribute is for <code>hostname</code> is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the jobSlots attribute is set
     */
    public boolean isSetJobSlots(String hostname);
   
   
          
    /**
     *  <p>Put the attribute jobSlots for <code>hostname</code>.</p>
     *
     *  @param hostname   the hostname
     *  @param jobSlots the jobSlots
     */
    public void putJobSlots(String hostname, int jobSlots);
   
   
    /**
     *  Set <code>jobSlots</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param jobSlots  the jobSlots attribute
     */
    public void setDefaultJobSlots(int jobSlots);



    /**
     *  <p>remove the attribute jobSlots for <code>hostname</code>.</p>
     *
     *  @param hostname  The hostname
     *  @return the value of the attribute for <code>hostname</code> or <code>null</code>
     *          if the attribute was not defined for <code>hostname</code>.
     */
    public java.lang.Integer removeJobSlots(String hostname);
   
    /**
     *  <p>Remove the attribute jobSlots for all hostnames.</p>
     */
    public void removeAllJobSlots();


 
    /**
     *  Determine if any jobSlots attribute is set
     *  @return <code>true</code> if the jobSlots attribute is set
     */
    public boolean isSetJobSlots();


    // Attribute rerun ------------------------------------------------

        // keyClassName for SGE_HOST = String
     
   
    /**
     *  <p>Get the default value of the attribute rerun.</p>
     *  @return the default value of the attribute rerun
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public boolean getDefaultRerun();

    /**
     *  <p>Get the rerun attribute for <code>hostname</code>.</p>
     *  @param   hostname   the hostname
     *  @return  the rerun attribute for <code>hostname</code> or the
     *           default value of  rerun
     */
    public boolean getRerun(String hostname);
   
    /**
     *  Get the set of <code>hostname</code>s which have the attribute rerun set.
     *  @return set of <code>hostname</code>s
     */
    public Set<String> getRerunKeys();
   
    /**
     *  Get the number of hostnames which have the attribute rerun set.
     *  @return the number of hostnames which have the attribute rerun set.
     */
    public int getRerunCount();
   
    /**
     *  Determine if any rerun attribute is for <code>hostname</code> is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the rerun attribute is set
     */
    public boolean isSetRerun(String hostname);
   
   
          
    /**
     *  <p>Put the attribute rerun for <code>hostname</code>.</p>
     *
     *  @param hostname   the hostname
     *  @param rerun the rerun
     */
    public void putRerun(String hostname, boolean rerun);
   
   
    /**
     *  Set <code>rerun</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param rerun  the rerun attribute
     */
    public void setDefaultRerun(boolean rerun);



    /**
     *  <p>remove the attribute rerun for <code>hostname</code>.</p>
     *
     *  @param hostname  The hostname
     *  @return the value of the attribute for <code>hostname</code> or <code>null</code>
     *          if the attribute was not defined for <code>hostname</code>.
     */
    public java.lang.Boolean removeRerun(String hostname);
   
    /**
     *  <p>Remove the attribute rerun for all hostnames.</p>
     */
    public void removeAllRerun();


 
    /**
     *  Determine if any rerun attribute is set
     *  @return <code>true</code> if the rerun attribute is set
     */
    public boolean isSetRerun();


    // Attribute sFsize ------------------------------------------------

        // keyClassName for SGE_HOST = String
     
   
    /**
     *  <p>Get the default value of the attribute sFsize.</p>
     *  @return the default value of the attribute sFsize
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultSFsize();

    /**
     *  <p>Get the sFsize attribute for <code>hostname</code>.</p>
     *  @param   hostname   the hostname
     *  @return  the sFsize attribute for <code>hostname</code> or the
     *           default value of  sFsize
     */
    public String getSFsize(String hostname);
   
    /**
     *  Get the set of <code>hostname</code>s which have the attribute sFsize set.
     *  @return set of <code>hostname</code>s
     */
    public Set<String> getSFsizeKeys();
   
    /**
     *  Get the number of hostnames which have the attribute sFsize set.
     *  @return the number of hostnames which have the attribute sFsize set.
     */
    public int getSFsizeCount();
   
    /**
     *  Determine if any sFsize attribute is for <code>hostname</code> is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the sFsize attribute is set
     */
    public boolean isSetSFsize(String hostname);
   
   
          
    /**
     *  <p>Put the attribute sFsize for <code>hostname</code>.</p>
     *
     *  @param hostname   the hostname
     *  @param sFSize the sFSize
     */
    public void putSFsize(String hostname, String sFSize);
   
   
    /**
     *  Set <code>sFSize</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param sFSize  the sFSize attribute
     */
    public void setDefaultSFsize(String sFSize);



    /**
     *  <p>remove the attribute sFsize for <code>hostname</code>.</p>
     *
     *  @param hostname  The hostname
     *  @return the value of the attribute for <code>hostname</code> or <code>null</code>
     *          if the attribute was not defined for <code>hostname</code>.
     */
    public java.lang.String removeSFsize(String hostname);
   
    /**
     *  <p>Remove the attribute sFsize for all hostnames.</p>
     */
    public void removeAllSFsize();


 
    /**
     *  Determine if any sFsize attribute is set
     *  @return <code>true</code> if the sFsize attribute is set
     */
    public boolean isSetSFsize();


    // Attribute hFsize ------------------------------------------------

        // keyClassName for SGE_HOST = String
     
   
    /**
     *  <p>Get the default value of the attribute hFsize.</p>
     *  @return the default value of the attribute hFsize
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultHFsize();

    /**
     *  <p>Get the hFsize attribute for <code>hostname</code>.</p>
     *  @param   hostname   the hostname
     *  @return  the hFsize attribute for <code>hostname</code> or the
     *           default value of  hFsize
     */
    public String getHFsize(String hostname);
   
    /**
     *  Get the set of <code>hostname</code>s which have the attribute hFsize set.
     *  @return set of <code>hostname</code>s
     */
    public Set<String> getHFsizeKeys();
   
    /**
     *  Get the number of hostnames which have the attribute hFsize set.
     *  @return the number of hostnames which have the attribute hFsize set.
     */
    public int getHFsizeCount();
   
    /**
     *  Determine if any hFsize attribute is for <code>hostname</code> is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the hFsize attribute is set
     */
    public boolean isSetHFsize(String hostname);
   
   
          
    /**
     *  <p>Put the attribute hFsize for <code>hostname</code>.</p>
     *
     *  @param hostname   the hostname
     *  @param hFSize the hFSize
     */
    public void putHFsize(String hostname, String hFSize);
   
   
    /**
     *  Set <code>hFSize</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param hFSize  the hFSize attribute
     */
    public void setDefaultHFsize(String hFSize);



    /**
     *  <p>remove the attribute hFsize for <code>hostname</code>.</p>
     *
     *  @param hostname  The hostname
     *  @return the value of the attribute for <code>hostname</code> or <code>null</code>
     *          if the attribute was not defined for <code>hostname</code>.
     */
    public java.lang.String removeHFsize(String hostname);
   
    /**
     *  <p>Remove the attribute hFsize for all hostnames.</p>
     */
    public void removeAllHFsize();


 
    /**
     *  Determine if any hFsize attribute is set
     *  @return <code>true</code> if the hFsize attribute is set
     */
    public boolean isSetHFsize();


    // Attribute sData ------------------------------------------------

        // keyClassName for SGE_HOST = String
     
   
    /**
     *  <p>Get the default value of the attribute sData.</p>
     *  @return the default value of the attribute sData
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultSData();

    /**
     *  <p>Get the sData attribute for <code>hostname</code>.</p>
     *  @param   hostname   the hostname
     *  @return  the sData attribute for <code>hostname</code> or the
     *           default value of  sData
     */
    public String getSData(String hostname);
   
    /**
     *  Get the set of <code>hostname</code>s which have the attribute sData set.
     *  @return set of <code>hostname</code>s
     */
    public Set<String> getSDataKeys();
   
    /**
     *  Get the number of hostnames which have the attribute sData set.
     *  @return the number of hostnames which have the attribute sData set.
     */
    public int getSDataCount();
   
    /**
     *  Determine if any sData attribute is for <code>hostname</code> is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the sData attribute is set
     */
    public boolean isSetSData(String hostname);
   
   
          
    /**
     *  <p>Put the attribute sData for <code>hostname</code>.</p>
     *
     *  @param hostname   the hostname
     *  @param sData the sData
     */
    public void putSData(String hostname, String sData);
   
   
    /**
     *  Set <code>sData</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param sData  the sData attribute
     */
    public void setDefaultSData(String sData);



    /**
     *  <p>remove the attribute sData for <code>hostname</code>.</p>
     *
     *  @param hostname  The hostname
     *  @return the value of the attribute for <code>hostname</code> or <code>null</code>
     *          if the attribute was not defined for <code>hostname</code>.
     */
    public java.lang.String removeSData(String hostname);
   
    /**
     *  <p>Remove the attribute sData for all hostnames.</p>
     */
    public void removeAllSData();


 
    /**
     *  Determine if any sData attribute is set
     *  @return <code>true</code> if the sData attribute is set
     */
    public boolean isSetSData();


    // Attribute hData ------------------------------------------------

        // keyClassName for SGE_HOST = String
     
   
    /**
     *  <p>Get the default value of the attribute hData.</p>
     *  @return the default value of the attribute hData
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultHData();

    /**
     *  <p>Get the hData attribute for <code>hostname</code>.</p>
     *  @param   hostname   the hostname
     *  @return  the hData attribute for <code>hostname</code> or the
     *           default value of  hData
     */
    public String getHData(String hostname);
   
    /**
     *  Get the set of <code>hostname</code>s which have the attribute hData set.
     *  @return set of <code>hostname</code>s
     */
    public Set<String> getHDataKeys();
   
    /**
     *  Get the number of hostnames which have the attribute hData set.
     *  @return the number of hostnames which have the attribute hData set.
     */
    public int getHDataCount();
   
    /**
     *  Determine if any hData attribute is for <code>hostname</code> is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the hData attribute is set
     */
    public boolean isSetHData(String hostname);
   
   
          
    /**
     *  <p>Put the attribute hData for <code>hostname</code>.</p>
     *
     *  @param hostname   the hostname
     *  @param hData the hData
     */
    public void putHData(String hostname, String hData);
   
   
    /**
     *  Set <code>hData</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param hData  the hData attribute
     */
    public void setDefaultHData(String hData);



    /**
     *  <p>remove the attribute hData for <code>hostname</code>.</p>
     *
     *  @param hostname  The hostname
     *  @return the value of the attribute for <code>hostname</code> or <code>null</code>
     *          if the attribute was not defined for <code>hostname</code>.
     */
    public java.lang.String removeHData(String hostname);
   
    /**
     *  <p>Remove the attribute hData for all hostnames.</p>
     */
    public void removeAllHData();


 
    /**
     *  Determine if any hData attribute is set
     *  @return <code>true</code> if the hData attribute is set
     */
    public boolean isSetHData();


    // Attribute sStack ------------------------------------------------

        // keyClassName for SGE_HOST = String
     
   
    /**
     *  <p>Get the default value of the attribute sStack.</p>
     *  @return the default value of the attribute sStack
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultSStack();

    /**
     *  <p>Get the sStack attribute for <code>hostname</code>.</p>
     *  @param   hostname   the hostname
     *  @return  the sStack attribute for <code>hostname</code> or the
     *           default value of  sStack
     */
    public String getSStack(String hostname);
   
    /**
     *  Get the set of <code>hostname</code>s which have the attribute sStack set.
     *  @return set of <code>hostname</code>s
     */
    public Set<String> getSStackKeys();
   
    /**
     *  Get the number of hostnames which have the attribute sStack set.
     *  @return the number of hostnames which have the attribute sStack set.
     */
    public int getSStackCount();
   
    /**
     *  Determine if any sStack attribute is for <code>hostname</code> is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the sStack attribute is set
     */
    public boolean isSetSStack(String hostname);
   
   
          
    /**
     *  <p>Put the attribute sStack for <code>hostname</code>.</p>
     *
     *  @param hostname   the hostname
     *  @param sStack the sStack
     */
    public void putSStack(String hostname, String sStack);
   
   
    /**
     *  Set <code>sStack</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param sStack  the sStack attribute
     */
    public void setDefaultSStack(String sStack);



    /**
     *  <p>remove the attribute sStack for <code>hostname</code>.</p>
     *
     *  @param hostname  The hostname
     *  @return the value of the attribute for <code>hostname</code> or <code>null</code>
     *          if the attribute was not defined for <code>hostname</code>.
     */
    public java.lang.String removeSStack(String hostname);
   
    /**
     *  <p>Remove the attribute sStack for all hostnames.</p>
     */
    public void removeAllSStack();


 
    /**
     *  Determine if any sStack attribute is set
     *  @return <code>true</code> if the sStack attribute is set
     */
    public boolean isSetSStack();


    // Attribute hStack ------------------------------------------------

        // keyClassName for SGE_HOST = String
     
   
    /**
     *  <p>Get the default value of the attribute hStack.</p>
     *  @return the default value of the attribute hStack
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultHStack();

    /**
     *  <p>Get the hStack attribute for <code>hostname</code>.</p>
     *  @param   hostname   the hostname
     *  @return  the hStack attribute for <code>hostname</code> or the
     *           default value of  hStack
     */
    public String getHStack(String hostname);
   
    /**
     *  Get the set of <code>hostname</code>s which have the attribute hStack set.
     *  @return set of <code>hostname</code>s
     */
    public Set<String> getHStackKeys();
   
    /**
     *  Get the number of hostnames which have the attribute hStack set.
     *  @return the number of hostnames which have the attribute hStack set.
     */
    public int getHStackCount();
   
    /**
     *  Determine if any hStack attribute is for <code>hostname</code> is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the hStack attribute is set
     */
    public boolean isSetHStack(String hostname);
   
   
          
    /**
     *  <p>Put the attribute hStack for <code>hostname</code>.</p>
     *
     *  @param hostname   the hostname
     *  @param hStack the hStack
     */
    public void putHStack(String hostname, String hStack);
   
   
    /**
     *  Set <code>hStack</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param hStack  the hStack attribute
     */
    public void setDefaultHStack(String hStack);



    /**
     *  <p>remove the attribute hStack for <code>hostname</code>.</p>
     *
     *  @param hostname  The hostname
     *  @return the value of the attribute for <code>hostname</code> or <code>null</code>
     *          if the attribute was not defined for <code>hostname</code>.
     */
    public java.lang.String removeHStack(String hostname);
   
    /**
     *  <p>Remove the attribute hStack for all hostnames.</p>
     */
    public void removeAllHStack();


 
    /**
     *  Determine if any hStack attribute is set
     *  @return <code>true</code> if the hStack attribute is set
     */
    public boolean isSetHStack();


    // Attribute sCore ------------------------------------------------

        // keyClassName for SGE_HOST = String
     
   
    /**
     *  <p>Get the default value of the attribute sCore.</p>
     *  @return the default value of the attribute sCore
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultSCore();

    /**
     *  <p>Get the sCore attribute for <code>hostname</code>.</p>
     *  @param   hostname   the hostname
     *  @return  the sCore attribute for <code>hostname</code> or the
     *           default value of  sCore
     */
    public String getSCore(String hostname);
   
    /**
     *  Get the set of <code>hostname</code>s which have the attribute sCore set.
     *  @return set of <code>hostname</code>s
     */
    public Set<String> getSCoreKeys();
   
    /**
     *  Get the number of hostnames which have the attribute sCore set.
     *  @return the number of hostnames which have the attribute sCore set.
     */
    public int getSCoreCount();
   
    /**
     *  Determine if any sCore attribute is for <code>hostname</code> is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the sCore attribute is set
     */
    public boolean isSetSCore(String hostname);
   
   
          
    /**
     *  <p>Put the attribute sCore for <code>hostname</code>.</p>
     *
     *  @param hostname   the hostname
     *  @param sCore the sCore
     */
    public void putSCore(String hostname, String sCore);
   
   
    /**
     *  Set <code>sCore</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param sCore  the sCore attribute
     */
    public void setDefaultSCore(String sCore);



    /**
     *  <p>remove the attribute sCore for <code>hostname</code>.</p>
     *
     *  @param hostname  The hostname
     *  @return the value of the attribute for <code>hostname</code> or <code>null</code>
     *          if the attribute was not defined for <code>hostname</code>.
     */
    public java.lang.String removeSCore(String hostname);
   
    /**
     *  <p>Remove the attribute sCore for all hostnames.</p>
     */
    public void removeAllSCore();


 
    /**
     *  Determine if any sCore attribute is set
     *  @return <code>true</code> if the sCore attribute is set
     */
    public boolean isSetSCore();


    // Attribute hCore ------------------------------------------------

        // keyClassName for SGE_HOST = String
     
   
    /**
     *  <p>Get the default value of the attribute hCore.</p>
     *  @return the default value of the attribute hCore
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultHCore();

    /**
     *  <p>Get the hCore attribute for <code>hostname</code>.</p>
     *  @param   hostname   the hostname
     *  @return  the hCore attribute for <code>hostname</code> or the
     *           default value of  hCore
     */
    public String getHCore(String hostname);
   
    /**
     *  Get the set of <code>hostname</code>s which have the attribute hCore set.
     *  @return set of <code>hostname</code>s
     */
    public Set<String> getHCoreKeys();
   
    /**
     *  Get the number of hostnames which have the attribute hCore set.
     *  @return the number of hostnames which have the attribute hCore set.
     */
    public int getHCoreCount();
   
    /**
     *  Determine if any hCore attribute is for <code>hostname</code> is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the hCore attribute is set
     */
    public boolean isSetHCore(String hostname);
   
   
          
    /**
     *  <p>Put the attribute hCore for <code>hostname</code>.</p>
     *
     *  @param hostname   the hostname
     *  @param hCore the hCore
     */
    public void putHCore(String hostname, String hCore);
   
   
    /**
     *  Set <code>hCore</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param hCore  the hCore attribute
     */
    public void setDefaultHCore(String hCore);



    /**
     *  <p>remove the attribute hCore for <code>hostname</code>.</p>
     *
     *  @param hostname  The hostname
     *  @return the value of the attribute for <code>hostname</code> or <code>null</code>
     *          if the attribute was not defined for <code>hostname</code>.
     */
    public java.lang.String removeHCore(String hostname);
   
    /**
     *  <p>Remove the attribute hCore for all hostnames.</p>
     */
    public void removeAllHCore();


 
    /**
     *  Determine if any hCore attribute is set
     *  @return <code>true</code> if the hCore attribute is set
     */
    public boolean isSetHCore();


    // Attribute sRss ------------------------------------------------

        // keyClassName for SGE_HOST = String
     
   
    /**
     *  <p>Get the default value of the attribute sRss.</p>
     *  @return the default value of the attribute sRss
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultSRss();

    /**
     *  <p>Get the sRss attribute for <code>hostname</code>.</p>
     *  @param   hostname   the hostname
     *  @return  the sRss attribute for <code>hostname</code> or the
     *           default value of  sRss
     */
    public String getSRss(String hostname);
   
    /**
     *  Get the set of <code>hostname</code>s which have the attribute sRss set.
     *  @return set of <code>hostname</code>s
     */
    public Set<String> getSRssKeys();
   
    /**
     *  Get the number of hostnames which have the attribute sRss set.
     *  @return the number of hostnames which have the attribute sRss set.
     */
    public int getSRssCount();
   
    /**
     *  Determine if any sRss attribute is for <code>hostname</code> is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the sRss attribute is set
     */
    public boolean isSetSRss(String hostname);
   
   
          
    /**
     *  <p>Put the attribute sRss for <code>hostname</code>.</p>
     *
     *  @param hostname   the hostname
     *  @param sRss the sRss
     */
    public void putSRss(String hostname, String sRss);
   
   
    /**
     *  Set <code>sRss</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param sRss  the sRss attribute
     */
    public void setDefaultSRss(String sRss);



    /**
     *  <p>remove the attribute sRss for <code>hostname</code>.</p>
     *
     *  @param hostname  The hostname
     *  @return the value of the attribute for <code>hostname</code> or <code>null</code>
     *          if the attribute was not defined for <code>hostname</code>.
     */
    public java.lang.String removeSRss(String hostname);
   
    /**
     *  <p>Remove the attribute sRss for all hostnames.</p>
     */
    public void removeAllSRss();


 
    /**
     *  Determine if any sRss attribute is set
     *  @return <code>true</code> if the sRss attribute is set
     */
    public boolean isSetSRss();


    // Attribute hRss ------------------------------------------------

        // keyClassName for SGE_HOST = String
     
   
    /**
     *  <p>Get the default value of the attribute hRss.</p>
     *  @return the default value of the attribute hRss
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultHRss();

    /**
     *  <p>Get the hRss attribute for <code>hostname</code>.</p>
     *  @param   hostname   the hostname
     *  @return  the hRss attribute for <code>hostname</code> or the
     *           default value of  hRss
     */
    public String getHRss(String hostname);
   
    /**
     *  Get the set of <code>hostname</code>s which have the attribute hRss set.
     *  @return set of <code>hostname</code>s
     */
    public Set<String> getHRssKeys();
   
    /**
     *  Get the number of hostnames which have the attribute hRss set.
     *  @return the number of hostnames which have the attribute hRss set.
     */
    public int getHRssCount();
   
    /**
     *  Determine if any hRss attribute is for <code>hostname</code> is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the hRss attribute is set
     */
    public boolean isSetHRss(String hostname);
   
   
          
    /**
     *  <p>Put the attribute hRss for <code>hostname</code>.</p>
     *
     *  @param hostname   the hostname
     *  @param hRss the hRss
     */
    public void putHRss(String hostname, String hRss);
   
   
    /**
     *  Set <code>hRss</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param hRss  the hRss attribute
     */
    public void setDefaultHRss(String hRss);



    /**
     *  <p>remove the attribute hRss for <code>hostname</code>.</p>
     *
     *  @param hostname  The hostname
     *  @return the value of the attribute for <code>hostname</code> or <code>null</code>
     *          if the attribute was not defined for <code>hostname</code>.
     */
    public java.lang.String removeHRss(String hostname);
   
    /**
     *  <p>Remove the attribute hRss for all hostnames.</p>
     */
    public void removeAllHRss();


 
    /**
     *  Determine if any hRss attribute is set
     *  @return <code>true</code> if the hRss attribute is set
     */
    public boolean isSetHRss();


    // Attribute sVmem ------------------------------------------------

        // keyClassName for SGE_HOST = String
     
   
    /**
     *  <p>Get the default value of the attribute sVmem.</p>
     *  @return the default value of the attribute sVmem
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultSVmem();

    /**
     *  <p>Get the sVmem attribute for <code>hostname</code>.</p>
     *  @param   hostname   the hostname
     *  @return  the sVmem attribute for <code>hostname</code> or the
     *           default value of  sVmem
     */
    public String getSVmem(String hostname);
   
    /**
     *  Get the set of <code>hostname</code>s which have the attribute sVmem set.
     *  @return set of <code>hostname</code>s
     */
    public Set<String> getSVmemKeys();
   
    /**
     *  Get the number of hostnames which have the attribute sVmem set.
     *  @return the number of hostnames which have the attribute sVmem set.
     */
    public int getSVmemCount();
   
    /**
     *  Determine if any sVmem attribute is for <code>hostname</code> is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the sVmem attribute is set
     */
    public boolean isSetSVmem(String hostname);
   
   
          
    /**
     *  <p>Put the attribute sVmem for <code>hostname</code>.</p>
     *
     *  @param hostname   the hostname
     *  @param sVmem the sVmem
     */
    public void putSVmem(String hostname, String sVmem);
   
   
    /**
     *  Set <code>sVmem</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param sVmem  the sVmem attribute
     */
    public void setDefaultSVmem(String sVmem);



    /**
     *  <p>remove the attribute sVmem for <code>hostname</code>.</p>
     *
     *  @param hostname  The hostname
     *  @return the value of the attribute for <code>hostname</code> or <code>null</code>
     *          if the attribute was not defined for <code>hostname</code>.
     */
    public java.lang.String removeSVmem(String hostname);
   
    /**
     *  <p>Remove the attribute sVmem for all hostnames.</p>
     */
    public void removeAllSVmem();


 
    /**
     *  Determine if any sVmem attribute is set
     *  @return <code>true</code> if the sVmem attribute is set
     */
    public boolean isSetSVmem();


    // Attribute hVmem ------------------------------------------------

        // keyClassName for SGE_HOST = String
     
   
    /**
     *  <p>Get the default value of the attribute hVmem.</p>
     *  @return the default value of the attribute hVmem
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultHVmem();

    /**
     *  <p>Get the hVmem attribute for <code>hostname</code>.</p>
     *  @param   hostname   the hostname
     *  @return  the hVmem attribute for <code>hostname</code> or the
     *           default value of  hVmem
     */
    public String getHVmem(String hostname);
   
    /**
     *  Get the set of <code>hostname</code>s which have the attribute hVmem set.
     *  @return set of <code>hostname</code>s
     */
    public Set<String> getHVmemKeys();
   
    /**
     *  Get the number of hostnames which have the attribute hVmem set.
     *  @return the number of hostnames which have the attribute hVmem set.
     */
    public int getHVmemCount();
   
    /**
     *  Determine if any hVmem attribute is for <code>hostname</code> is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the hVmem attribute is set
     */
    public boolean isSetHVmem(String hostname);
   
   
          
    /**
     *  <p>Put the attribute hVmem for <code>hostname</code>.</p>
     *
     *  @param hostname   the hostname
     *  @param hVmem the hVmem
     */
    public void putHVmem(String hostname, String hVmem);
   
   
    /**
     *  Set <code>hVmem</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param hVmem  the hVmem attribute
     */
    public void setDefaultHVmem(String hVmem);



    /**
     *  <p>remove the attribute hVmem for <code>hostname</code>.</p>
     *
     *  @param hostname  The hostname
     *  @return the value of the attribute for <code>hostname</code> or <code>null</code>
     *          if the attribute was not defined for <code>hostname</code>.
     */
    public java.lang.String removeHVmem(String hostname);
   
    /**
     *  <p>Remove the attribute hVmem for all hostnames.</p>
     */
    public void removeAllHVmem();


 
    /**
     *  Determine if any hVmem attribute is set
     *  @return <code>true</code> if the hVmem attribute is set
     */
    public boolean isSetHVmem();


    // Attribute sRt ------------------------------------------------

        // keyClassName for SGE_HOST = String
     
   
    /**
     *  <p>Get the default value of the attribute sRt.</p>
     *  @return the default value of the attribute sRt
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultSRt();

    /**
     *  <p>Get the sRt attribute for <code>hostname</code>.</p>
     *  @param   hostname   the hostname
     *  @return  the sRt attribute for <code>hostname</code> or the
     *           default value of  sRt
     */
    public String getSRt(String hostname);
   
    /**
     *  Get the set of <code>hostname</code>s which have the attribute sRt set.
     *  @return set of <code>hostname</code>s
     */
    public Set<String> getSRtKeys();
   
    /**
     *  Get the number of hostnames which have the attribute sRt set.
     *  @return the number of hostnames which have the attribute sRt set.
     */
    public int getSRtCount();
   
    /**
     *  Determine if any sRt attribute is for <code>hostname</code> is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the sRt attribute is set
     */
    public boolean isSetSRt(String hostname);
   
   
          
    /**
     *  <p>Put the attribute sRt for <code>hostname</code>.</p>
     *
     *  @param hostname   the hostname
     *  @param sRt the sRt
     */
    public void putSRt(String hostname, String sRt);
   
   
    /**
     *  Set <code>sRt</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param sRt  the sRt attribute
     */
    public void setDefaultSRt(String sRt);



    /**
     *  <p>remove the attribute sRt for <code>hostname</code>.</p>
     *
     *  @param hostname  The hostname
     *  @return the value of the attribute for <code>hostname</code> or <code>null</code>
     *          if the attribute was not defined for <code>hostname</code>.
     */
    public java.lang.String removeSRt(String hostname);
   
    /**
     *  <p>Remove the attribute sRt for all hostnames.</p>
     */
    public void removeAllSRt();


 
    /**
     *  Determine if any sRt attribute is set
     *  @return <code>true</code> if the sRt attribute is set
     */
    public boolean isSetSRt();


    // Attribute hRt ------------------------------------------------

        // keyClassName for SGE_HOST = String
     
   
    /**
     *  <p>Get the default value of the attribute hRt.</p>
     *  @return the default value of the attribute hRt
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultHRt();

    /**
     *  <p>Get the hRt attribute for <code>hostname</code>.</p>
     *  @param   hostname   the hostname
     *  @return  the hRt attribute for <code>hostname</code> or the
     *           default value of  hRt
     */
    public String getHRt(String hostname);
   
    /**
     *  Get the set of <code>hostname</code>s which have the attribute hRt set.
     *  @return set of <code>hostname</code>s
     */
    public Set<String> getHRtKeys();
   
    /**
     *  Get the number of hostnames which have the attribute hRt set.
     *  @return the number of hostnames which have the attribute hRt set.
     */
    public int getHRtCount();
   
    /**
     *  Determine if any hRt attribute is for <code>hostname</code> is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the hRt attribute is set
     */
    public boolean isSetHRt(String hostname);
   
   
          
    /**
     *  <p>Put the attribute hRt for <code>hostname</code>.</p>
     *
     *  @param hostname   the hostname
     *  @param hRt the hRt
     */
    public void putHRt(String hostname, String hRt);
   
   
    /**
     *  Set <code>hRt</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param hRt  the hRt attribute
     */
    public void setDefaultHRt(String hRt);



    /**
     *  <p>remove the attribute hRt for <code>hostname</code>.</p>
     *
     *  @param hostname  The hostname
     *  @return the value of the attribute for <code>hostname</code> or <code>null</code>
     *          if the attribute was not defined for <code>hostname</code>.
     */
    public java.lang.String removeHRt(String hostname);
   
    /**
     *  <p>Remove the attribute hRt for all hostnames.</p>
     */
    public void removeAllHRt();


 
    /**
     *  Determine if any hRt attribute is set
     *  @return <code>true</code> if the hRt attribute is set
     */
    public boolean isSetHRt();


    // Attribute sCpu ------------------------------------------------

        // keyClassName for SGE_HOST = String
     
   
    /**
     *  <p>Get the default value of the attribute sCpu.</p>
     *  @return the default value of the attribute sCpu
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultSCpu();

    /**
     *  <p>Get the sCpu attribute for <code>hostname</code>.</p>
     *  @param   hostname   the hostname
     *  @return  the sCpu attribute for <code>hostname</code> or the
     *           default value of  sCpu
     */
    public String getSCpu(String hostname);
   
    /**
     *  Get the set of <code>hostname</code>s which have the attribute sCpu set.
     *  @return set of <code>hostname</code>s
     */
    public Set<String> getSCpuKeys();
   
    /**
     *  Get the number of hostnames which have the attribute sCpu set.
     *  @return the number of hostnames which have the attribute sCpu set.
     */
    public int getSCpuCount();
   
    /**
     *  Determine if any sCpu attribute is for <code>hostname</code> is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the sCpu attribute is set
     */
    public boolean isSetSCpu(String hostname);
   
   
          
    /**
     *  <p>Put the attribute sCpu for <code>hostname</code>.</p>
     *
     *  @param hostname   the hostname
     *  @param sCpu the sCpu
     */
    public void putSCpu(String hostname, String sCpu);
   
   
    /**
     *  Set <code>sCpu</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param sCpu  the sCpu attribute
     */
    public void setDefaultSCpu(String sCpu);



    /**
     *  <p>remove the attribute sCpu for <code>hostname</code>.</p>
     *
     *  @param hostname  The hostname
     *  @return the value of the attribute for <code>hostname</code> or <code>null</code>
     *          if the attribute was not defined for <code>hostname</code>.
     */
    public java.lang.String removeSCpu(String hostname);
   
    /**
     *  <p>Remove the attribute sCpu for all hostnames.</p>
     */
    public void removeAllSCpu();


 
    /**
     *  Determine if any sCpu attribute is set
     *  @return <code>true</code> if the sCpu attribute is set
     */
    public boolean isSetSCpu();


    // Attribute hCpu ------------------------------------------------

        // keyClassName for SGE_HOST = String
     
   
    /**
     *  <p>Get the default value of the attribute hCpu.</p>
     *  @return the default value of the attribute hCpu
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultHCpu();

    /**
     *  <p>Get the hCpu attribute for <code>hostname</code>.</p>
     *  @param   hostname   the hostname
     *  @return  the hCpu attribute for <code>hostname</code> or the
     *           default value of  hCpu
     */
    public String getHCpu(String hostname);
   
    /**
     *  Get the set of <code>hostname</code>s which have the attribute hCpu set.
     *  @return set of <code>hostname</code>s
     */
    public Set<String> getHCpuKeys();
   
    /**
     *  Get the number of hostnames which have the attribute hCpu set.
     *  @return the number of hostnames which have the attribute hCpu set.
     */
    public int getHCpuCount();
   
    /**
     *  Determine if any hCpu attribute is for <code>hostname</code> is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the hCpu attribute is set
     */
    public boolean isSetHCpu(String hostname);
   
   
          
    /**
     *  <p>Put the attribute hCpu for <code>hostname</code>.</p>
     *
     *  @param hostname   the hostname
     *  @param hCpu the hCpu
     */
    public void putHCpu(String hostname, String hCpu);
   
   
    /**
     *  Set <code>hCpu</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param hCpu  the hCpu attribute
     */
    public void setDefaultHCpu(String hCpu);



    /**
     *  <p>remove the attribute hCpu for <code>hostname</code>.</p>
     *
     *  @param hostname  The hostname
     *  @return the value of the attribute for <code>hostname</code> or <code>null</code>
     *          if the attribute was not defined for <code>hostname</code>.
     */
    public java.lang.String removeHCpu(String hostname);
   
    /**
     *  <p>Remove the attribute hCpu for all hostnames.</p>
     */
    public void removeAllHCpu();


 
    /**
     *  Determine if any hCpu attribute is set
     *  @return <code>true</code> if the hCpu attribute is set
     */
    public boolean isSetHCpu();


    // Attribute suspendInterval ------------------------------------------------

        // keyClassName for SGE_HOST = String
     
   
    /**
     *  <p>Get the default value of the attribute suspendInterval.</p>
     *  @return the default value of the attribute suspendInterval
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultSuspendInterval();

    /**
     *  <p>Get the suspendInterval attribute for <code>hostname</code>.</p>
     *  @param   hostname   the hostname
     *  @return  the suspendInterval attribute for <code>hostname</code> or the
     *           default value of  suspendInterval
     */
    public String getSuspendInterval(String hostname);
   
    /**
     *  Get the set of <code>hostname</code>s which have the attribute suspendInterval set.
     *  @return set of <code>hostname</code>s
     */
    public Set<String> getSuspendIntervalKeys();
   
    /**
     *  Get the number of hostnames which have the attribute suspendInterval set.
     *  @return the number of hostnames which have the attribute suspendInterval set.
     */
    public int getSuspendIntervalCount();
   
    /**
     *  Determine if any suspendInterval attribute is for <code>hostname</code> is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the suspendInterval attribute is set
     */
    public boolean isSetSuspendInterval(String hostname);
   
   
          
    /**
     *  <p>Put the attribute suspendInterval for <code>hostname</code>.</p>
     *
     *  @param hostname   the hostname
     *  @param suspendInterval the suspendInterval
     */
    public void putSuspendInterval(String hostname, String suspendInterval);
   
   
    /**
     *  Set <code>suspendInterval</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param suspendInterval  the suspendInterval attribute
     */
    public void setDefaultSuspendInterval(String suspendInterval);



    /**
     *  <p>remove the attribute suspendInterval for <code>hostname</code>.</p>
     *
     *  @param hostname  The hostname
     *  @return the value of the attribute for <code>hostname</code> or <code>null</code>
     *          if the attribute was not defined for <code>hostname</code>.
     */
    public java.lang.String removeSuspendInterval(String hostname);
   
    /**
     *  <p>Remove the attribute suspendInterval for all hostnames.</p>
     */
    public void removeAllSuspendInterval();


 
    /**
     *  Determine if any suspendInterval attribute is set
     *  @return <code>true</code> if the suspendInterval attribute is set
     */
    public boolean isSetSuspendInterval();


    // Attribute minCpuInterval ------------------------------------------------

        // keyClassName for SGE_HOST = String
     
   
    /**
     *  <p>Get the default value of the attribute minCpuInterval.</p>
     *  @return the default value of the attribute minCpuInterval
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultMinCpuInterval();

    /**
     *  <p>Get the minCpuInterval attribute for <code>hostname</code>.</p>
     *  @param   hostname   the hostname
     *  @return  the minCpuInterval attribute for <code>hostname</code> or the
     *           default value of  minCpuInterval
     */
    public String getMinCpuInterval(String hostname);
   
    /**
     *  Get the set of <code>hostname</code>s which have the attribute minCpuInterval set.
     *  @return set of <code>hostname</code>s
     */
    public Set<String> getMinCpuIntervalKeys();
   
    /**
     *  Get the number of hostnames which have the attribute minCpuInterval set.
     *  @return the number of hostnames which have the attribute minCpuInterval set.
     */
    public int getMinCpuIntervalCount();
   
    /**
     *  Determine if any minCpuInterval attribute is for <code>hostname</code> is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the minCpuInterval attribute is set
     */
    public boolean isSetMinCpuInterval(String hostname);
   
   
          
    /**
     *  <p>Put the attribute minCpuInterval for <code>hostname</code>.</p>
     *
     *  @param hostname   the hostname
     *  @param minCpuInterval the minCpuInterval
     */
    public void putMinCpuInterval(String hostname, String minCpuInterval);
   
   
    /**
     *  Set <code>minCpuInterval</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param minCpuInterval  the minCpuInterval attribute
     */
    public void setDefaultMinCpuInterval(String minCpuInterval);



    /**
     *  <p>remove the attribute minCpuInterval for <code>hostname</code>.</p>
     *
     *  @param hostname  The hostname
     *  @return the value of the attribute for <code>hostname</code> or <code>null</code>
     *          if the attribute was not defined for <code>hostname</code>.
     */
    public java.lang.String removeMinCpuInterval(String hostname);
   
    /**
     *  <p>Remove the attribute minCpuInterval for all hostnames.</p>
     */
    public void removeAllMinCpuInterval();


 
    /**
     *  Determine if any minCpuInterval attribute is set
     *  @return <code>true</code> if the minCpuInterval attribute is set
     */
    public boolean isSetMinCpuInterval();


    // Attribute notify ------------------------------------------------

        // keyClassName for SGE_HOST = String
     
   
    /**
     *  <p>Get the default value of the attribute notify.</p>
     *  @return the default value of the attribute notify
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultNotify();

    /**
     *  <p>Get the notify attribute for <code>hostname</code>.</p>
     *  @param   hostname   the hostname
     *  @return  the notify attribute for <code>hostname</code> or the
     *           default value of  notify
     */
    public String getNotify(String hostname);
   
    /**
     *  Get the set of <code>hostname</code>s which have the attribute notify set.
     *  @return set of <code>hostname</code>s
     */
    public Set<String> getNotifyKeys();
   
    /**
     *  Get the number of hostnames which have the attribute notify set.
     *  @return the number of hostnames which have the attribute notify set.
     */
    public int getNotifyCount();
   
    /**
     *  Determine if any notify attribute is for <code>hostname</code> is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the notify attribute is set
     */
    public boolean isSetNotify(String hostname);
   
   
          
    /**
     *  <p>Put the attribute notify for <code>hostname</code>.</p>
     *
     *  @param hostname   the hostname
     *  @param notify the notify
     */
    public void putNotify(String hostname, String notify);
   
   
    /**
     *  Set <code>notify</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param notify  the notify attribute
     */
    public void setDefaultNotify(String notify);



    /**
     *  <p>remove the attribute notify for <code>hostname</code>.</p>
     *
     *  @param hostname  The hostname
     *  @return the value of the attribute for <code>hostname</code> or <code>null</code>
     *          if the attribute was not defined for <code>hostname</code>.
     */
    public java.lang.String removeNotify(String hostname);
   
    /**
     *  <p>Remove the attribute notify for all hostnames.</p>
     */
    public void removeAllNotify();


 
    /**
     *  Determine if any notify attribute is set
     *  @return <code>true</code> if the notify attribute is set
     */
    public boolean isSetNotify();


    // Attribute tmpdir ------------------------------------------------

        // keyClassName for SGE_HOST = String
     
   
    /**
     *  <p>Get the default value of the attribute tmpdir.</p>
     *  @return the default value of the attribute tmpdir
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultTmpdir();

    /**
     *  <p>Get the tmpdir attribute for <code>hostname</code>.</p>
     *  @param   hostname   the hostname
     *  @return  the tmpdir attribute for <code>hostname</code> or the
     *           default value of  tmpdir
     */
    public String getTmpdir(String hostname);
   
    /**
     *  Get the set of <code>hostname</code>s which have the attribute tmpdir set.
     *  @return set of <code>hostname</code>s
     */
    public Set<String> getTmpdirKeys();
   
    /**
     *  Get the number of hostnames which have the attribute tmpdir set.
     *  @return the number of hostnames which have the attribute tmpdir set.
     */
    public int getTmpdirCount();
   
    /**
     *  Determine if any tmpdir attribute is for <code>hostname</code> is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the tmpdir attribute is set
     */
    public boolean isSetTmpdir(String hostname);
   
   
          
    /**
     *  <p>Put the attribute tmpdir for <code>hostname</code>.</p>
     *
     *  @param hostname   the hostname
     *  @param tmpDir the tmpDir
     */
    public void putTmpdir(String hostname, String tmpDir);
   
   
    /**
     *  Set <code>tmpDir</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param tmpDir  the tmpDir attribute
     */
    public void setDefaultTmpdir(String tmpDir);



    /**
     *  <p>remove the attribute tmpdir for <code>hostname</code>.</p>
     *
     *  @param hostname  The hostname
     *  @return the value of the attribute for <code>hostname</code> or <code>null</code>
     *          if the attribute was not defined for <code>hostname</code>.
     */
    public java.lang.String removeTmpdir(String hostname);
   
    /**
     *  <p>Remove the attribute tmpdir for all hostnames.</p>
     */
    public void removeAllTmpdir();


 
    /**
     *  Determine if any tmpdir attribute is set
     *  @return <code>true</code> if the tmpdir attribute is set
     */
    public boolean isSetTmpdir();


    // Attribute shell ------------------------------------------------

        // keyClassName for SGE_HOST = String
     
   
    /**
     *  <p>Get the default value of the attribute shell.</p>
     *  @return the default value of the attribute shell
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultShell();

    /**
     *  <p>Get the shell attribute for <code>hostname</code>.</p>
     *  @param   hostname   the hostname
     *  @return  the shell attribute for <code>hostname</code> or the
     *           default value of  shell
     */
    public String getShell(String hostname);
   
    /**
     *  Get the set of <code>hostname</code>s which have the attribute shell set.
     *  @return set of <code>hostname</code>s
     */
    public Set<String> getShellKeys();
   
    /**
     *  Get the number of hostnames which have the attribute shell set.
     *  @return the number of hostnames which have the attribute shell set.
     */
    public int getShellCount();
   
    /**
     *  Determine if any shell attribute is for <code>hostname</code> is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the shell attribute is set
     */
    public boolean isSetShell(String hostname);
   
   
          
    /**
     *  <p>Put the attribute shell for <code>hostname</code>.</p>
     *
     *  @param hostname   the hostname
     *  @param shell the shell
     */
    public void putShell(String hostname, String shell);
   
   
    /**
     *  Set <code>shell</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param shell  the shell attribute
     */
    public void setDefaultShell(String shell);



    /**
     *  <p>remove the attribute shell for <code>hostname</code>.</p>
     *
     *  @param hostname  The hostname
     *  @return the value of the attribute for <code>hostname</code> or <code>null</code>
     *          if the attribute was not defined for <code>hostname</code>.
     */
    public java.lang.String removeShell(String hostname);
   
    /**
     *  <p>Remove the attribute shell for all hostnames.</p>
     */
    public void removeAllShell();


 
    /**
     *  Determine if any shell attribute is set
     *  @return <code>true</code> if the shell attribute is set
     */
    public boolean isSetShell();


    // Attribute calendar ------------------------------------------------

        // keyClassName for SGE_HOST = String
     
   
    /**
     *  <p>Get the default value of the attribute calendar.</p>
     *  @return the default value of the attribute calendar
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultCalendar();

    /**
     *  <p>Get the calendar attribute for <code>hostname</code>.</p>
     *  @param   hostname   the hostname
     *  @return  the calendar attribute for <code>hostname</code> or the
     *           default value of  calendar
     */
    public String getCalendar(String hostname);
   
    /**
     *  Get the set of <code>hostname</code>s which have the attribute calendar set.
     *  @return set of <code>hostname</code>s
     */
    public Set<String> getCalendarKeys();
   
    /**
     *  Get the number of hostnames which have the attribute calendar set.
     *  @return the number of hostnames which have the attribute calendar set.
     */
    public int getCalendarCount();
   
    /**
     *  Determine if any calendar attribute is for <code>hostname</code> is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the calendar attribute is set
     */
    public boolean isSetCalendar(String hostname);
   
   
          
    /**
     *  <p>Put the attribute calendar for <code>hostname</code>.</p>
     *
     *  @param hostname   the hostname
     *  @param calendar the calendar
     */
    public void putCalendar(String hostname, String calendar);
   
   
    /**
     *  Set <code>calendar</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param calendar  the calendar attribute
     */
    public void setDefaultCalendar(String calendar);



    /**
     *  <p>remove the attribute calendar for <code>hostname</code>.</p>
     *
     *  @param hostname  The hostname
     *  @return the value of the attribute for <code>hostname</code> or <code>null</code>
     *          if the attribute was not defined for <code>hostname</code>.
     */
    public java.lang.String removeCalendar(String hostname);
   
    /**
     *  <p>Remove the attribute calendar for all hostnames.</p>
     */
    public void removeAllCalendar();


 
    /**
     *  Determine if any calendar attribute is set
     *  @return <code>true</code> if the calendar attribute is set
     */
    public boolean isSetCalendar();


    // Attribute priority ------------------------------------------------

        // keyClassName for SGE_HOST = String
     
   
    /**
     *  <p>Get the default value of the attribute priority.</p>
     *  @return the default value of the attribute priority
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultPriority();

    /**
     *  <p>Get the priority attribute for <code>hostname</code>.</p>
     *  @param   hostname   the hostname
     *  @return  the priority attribute for <code>hostname</code> or the
     *           default value of  priority
     */
    public String getPriority(String hostname);
   
    /**
     *  Get the set of <code>hostname</code>s which have the attribute priority set.
     *  @return set of <code>hostname</code>s
     */
    public Set<String> getPriorityKeys();
   
    /**
     *  Get the number of hostnames which have the attribute priority set.
     *  @return the number of hostnames which have the attribute priority set.
     */
    public int getPriorityCount();
   
    /**
     *  Determine if any priority attribute is for <code>hostname</code> is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the priority attribute is set
     */
    public boolean isSetPriority(String hostname);
   
   
          
    /**
     *  <p>Put the attribute priority for <code>hostname</code>.</p>
     *
     *  @param hostname   the hostname
     *  @param priority the priority
     */
    public void putPriority(String hostname, String priority);
   
   
    /**
     *  Set <code>priority</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param priority  the priority attribute
     */
    public void setDefaultPriority(String priority);



    /**
     *  <p>remove the attribute priority for <code>hostname</code>.</p>
     *
     *  @param hostname  The hostname
     *  @return the value of the attribute for <code>hostname</code> or <code>null</code>
     *          if the attribute was not defined for <code>hostname</code>.
     */
    public java.lang.String removePriority(String hostname);
   
    /**
     *  <p>Remove the attribute priority for all hostnames.</p>
     */
    public void removeAllPriority();


 
    /**
     *  Determine if any priority attribute is set
     *  @return <code>true</code> if the priority attribute is set
     */
    public boolean isSetPriority();


    // Attribute processors ------------------------------------------------

        // keyClassName for SGE_HOST = String
     
   
    /**
     *  <p>Get the default value of the attribute processors.</p>
     *  @return the default value of the attribute processors
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultProcessors();

    /**
     *  <p>Get the processors attribute for <code>hostname</code>.</p>
     *  @param   hostname   the hostname
     *  @return  the processors attribute for <code>hostname</code> or the
     *           default value of  processors
     */
    public String getProcessors(String hostname);
   
    /**
     *  Get the set of <code>hostname</code>s which have the attribute processors set.
     *  @return set of <code>hostname</code>s
     */
    public Set<String> getProcessorsKeys();
   
    /**
     *  Get the number of hostnames which have the attribute processors set.
     *  @return the number of hostnames which have the attribute processors set.
     */
    public int getProcessorsCount();
   
    /**
     *  Determine if any processors attribute is for <code>hostname</code> is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the processors attribute is set
     */
    public boolean isSetProcessors(String hostname);
   
   
          
    /**
     *  <p>Put the attribute processors for <code>hostname</code>.</p>
     *
     *  @param hostname   the hostname
     *  @param processors the processors
     */
    public void putProcessors(String hostname, String processors);
   
   
    /**
     *  Set <code>processors</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param processors  the processors attribute
     */
    public void setDefaultProcessors(String processors);



    /**
     *  <p>remove the attribute processors for <code>hostname</code>.</p>
     *
     *  @param hostname  The hostname
     *  @return the value of the attribute for <code>hostname</code> or <code>null</code>
     *          if the attribute was not defined for <code>hostname</code>.
     */
    public java.lang.String removeProcessors(String hostname);
   
    /**
     *  <p>Remove the attribute processors for all hostnames.</p>
     */
    public void removeAllProcessors();


 
    /**
     *  Determine if any processors attribute is set
     *  @return <code>true</code> if the processors attribute is set
     */
    public boolean isSetProcessors();


    // Attribute prolog ------------------------------------------------

        // keyClassName for SGE_HOST = String
     
   
    /**
     *  <p>Get the default value of the attribute prolog.</p>
     *  @return the default value of the attribute prolog
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultProlog();

    /**
     *  <p>Get the prolog attribute for <code>hostname</code>.</p>
     *  @param   hostname   the hostname
     *  @return  the prolog attribute for <code>hostname</code> or the
     *           default value of  prolog
     */
    public String getProlog(String hostname);
   
    /**
     *  Get the set of <code>hostname</code>s which have the attribute prolog set.
     *  @return set of <code>hostname</code>s
     */
    public Set<String> getPrologKeys();
   
    /**
     *  Get the number of hostnames which have the attribute prolog set.
     *  @return the number of hostnames which have the attribute prolog set.
     */
    public int getPrologCount();
   
    /**
     *  Determine if any prolog attribute is for <code>hostname</code> is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the prolog attribute is set
     */
    public boolean isSetProlog(String hostname);
   
   
          
    /**
     *  <p>Put the attribute prolog for <code>hostname</code>.</p>
     *
     *  @param hostname   the hostname
     *  @param prolog the prolog
     */
    public void putProlog(String hostname, String prolog);
   
   
    /**
     *  Set <code>prolog</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param prolog  the prolog attribute
     */
    public void setDefaultProlog(String prolog);



    /**
     *  <p>remove the attribute prolog for <code>hostname</code>.</p>
     *
     *  @param hostname  The hostname
     *  @return the value of the attribute for <code>hostname</code> or <code>null</code>
     *          if the attribute was not defined for <code>hostname</code>.
     */
    public java.lang.String removeProlog(String hostname);
   
    /**
     *  <p>Remove the attribute prolog for all hostnames.</p>
     */
    public void removeAllProlog();


 
    /**
     *  Determine if any prolog attribute is set
     *  @return <code>true</code> if the prolog attribute is set
     */
    public boolean isSetProlog();


    // Attribute epilog ------------------------------------------------

        // keyClassName for SGE_HOST = String
     
   
    /**
     *  <p>Get the default value of the attribute epilog.</p>
     *  @return the default value of the attribute epilog
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultEpilog();

    /**
     *  <p>Get the epilog attribute for <code>hostname</code>.</p>
     *  @param   hostname   the hostname
     *  @return  the epilog attribute for <code>hostname</code> or the
     *           default value of  epilog
     */
    public String getEpilog(String hostname);
   
    /**
     *  Get the set of <code>hostname</code>s which have the attribute epilog set.
     *  @return set of <code>hostname</code>s
     */
    public Set<String> getEpilogKeys();
   
    /**
     *  Get the number of hostnames which have the attribute epilog set.
     *  @return the number of hostnames which have the attribute epilog set.
     */
    public int getEpilogCount();
   
    /**
     *  Determine if any epilog attribute is for <code>hostname</code> is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the epilog attribute is set
     */
    public boolean isSetEpilog(String hostname);
   
   
          
    /**
     *  <p>Put the attribute epilog for <code>hostname</code>.</p>
     *
     *  @param hostname   the hostname
     *  @param epilog the epilog
     */
    public void putEpilog(String hostname, String epilog);
   
   
    /**
     *  Set <code>epilog</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param epilog  the epilog attribute
     */
    public void setDefaultEpilog(String epilog);



    /**
     *  <p>remove the attribute epilog for <code>hostname</code>.</p>
     *
     *  @param hostname  The hostname
     *  @return the value of the attribute for <code>hostname</code> or <code>null</code>
     *          if the attribute was not defined for <code>hostname</code>.
     */
    public java.lang.String removeEpilog(String hostname);
   
    /**
     *  <p>Remove the attribute epilog for all hostnames.</p>
     */
    public void removeAllEpilog();


 
    /**
     *  Determine if any epilog attribute is set
     *  @return <code>true</code> if the epilog attribute is set
     */
    public boolean isSetEpilog();


    // Attribute shellStartMode ------------------------------------------------

        // keyClassName for SGE_HOST = String
     
   
    /**
     *  <p>Get the default value of the attribute shellStartMode.</p>
     *  @return the default value of the attribute shellStartMode
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultShellStartMode();

    /**
     *  <p>Get the shellStartMode attribute for <code>hostname</code>.</p>
     *  @param   hostname   the hostname
     *  @return  the shellStartMode attribute for <code>hostname</code> or the
     *           default value of  shellStartMode
     */
    public String getShellStartMode(String hostname);
   
    /**
     *  Get the set of <code>hostname</code>s which have the attribute shellStartMode set.
     *  @return set of <code>hostname</code>s
     */
    public Set<String> getShellStartModeKeys();
   
    /**
     *  Get the number of hostnames which have the attribute shellStartMode set.
     *  @return the number of hostnames which have the attribute shellStartMode set.
     */
    public int getShellStartModeCount();
   
    /**
     *  Determine if any shellStartMode attribute is for <code>hostname</code> is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the shellStartMode attribute is set
     */
    public boolean isSetShellStartMode(String hostname);
   
   
          
    /**
     *  <p>Put the attribute shellStartMode for <code>hostname</code>.</p>
     *
     *  @param hostname   the hostname
     *  @param shellStartMode the shellStartMode
     */
    public void putShellStartMode(String hostname, String shellStartMode);
   
   
    /**
     *  Set <code>shellStartMode</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param shellStartMode  the shellStartMode attribute
     */
    public void setDefaultShellStartMode(String shellStartMode);



    /**
     *  <p>remove the attribute shellStartMode for <code>hostname</code>.</p>
     *
     *  @param hostname  The hostname
     *  @return the value of the attribute for <code>hostname</code> or <code>null</code>
     *          if the attribute was not defined for <code>hostname</code>.
     */
    public java.lang.String removeShellStartMode(String hostname);
   
    /**
     *  <p>Remove the attribute shellStartMode for all hostnames.</p>
     */
    public void removeAllShellStartMode();


 
    /**
     *  Determine if any shellStartMode attribute is set
     *  @return <code>true</code> if the shellStartMode attribute is set
     */
    public boolean isSetShellStartMode();


    // Attribute starterMethod ------------------------------------------------

        // keyClassName for SGE_HOST = String
     
   
    /**
     *  <p>Get the default value of the attribute starterMethod.</p>
     *  @return the default value of the attribute starterMethod
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultStarterMethod();

    /**
     *  <p>Get the starterMethod attribute for <code>hostname</code>.</p>
     *  @param   hostname   the hostname
     *  @return  the starterMethod attribute for <code>hostname</code> or the
     *           default value of  starterMethod
     */
    public String getStarterMethod(String hostname);
   
    /**
     *  Get the set of <code>hostname</code>s which have the attribute starterMethod set.
     *  @return set of <code>hostname</code>s
     */
    public Set<String> getStarterMethodKeys();
   
    /**
     *  Get the number of hostnames which have the attribute starterMethod set.
     *  @return the number of hostnames which have the attribute starterMethod set.
     */
    public int getStarterMethodCount();
   
    /**
     *  Determine if any starterMethod attribute is for <code>hostname</code> is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the starterMethod attribute is set
     */
    public boolean isSetStarterMethod(String hostname);
   
   
          
    /**
     *  <p>Put the attribute starterMethod for <code>hostname</code>.</p>
     *
     *  @param hostname   the hostname
     *  @param starterMethod the starterMethod
     */
    public void putStarterMethod(String hostname, String starterMethod);
   
   
    /**
     *  Set <code>starterMethod</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param starterMethod  the starterMethod attribute
     */
    public void setDefaultStarterMethod(String starterMethod);



    /**
     *  <p>remove the attribute starterMethod for <code>hostname</code>.</p>
     *
     *  @param hostname  The hostname
     *  @return the value of the attribute for <code>hostname</code> or <code>null</code>
     *          if the attribute was not defined for <code>hostname</code>.
     */
    public java.lang.String removeStarterMethod(String hostname);
   
    /**
     *  <p>Remove the attribute starterMethod for all hostnames.</p>
     */
    public void removeAllStarterMethod();


 
    /**
     *  Determine if any starterMethod attribute is set
     *  @return <code>true</code> if the starterMethod attribute is set
     */
    public boolean isSetStarterMethod();


    // Attribute suspendMethod ------------------------------------------------

        // keyClassName for SGE_HOST = String
     
   
    /**
     *  <p>Get the default value of the attribute suspendMethod.</p>
     *  @return the default value of the attribute suspendMethod
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultSuspendMethod();

    /**
     *  <p>Get the suspendMethod attribute for <code>hostname</code>.</p>
     *  @param   hostname   the hostname
     *  @return  the suspendMethod attribute for <code>hostname</code> or the
     *           default value of  suspendMethod
     */
    public String getSuspendMethod(String hostname);
   
    /**
     *  Get the set of <code>hostname</code>s which have the attribute suspendMethod set.
     *  @return set of <code>hostname</code>s
     */
    public Set<String> getSuspendMethodKeys();
   
    /**
     *  Get the number of hostnames which have the attribute suspendMethod set.
     *  @return the number of hostnames which have the attribute suspendMethod set.
     */
    public int getSuspendMethodCount();
   
    /**
     *  Determine if any suspendMethod attribute is for <code>hostname</code> is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the suspendMethod attribute is set
     */
    public boolean isSetSuspendMethod(String hostname);
   
   
          
    /**
     *  <p>Put the attribute suspendMethod for <code>hostname</code>.</p>
     *
     *  @param hostname   the hostname
     *  @param suspendMethod the suspendMethod
     */
    public void putSuspendMethod(String hostname, String suspendMethod);
   
   
    /**
     *  Set <code>suspendMethod</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param suspendMethod  the suspendMethod attribute
     */
    public void setDefaultSuspendMethod(String suspendMethod);



    /**
     *  <p>remove the attribute suspendMethod for <code>hostname</code>.</p>
     *
     *  @param hostname  The hostname
     *  @return the value of the attribute for <code>hostname</code> or <code>null</code>
     *          if the attribute was not defined for <code>hostname</code>.
     */
    public java.lang.String removeSuspendMethod(String hostname);
   
    /**
     *  <p>Remove the attribute suspendMethod for all hostnames.</p>
     */
    public void removeAllSuspendMethod();


 
    /**
     *  Determine if any suspendMethod attribute is set
     *  @return <code>true</code> if the suspendMethod attribute is set
     */
    public boolean isSetSuspendMethod();


    // Attribute resumeMethod ------------------------------------------------

        // keyClassName for SGE_HOST = String
     
   
    /**
     *  <p>Get the default value of the attribute resumeMethod.</p>
     *  @return the default value of the attribute resumeMethod
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultResumeMethod();

    /**
     *  <p>Get the resumeMethod attribute for <code>hostname</code>.</p>
     *  @param   hostname   the hostname
     *  @return  the resumeMethod attribute for <code>hostname</code> or the
     *           default value of  resumeMethod
     */
    public String getResumeMethod(String hostname);
   
    /**
     *  Get the set of <code>hostname</code>s which have the attribute resumeMethod set.
     *  @return set of <code>hostname</code>s
     */
    public Set<String> getResumeMethodKeys();
   
    /**
     *  Get the number of hostnames which have the attribute resumeMethod set.
     *  @return the number of hostnames which have the attribute resumeMethod set.
     */
    public int getResumeMethodCount();
   
    /**
     *  Determine if any resumeMethod attribute is for <code>hostname</code> is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the resumeMethod attribute is set
     */
    public boolean isSetResumeMethod(String hostname);
   
   
          
    /**
     *  <p>Put the attribute resumeMethod for <code>hostname</code>.</p>
     *
     *  @param hostname   the hostname
     *  @param resumeMethod the resumeMethod
     */
    public void putResumeMethod(String hostname, String resumeMethod);
   
   
    /**
     *  Set <code>resumeMethod</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param resumeMethod  the resumeMethod attribute
     */
    public void setDefaultResumeMethod(String resumeMethod);



    /**
     *  <p>remove the attribute resumeMethod for <code>hostname</code>.</p>
     *
     *  @param hostname  The hostname
     *  @return the value of the attribute for <code>hostname</code> or <code>null</code>
     *          if the attribute was not defined for <code>hostname</code>.
     */
    public java.lang.String removeResumeMethod(String hostname);
   
    /**
     *  <p>Remove the attribute resumeMethod for all hostnames.</p>
     */
    public void removeAllResumeMethod();


 
    /**
     *  Determine if any resumeMethod attribute is set
     *  @return <code>true</code> if the resumeMethod attribute is set
     */
    public boolean isSetResumeMethod();


    // Attribute terminateMethod ------------------------------------------------

        // keyClassName for SGE_HOST = String
     
   
    /**
     *  <p>Get the default value of the attribute terminateMethod.</p>
     *  @return the default value of the attribute terminateMethod
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultTerminateMethod();

    /**
     *  <p>Get the terminateMethod attribute for <code>hostname</code>.</p>
     *  @param   hostname   the hostname
     *  @return  the terminateMethod attribute for <code>hostname</code> or the
     *           default value of  terminateMethod
     */
    public String getTerminateMethod(String hostname);
   
    /**
     *  Get the set of <code>hostname</code>s which have the attribute terminateMethod set.
     *  @return set of <code>hostname</code>s
     */
    public Set<String> getTerminateMethodKeys();
   
    /**
     *  Get the number of hostnames which have the attribute terminateMethod set.
     *  @return the number of hostnames which have the attribute terminateMethod set.
     */
    public int getTerminateMethodCount();
   
    /**
     *  Determine if any terminateMethod attribute is for <code>hostname</code> is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the terminateMethod attribute is set
     */
    public boolean isSetTerminateMethod(String hostname);
   
   
          
    /**
     *  <p>Put the attribute terminateMethod for <code>hostname</code>.</p>
     *
     *  @param hostname   the hostname
     *  @param terminateMethod the terminateMethod
     */
    public void putTerminateMethod(String hostname, String terminateMethod);
   
   
    /**
     *  Set <code>terminateMethod</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param terminateMethod  the terminateMethod attribute
     */
    public void setDefaultTerminateMethod(String terminateMethod);



    /**
     *  <p>remove the attribute terminateMethod for <code>hostname</code>.</p>
     *
     *  @param hostname  The hostname
     *  @return the value of the attribute for <code>hostname</code> or <code>null</code>
     *          if the attribute was not defined for <code>hostname</code>.
     */
    public java.lang.String removeTerminateMethod(String hostname);
   
    /**
     *  <p>Remove the attribute terminateMethod for all hostnames.</p>
     */
    public void removeAllTerminateMethod();


 
    /**
     *  Determine if any terminateMethod attribute is set
     *  @return <code>true</code> if the terminateMethod attribute is set
     */
    public boolean isSetTerminateMethod();


    // Attribute initialState ------------------------------------------------

        // keyClassName for SGE_HOST = String
     
   
    /**
     *  <p>Get the default value of the attribute initialState.</p>
     *  @return the default value of the attribute initialState
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultInitialState();

    /**
     *  <p>Get the initialState attribute for <code>hostname</code>.</p>
     *  @param   hostname   the hostname
     *  @return  the initialState attribute for <code>hostname</code> or the
     *           default value of  initialState
     */
    public String getInitialState(String hostname);
   
    /**
     *  Get the set of <code>hostname</code>s which have the attribute initialState set.
     *  @return set of <code>hostname</code>s
     */
    public Set<String> getInitialStateKeys();
   
    /**
     *  Get the number of hostnames which have the attribute initialState set.
     *  @return the number of hostnames which have the attribute initialState set.
     */
    public int getInitialStateCount();
   
    /**
     *  Determine if any initialState attribute is for <code>hostname</code> is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the initialState attribute is set
     */
    public boolean isSetInitialState(String hostname);
   
   
          
    /**
     *  <p>Put the attribute initialState for <code>hostname</code>.</p>
     *
     *  @param hostname   the hostname
     *  @param initialState the initialState
     */
    public void putInitialState(String hostname, String initialState);
   
   
    /**
     *  Set <code>initialState</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param initialState  the initialState attribute
     */
    public void setDefaultInitialState(String initialState);



    /**
     *  <p>remove the attribute initialState for <code>hostname</code>.</p>
     *
     *  @param hostname  The hostname
     *  @return the value of the attribute for <code>hostname</code> or <code>null</code>
     *          if the attribute was not defined for <code>hostname</code>.
     */
    public java.lang.String removeInitialState(String hostname);
   
    /**
     *  <p>Remove the attribute initialState for all hostnames.</p>
     */
    public void removeAllInitialState();


 
    /**
     *  Determine if any initialState attribute is set
     *  @return <code>true</code> if the initialState attribute is set
     */
    public boolean isSetInitialState();


    // Attribute peList ------------------------------------------------
      

    /**
     *  Get the value of <code>hostname</code> at <code>index</code>.
     *  @param hostname the hostname
     *  @param index the index
     */
    public String getPe(String hostname, int index);
   
    /**
     *  Get the number of values for <code>hostname</code>
     *  @param hostname the hostname
     */
    public int getPeCount(String hostname);
   
    /**
     *   Get a unmodifiable set of stored pe attribute keys.
     *   @return unmodifiable set of stored pe attribute keys
     */
    public Set<String> getPeKeys();
   
    /**
     *  <p>Get the default value of the attribute pe.
     *  (@/)</p>
     *  @return the default value of the attribute pe
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultPe(int index);
   
    /**
     *  Get the number of values for  the default <code>hostname</code>
     *  (@/).
     */
    public int getDefaultPeCount();
   
   
   
    /**
     *  Get an unmodifiable list of pe attributes for 
     *  <code>hostname</code>.
     *
     *  @param hostname the hostname
     *  @return unmodifiable list of pe attributes
     */
    public List<String> getPeList(String hostname);
   

    /**
     *  Add <code>pe</code> attribute to <code>hostname</code>.
     *
     *  @param hostname  the hostname
     *  @param pe the pe attribute
     */
    public void addPe(String hostname, String pe);

    /**
     *  Initialize <code>pe</code> attribute for a <code>hostname</code> 
     *  with an empty list.
     *
     *  @param hostname  the hostname
     */
    public void addEmptyPe(String hostname);
   
   
    /**
     *  Set <code>pe</code> attribute for <code>hostname</code>.
     *
     *  @param hostname  the hostname
     *  @param index  index of the pe attribute
     *  @param pe  the pe attribute
     */
    public void setPe(String hostname, int index, String pe);
   
    /**
     *  Remove <code>pe</code> attribute for <code>hostname</code>.
     *
     *  @param hostname  the hostname
     *  @param index the index of the pe attribute
     *  @return the remove pe attribute of <code>null</code>
     *          if the attribute has not been found
     */
    public Object removePeAt(String hostname, int index);
   
    /**
     *  Remove <code>pe</code> attribute for <code>hostname</code>.
     *
     *  @param hostname  the hostname
     *  @param pe the pe) attribute
     *  @return <code>true</code> if the attribute has been removed
     */
    public boolean removePe(String hostname, String pe);
   
    /**
     *  Remove all <code>pe</code> attributes for <code>hostname</code>.
     *
     *  @param hostname the hostname
     */   
    public void removeAllPe(String hostname);
   
    // default methods
   
    /**
     *  Add <code>pe</code> attribute to 
     *  the default <code>hostname</code>  (@/).
     *
     *  @param pe the pe attribute
     */
    public void addDefaultPe(String pe);
   
    /**
     *  Set <code>pe</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param index  index of the pe attribute
     *  @param pe  the pe attribute
     */
    public void setDefaultPe(int index, String pe);
   
    /**
     *  Remove <code>pe</code> attribute for the
     *  default <code>hostname</code> (@/).
     *
     *  @param hostname  the hostname
     *  @param index the index of the pe attribute
     *  @return the remove pe attribute of <code>null</code>
     *          if the attribute has not been found
     */
    public Object removeDefaultPeAt(String hostname, int index);
   
    /**
     *  Remove <code>pe</code> attribute from the
     *  default <code>hostname</code> (@/).
     *
     *  @param pe the pe) attribute
     *  @return <code>true</code> if the attribute has been removed
     */
    public boolean removeDefaultPe(String hostname, String pe);

    /**
     *  Remove all pe) attributes from 
     *  the default <code>hostname</code> (@/).
     */
    public void removeAllDefaultPe();
   
    /**
     *  Remove all pe) attributes.
     */
    public void removeAllPe();
   
   

    
 
    /**
     *  Determine if any pe attribute is set
     *  @return <code>true</code> if the pe attribute is set
     */
    public boolean isSetPe();


    // Attribute ckptList ------------------------------------------------
      

    /**
     *  Get the value of <code>hostname</code> at <code>index</code>.
     *  @param hostname the hostname
     *  @param index the index
     */
    public String getCkpt(String hostname, int index);
   
    /**
     *  Get the number of values for <code>hostname</code>
     *  @param hostname the hostname
     */
    public int getCkptCount(String hostname);
   
    /**
     *   Get a unmodifiable set of stored ckpt attribute keys.
     *   @return unmodifiable set of stored ckpt attribute keys
     */
    public Set<String> getCkptKeys();
   
    /**
     *  <p>Get the default value of the attribute ckpt.
     *  (@/)</p>
     *  @return the default value of the attribute ckpt
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public String getDefaultCkpt(int index);
   
    /**
     *  Get the number of values for  the default <code>hostname</code>
     *  (@/).
     */
    public int getDefaultCkptCount();
   
   
   
    /**
     *  Get an unmodifiable list of ckpt attributes for 
     *  <code>hostname</code>.
     *
     *  @param hostname the hostname
     *  @return unmodifiable list of ckpt attributes
     */
    public List<String> getCkptList(String hostname);
   

    /**
     *  Add <code>checkpoint</code> attribute to <code>hostname</code>.
     *
     *  @param hostname  the hostname
     *  @param checkpoint the checkpoint attribute
     */
    public void addCkpt(String hostname, String checkpoint);

    /**
     *  Initialize <code>checkpoint</code> attribute for a <code>hostname</code> 
     *  with an empty list.
     *
     *  @param hostname  the hostname
     */
    public void addEmptyCkpt(String hostname);
   
   
    /**
     *  Set <code>checkpoint</code> attribute for <code>hostname</code>.
     *
     *  @param hostname  the hostname
     *  @param index  index of the checkpoint attribute
     *  @param checkpoint  the checkpoint attribute
     */
    public void setCkpt(String hostname, int index, String checkpoint);
   
    /**
     *  Remove <code>checkpoint</code> attribute for <code>hostname</code>.
     *
     *  @param hostname  the hostname
     *  @param index the index of the checkpoint attribute
     *  @return the remove checkpoint attribute of <code>null</code>
     *          if the attribute has not been found
     */
    public Object removeCkptAt(String hostname, int index);
   
    /**
     *  Remove <code>checkpoint</code> attribute for <code>hostname</code>.
     *
     *  @param hostname  the hostname
     *  @param checkpoint the checkpoint) attribute
     *  @return <code>true</code> if the attribute has been removed
     */
    public boolean removeCkpt(String hostname, String checkpoint);
   
    /**
     *  Remove all <code>checkpoint</code> attributes for <code>hostname</code>.
     *
     *  @param hostname the hostname
     */   
    public void removeAllCkpt(String hostname);
   
    // default methods
   
    /**
     *  Add <code>checkpoint</code> attribute to 
     *  the default <code>hostname</code>  (@/).
     *
     *  @param checkpoint the checkpoint attribute
     */
    public void addDefaultCkpt(String checkpoint);
   
    /**
     *  Set <code>checkpoint</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param index  index of the checkpoint attribute
     *  @param checkpoint  the checkpoint attribute
     */
    public void setDefaultCkpt(int index, String checkpoint);
   
    /**
     *  Remove <code>checkpoint</code> attribute for the
     *  default <code>hostname</code> (@/).
     *
     *  @param hostname  the hostname
     *  @param index the index of the checkpoint attribute
     *  @return the remove checkpoint attribute of <code>null</code>
     *          if the attribute has not been found
     */
    public Object removeDefaultCkptAt(String hostname, int index);
   
    /**
     *  Remove <code>checkpoint</code> attribute from the
     *  default <code>hostname</code> (@/).
     *
     *  @param checkpoint the checkpoint) attribute
     *  @return <code>true</code> if the attribute has been removed
     */
    public boolean removeDefaultCkpt(String hostname, String checkpoint);

    /**
     *  Remove all checkpoint) attributes from 
     *  the default <code>hostname</code> (@/).
     */
    public void removeAllDefaultCkpt();
   
    /**
     *  Remove all checkpoint) attributes.
     */
    public void removeAllCkpt();
   
   

    
 
    /**
     *  Determine if any ckpt attribute is set
     *  @return <code>true</code> if the ckpt attribute is set
     */
    public boolean isSetCkpt();


    // Attribute ownerList ------------------------------------------------
      

    /**
     *  Get the value of <code>hostname</code> at <code>index</code>.
     *  @param hostname the hostname
     *  @param index the index
     */
    public UserSet getOwner(String hostname, int index);
   
    /**
     *  Get the number of values for <code>hostname</code>
     *  @param hostname the hostname
     */
    public int getOwnerCount(String hostname);
   
    /**
     *   Get a unmodifiable set of stored owner attribute keys.
     *   @return unmodifiable set of stored owner attribute keys
     */
    public Set<String> getOwnerKeys();
   
    /**
     *  <p>Get the default value of the attribute owner.
     *  (@/)</p>
     *  @return the default value of the attribute owner
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public UserSet getDefaultOwner(int index);
   
    /**
     *  Get the number of values for  the default <code>hostname</code>
     *  (@/).
     */
    public int getDefaultOwnerCount();
   
   
   
    /**
     *  Get an unmodifiable list of owner attributes for 
     *  <code>hostname</code>.
     *
     *  @param hostname the hostname
     *  @return unmodifiable list of owner attributes
     */
    public List<String> getOwnerList(String hostname);
   

    /**
     *  Add <code>owner</code> attribute to <code>hostname</code>.
     *
     *  @param hostname  the hostname
     *  @param owner the owner attribute
     */
    public void addOwner(String hostname, UserSet owner);

    /**
     *  Initialize <code>owner</code> attribute for a <code>hostname</code> 
     *  with an empty list.
     *
     *  @param hostname  the hostname
     */
    public void addEmptyOwner(String hostname);
   
   
    /**
     *  Set <code>owner</code> attribute for <code>hostname</code>.
     *
     *  @param hostname  the hostname
     *  @param index  index of the owner attribute
     *  @param owner  the owner attribute
     */
    public void setOwner(String hostname, int index, UserSet owner);
   
    /**
     *  Remove <code>owner</code> attribute for <code>hostname</code>.
     *
     *  @param hostname  the hostname
     *  @param index the index of the owner attribute
     *  @return the remove owner attribute of <code>null</code>
     *          if the attribute has not been found
     */
    public Object removeOwnerAt(String hostname, int index);
   
    /**
     *  Remove <code>owner</code> attribute for <code>hostname</code>.
     *
     *  @param hostname  the hostname
     *  @param owner the owner) attribute
     *  @return <code>true</code> if the attribute has been removed
     */
    public boolean removeOwner(String hostname, UserSet owner);
   
    /**
     *  Remove all <code>owner</code> attributes for <code>hostname</code>.
     *
     *  @param hostname the hostname
     */   
    public void removeAllOwner(String hostname);
   
    // default methods
   
    /**
     *  Add <code>owner</code> attribute to 
     *  the default <code>hostname</code>  (@/).
     *
     *  @param owner the owner attribute
     */
    public void addDefaultOwner(UserSet owner);
   
    /**
     *  Set <code>owner</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param index  index of the owner attribute
     *  @param owner  the owner attribute
     */
    public void setDefaultOwner(int index, UserSet owner);
   
    /**
     *  Remove <code>owner</code> attribute for the
     *  default <code>hostname</code> (@/).
     *
     *  @param hostname  the hostname
     *  @param index the index of the owner attribute
     *  @return the remove owner attribute of <code>null</code>
     *          if the attribute has not been found
     */
    public Object removeDefaultOwnerAt(String hostname, int index);
   
    /**
     *  Remove <code>owner</code> attribute from the
     *  default <code>hostname</code> (@/).
     *
     *  @param owner the owner) attribute
     *  @return <code>true</code> if the attribute has been removed
     */
    public boolean removeDefaultOwner(String hostname, UserSet owner);

    /**
     *  Remove all owner) attributes from 
     *  the default <code>hostname</code> (@/).
     */
    public void removeAllDefaultOwner();
   
    /**
     *  Remove all owner) attributes.
     */
    public void removeAllOwner();
   
   

    
 
    /**
     *  Determine if any owner attribute is set
     *  @return <code>true</code> if the owner attribute is set
     */
    public boolean isSetOwner();


    // Attribute acl ------------------------------------------------
      

    /**
     *  Get the value of <code>hostname</code> at <code>index</code>.
     *  @param hostname the hostname
     *  @param index the index
     */
    public UserSet getAcl(String hostname, int index);
   
    /**
     *  Get the number of values for <code>hostname</code>
     *  @param hostname the hostname
     */
    public int getAclCount(String hostname);
   
    /**
     *   Get a unmodifiable set of stored acl attribute keys.
     *   @return unmodifiable set of stored acl attribute keys
     */
    public Set<String> getAclKeys();
   
    /**
     *  <p>Get the default value of the attribute acl.
     *  (@/)</p>
     *  @return the default value of the attribute acl
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public UserSet getDefaultAcl(int index);
   
    /**
     *  Get the number of values for  the default <code>hostname</code>
     *  (@/).
     */
    public int getDefaultAclCount();
   
   
   
    /**
     *  Get an unmodifiable list of acl attributes for 
     *  <code>hostname</code>.
     *
     *  @param hostname the hostname
     *  @return unmodifiable list of acl attributes
     */
    public List<String> getAclList(String hostname);
   

    /**
     *  Add <code>acl</code> attribute to <code>hostname</code>.
     *
     *  @param hostname  the hostname
     *  @param acl the acl attribute
     */
    public void addAcl(String hostname, UserSet acl);

    /**
     *  Initialize <code>acl</code> attribute for a <code>hostname</code> 
     *  with an empty list.
     *
     *  @param hostname  the hostname
     */
    public void addEmptyAcl(String hostname);
   
   
    /**
     *  Set <code>acl</code> attribute for <code>hostname</code>.
     *
     *  @param hostname  the hostname
     *  @param index  index of the acl attribute
     *  @param acl  the acl attribute
     */
    public void setAcl(String hostname, int index, UserSet acl);
   
    /**
     *  Remove <code>acl</code> attribute for <code>hostname</code>.
     *
     *  @param hostname  the hostname
     *  @param index the index of the acl attribute
     *  @return the remove acl attribute of <code>null</code>
     *          if the attribute has not been found
     */
    public Object removeAclAt(String hostname, int index);
   
    /**
     *  Remove <code>acl</code> attribute for <code>hostname</code>.
     *
     *  @param hostname  the hostname
     *  @param acl the acl) attribute
     *  @return <code>true</code> if the attribute has been removed
     */
    public boolean removeAcl(String hostname, UserSet acl);
   
    /**
     *  Remove all <code>acl</code> attributes for <code>hostname</code>.
     *
     *  @param hostname the hostname
     */   
    public void removeAllAcl(String hostname);
   
    // default methods
   
    /**
     *  Add <code>acl</code> attribute to 
     *  the default <code>hostname</code>  (@/).
     *
     *  @param acl the acl attribute
     */
    public void addDefaultAcl(UserSet acl);
   
    /**
     *  Set <code>acl</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param index  index of the acl attribute
     *  @param acl  the acl attribute
     */
    public void setDefaultAcl(int index, UserSet acl);
   
    /**
     *  Remove <code>acl</code> attribute for the
     *  default <code>hostname</code> (@/).
     *
     *  @param hostname  the hostname
     *  @param index the index of the acl attribute
     *  @return the remove acl attribute of <code>null</code>
     *          if the attribute has not been found
     */
    public Object removeDefaultAclAt(String hostname, int index);
   
    /**
     *  Remove <code>acl</code> attribute from the
     *  default <code>hostname</code> (@/).
     *
     *  @param acl the acl) attribute
     *  @return <code>true</code> if the attribute has been removed
     */
    public boolean removeDefaultAcl(String hostname, UserSet acl);

    /**
     *  Remove all acl) attributes from 
     *  the default <code>hostname</code> (@/).
     */
    public void removeAllDefaultAcl();
   
    /**
     *  Remove all acl) attributes.
     */
    public void removeAllAcl();
   
   

    
 
    /**
     *  Determine if any acl attribute is set
     *  @return <code>true</code> if the acl attribute is set
     */
    public boolean isSetAcl();


    // Attribute xacl ------------------------------------------------
      

    /**
     *  Get the value of <code>hostname</code> at <code>index</code>.
     *  @param hostname the hostname
     *  @param index the index
     */
    public UserSet getXacl(String hostname, int index);
   
    /**
     *  Get the number of values for <code>hostname</code>
     *  @param hostname the hostname
     */
    public int getXaclCount(String hostname);
   
    /**
     *   Get a unmodifiable set of stored xacl attribute keys.
     *   @return unmodifiable set of stored xacl attribute keys
     */
    public Set<String> getXaclKeys();
   
    /**
     *  <p>Get the default value of the attribute xacl.
     *  (@/)</p>
     *  @return the default value of the attribute xacl
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public UserSet getDefaultXacl(int index);
   
    /**
     *  Get the number of values for  the default <code>hostname</code>
     *  (@/).
     */
    public int getDefaultXaclCount();
   
   
   
    /**
     *  Get an unmodifiable list of xacl attributes for 
     *  <code>hostname</code>.
     *
     *  @param hostname the hostname
     *  @return unmodifiable list of xacl attributes
     */
    public List<String> getXaclList(String hostname);
   

    /**
     *  Add <code>acl</code> attribute to <code>hostname</code>.
     *
     *  @param hostname  the hostname
     *  @param acl the acl attribute
     */
    public void addXacl(String hostname, UserSet acl);

    /**
     *  Initialize <code>acl</code> attribute for a <code>hostname</code> 
     *  with an empty list.
     *
     *  @param hostname  the hostname
     */
    public void addEmptyXacl(String hostname);
   
   
    /**
     *  Set <code>acl</code> attribute for <code>hostname</code>.
     *
     *  @param hostname  the hostname
     *  @param index  index of the acl attribute
     *  @param acl  the acl attribute
     */
    public void setXacl(String hostname, int index, UserSet acl);
   
    /**
     *  Remove <code>acl</code> attribute for <code>hostname</code>.
     *
     *  @param hostname  the hostname
     *  @param index the index of the acl attribute
     *  @return the remove acl attribute of <code>null</code>
     *          if the attribute has not been found
     */
    public Object removeXaclAt(String hostname, int index);
   
    /**
     *  Remove <code>acl</code> attribute for <code>hostname</code>.
     *
     *  @param hostname  the hostname
     *  @param acl the acl) attribute
     *  @return <code>true</code> if the attribute has been removed
     */
    public boolean removeXacl(String hostname, UserSet acl);
   
    /**
     *  Remove all <code>acl</code> attributes for <code>hostname</code>.
     *
     *  @param hostname the hostname
     */   
    public void removeAllXacl(String hostname);
   
    // default methods
   
    /**
     *  Add <code>acl</code> attribute to 
     *  the default <code>hostname</code>  (@/).
     *
     *  @param acl the acl attribute
     */
    public void addDefaultXacl(UserSet acl);
   
    /**
     *  Set <code>acl</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param index  index of the acl attribute
     *  @param acl  the acl attribute
     */
    public void setDefaultXacl(int index, UserSet acl);
   
    /**
     *  Remove <code>acl</code> attribute for the
     *  default <code>hostname</code> (@/).
     *
     *  @param hostname  the hostname
     *  @param index the index of the acl attribute
     *  @return the remove acl attribute of <code>null</code>
     *          if the attribute has not been found
     */
    public Object removeDefaultXaclAt(String hostname, int index);
   
    /**
     *  Remove <code>acl</code> attribute from the
     *  default <code>hostname</code> (@/).
     *
     *  @param acl the acl) attribute
     *  @return <code>true</code> if the attribute has been removed
     */
    public boolean removeDefaultXacl(String hostname, UserSet acl);

    /**
     *  Remove all acl) attributes from 
     *  the default <code>hostname</code> (@/).
     */
    public void removeAllDefaultXacl();
   
    /**
     *  Remove all acl) attributes.
     */
    public void removeAllXacl();
   
   

    
 
    /**
     *  Determine if any xacl attribute is set
     *  @return <code>true</code> if the xacl attribute is set
     */
    public boolean isSetXacl();


    // Attribute projects ------------------------------------------------
      

    /**
     *  Get the value of <code>hostname</code> at <code>index</code>.
     *  @param hostname the hostname
     *  @param index the index
     */
    public Project getProjects(String hostname, int index);
   
    /**
     *  Get the number of values for <code>hostname</code>
     *  @param hostname the hostname
     */
    public int getProjectsCount(String hostname);
   
    /**
     *   Get a unmodifiable set of stored projects attribute keys.
     *   @return unmodifiable set of stored projects attribute keys
     */
    public Set<String> getProjectsKeys();
   
    /**
     *  <p>Get the default value of the attribute projects.
     *  (@/)</p>
     *  @return the default value of the attribute projects
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public Project getDefaultProjects(int index);
   
    /**
     *  Get the number of values for  the default <code>hostname</code>
     *  (@/).
     */
    public int getDefaultProjectsCount();
   
   
   
    /**
     *  Get an unmodifiable list of projects attributes for 
     *  <code>hostname</code>.
     *
     *  @param hostname the hostname
     *  @return unmodifiable list of projects attributes
     */
    public List<String> getProjectsList(String hostname);
   

    /**
     *  Add <code>project</code> attribute to <code>hostname</code>.
     *
     *  @param hostname  the hostname
     *  @param project the project attribute
     */
    public void addProjects(String hostname, Project project);

    /**
     *  Initialize <code>project</code> attribute for a <code>hostname</code> 
     *  with an empty list.
     *
     *  @param hostname  the hostname
     */
    public void addEmptyProjects(String hostname);
   
   
    /**
     *  Set <code>project</code> attribute for <code>hostname</code>.
     *
     *  @param hostname  the hostname
     *  @param index  index of the project attribute
     *  @param project  the project attribute
     */
    public void setProjects(String hostname, int index, Project project);
   
    /**
     *  Remove <code>project</code> attribute for <code>hostname</code>.
     *
     *  @param hostname  the hostname
     *  @param index the index of the project attribute
     *  @return the remove project attribute of <code>null</code>
     *          if the attribute has not been found
     */
    public Object removeProjectsAt(String hostname, int index);
   
    /**
     *  Remove <code>project</code> attribute for <code>hostname</code>.
     *
     *  @param hostname  the hostname
     *  @param project the project) attribute
     *  @return <code>true</code> if the attribute has been removed
     */
    public boolean removeProjects(String hostname, Project project);
   
    /**
     *  Remove all <code>project</code> attributes for <code>hostname</code>.
     *
     *  @param hostname the hostname
     */   
    public void removeAllProjects(String hostname);
   
    // default methods
   
    /**
     *  Add <code>project</code> attribute to 
     *  the default <code>hostname</code>  (@/).
     *
     *  @param project the project attribute
     */
    public void addDefaultProjects(Project project);
   
    /**
     *  Set <code>project</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param index  index of the project attribute
     *  @param project  the project attribute
     */
    public void setDefaultProjects(int index, Project project);
   
    /**
     *  Remove <code>project</code> attribute for the
     *  default <code>hostname</code> (@/).
     *
     *  @param hostname  the hostname
     *  @param index the index of the project attribute
     *  @return the remove project attribute of <code>null</code>
     *          if the attribute has not been found
     */
    public Object removeDefaultProjectsAt(String hostname, int index);
   
    /**
     *  Remove <code>project</code> attribute from the
     *  default <code>hostname</code> (@/).
     *
     *  @param project the project) attribute
     *  @return <code>true</code> if the attribute has been removed
     */
    public boolean removeDefaultProjects(String hostname, Project project);

    /**
     *  Remove all project) attributes from 
     *  the default <code>hostname</code> (@/).
     */
    public void removeAllDefaultProjects();
   
    /**
     *  Remove all project) attributes.
     */
    public void removeAllProjects();
   
   

    
 
    /**
     *  Determine if any projects attribute is set
     *  @return <code>true</code> if the projects attribute is set
     */
    public boolean isSetProjects();


    // Attribute xprojects ------------------------------------------------
      

    /**
     *  Get the value of <code>hostname</code> at <code>index</code>.
     *  @param hostname the hostname
     *  @param index the index
     */
    public Project getXprojects(String hostname, int index);
   
    /**
     *  Get the number of values for <code>hostname</code>
     *  @param hostname the hostname
     */
    public int getXprojectsCount(String hostname);
   
    /**
     *   Get a unmodifiable set of stored xprojects attribute keys.
     *   @return unmodifiable set of stored xprojects attribute keys
     */
    public Set<String> getXprojectsKeys();
   
    /**
     *  <p>Get the default value of the attribute xprojects.
     *  (@/)</p>
     *  @return the default value of the attribute xprojects
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public Project getDefaultXprojects(int index);
   
    /**
     *  Get the number of values for  the default <code>hostname</code>
     *  (@/).
     */
    public int getDefaultXprojectsCount();
   
   
   
    /**
     *  Get an unmodifiable list of xprojects attributes for 
     *  <code>hostname</code>.
     *
     *  @param hostname the hostname
     *  @return unmodifiable list of xprojects attributes
     */
    public List<String> getXprojectsList(String hostname);
   

    /**
     *  Add <code>project</code> attribute to <code>hostname</code>.
     *
     *  @param hostname  the hostname
     *  @param project the project attribute
     */
    public void addXprojects(String hostname, Project project);

    /**
     *  Initialize <code>project</code> attribute for a <code>hostname</code> 
     *  with an empty list.
     *
     *  @param hostname  the hostname
     */
    public void addEmptyXprojects(String hostname);
   
   
    /**
     *  Set <code>project</code> attribute for <code>hostname</code>.
     *
     *  @param hostname  the hostname
     *  @param index  index of the project attribute
     *  @param project  the project attribute
     */
    public void setXprojects(String hostname, int index, Project project);
   
    /**
     *  Remove <code>project</code> attribute for <code>hostname</code>.
     *
     *  @param hostname  the hostname
     *  @param index the index of the project attribute
     *  @return the remove project attribute of <code>null</code>
     *          if the attribute has not been found
     */
    public Object removeXprojectsAt(String hostname, int index);
   
    /**
     *  Remove <code>project</code> attribute for <code>hostname</code>.
     *
     *  @param hostname  the hostname
     *  @param project the project) attribute
     *  @return <code>true</code> if the attribute has been removed
     */
    public boolean removeXprojects(String hostname, Project project);
   
    /**
     *  Remove all <code>project</code> attributes for <code>hostname</code>.
     *
     *  @param hostname the hostname
     */   
    public void removeAllXprojects(String hostname);
   
    // default methods
   
    /**
     *  Add <code>project</code> attribute to 
     *  the default <code>hostname</code>  (@/).
     *
     *  @param project the project attribute
     */
    public void addDefaultXprojects(Project project);
   
    /**
     *  Set <code>project</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param index  index of the project attribute
     *  @param project  the project attribute
     */
    public void setDefaultXprojects(int index, Project project);
   
    /**
     *  Remove <code>project</code> attribute for the
     *  default <code>hostname</code> (@/).
     *
     *  @param hostname  the hostname
     *  @param index the index of the project attribute
     *  @return the remove project attribute of <code>null</code>
     *          if the attribute has not been found
     */
    public Object removeDefaultXprojectsAt(String hostname, int index);
   
    /**
     *  Remove <code>project</code> attribute from the
     *  default <code>hostname</code> (@/).
     *
     *  @param project the project) attribute
     *  @return <code>true</code> if the attribute has been removed
     */
    public boolean removeDefaultXprojects(String hostname, Project project);

    /**
     *  Remove all project) attributes from 
     *  the default <code>hostname</code> (@/).
     */
    public void removeAllDefaultXprojects();
   
    /**
     *  Remove all project) attributes.
     */
    public void removeAllXprojects();
   
   

    
 
    /**
     *  Determine if any xprojects attribute is set
     *  @return <code>true</code> if the xprojects attribute is set
     */
    public boolean isSetXprojects();


    // Attribute loadThresholds ------------------------------------------------
      

    /**
     *  Get the value of <code>hostname</code> at <code>index</code>.
     *  @param hostname the hostname
     *  @param index the index
     */
    public ComplexEntry getLoadThresholds(String hostname, int index);
   
    /**
     *  Get the number of values for <code>hostname</code>
     *  @param hostname the hostname
     */
    public int getLoadThresholdsCount(String hostname);
   
    /**
     *   Get a unmodifiable set of stored loadThresholds attribute keys.
     *   @return unmodifiable set of stored loadThresholds attribute keys
     */
    public Set<String> getLoadThresholdsKeys();
   
    /**
     *  <p>Get the default value of the attribute loadThresholds.
     *  (@/)</p>
     *  @return the default value of the attribute loadThresholds
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public ComplexEntry getDefaultLoadThresholds(int index);
   
    /**
     *  Get the number of values for  the default <code>hostname</code>
     *  (@/).
     */
    public int getDefaultLoadThresholdsCount();
   
   
   
    /**
     *  Get an unmodifiable list of loadThresholds attributes for 
     *  <code>hostname</code>.
     *
     *  @param hostname the hostname
     *  @return unmodifiable list of loadThresholds attributes
     */
    public List<String> getLoadThresholdsList(String hostname);
   

    /**
     *  Add <code>loadThreshold</code> attribute to <code>hostname</code>.
     *
     *  @param hostname  the hostname
     *  @param loadThreshold the loadThreshold attribute
     */
    public void addLoadThresholds(String hostname, ComplexEntry loadThreshold);

    /**
     *  Initialize <code>loadThreshold</code> attribute for a <code>hostname</code> 
     *  with an empty list.
     *
     *  @param hostname  the hostname
     */
    public void addEmptyLoadThresholds(String hostname);
   
   
    /**
     *  Set <code>loadThreshold</code> attribute for <code>hostname</code>.
     *
     *  @param hostname  the hostname
     *  @param index  index of the loadThreshold attribute
     *  @param loadThreshold  the loadThreshold attribute
     */
    public void setLoadThresholds(String hostname, int index, ComplexEntry loadThreshold);
   
    /**
     *  Remove <code>loadThreshold</code> attribute for <code>hostname</code>.
     *
     *  @param hostname  the hostname
     *  @param index the index of the loadThreshold attribute
     *  @return the remove loadThreshold attribute of <code>null</code>
     *          if the attribute has not been found
     */
    public Object removeLoadThresholdsAt(String hostname, int index);
   
    /**
     *  Remove <code>loadThreshold</code> attribute for <code>hostname</code>.
     *
     *  @param hostname  the hostname
     *  @param loadThreshold the loadThreshold) attribute
     *  @return <code>true</code> if the attribute has been removed
     */
    public boolean removeLoadThresholds(String hostname, ComplexEntry loadThreshold);
   
    /**
     *  Remove all <code>loadThreshold</code> attributes for <code>hostname</code>.
     *
     *  @param hostname the hostname
     */   
    public void removeAllLoadThresholds(String hostname);
   
    // default methods
   
    /**
     *  Add <code>loadThreshold</code> attribute to 
     *  the default <code>hostname</code>  (@/).
     *
     *  @param loadThreshold the loadThreshold attribute
     */
    public void addDefaultLoadThresholds(ComplexEntry loadThreshold);
   
    /**
     *  Set <code>loadThreshold</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param index  index of the loadThreshold attribute
     *  @param loadThreshold  the loadThreshold attribute
     */
    public void setDefaultLoadThresholds(int index, ComplexEntry loadThreshold);
   
    /**
     *  Remove <code>loadThreshold</code> attribute for the
     *  default <code>hostname</code> (@/).
     *
     *  @param hostname  the hostname
     *  @param index the index of the loadThreshold attribute
     *  @return the remove loadThreshold attribute of <code>null</code>
     *          if the attribute has not been found
     */
    public Object removeDefaultLoadThresholdsAt(String hostname, int index);
   
    /**
     *  Remove <code>loadThreshold</code> attribute from the
     *  default <code>hostname</code> (@/).
     *
     *  @param loadThreshold the loadThreshold) attribute
     *  @return <code>true</code> if the attribute has been removed
     */
    public boolean removeDefaultLoadThresholds(String hostname, ComplexEntry loadThreshold);

    /**
     *  Remove all loadThreshold) attributes from 
     *  the default <code>hostname</code> (@/).
     */
    public void removeAllDefaultLoadThresholds();
   
    /**
     *  Remove all loadThreshold) attributes.
     */
    public void removeAllLoadThresholds();
   
   

    
 
    /**
     *  Determine if any loadThresholds attribute is set
     *  @return <code>true</code> if the loadThresholds attribute is set
     */
    public boolean isSetLoadThresholds();


    // Attribute suspendThresholds ------------------------------------------------
      

    /**
     *  Get the value of <code>hostname</code> at <code>index</code>.
     *  @param hostname the hostname
     *  @param index the index
     */
    public ComplexEntry getSuspendThresholds(String hostname, int index);
   
    /**
     *  Get the number of values for <code>hostname</code>
     *  @param hostname the hostname
     */
    public int getSuspendThresholdsCount(String hostname);
   
    /**
     *   Get a unmodifiable set of stored suspendThresholds attribute keys.
     *   @return unmodifiable set of stored suspendThresholds attribute keys
     */
    public Set<String> getSuspendThresholdsKeys();
   
    /**
     *  <p>Get the default value of the attribute suspendThresholds.
     *  (@/)</p>
     *  @return the default value of the attribute suspendThresholds
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public ComplexEntry getDefaultSuspendThresholds(int index);
   
    /**
     *  Get the number of values for  the default <code>hostname</code>
     *  (@/).
     */
    public int getDefaultSuspendThresholdsCount();
   
   
   
    /**
     *  Get an unmodifiable list of suspendThresholds attributes for 
     *  <code>hostname</code>.
     *
     *  @param hostname the hostname
     *  @return unmodifiable list of suspendThresholds attributes
     */
    public List<String> getSuspendThresholdsList(String hostname);
   

    /**
     *  Add <code>suspendThreshold</code> attribute to <code>hostname</code>.
     *
     *  @param hostname  the hostname
     *  @param suspendThreshold the suspendThreshold attribute
     */
    public void addSuspendThresholds(String hostname, ComplexEntry suspendThreshold);

    /**
     *  Initialize <code>suspendThreshold</code> attribute for a <code>hostname</code> 
     *  with an empty list.
     *
     *  @param hostname  the hostname
     */
    public void addEmptySuspendThresholds(String hostname);
   
   
    /**
     *  Set <code>suspendThreshold</code> attribute for <code>hostname</code>.
     *
     *  @param hostname  the hostname
     *  @param index  index of the suspendThreshold attribute
     *  @param suspendThreshold  the suspendThreshold attribute
     */
    public void setSuspendThresholds(String hostname, int index, ComplexEntry suspendThreshold);
   
    /**
     *  Remove <code>suspendThreshold</code> attribute for <code>hostname</code>.
     *
     *  @param hostname  the hostname
     *  @param index the index of the suspendThreshold attribute
     *  @return the remove suspendThreshold attribute of <code>null</code>
     *          if the attribute has not been found
     */
    public Object removeSuspendThresholdsAt(String hostname, int index);
   
    /**
     *  Remove <code>suspendThreshold</code> attribute for <code>hostname</code>.
     *
     *  @param hostname  the hostname
     *  @param suspendThreshold the suspendThreshold) attribute
     *  @return <code>true</code> if the attribute has been removed
     */
    public boolean removeSuspendThresholds(String hostname, ComplexEntry suspendThreshold);
   
    /**
     *  Remove all <code>suspendThreshold</code> attributes for <code>hostname</code>.
     *
     *  @param hostname the hostname
     */   
    public void removeAllSuspendThresholds(String hostname);
   
    // default methods
   
    /**
     *  Add <code>suspendThreshold</code> attribute to 
     *  the default <code>hostname</code>  (@/).
     *
     *  @param suspendThreshold the suspendThreshold attribute
     */
    public void addDefaultSuspendThresholds(ComplexEntry suspendThreshold);
   
    /**
     *  Set <code>suspendThreshold</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param index  index of the suspendThreshold attribute
     *  @param suspendThreshold  the suspendThreshold attribute
     */
    public void setDefaultSuspendThresholds(int index, ComplexEntry suspendThreshold);
   
    /**
     *  Remove <code>suspendThreshold</code> attribute for the
     *  default <code>hostname</code> (@/).
     *
     *  @param hostname  the hostname
     *  @param index the index of the suspendThreshold attribute
     *  @return the remove suspendThreshold attribute of <code>null</code>
     *          if the attribute has not been found
     */
    public Object removeDefaultSuspendThresholdsAt(String hostname, int index);
   
    /**
     *  Remove <code>suspendThreshold</code> attribute from the
     *  default <code>hostname</code> (@/).
     *
     *  @param suspendThreshold the suspendThreshold) attribute
     *  @return <code>true</code> if the attribute has been removed
     */
    public boolean removeDefaultSuspendThresholds(String hostname, ComplexEntry suspendThreshold);

    /**
     *  Remove all suspendThreshold) attributes from 
     *  the default <code>hostname</code> (@/).
     */
    public void removeAllDefaultSuspendThresholds();
   
    /**
     *  Remove all suspendThreshold) attributes.
     */
    public void removeAllSuspendThresholds();
   
   

    
 
    /**
     *  Determine if any suspendThresholds attribute is set
     *  @return <code>true</code> if the suspendThresholds attribute is set
     */
    public boolean isSetSuspendThresholds();


    // Attribute consumableConfigList ------------------------------------------------
      

    /**
     *  Get the value of <code>hostname</code> at <code>index</code>.
     *  @param hostname the hostname
     *  @param index the index
     */
    public ComplexEntry getConsumableConfig(String hostname, int index);
   
    /**
     *  Get the number of values for <code>hostname</code>
     *  @param hostname the hostname
     */
    public int getConsumableConfigCount(String hostname);
   
    /**
     *   Get a unmodifiable set of stored consumableConfig attribute keys.
     *   @return unmodifiable set of stored consumableConfig attribute keys
     */
    public Set<String> getConsumableConfigKeys();
   
    /**
     *  <p>Get the default value of the attribute consumableConfig.
     *  (@/)</p>
     *  @return the default value of the attribute consumableConfig
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public ComplexEntry getDefaultConsumableConfig(int index);
   
    /**
     *  Get the number of values for  the default <code>hostname</code>
     *  (@/).
     */
    public int getDefaultConsumableConfigCount();
   
   
   
    /**
     *  Get an unmodifiable list of consumableConfig attributes for 
     *  <code>hostname</code>.
     *
     *  @param hostname the hostname
     *  @return unmodifiable list of consumableConfig attributes
     */
    public List<String> getConsumableConfigList(String hostname);
   

    /**
     *  Add <code>consumable</code> attribute to <code>hostname</code>.
     *
     *  @param hostname  the hostname
     *  @param consumable the consumable attribute
     */
    public void addConsumableConfig(String hostname, ComplexEntry consumable);

    /**
     *  Initialize <code>consumable</code> attribute for a <code>hostname</code> 
     *  with an empty list.
     *
     *  @param hostname  the hostname
     */
    public void addEmptyConsumableConfig(String hostname);
   
   
    /**
     *  Set <code>consumable</code> attribute for <code>hostname</code>.
     *
     *  @param hostname  the hostname
     *  @param index  index of the consumable attribute
     *  @param consumable  the consumable attribute
     */
    public void setConsumableConfig(String hostname, int index, ComplexEntry consumable);
   
    /**
     *  Remove <code>consumable</code> attribute for <code>hostname</code>.
     *
     *  @param hostname  the hostname
     *  @param index the index of the consumable attribute
     *  @return the remove consumable attribute of <code>null</code>
     *          if the attribute has not been found
     */
    public Object removeConsumableConfigAt(String hostname, int index);
   
    /**
     *  Remove <code>consumable</code> attribute for <code>hostname</code>.
     *
     *  @param hostname  the hostname
     *  @param consumable the consumable) attribute
     *  @return <code>true</code> if the attribute has been removed
     */
    public boolean removeConsumableConfig(String hostname, ComplexEntry consumable);
   
    /**
     *  Remove all <code>consumable</code> attributes for <code>hostname</code>.
     *
     *  @param hostname the hostname
     */   
    public void removeAllConsumableConfig(String hostname);
   
    // default methods
   
    /**
     *  Add <code>consumable</code> attribute to 
     *  the default <code>hostname</code>  (@/).
     *
     *  @param consumable the consumable attribute
     */
    public void addDefaultConsumableConfig(ComplexEntry consumable);
   
    /**
     *  Set <code>consumable</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param index  index of the consumable attribute
     *  @param consumable  the consumable attribute
     */
    public void setDefaultConsumableConfig(int index, ComplexEntry consumable);
   
    /**
     *  Remove <code>consumable</code> attribute for the
     *  default <code>hostname</code> (@/).
     *
     *  @param hostname  the hostname
     *  @param index the index of the consumable attribute
     *  @return the remove consumable attribute of <code>null</code>
     *          if the attribute has not been found
     */
    public Object removeDefaultConsumableConfigAt(String hostname, int index);
   
    /**
     *  Remove <code>consumable</code> attribute from the
     *  default <code>hostname</code> (@/).
     *
     *  @param consumable the consumable) attribute
     *  @return <code>true</code> if the attribute has been removed
     */
    public boolean removeDefaultConsumableConfig(String hostname, ComplexEntry consumable);

    /**
     *  Remove all consumable) attributes from 
     *  the default <code>hostname</code> (@/).
     */
    public void removeAllDefaultConsumableConfig();
   
    /**
     *  Remove all consumable) attributes.
     */
    public void removeAllConsumableConfig();
   
   

    
 
    /**
     *  Determine if any consumableConfig attribute is set
     *  @return <code>true</code> if the consumableConfig attribute is set
     */
    public boolean isSetConsumableConfig();


    // Attribute subordinateList ------------------------------------------------
      

    /**
     *  Get the value of <code>hostname</code> at <code>index</code>.
     *  @param hostname the hostname
     *  @param index the index
     */
    public Subordinate getSubordinate(String hostname, int index);
   
    /**
     *  Get the number of values for <code>hostname</code>
     *  @param hostname the hostname
     */
    public int getSubordinateCount(String hostname);
   
    /**
     *   Get a unmodifiable set of stored subordinate attribute keys.
     *   @return unmodifiable set of stored subordinate attribute keys
     */
    public Set<String> getSubordinateKeys();
   
    /**
     *  <p>Get the default value of the attribute subordinate.
     *  (@/)</p>
     *  @return the default value of the attribute subordinate
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public Subordinate getDefaultSubordinate(int index);
   
    /**
     *  Get the number of values for  the default <code>hostname</code>
     *  (@/).
     */
    public int getDefaultSubordinateCount();
   
   
   
    /**
     *  Get an unmodifiable list of subordinate attributes for 
     *  <code>hostname</code>.
     *
     *  @param hostname the hostname
     *  @return unmodifiable list of subordinate attributes
     */
    public List<String> getSubordinateList(String hostname);
   

    /**
     *  Add <code>subordinate</code> attribute to <code>hostname</code>.
     *
     *  @param hostname  the hostname
     *  @param subordinate the subordinate attribute
     */
    public void addSubordinate(String hostname, Subordinate subordinate);

    /**
     *  Initialize <code>subordinate</code> attribute for a <code>hostname</code> 
     *  with an empty list.
     *
     *  @param hostname  the hostname
     */
    public void addEmptySubordinate(String hostname);
   
   
    /**
     *  Set <code>subordinate</code> attribute for <code>hostname</code>.
     *
     *  @param hostname  the hostname
     *  @param index  index of the subordinate attribute
     *  @param subordinate  the subordinate attribute
     */
    public void setSubordinate(String hostname, int index, Subordinate subordinate);
   
    /**
     *  Remove <code>subordinate</code> attribute for <code>hostname</code>.
     *
     *  @param hostname  the hostname
     *  @param index the index of the subordinate attribute
     *  @return the remove subordinate attribute of <code>null</code>
     *          if the attribute has not been found
     */
    public Object removeSubordinateAt(String hostname, int index);
   
    /**
     *  Remove <code>subordinate</code> attribute for <code>hostname</code>.
     *
     *  @param hostname  the hostname
     *  @param subordinate the subordinate) attribute
     *  @return <code>true</code> if the attribute has been removed
     */
    public boolean removeSubordinate(String hostname, Subordinate subordinate);
   
    /**
     *  Remove all <code>subordinate</code> attributes for <code>hostname</code>.
     *
     *  @param hostname the hostname
     */   
    public void removeAllSubordinate(String hostname);
   
    // default methods
   
    /**
     *  Add <code>subordinate</code> attribute to 
     *  the default <code>hostname</code>  (@/).
     *
     *  @param subordinate the subordinate attribute
     */
    public void addDefaultSubordinate(Subordinate subordinate);
   
    /**
     *  Set <code>subordinate</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param index  index of the subordinate attribute
     *  @param subordinate  the subordinate attribute
     */
    public void setDefaultSubordinate(int index, Subordinate subordinate);
   
    /**
     *  Remove <code>subordinate</code> attribute for the
     *  default <code>hostname</code> (@/).
     *
     *  @param hostname  the hostname
     *  @param index the index of the subordinate attribute
     *  @return the remove subordinate attribute of <code>null</code>
     *          if the attribute has not been found
     */
    public Object removeDefaultSubordinateAt(String hostname, int index);
   
    /**
     *  Remove <code>subordinate</code> attribute from the
     *  default <code>hostname</code> (@/).
     *
     *  @param subordinate the subordinate) attribute
     *  @return <code>true</code> if the attribute has been removed
     */
    public boolean removeDefaultSubordinate(String hostname, Subordinate subordinate);

    /**
     *  Remove all subordinate) attributes from 
     *  the default <code>hostname</code> (@/).
     */
    public void removeAllDefaultSubordinate();
   
    /**
     *  Remove all subordinate) attributes.
     */
    public void removeAllSubordinate();
   
   

    
 
    /**
     *  Determine if any subordinate attribute is set
     *  @return <code>true</code> if the subordinate attribute is set
     */
    public boolean isSetSubordinate();


    // Attribute qtype ------------------------------------------------

        // keyClassName for SGE_HOST = String
     
   
    /**
     *  <p>Get the default value of the attribute qtype.</p>
     *  @return the default value of the attribute qtype
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public int getDefaultQtype();

    /**
     *  <p>Get the qtype attribute for <code>hostname</code>.</p>
     *  @param   hostname   the hostname
     *  @return  the qtype attribute for <code>hostname</code> or the
     *           default value of  qtype
     */
    public int getQtype(String hostname);
   
    /**
     *  Get the set of <code>hostname</code>s which have the attribute qtype set.
     *  @return set of <code>hostname</code>s
     */
    public Set<String> getQtypeKeys();
   
    /**
     *  Get the number of hostnames which have the attribute qtype set.
     *  @return the number of hostnames which have the attribute qtype set.
     */
    public int getQtypeCount();
   
    /**
     *  Determine if any qtype attribute is for <code>hostname</code> is set
     *  @param  hostname the hostname
     *  @return <code>true</code> if the qtype attribute is set
     */
    public boolean isSetQtype(String hostname);
   
   
          
    /**
     *  <p>Put the attribute qtype for <code>hostname</code>.</p>
     *
     *  @param hostname   the hostname
     *  @param qType the qType
     */
    public void putQtype(String hostname, int qType);
   
   
    /**
     *  Set <code>qType</code> attribute for the default
     *  <code>hostname</code> (@/).
     *
     *  @param qType  the qType attribute
     */
    public void setDefaultQtype(int qType);



    /**
     *  <p>remove the attribute qtype for <code>hostname</code>.</p>
     *
     *  @param hostname  The hostname
     *  @return the value of the attribute for <code>hostname</code> or <code>null</code>
     *          if the attribute was not defined for <code>hostname</code>.
     */
    public java.lang.Integer removeQtype(String hostname);
   
    /**
     *  <p>Remove the attribute qtype for all hostnames.</p>
     */
    public void removeAllQtype();


 
    /**
     *  Determine if any qtype attribute is set
     *  @return <code>true</code> if the qtype attribute is set
     */
    public boolean isSetQtype();


    // Attribute tag ------------------------------------------------

       
    /**
     *   Set the tag attribute.
     *
     *   @param aTag  the new value for the  tag attribute
     */
    public void setTag(int aTag);
  
    /**
     *  Get the value of the tag attribute.
     *  @return the value of the tag attribute
     */
    public int getTag();
   

 
    /**
     *  Determine if any tag attribute is set
     *  @return <code>true</code> if the tag attribute is set
     */
    public boolean isSetTag();



    /*
     * Dump the object
     * @return <code>String</code> the dump string
     */
     public String dump();
     

}
