/*___INFO__MARK_BEGIN__*/
/*************************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  the Sun Industry Standards Source License Version 1.2
 *
 *  Sun Microsystems Inc., March, 2001
 *
 *
 *  Sun Industry Standards Source License Version 1.2
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.2 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *   Copyright: 2001 by Sun Microsystems, Inc.
 *
 *   All Rights Reserved.
 *
 ************************************************************************/
/*___INFO__MARK_END__*/
/**
 *  Generated from javamodel_impl.jsp
 *  !!! DO NOT EDIT THIS FILE !!!
 */

package com.sun.grid.jgdi.configuration;

import javax.management.*;
import com.sun.grid.jgdi.configuration.GEObject;
import java.util.List;
import java.util.LinkedList;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.logging.Logger;
import java.util.logging.Level;

/**
 *  Java representation of the cull object AN_Type
 *  defined in sge_all_listsL.template
 *
 *  <p><strong>Warning:</strong>  The  JGDIAnswerImpl class will 
 *  not be compatible with future Sun&trade; Grid Engine releases.</p>
 */
public class JGDIAnswerImpl extends    GEObjectImpl implements JGDIAnswer {


   /**
    *  Create a new instance of JGDIAnswerImpl. The new instance
    *  will not be initialized with the default values.
    */
   public JGDIAnswerImpl() {
      this(false);
   }
   
   /**
    *   Create a new instanceof
    *   @param  initWithDefaultValues if <code>true</code> the new instance will
    *                                 be initialized with the default values as defined
    *                                 in the cull definition.
    */
   public JGDIAnswerImpl(boolean initWithDefaultValues) { 

      if (initWithDefaultValues) {     
    }

  } // end of default constructor
  
  // --- newInstance method with primary key field
  



    // Attribute status ------------------------------------------------

    private boolean isStatusSet;
   
    /**
     *  Determine if the status attribute is set
     *  @return <code>true</code> if the status attribute is set
     */
    public boolean isSetStatus() {

        return isStatusSet;

    }
   
    private int m_status;

    /**
     *   Set the status attribute.
     *
     *   @param aStatus  the new value for the  status attribute
     */
    public void setStatus(int aStatus) {   
        m_status = aStatus;

        isStatusSet = true;

    }

    /**
     *  Get the value of the status attribute.
     *  @return the value of the status attribute
     */
    public int getStatus() {
        return m_status;
    }


    // Attribute text ------------------------------------------------
   
    /**
     *  Determine if the text attribute is set
     *  @return <code>true</code> if the text attribute is set
     */
    public boolean isSetText() {
   
        return  (m_text != null);

    }
   
    private java.lang.String m_text;

    /**
     *   Set the text attribute.
     *
     *   @param aText  the new value for the  text attribute
     */
    public void setText(java.lang.String aText) {   
        m_text = aText;

    }

    /**
     *  Get the value of the text attribute.
     *  @return the value of the text attribute
     */
    public java.lang.String getText() {
        return m_text;
    }


    // Attribute quality ------------------------------------------------

    private boolean isQualitySet;
   
    /**
     *  Determine if the quality attribute is set
     *  @return <code>true</code> if the quality attribute is set
     */
    public boolean isSetQuality() {

        return isQualitySet;

    }
   
    private int m_quality;

    /**
     *   Set the quality attribute.
     *
     *   @param aQuality  the new value for the  quality attribute
     */
    public void setQuality(int aQuality) {   
        m_quality = aQuality;

        isQualitySet = true;

    }

    /**
     *  Get the value of the quality attribute.
     *  @return the value of the quality attribute
     */
    public int getQuality() {
        return m_quality;
    }




    /**
     *  Is the primary key information equal to the primary key information
     *  of <code>obj</code>.
     *
     *  @param obj   the compared object
     *  @return <code>true</code> if the primary key information is equal to the
     *          primary key informations of <code>obj</code>.
     */
    public boolean equals(Object obj) {
            
            return obj instanceof JGDIAnswerImpl;

    }

    
    
    public boolean equalsCompletely(Object obj) {
        Logger logger = Logger.getLogger(getClass().getName());
        if (obj instanceof  JGDIAnswerImpl) {
            com.sun.grid.jgdi.configuration.JGDIAnswer obj1 = (com.sun.grid.jgdi.configuration.JGDIAnswer)obj;

            {
                int value1 = getStatus();
                int value2 = obj1.getStatus();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes AN_status are not equal");
                }
                return false;
            }

            }

            {
                java.lang.String value1 = getText();
                java.lang.String value2 = obj1.getText();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute AN_text of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes AN_text are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                int value1 = getQuality();
                int value2 = obj1.getQuality();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes AN_quality are not equal");
                }
                return false;
            }

            }

            return true;
        } else {
            return true;
        }
    }
  
    public java.lang.String toString() {
        StringBuilder ret = new StringBuilder();
        ret.append("JGDIAnswerImpl(");

        ret.append(")");
        return ret.toString();
    }



    public java.lang.String dump() {
        StringBuilder sb = new StringBuilder();

            {
                int value = getStatus();
                sb.append("Status = " + value + "\n");
            }

            {
                java.lang.String value = getText();
                sb.append("Text = " + value + "\n");
            }

            {
                int value = getQuality();
                sb.append("Quality = " + value + "\n");
            }

        return sb.toString();
    }    

 
}
