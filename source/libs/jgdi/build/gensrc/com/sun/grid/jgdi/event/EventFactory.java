/*___INFO__MARK_BEGIN__*/
/*************************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  the Sun Industry Standards Source License Version 1.2
 *
 *  Sun Microsystems Inc., March, 2001
 *
 *
 *  Sun Industry Standards Source License Version 1.2
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.2 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *   Copyright: 2001 by Sun Microsystems, Inc.
 *
 *   All Rights Reserved.
 *
 ************************************************************************/
/*___INFO__MARK_END__*/
/**
 *  Generated from java_event_factory.jsp
 *  !!! DO NOT EDIT THIS FILE !!!
 */

package com.sun.grid.jgdi.event;


import java.util.*;

import com.sun.grid.jgdi.configuration.Hostgroup;
import com.sun.grid.jgdi.configuration.SubmitHost;
import com.sun.grid.jgdi.configuration.ExecHost;
import com.sun.grid.jgdi.configuration.Manager;
import com.sun.grid.jgdi.configuration.AdvanceReservation;
import com.sun.grid.jgdi.configuration.PETask;
import com.sun.grid.jgdi.configuration.SchedConf;
import com.sun.grid.jgdi.configuration.Configuration;
import com.sun.grid.jgdi.configuration.Project;
import com.sun.grid.jgdi.configuration.ShareTree;
import com.sun.grid.jgdi.configuration.AdminHost;
import com.sun.grid.jgdi.configuration.Checkpoint;
import com.sun.grid.jgdi.configuration.ParallelEnvironment;
import com.sun.grid.jgdi.configuration.JobTask;
import com.sun.grid.jgdi.configuration.ComplexEntry;
import com.sun.grid.jgdi.configuration.ClusterQueue;
import com.sun.grid.jgdi.configuration.JobSchedulingInfo;
import com.sun.grid.jgdi.configuration.UserSet;
import com.sun.grid.jgdi.configuration.Calendar;
import com.sun.grid.jgdi.configuration.Operator;
import com.sun.grid.jgdi.configuration.Job;
import com.sun.grid.jgdi.configuration.QueueInstance;
import com.sun.grid.jgdi.configuration.ResourceQuotaSet;
import com.sun.grid.jgdi.configuration.User;


/**
 *  Factory class for all List/Del/Add/Mod Events of cull objects
 */
public class EventFactory extends EventFactoryBase {

   /** store all internal event factories (key the name of the cull object,
    *  value is the internal event factory) */
   private static Map facMap;
   
   
  /**
   * Create a list event for a cull type
   * @param name        name of the cull type
   * @param timestamp   timestamp when the list event occured
   * @param eventId     unique id of the event
   * @return the list event
   */
  public static ListEvent createListEvent(String name, long timestamp, int eventId) {
   
      InternalEventFactory fac = (InternalEventFactory)facMap.get(name);
      if( fac != null ) {
         return fac.createListEvent(timestamp, eventId);
      }
      throw new IllegalArgumentException( "can not create list event for cull type " + name );
  }
  
  /**
   * Create a add event for a cull type
   * @param name        name of the cull type
   * @param timestamp   timestamp when the add event occured
   * @param eventId     unique id of the event
   * @return the add event
   */
   public static AddEvent createAddEvent(String name, long timestamp, int eventId) {
   
      InternalEventFactory fac = (InternalEventFactory)facMap.get(name);
      if( fac != null ) {
         return fac.createAddEvent(timestamp, eventId);
      }
      throw new IllegalArgumentException( "can not create add event for cull type " + name );
   }

  /**
   * Create a mod event for a cull type
   * @param name        name of the cull type
   * @param timestamp   timestamp when the mod event occured
   * @param eventId     unique id of the event
   * @return the mod event
   */
   public static ModEvent createModEvent(String name, long timestamp, int eventId) {
   
      InternalEventFactory fac = (InternalEventFactory)facMap.get(name);
      if( fac != null ) {
         return fac.createModEvent(timestamp, eventId);
      }
      throw new IllegalArgumentException( "can not create mod event for cull type " + name );
   }
  
  /**
   * Create a del event for a cull type
   * @param name        name of the cull type
   * @param timestamp   timestamp when the del event occured
   * @param eventId     unique id of the event
   * @return the del event
   */
   public static DelEvent createDelEvent(String name, long timestamp, int eventId) {
   
      InternalEventFactory fac = (InternalEventFactory)facMap.get(name);
      if( fac != null ) {
         return fac.createDelEvent(timestamp, eventId);
      }
      throw new IllegalArgumentException( "can not create del event for cull type " + name );
   }

   /**
    *  Interface for all internal event factory classes
    */
   interface InternalEventFactory  {

       public ListEvent createListEvent(long timestamp, int eventId);
       public AddEvent  createAddEvent(long timestamp, int eventId);
       public ModEvent  createModEvent(long timestamp, int eventId);
       public DelEvent  createDelEvent(long timestamp, int eventId);    
    }

    /**
     *  this static initializer creates all internal event factories an stores
     *  it the the factory map.
     */
    static {        
    
        facMap = new HashMap();
        
        facMap.put("HGRP_Type", new HostgroupEventFactory()); 
        facMap.put("SH_Type", new SubmitHostEventFactory()); 
        facMap.put("EH_Type", new ExecHostEventFactory()); 
        facMap.put("UM_Type", new ManagerEventFactory()); 
        facMap.put("AR_Type", new AdvanceReservationEventFactory()); 
        facMap.put("PET_Type", new PETaskEventFactory()); 
        facMap.put("SC_Type", new SchedConfEventFactory()); 
        facMap.put("CONF_Type", new ConfigurationEventFactory()); 
        facMap.put("PR_Type", new ProjectEventFactory()); 
        facMap.put("STN_Type", new ShareTreeEventFactory()); 
        facMap.put("AH_Type", new AdminHostEventFactory()); 
        facMap.put("CK_Type", new CheckpointEventFactory()); 
        facMap.put("PE_Type", new ParallelEnvironmentEventFactory()); 
        facMap.put("JAT_Type", new JobTaskEventFactory()); 
        facMap.put("CE_Type", new ComplexEntryEventFactory()); 
        facMap.put("CQ_Type", new ClusterQueueEventFactory()); 
        facMap.put("SME_Type", new JobSchedulingInfoEventFactory()); 
        facMap.put("US_Type", new UserSetEventFactory()); 
        facMap.put("CAL_Type", new CalendarEventFactory()); 
        facMap.put("UO_Type", new OperatorEventFactory()); 
        facMap.put("JB_Type", new JobEventFactory()); 
        facMap.put("QU_Type", new QueueInstanceEventFactory()); 
        facMap.put("RQS_Type", new ResourceQuotaSetEventFactory()); 
        facMap.put("UU_Type", new UserEventFactory()); 

    
    }
    // -------------------- Factory classes -----------------------------------

     // HGRP_Type
    static class HostgroupEventFactory implements InternalEventFactory {
    
       public ListEvent createListEvent(long timestamp, int eventId) {

           return new HostgroupListEvent(timestamp, eventId);
  
       }
       public AddEvent  createAddEvent(long timestamp, int eventId) {

           return new HostgroupAddEvent(timestamp, eventId);
  
       }
       public ModEvent  createModEvent(long timestamp, int eventId) {

           return new HostgroupModEvent(timestamp, eventId);
  
       }
       public DelEvent  createDelEvent(long timestamp, int eventId) {

           return new HostgroupDelEvent(timestamp, eventId);
  
       }
    }
    

     // SH_Type
    static class SubmitHostEventFactory implements InternalEventFactory {
    
       public ListEvent createListEvent(long timestamp, int eventId) {

           return new SubmitHostListEvent(timestamp, eventId);
  
       }
       public AddEvent  createAddEvent(long timestamp, int eventId) {

           return new SubmitHostAddEvent(timestamp, eventId);
  
       }
       public ModEvent  createModEvent(long timestamp, int eventId) {

           return new SubmitHostModEvent(timestamp, eventId);
  
       }
       public DelEvent  createDelEvent(long timestamp, int eventId) {

           return new SubmitHostDelEvent(timestamp, eventId);
  
       }
    }
    

     // EH_Type
    static class ExecHostEventFactory implements InternalEventFactory {
    
       public ListEvent createListEvent(long timestamp, int eventId) {

           return new ExecHostListEvent(timestamp, eventId);
  
       }
       public AddEvent  createAddEvent(long timestamp, int eventId) {

           return new ExecHostAddEvent(timestamp, eventId);
  
       }
       public ModEvent  createModEvent(long timestamp, int eventId) {

           return new ExecHostModEvent(timestamp, eventId);
  
       }
       public DelEvent  createDelEvent(long timestamp, int eventId) {

           return new ExecHostDelEvent(timestamp, eventId);
  
       }
    }
    

     // UM_Type
    static class ManagerEventFactory implements InternalEventFactory {
    
       public ListEvent createListEvent(long timestamp, int eventId) {

           return new ManagerListEvent(timestamp, eventId);
  
       }
       public AddEvent  createAddEvent(long timestamp, int eventId) {

           return new ManagerAddEvent(timestamp, eventId);
  
       }
       public ModEvent  createModEvent(long timestamp, int eventId) {

           return new ManagerModEvent(timestamp, eventId);
  
       }
       public DelEvent  createDelEvent(long timestamp, int eventId) {

           return new ManagerDelEvent(timestamp, eventId);
  
       }
    }
    

     // AR_Type
    static class AdvanceReservationEventFactory implements InternalEventFactory {
    
       public ListEvent createListEvent(long timestamp, int eventId) {

           return new AdvanceReservationListEvent(timestamp, eventId);
  
       }
       public AddEvent  createAddEvent(long timestamp, int eventId) {

           return new AdvanceReservationAddEvent(timestamp, eventId);
  
       }
       public ModEvent  createModEvent(long timestamp, int eventId) {

           return new AdvanceReservationModEvent(timestamp, eventId);
  
       }
       public DelEvent  createDelEvent(long timestamp, int eventId) {

           return new AdvanceReservationDelEvent(timestamp, eventId);
  
       }
    }
    

     // PET_Type
    static class PETaskEventFactory implements InternalEventFactory {
    
       public ListEvent createListEvent(long timestamp, int eventId) {

           throw new IllegalStateException("list event not supported for PET_Type");
  
       }
       public AddEvent  createAddEvent(long timestamp, int eventId) {

           return new PETaskAddEvent(timestamp, eventId);
  
       }
       public ModEvent  createModEvent(long timestamp, int eventId) {

           throw new IllegalStateException("mod event not supported for PET_Type");
  
       }
       public DelEvent  createDelEvent(long timestamp, int eventId) {

           return new PETaskDelEvent(timestamp, eventId);
  
       }
    }
    

     // SC_Type
    static class SchedConfEventFactory implements InternalEventFactory {
    
       public ListEvent createListEvent(long timestamp, int eventId) {

           throw new IllegalStateException("list event not supported for SC_Type");
  
       }
       public AddEvent  createAddEvent(long timestamp, int eventId) {

           throw new IllegalStateException("add event not supported for SC_Type");
  
       }
       public ModEvent  createModEvent(long timestamp, int eventId) {

           return new SchedConfModEvent(timestamp, eventId);
  
       }
       public DelEvent  createDelEvent(long timestamp, int eventId) {

           throw new IllegalStateException("del event not supported for SC_Type");
  
       }
    }
    

     // CONF_Type
    static class ConfigurationEventFactory implements InternalEventFactory {
    
       public ListEvent createListEvent(long timestamp, int eventId) {

           return new ConfigurationListEvent(timestamp, eventId);
  
       }
       public AddEvent  createAddEvent(long timestamp, int eventId) {

           return new ConfigurationAddEvent(timestamp, eventId);
  
       }
       public ModEvent  createModEvent(long timestamp, int eventId) {

           return new ConfigurationModEvent(timestamp, eventId);
  
       }
       public DelEvent  createDelEvent(long timestamp, int eventId) {

           return new ConfigurationDelEvent(timestamp, eventId);
  
       }
    }
    

     // PR_Type
    static class ProjectEventFactory implements InternalEventFactory {
    
       public ListEvent createListEvent(long timestamp, int eventId) {

           return new ProjectListEvent(timestamp, eventId);
  
       }
       public AddEvent  createAddEvent(long timestamp, int eventId) {

           return new ProjectAddEvent(timestamp, eventId);
  
       }
       public ModEvent  createModEvent(long timestamp, int eventId) {

           return new ProjectModEvent(timestamp, eventId);
  
       }
       public DelEvent  createDelEvent(long timestamp, int eventId) {

           return new ProjectDelEvent(timestamp, eventId);
  
       }
    }
    

     // STN_Type
    static class ShareTreeEventFactory implements InternalEventFactory {
    
       public ListEvent createListEvent(long timestamp, int eventId) {

           throw new IllegalStateException("list event not supported for STN_Type");
  
       }
       public AddEvent  createAddEvent(long timestamp, int eventId) {

           throw new IllegalStateException("add event not supported for STN_Type");
  
       }
       public ModEvent  createModEvent(long timestamp, int eventId) {

           return new ShareTreeModEvent(timestamp, eventId);
  
       }
       public DelEvent  createDelEvent(long timestamp, int eventId) {

           throw new IllegalStateException("del event not supported for STN_Type");
  
       }
    }
    

     // AH_Type
    static class AdminHostEventFactory implements InternalEventFactory {
    
       public ListEvent createListEvent(long timestamp, int eventId) {

           return new AdminHostListEvent(timestamp, eventId);
  
       }
       public AddEvent  createAddEvent(long timestamp, int eventId) {

           return new AdminHostAddEvent(timestamp, eventId);
  
       }
       public ModEvent  createModEvent(long timestamp, int eventId) {

           return new AdminHostModEvent(timestamp, eventId);
  
       }
       public DelEvent  createDelEvent(long timestamp, int eventId) {

           return new AdminHostDelEvent(timestamp, eventId);
  
       }
    }
    

     // CK_Type
    static class CheckpointEventFactory implements InternalEventFactory {
    
       public ListEvent createListEvent(long timestamp, int eventId) {

           return new CheckpointListEvent(timestamp, eventId);
  
       }
       public AddEvent  createAddEvent(long timestamp, int eventId) {

           return new CheckpointAddEvent(timestamp, eventId);
  
       }
       public ModEvent  createModEvent(long timestamp, int eventId) {

           return new CheckpointModEvent(timestamp, eventId);
  
       }
       public DelEvent  createDelEvent(long timestamp, int eventId) {

           return new CheckpointDelEvent(timestamp, eventId);
  
       }
    }
    

     // PE_Type
    static class ParallelEnvironmentEventFactory implements InternalEventFactory {
    
       public ListEvent createListEvent(long timestamp, int eventId) {

           return new ParallelEnvironmentListEvent(timestamp, eventId);
  
       }
       public AddEvent  createAddEvent(long timestamp, int eventId) {

           return new ParallelEnvironmentAddEvent(timestamp, eventId);
  
       }
       public ModEvent  createModEvent(long timestamp, int eventId) {

           return new ParallelEnvironmentModEvent(timestamp, eventId);
  
       }
       public DelEvent  createDelEvent(long timestamp, int eventId) {

           return new ParallelEnvironmentDelEvent(timestamp, eventId);
  
       }
    }
    

     // JAT_Type
    static class JobTaskEventFactory implements InternalEventFactory {
    
       public ListEvent createListEvent(long timestamp, int eventId) {

           throw new IllegalStateException("list event not supported for JAT_Type");
  
       }
       public AddEvent  createAddEvent(long timestamp, int eventId) {

           return new JobTaskAddEvent(timestamp, eventId);
  
       }
       public ModEvent  createModEvent(long timestamp, int eventId) {

           return new JobTaskModEvent(timestamp, eventId);
  
       }
       public DelEvent  createDelEvent(long timestamp, int eventId) {

           return new JobTaskDelEvent(timestamp, eventId);
  
       }
    }
    

     // CE_Type
    static class ComplexEntryEventFactory implements InternalEventFactory {
    
       public ListEvent createListEvent(long timestamp, int eventId) {

           return new ComplexEntryListEvent(timestamp, eventId);
  
       }
       public AddEvent  createAddEvent(long timestamp, int eventId) {

           return new ComplexEntryAddEvent(timestamp, eventId);
  
       }
       public ModEvent  createModEvent(long timestamp, int eventId) {

           return new ComplexEntryModEvent(timestamp, eventId);
  
       }
       public DelEvent  createDelEvent(long timestamp, int eventId) {

           return new ComplexEntryDelEvent(timestamp, eventId);
  
       }
    }
    

     // CQ_Type
    static class ClusterQueueEventFactory implements InternalEventFactory {
    
       public ListEvent createListEvent(long timestamp, int eventId) {

           return new ClusterQueueListEvent(timestamp, eventId);
  
       }
       public AddEvent  createAddEvent(long timestamp, int eventId) {

           return new ClusterQueueAddEvent(timestamp, eventId);
  
       }
       public ModEvent  createModEvent(long timestamp, int eventId) {

           return new ClusterQueueModEvent(timestamp, eventId);
  
       }
       public DelEvent  createDelEvent(long timestamp, int eventId) {

           return new ClusterQueueDelEvent(timestamp, eventId);
  
       }
    }
    

     // SME_Type
    static class JobSchedulingInfoEventFactory implements InternalEventFactory {
    
       public ListEvent createListEvent(long timestamp, int eventId) {

           return new JobSchedulingInfoListEvent(timestamp, eventId);
  
       }
       public AddEvent  createAddEvent(long timestamp, int eventId) {

           return new JobSchedulingInfoAddEvent(timestamp, eventId);
  
       }
       public ModEvent  createModEvent(long timestamp, int eventId) {

           return new JobSchedulingInfoModEvent(timestamp, eventId);
  
       }
       public DelEvent  createDelEvent(long timestamp, int eventId) {

           return new JobSchedulingInfoDelEvent(timestamp, eventId);
  
       }
    }
    

     // US_Type
    static class UserSetEventFactory implements InternalEventFactory {
    
       public ListEvent createListEvent(long timestamp, int eventId) {

           return new UserSetListEvent(timestamp, eventId);
  
       }
       public AddEvent  createAddEvent(long timestamp, int eventId) {

           return new UserSetAddEvent(timestamp, eventId);
  
       }
       public ModEvent  createModEvent(long timestamp, int eventId) {

           return new UserSetModEvent(timestamp, eventId);
  
       }
       public DelEvent  createDelEvent(long timestamp, int eventId) {

           return new UserSetDelEvent(timestamp, eventId);
  
       }
    }
    

     // CAL_Type
    static class CalendarEventFactory implements InternalEventFactory {
    
       public ListEvent createListEvent(long timestamp, int eventId) {

           return new CalendarListEvent(timestamp, eventId);
  
       }
       public AddEvent  createAddEvent(long timestamp, int eventId) {

           return new CalendarAddEvent(timestamp, eventId);
  
       }
       public ModEvent  createModEvent(long timestamp, int eventId) {

           return new CalendarModEvent(timestamp, eventId);
  
       }
       public DelEvent  createDelEvent(long timestamp, int eventId) {

           return new CalendarDelEvent(timestamp, eventId);
  
       }
    }
    

     // UO_Type
    static class OperatorEventFactory implements InternalEventFactory {
    
       public ListEvent createListEvent(long timestamp, int eventId) {

           return new OperatorListEvent(timestamp, eventId);
  
       }
       public AddEvent  createAddEvent(long timestamp, int eventId) {

           return new OperatorAddEvent(timestamp, eventId);
  
       }
       public ModEvent  createModEvent(long timestamp, int eventId) {

           return new OperatorModEvent(timestamp, eventId);
  
       }
       public DelEvent  createDelEvent(long timestamp, int eventId) {

           return new OperatorDelEvent(timestamp, eventId);
  
       }
    }
    

     // JB_Type
    static class JobEventFactory implements InternalEventFactory {
    
       public ListEvent createListEvent(long timestamp, int eventId) {

           return new JobListEvent(timestamp, eventId);
  
       }
       public AddEvent  createAddEvent(long timestamp, int eventId) {

           return new JobAddEvent(timestamp, eventId);
  
       }
       public ModEvent  createModEvent(long timestamp, int eventId) {

           return new JobModEvent(timestamp, eventId);
  
       }
       public DelEvent  createDelEvent(long timestamp, int eventId) {

           return new JobDelEvent(timestamp, eventId);
  
       }
    }
    

     // QU_Type
    static class QueueInstanceEventFactory implements InternalEventFactory {
    
       public ListEvent createListEvent(long timestamp, int eventId) {

           throw new IllegalStateException("list event not supported for QU_Type");
  
       }
       public AddEvent  createAddEvent(long timestamp, int eventId) {

           return new QueueInstanceAddEvent(timestamp, eventId);
  
       }
       public ModEvent  createModEvent(long timestamp, int eventId) {

           return new QueueInstanceModEvent(timestamp, eventId);
  
       }
       public DelEvent  createDelEvent(long timestamp, int eventId) {

           return new QueueInstanceDelEvent(timestamp, eventId);
  
       }
    }
    

     // RQS_Type
    static class ResourceQuotaSetEventFactory implements InternalEventFactory {
    
       public ListEvent createListEvent(long timestamp, int eventId) {

           return new ResourceQuotaSetListEvent(timestamp, eventId);
  
       }
       public AddEvent  createAddEvent(long timestamp, int eventId) {

           return new ResourceQuotaSetAddEvent(timestamp, eventId);
  
       }
       public ModEvent  createModEvent(long timestamp, int eventId) {

           return new ResourceQuotaSetModEvent(timestamp, eventId);
  
       }
       public DelEvent  createDelEvent(long timestamp, int eventId) {

           return new ResourceQuotaSetDelEvent(timestamp, eventId);
  
       }
    }
    

     // UU_Type
    static class UserEventFactory implements InternalEventFactory {
    
       public ListEvent createListEvent(long timestamp, int eventId) {

           return new UserListEvent(timestamp, eventId);
  
       }
       public AddEvent  createAddEvent(long timestamp, int eventId) {

           return new UserAddEvent(timestamp, eventId);
  
       }
       public ModEvent  createModEvent(long timestamp, int eventId) {

           return new UserModEvent(timestamp, eventId);
  
       }
       public DelEvent  createDelEvent(long timestamp, int eventId) {

           return new UserDelEvent(timestamp, eventId);
  
       }
    }
    


}
