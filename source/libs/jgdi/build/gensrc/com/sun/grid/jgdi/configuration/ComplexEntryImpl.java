/*___INFO__MARK_BEGIN__*/
/*************************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  the Sun Industry Standards Source License Version 1.2
 *
 *  Sun Microsystems Inc., March, 2001
 *
 *
 *  Sun Industry Standards Source License Version 1.2
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.2 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *   Copyright: 2001 by Sun Microsystems, Inc.
 *
 *   All Rights Reserved.
 *
 ************************************************************************/
/*___INFO__MARK_END__*/
/**
 *  Generated from javamodel_impl.jsp
 *  !!! DO NOT EDIT THIS FILE !!!
 */

package com.sun.grid.jgdi.configuration;

import javax.management.*;
import com.sun.grid.jgdi.configuration.GEObject;
import java.util.List;
import java.util.LinkedList;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.logging.Logger;
import java.util.logging.Level;

/**
 *  Java representation of the cull object CE_Type
 *  defined in sge_all_listsL.template
 *
 *  <p><strong>Warning:</strong>  The  ComplexEntryImpl class will 
 *  not be compatible with future Sun&trade; Grid Engine releases.</p>
 */
public class ComplexEntryImpl extends    GEObjectImpl implements ComplexEntry {


   /**
    *  Create a new instance of ComplexEntryImpl. The new instance
    *  will not be initialized with the default values.
    */
   public ComplexEntryImpl() {
      this(false);
   }
   
   /**
    *   Create a new instanceof
    *   @param  initWithDefaultValues if <code>true</code> the new instance will
    *                                 be initialized with the default values as defined
    *                                 in the cull definition.
    */
   public ComplexEntryImpl(boolean initWithDefaultValues) { 

      if (initWithDefaultValues) { 
       setShortcut("NONE");
       setValtype(1);    
    }

  } // end of default constructor
  
  // --- newInstance method with primary key field
  

   /**
    *  Create a new instance of ComplexEntryImpl
    */
   public ComplexEntryImpl(java.lang.String name ) {

   
         setName(name);

    }



    // Attribute name ------------------------------------------------
   
    /**
     *  Determine if the name attribute is set
     *  @return <code>true</code> if the name attribute is set
     */
    public boolean isSetName() {
   
        return  (m_name != null);

    }
   
    private java.lang.String m_name;

    /**
     *   Set the name attribute.
     *
     *   @param aName  the new value for the  name attribute
     */
    public void setName(java.lang.String aName) {   
        m_name = aName;

    }

    /**
     *  Get the value of the name attribute.
     *  @return the value of the name attribute
     */
    public java.lang.String getName() {
        return m_name;
    }


    // Attribute shortcut ------------------------------------------------
   
    /**
     *  Determine if the shortcut attribute is set
     *  @return <code>true</code> if the shortcut attribute is set
     */
    public boolean isSetShortcut() {
   
        return  (m_shortcut != null);

    }
   
    private java.lang.String m_shortcut;

    /**
     *   Set the shortcut attribute.
     *
     *   @param aShortcut  the new value for the  shortcut attribute
     */
    public void setShortcut(java.lang.String aShortcut) {   
        m_shortcut = aShortcut;

    }

    /**
     *  Get the value of the shortcut attribute.
     *  @return the value of the shortcut attribute
     */
    public java.lang.String getShortcut() {
        return m_shortcut;
    }


    // Attribute valtype ------------------------------------------------

    private boolean isValtypeSet;
   
    /**
     *  Determine if the valtype attribute is set
     *  @return <code>true</code> if the valtype attribute is set
     */
    public boolean isSetValtype() {

        return isValtypeSet;

    }
   
    private int m_valtype;

    /**
     *   Set the valtype attribute.
     *
     *   @param aValtype  the new value for the  valtype attribute
     */
    public void setValtype(int aValtype) {   
        m_valtype = aValtype;

        isValtypeSet = true;

    }

    /**
     *  Get the value of the valtype attribute.
     *  @return the value of the valtype attribute
     */
    public int getValtype() {
        return m_valtype;
    }


    // Attribute stringval ------------------------------------------------
   
    /**
     *  Determine if the stringval attribute is set
     *  @return <code>true</code> if the stringval attribute is set
     */
    public boolean isSetStringval() {
   
        return  (m_stringval != null);

    }
   
    private java.lang.String m_stringval;

    /**
     *   Set the stringval attribute.
     *
     *   @param aStringval  the new value for the  stringval attribute
     */
    public void setStringval(java.lang.String aStringval) {   
        m_stringval = aStringval;

    }

    /**
     *  Get the value of the stringval attribute.
     *  @return the value of the stringval attribute
     */
    public java.lang.String getStringval() {
        return m_stringval;
    }


    // Attribute relop ------------------------------------------------

    private boolean isRelopSet;
   
    /**
     *  Determine if the relop attribute is set
     *  @return <code>true</code> if the relop attribute is set
     */
    public boolean isSetRelop() {

        return isRelopSet;

    }
   
    private int m_relop;

    /**
     *   Set the relop attribute.
     *
     *   @param aRelop  the new value for the  relop attribute
     */
    public void setRelop(int aRelop) {   
        m_relop = aRelop;

        isRelopSet = true;

    }

    /**
     *  Get the value of the relop attribute.
     *  @return the value of the relop attribute
     */
    public int getRelop() {
        return m_relop;
    }


    // Attribute consumable ------------------------------------------------

    private boolean isConsumableSet;
   
    /**
     *  Determine if the consumable attribute is set
     *  @return <code>true</code> if the consumable attribute is set
     */
    public boolean isSetConsumable() {

        return isConsumableSet;

    }
   
    private int m_consumable;

    /**
     *   Set the consumable attribute.
     *
     *   @param aConsumable  the new value for the  consumable attribute
     */
    public void setConsumable(int aConsumable) {   
        m_consumable = aConsumable;

        isConsumableSet = true;

    }

    /**
     *  Get the value of the consumable attribute.
     *  @return the value of the consumable attribute
     */
    public int getConsumable() {
        return m_consumable;
    }


    // Attribute default ------------------------------------------------
   
    /**
     *  Determine if the default attribute is set
     *  @return <code>true</code> if the default attribute is set
     */
    public boolean isSetDefault() {
   
        return  (m_default != null);

    }
   
    private java.lang.String m_default;

    /**
     *   Set the default attribute.
     *
     *   @param aDefault  the new value for the  default attribute
     */
    public void setDefault(java.lang.String aDefault) {   
        m_default = aDefault;

    }

    /**
     *  Get the value of the default attribute.
     *  @return the value of the default attribute
     */
    public java.lang.String getDefault() {
        return m_default;
    }


    // Attribute requestable ------------------------------------------------

    private boolean isRequestableSet;
   
    /**
     *  Determine if the requestable attribute is set
     *  @return <code>true</code> if the requestable attribute is set
     */
    public boolean isSetRequestable() {

        return isRequestableSet;

    }
   
    private int m_requestable;

    /**
     *   Set the requestable attribute.
     *
     *   @param aRequestable  the new value for the  requestable attribute
     */
    public void setRequestable(int aRequestable) {   
        m_requestable = aRequestable;

        isRequestableSet = true;

    }

    /**
     *  Get the value of the requestable attribute.
     *  @return the value of the requestable attribute
     */
    public int getRequestable() {
        return m_requestable;
    }


    // Attribute urgencyWeight ------------------------------------------------
   
    /**
     *  Determine if the urgencyWeight attribute is set
     *  @return <code>true</code> if the urgencyWeight attribute is set
     */
    public boolean isSetUrgencyWeight() {
   
        return  (m_urgencyWeight != null);

    }
   
    private java.lang.String m_urgencyWeight;

    /**
     *   Set the urgencyWeight attribute.
     *
     *   @param aUrgencyWeight  the new value for the  urgencyWeight attribute
     */
    public void setUrgencyWeight(java.lang.String aUrgencyWeight) {   
        m_urgencyWeight = aUrgencyWeight;

    }

    /**
     *  Get the value of the urgencyWeight attribute.
     *  @return the value of the urgencyWeight attribute
     */
    public java.lang.String getUrgencyWeight() {
        return m_urgencyWeight;
    }




    /**
     *  Is the primary key information equal to the primary key information
     *  of <code>obj</code>.
     *
     *  @param obj   the compared object
     *  @return <code>true</code> if the primary key information is equal to the
     *          primary key informations of <code>obj</code>.
     */
    public boolean equals(Object obj) {

        return (obj instanceof ComplexEntryImpl && getName().equals(((com.sun.grid.jgdi.configuration.ComplexEntry)obj).getName()));

    }

    
    
    public boolean equalsCompletely(Object obj) {
        Logger logger = Logger.getLogger(getClass().getName());
        if (obj instanceof  ComplexEntryImpl) {
            com.sun.grid.jgdi.configuration.ComplexEntry obj1 = (com.sun.grid.jgdi.configuration.ComplexEntry)obj;

            {
                java.lang.String value1 = getName();
                java.lang.String value2 = obj1.getName();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute CE_name of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes CE_name are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                java.lang.String value1 = getShortcut();
                java.lang.String value2 = obj1.getShortcut();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute CE_shortcut of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes CE_shortcut are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                int value1 = getValtype();
                int value2 = obj1.getValtype();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes CE_valtype are not equal");
                }
                return false;
            }

            }

            {
                java.lang.String value1 = getStringval();
                java.lang.String value2 = obj1.getStringval();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute CE_stringval of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes CE_stringval are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                int value1 = getRelop();
                int value2 = obj1.getRelop();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes CE_relop are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getConsumable();
                int value2 = obj1.getConsumable();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes CE_consumable are not equal");
                }
                return false;
            }

            }

            {
                java.lang.String value1 = getDefault();
                java.lang.String value2 = obj1.getDefault();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute CE_default of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes CE_default are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                int value1 = getRequestable();
                int value2 = obj1.getRequestable();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes CE_requestable are not equal");
                }
                return false;
            }

            }

            {
                java.lang.String value1 = getUrgencyWeight();
                java.lang.String value2 = obj1.getUrgencyWeight();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute CE_urgency_weight of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes CE_urgency_weight are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            return true;
        } else {
            return true;
        }
    }
  
    public java.lang.String toString() {
        StringBuilder ret = new StringBuilder();
        ret.append("ComplexEntryImpl(");

        ret.append(getName());

        ret.append(")");
        return ret.toString();
    }



    public java.lang.String dump() {
        StringBuilder sb = new StringBuilder();

            {
                java.lang.String value = getName();
                sb.append("Name = " + value + "\n");
            }

            {
                java.lang.String value = getShortcut();
                sb.append("Shortcut = " + value + "\n");
            }

            {
                int value = getValtype();
                sb.append("Valtype = " + value + "\n");
            }

            {
                java.lang.String value = getStringval();
                sb.append("Stringval = " + value + "\n");
            }

            {
                int value = getRelop();
                sb.append("Relop = " + value + "\n");
            }

            {
                int value = getConsumable();
                sb.append("Consumable = " + value + "\n");
            }

            {
                java.lang.String value = getDefault();
                sb.append("Default = " + value + "\n");
            }

            {
                int value = getRequestable();
                sb.append("Requestable = " + value + "\n");
            }

            {
                java.lang.String value = getUrgencyWeight();
                sb.append("UrgencyWeight = " + value + "\n");
            }

        return sb.toString();
    }    

        
   private class Convertor {
     private String typev[] = {
        "??????",
        "INT",     /* TYPE_INT */
        "STRING",  /* TYPE_STR */
        "TIME",    /* TYPE_TIM */
        "MEMORY",  /* TYPE_MEM */
        "BOOL",    /* TYPE_BOO */
        "CSTRING", /* TYPE_CSTR */
        "HOST",    /* TYPE_HOST */
        "DOUBLE",  /* TYPE_DOUBLE */
        "RESTRING", /* TYPE_RESTR */
     
        "TYPE_ACC",/* TYPE_ACC */
        "TYPE_LOG",/* TYPE_LOG */
        "TYPE_LOF" /* TYPE_LOF */
     };
     
     private String ropv[] = {
        "??",
        "==", /* CMPLXEQ_OP */
        ">=", /* CMPLXGE_OP */
        ">",  /* CMPLXGT_OP */
        "<",  /* CMPLXLT_OP */
        "<=", /* CMPLXLE_OP */
        "!="  /* CMPLXNE_OP */
     };
     
     private String fopv[] = {
        "??",
        "NO",       /* REQU_NO */
        "YES",      /* REQU_YES */
        "FORCED"    /* REQU_FORCED */
     };
     
     private String typeToString(int type) {
        if (type < 1 || type >= typev.length) {
           type = 0;
        }
        return typev[type];
     }
     private int typeToInt(String type) {
        for (int i=1; i< typev.length; i++) {
           if (type.equalsIgnoreCase(typev[i])) {
              return i;
           }
        }
        return 0;
     }
     
     private String opToString(int op) {
        if (op < 1 || op >= ropv.length) {
           op = 0;
        }
        return ropv[op];
     }
     private int opToInt(String type) {
        for (int i=1; i< ropv.length; i++) {
           if (type.equalsIgnoreCase(ropv[i])) {
              return i;
           }
        }
        return 0;
     }
     
     private String reqToString(int op) {
        if (op < 1 || op >= fopv.length) {
           op = 0;
        }
        return fopv[op];
     }
     private int reqToInt(String type) {
        for (int i=1; i< fopv.length; i++) {
           if (type.equalsIgnoreCase(fopv[i])) {
              return i;
           }
        }
        return 0;
     }
  }  //End of Convertor inner class
  
  public String typeToString(int type) {
     return new Convertor().typeToString(type);
  };
  public int typeToInt(String type) {
     return new Convertor().typeToInt(type);
  };
  
  public String opToString(int op) {
     return new Convertor().opToString(op);
  };
  public int opToInt(String type) {
     return new Convertor().opToInt(type);
  };
  
  public String reqToString(int op) {
     return new Convertor().reqToString(op);
  };
  public int reqToInt(String type) {
     return new Convertor().reqToInt(type);
  };


 
}
