/*___INFO__MARK_BEGIN__*/
/*************************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  the Sun Industry Standards Source License Version 1.2
 *
 *  Sun Microsystems Inc., March, 2001
 *
 *
 *  Sun Industry Standards Source License Version 1.2
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.2 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *   Copyright: 2001 by Sun Microsystems, Inc.
 *
 *   All Rights Reserved.
 *
 ************************************************************************/
/*___INFO__MARK_END__*/
/**
 *  Generated from javamodel_impl.jsp
 *  !!! DO NOT EDIT THIS FILE !!!
 */

package com.sun.grid.jgdi.configuration;

import javax.management.*;
import com.sun.grid.jgdi.configuration.GEObject;
import java.util.List;
import java.util.LinkedList;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.logging.Logger;
import java.util.logging.Level;

/**
 *  Java representation of the cull object JAT_Type
 *  defined in sge_all_listsL.template
 *
 *  <p><strong>Warning:</strong>  The  JobTaskImpl class will 
 *  not be compatible with future Sun&trade; Grid Engine releases.</p>
 */
public class JobTaskImpl extends    GEObjectImpl implements JobTask {


   /**
    *  Create a new instance of JobTaskImpl. The new instance
    *  will not be initialized with the default values.
    */
   public JobTaskImpl() {
      this(false);
   }
   
   /**
    *   Create a new instanceof
    *   @param  initWithDefaultValues if <code>true</code> the new instance will
    *                                 be initialized with the default values as defined
    *                                 in the cull definition.
    */
   public JobTaskImpl(boolean initWithDefaultValues) { 

      if (initWithDefaultValues) {     
    }

  } // end of default constructor
  
  // --- newInstance method with primary key field
  

   /**
    *  Create a new instance of JobTaskImpl
    */
   public JobTaskImpl(int taskNumber ) {

   
         setTaskNumber(taskNumber);

    }



    // Attribute taskNumber ------------------------------------------------

    private boolean isTaskNumberSet;
   
    /**
     *  Determine if the taskNumber attribute is set
     *  @return <code>true</code> if the taskNumber attribute is set
     */
    public boolean isSetTaskNumber() {

        return isTaskNumberSet;

    }
   
    private int m_taskNumber;

    /**
     *   Set the taskNumber attribute.
     *
     *   @param aTaskNumber  the new value for the  taskNumber attribute
     */
    public void setTaskNumber(int aTaskNumber) {   
        m_taskNumber = aTaskNumber;

        isTaskNumberSet = true;

    }

    /**
     *  Get the value of the taskNumber attribute.
     *  @return the value of the taskNumber attribute
     */
    public int getTaskNumber() {
        return m_taskNumber;
    }


    // Attribute status ------------------------------------------------

    private boolean isStatusSet;
   
    /**
     *  Determine if the status attribute is set
     *  @return <code>true</code> if the status attribute is set
     */
    public boolean isSetStatus() {

        return isStatusSet;

    }
   
    private int m_status;

    /**
     *   Set the status attribute.
     *
     *   @param aStatus  the new value for the  status attribute
     */
    public void setStatus(int aStatus) {   
        m_status = aStatus;

        isStatusSet = true;

    }

    /**
     *  Get the value of the status attribute.
     *  @return the value of the status attribute
     */
    public int getStatus() {
        return m_status;
    }


    // Attribute startTime ------------------------------------------------

    private boolean isStartTimeSet;
   
    /**
     *  Determine if the startTime attribute is set
     *  @return <code>true</code> if the startTime attribute is set
     */
    public boolean isSetStartTime() {

        return isStartTimeSet;

    }
   
    private int m_startTime;

    /**
     *   Set the startTime attribute.
     *
     *   @param aStartTime  the new value for the  startTime attribute
     */
    public void setStartTime(int aStartTime) {   
        m_startTime = aStartTime;

        isStartTimeSet = true;

    }

    /**
     *  Get the value of the startTime attribute.
     *  @return the value of the startTime attribute
     */
    public int getStartTime() {
        return m_startTime;
    }


    // Attribute endTime ------------------------------------------------

    private boolean isEndTimeSet;
   
    /**
     *  Determine if the endTime attribute is set
     *  @return <code>true</code> if the endTime attribute is set
     */
    public boolean isSetEndTime() {

        return isEndTimeSet;

    }
   
    private int m_endTime;

    /**
     *   Set the endTime attribute.
     *
     *   @param aEndTime  the new value for the  endTime attribute
     */
    public void setEndTime(int aEndTime) {   
        m_endTime = aEndTime;

        isEndTimeSet = true;

    }

    /**
     *  Get the value of the endTime attribute.
     *  @return the value of the endTime attribute
     */
    public int getEndTime() {
        return m_endTime;
    }


    // Attribute hold ------------------------------------------------

    private boolean isHoldSet;
   
    /**
     *  Determine if the hold attribute is set
     *  @return <code>true</code> if the hold attribute is set
     */
    public boolean isSetHold() {

        return isHoldSet;

    }
   
    private int m_hold;

    /**
     *   Set the hold attribute.
     *
     *   @param aHold  the new value for the  hold attribute
     */
    public void setHold(int aHold) {   
        m_hold = aHold;

        isHoldSet = true;

    }

    /**
     *  Get the value of the hold attribute.
     *  @return the value of the hold attribute
     */
    public int getHold() {
        return m_hold;
    }


    // Attribute grantedPe ------------------------------------------------
   
    /**
     *  Determine if the grantedPe attribute is set
     *  @return <code>true</code> if the grantedPe attribute is set
     */
    public boolean isSetGrantedPe() {
   
        return  (m_grantedPe != null);

    }
   
    private java.lang.String m_grantedPe;

    /**
     *   Set the grantedPe attribute.
     *
     *   @param aGrantedPe  the new value for the  grantedPe attribute
     */
    public void setGrantedPe(java.lang.String aGrantedPe) {   
        m_grantedPe = aGrantedPe;

    }

    /**
     *  Get the value of the grantedPe attribute.
     *  @return the value of the grantedPe attribute
     */
    public java.lang.String getGrantedPe() {
        return m_grantedPe;
    }


    // Attribute jobRestarted ------------------------------------------------

    private boolean isJobRestartedSet;
   
    /**
     *  Determine if the jobRestarted attribute is set
     *  @return <code>true</code> if the jobRestarted attribute is set
     */
    public boolean isSetJobRestarted() {

        return isJobRestartedSet;

    }
   
    private int m_jobRestarted;

    /**
     *   Set the jobRestarted attribute.
     *
     *   @param aJobRestarted  the new value for the  jobRestarted attribute
     */
    public void setJobRestarted(int aJobRestarted) {   
        m_jobRestarted = aJobRestarted;

        isJobRestartedSet = true;

    }

    /**
     *  Get the value of the jobRestarted attribute.
     *  @return the value of the jobRestarted attribute
     */
    public int getJobRestarted() {
        return m_jobRestarted;
    }


    // Attribute grantedDestinIdentifierList ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.JG > m_grantedDestinIdentifierList;
   
    private void initGrantedDestinIdentifier() {
        if (m_grantedDestinIdentifierList == null) {
            m_grantedDestinIdentifierList = new LinkedList< com.sun.grid.jgdi.configuration.JG >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.JG attribute.

     *   @param agrantedDestinIdentifier  the new com.sun.grid.jgdi.configuration.JG attribute
     */
    public void addGrantedDestinIdentifier(com.sun.grid.jgdi.configuration.JG agrantedDestinIdentifier) {   
        initGrantedDestinIdentifier();
        
        m_grantedDestinIdentifierList.add(agrantedDestinIdentifier);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.JG attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.JG attribute
     *   @param agrantedDestinIdentifier  the new com.sun.grid.jgdi.configuration.JG attribute
     */
    public void setGrantedDestinIdentifier(int index, com.sun.grid.jgdi.configuration.JG agrantedDestinIdentifier) {
        initGrantedDestinIdentifier();
        m_grantedDestinIdentifierList.set(index, agrantedDestinIdentifier);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.JG attributes.
     */
    public void removeAllGrantedDestinIdentifier() {
        if (m_grantedDestinIdentifierList != null) {
            m_grantedDestinIdentifierList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.JG attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.JG attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.JG attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.JG removeGrantedDestinIdentifier(int index) {
        initGrantedDestinIdentifier();
        return (com.sun.grid.jgdi.configuration.JG)m_grantedDestinIdentifierList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.JG attribute.
     *  @param agrantedDestinIdentifier  the com.sun.grid.jgdi.configuration.JG attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.JG attribute has been removed
     */
    public boolean removeGrantedDestinIdentifier(com.sun.grid.jgdi.configuration.JG agrantedDestinIdentifier) {
        initGrantedDestinIdentifier();
        return m_grantedDestinIdentifierList.remove(agrantedDestinIdentifier);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.JG attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.JG attributes
     */
    public List< com.sun.grid.jgdi.configuration.JG > getGrantedDestinIdentifierList() {
        initGrantedDestinIdentifier();
        return Collections.unmodifiableList(m_grantedDestinIdentifierList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.JG attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.JG attributes.
     */
    public int getGrantedDestinIdentifierCount() {
        if (m_grantedDestinIdentifierList != null) {
            return m_grantedDestinIdentifierList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.JG attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.JG attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.JG attribute
     */
    public com.sun.grid.jgdi.configuration.JG getGrantedDestinIdentifier(int index) {
        initGrantedDestinIdentifier();
        return (com.sun.grid.jgdi.configuration.JG)m_grantedDestinIdentifierList.get(index);
    }
   
    /**
     *  Determine if the grantedDestinIdentifier attribute is set
     *  @return <code>true</code> if the grantedDestinIdentifier attribute is set
     */
    public boolean isSetGrantedDestinIdentifier () {
        return (m_grantedDestinIdentifierList != null) && (!m_grantedDestinIdentifierList.isEmpty());
    }
   

    // Attribute masterQueue ------------------------------------------------
   
    /**
     *  Determine if the masterQueue attribute is set
     *  @return <code>true</code> if the masterQueue attribute is set
     */
    public boolean isSetMasterQueue() {
   
        return  (m_masterQueue != null);

    }
   
    private java.lang.String m_masterQueue;

    /**
     *   Set the masterQueue attribute.
     *
     *   @param aMasterQueue  the new value for the  masterQueue attribute
     */
    public void setMasterQueue(java.lang.String aMasterQueue) {   
        m_masterQueue = aMasterQueue;

    }

    /**
     *  Get the value of the masterQueue attribute.
     *  @return the value of the masterQueue attribute
     */
    public java.lang.String getMasterQueue() {
        return m_masterQueue;
    }


    // Attribute state ------------------------------------------------

    private boolean isStateSet;
   
    /**
     *  Determine if the state attribute is set
     *  @return <code>true</code> if the state attribute is set
     */
    public boolean isSetState() {

        return isStateSet;

    }
   
    private int m_state;

    /**
     *   Set the state attribute.
     *
     *   @param aState  the new value for the  state attribute
     */
    public void setState(int aState) {   
        m_state = aState;

        isStateSet = true;

    }

    /**
     *  Get the value of the state attribute.
     *  @return the value of the state attribute
     */
    public int getState() {
        return m_state;
    }


    // Attribute pvmCkptPid ------------------------------------------------

    private boolean isPvmCkptPidSet;
   
    /**
     *  Determine if the pvmCkptPid attribute is set
     *  @return <code>true</code> if the pvmCkptPid attribute is set
     */
    public boolean isSetPvmCkptPid() {

        return isPvmCkptPidSet;

    }
   
    private int m_pvmCkptPid;

    /**
     *   Set the pvmCkptPid attribute.
     *
     *   @param aPvmCkptPid  the new value for the  pvmCkptPid attribute
     */
    public void setPvmCkptPid(int aPvmCkptPid) {   
        m_pvmCkptPid = aPvmCkptPid;

        isPvmCkptPidSet = true;

    }

    /**
     *  Get the value of the pvmCkptPid attribute.
     *  @return the value of the pvmCkptPid attribute
     */
    public int getPvmCkptPid() {
        return m_pvmCkptPid;
    }


    // Attribute pendingSignal ------------------------------------------------

    private boolean isPendingSignalSet;
   
    /**
     *  Determine if the pendingSignal attribute is set
     *  @return <code>true</code> if the pendingSignal attribute is set
     */
    public boolean isSetPendingSignal() {

        return isPendingSignalSet;

    }
   
    private int m_pendingSignal;

    /**
     *   Set the pendingSignal attribute.
     *
     *   @param aPendingSignal  the new value for the  pendingSignal attribute
     */
    public void setPendingSignal(int aPendingSignal) {   
        m_pendingSignal = aPendingSignal;

        isPendingSignalSet = true;

    }

    /**
     *  Get the value of the pendingSignal attribute.
     *  @return the value of the pendingSignal attribute
     */
    public int getPendingSignal() {
        return m_pendingSignal;
    }


    // Attribute pendingSignalDeliveryTime ------------------------------------------------

    private boolean isPendingSignalDeliveryTimeSet;
   
    /**
     *  Determine if the pendingSignalDeliveryTime attribute is set
     *  @return <code>true</code> if the pendingSignalDeliveryTime attribute is set
     */
    public boolean isSetPendingSignalDeliveryTime() {

        return isPendingSignalDeliveryTimeSet;

    }
   
    private int m_pendingSignalDeliveryTime;

    /**
     *   Set the pendingSignalDeliveryTime attribute.
     *
     *   @param aPendingSignalDeliveryTime  the new value for the  pendingSignalDeliveryTime attribute
     */
    public void setPendingSignalDeliveryTime(int aPendingSignalDeliveryTime) {   
        m_pendingSignalDeliveryTime = aPendingSignalDeliveryTime;

        isPendingSignalDeliveryTimeSet = true;

    }

    /**
     *  Get the value of the pendingSignalDeliveryTime attribute.
     *  @return the value of the pendingSignalDeliveryTime attribute
     */
    public int getPendingSignalDeliveryTime() {
        return m_pendingSignalDeliveryTime;
    }


    // Attribute pid ------------------------------------------------

    private boolean isPidSet;
   
    /**
     *  Determine if the pid attribute is set
     *  @return <code>true</code> if the pid attribute is set
     */
    public boolean isSetPid() {

        return isPidSet;

    }
   
    private int m_pid;

    /**
     *   Set the pid attribute.
     *
     *   @param aPid  the new value for the  pid attribute
     */
    public void setPid(int aPid) {   
        m_pid = aPid;

        isPidSet = true;

    }

    /**
     *  Get the value of the pid attribute.
     *  @return the value of the pid attribute
     */
    public int getPid() {
        return m_pid;
    }


    // Attribute osjobid ------------------------------------------------
   
    /**
     *  Determine if the osjobid attribute is set
     *  @return <code>true</code> if the osjobid attribute is set
     */
    public boolean isSetOsjobid() {
   
        return  (m_osjobid != null);

    }
   
    private java.lang.String m_osjobid;

    /**
     *   Set the osjobid attribute.
     *
     *   @param aOsjobid  the new value for the  osjobid attribute
     */
    public void setOsjobid(java.lang.String aOsjobid) {   
        m_osjobid = aOsjobid;

    }

    /**
     *  Get the value of the osjobid attribute.
     *  @return the value of the osjobid attribute
     */
    public java.lang.String getOsjobid() {
        return m_osjobid;
    }


    // Attribute usageList ------------------------------------------------

    // keyClassName for SGE_STRING = String

   
    private Map m_usage;

    private void initUsage() {
        if (m_usage == null) {
            m_usage = new LinkedHashMap();
        }
    }
   
    /**
     *  <p>Put the attribute usage for a key.</p>
     *
     *  @param key    the key
     *  @param value  the value
     */
    public void putUsage(String key, double value) {   
        initUsage();
        m_usage.put(key,

                            new java.lang.Double(value)

                            );
    }

    /**
     *  <p>Get the default value of the attribute usage.</p>
     *  @return the default value of the attribute usage
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public double getDefaultUsage() {
        if (m_usage == null) {
            throw new IllegalStateException("default value for attribute usage not found");
        }
        java.lang.Double ret = (java.lang.Double)m_usage.get("default");
        if (ret == null) {
            throw new IllegalStateException("default value for attribute usage not found");
        }

        return ret.doubleValue();

    }
   
    /**
     *  <p>Get the usage attribute for a key.</p>
     *  @param   key   the key
     *  @return  the usage attribute for the host or the
     *           default value of  usage
     */
    public double getUsage(String key) {
        initUsage();
        if (m_usage.containsKey(key)) {      
            java.lang.Double ret = (java.lang.Double)m_usage.get(key);
            if (ret != null) {

                return ret.doubleValue();

            } else {
                return 0.0;
            }
        } else {
            return getDefaultUsage();
        }
    }


    /**
     *  <p>remove the attribute usage for a key.</p>
     *
     *  @param key tje key
     *  @return the value for the key or <code>null</code>
     *          if the value attribute was not defined for the key.
     */
    public java.lang.Double removeUsage(String key) {
        initUsage();
        return (java.lang.Double)m_usage.remove(key);
    }

    /**
     *  <p>Remove the attribute usage for all keys.</p>
     */
    public void removeAllUsage() {
        if (m_usage != null) {
            m_usage.clear();
        }
    }
   
    /**
     *  Get the set of keys which have the attribute usage set.
     *  @return set of keys
     */
    public Set<String> getUsageKeys() {
        if (m_usage == null) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(m_usage.keySet());
        }
    }
   
    /**
     *  Get the number of keys which have the attribute usage set.
     *  @return the number of keys which have the attribute usage set.
     */
    public int getUsageCount() {
        if (m_usage == null) {
            return 0;
        } else {
            return m_usage.size();
        }
    }
   
    /**
     *  Determine if any usage attribute is set
     *  @return <code>true</code> if the usage attribute is set
     */
    public boolean isSetUsage () {
        return (m_usage != null) && (!m_usage.isEmpty());
    }
   
    /**
     *  Determine if any usage attribute is for a key is set
     *  @param  key the key
     *  @return <code>true</code> if the usage attribute is set
     */
    public boolean isSetUsage(String key) {
        return (m_usage != null) && (m_usage.get(key) != null);
    }
   


    // Attribute scaledUsageList ------------------------------------------------

    // keyClassName for SGE_STRING = String

   
    private Map m_scaledUsage;

    private void initScaledUsage() {
        if (m_scaledUsage == null) {
            m_scaledUsage = new LinkedHashMap();
        }
    }
   
    /**
     *  <p>Put the attribute scaledUsage for a key.</p>
     *
     *  @param key    the key
     *  @param value  the value
     */
    public void putScaledUsage(String key, double value) {   
        initScaledUsage();
        m_scaledUsage.put(key,

                            new java.lang.Double(value)

                            );
    }

    /**
     *  <p>Get the default value of the attribute scaledUsage.</p>
     *  @return the default value of the attribute scaledUsage
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public double getDefaultScaledUsage() {
        if (m_scaledUsage == null) {
            throw new IllegalStateException("default value for attribute scaledUsage not found");
        }
        java.lang.Double ret = (java.lang.Double)m_scaledUsage.get("default");
        if (ret == null) {
            throw new IllegalStateException("default value for attribute scaledUsage not found");
        }

        return ret.doubleValue();

    }
   
    /**
     *  <p>Get the scaledUsage attribute for a key.</p>
     *  @param   key   the key
     *  @return  the scaledUsage attribute for the host or the
     *           default value of  scaledUsage
     */
    public double getScaledUsage(String key) {
        initScaledUsage();
        if (m_scaledUsage.containsKey(key)) {      
            java.lang.Double ret = (java.lang.Double)m_scaledUsage.get(key);
            if (ret != null) {

                return ret.doubleValue();

            } else {
                return 0.0;
            }
        } else {
            return getDefaultScaledUsage();
        }
    }


    /**
     *  <p>remove the attribute scaledUsage for a key.</p>
     *
     *  @param key tje key
     *  @return the value for the key or <code>null</code>
     *          if the value attribute was not defined for the key.
     */
    public java.lang.Double removeScaledUsage(String key) {
        initScaledUsage();
        return (java.lang.Double)m_scaledUsage.remove(key);
    }

    /**
     *  <p>Remove the attribute scaledUsage for all keys.</p>
     */
    public void removeAllScaledUsage() {
        if (m_scaledUsage != null) {
            m_scaledUsage.clear();
        }
    }
   
    /**
     *  Get the set of keys which have the attribute scaledUsage set.
     *  @return set of keys
     */
    public Set<String> getScaledUsageKeys() {
        if (m_scaledUsage == null) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(m_scaledUsage.keySet());
        }
    }
   
    /**
     *  Get the number of keys which have the attribute scaledUsage set.
     *  @return the number of keys which have the attribute scaledUsage set.
     */
    public int getScaledUsageCount() {
        if (m_scaledUsage == null) {
            return 0;
        } else {
            return m_scaledUsage.size();
        }
    }
   
    /**
     *  Determine if any scaledUsage attribute is set
     *  @return <code>true</code> if the scaledUsage attribute is set
     */
    public boolean isSetScaledUsage () {
        return (m_scaledUsage != null) && (!m_scaledUsage.isEmpty());
    }
   
    /**
     *  Determine if any scaledUsage attribute is for a key is set
     *  @param  key the key
     *  @return <code>true</code> if the scaledUsage attribute is set
     */
    public boolean isSetScaledUsage(String key) {
        return (m_scaledUsage != null) && (m_scaledUsage.get(key) != null);
    }
   


    // Attribute reportedUsageList ------------------------------------------------

    // keyClassName for SGE_STRING = String

   
    private Map m_reportedUsage;

    private void initReportedUsage() {
        if (m_reportedUsage == null) {
            m_reportedUsage = new LinkedHashMap();
        }
    }
   
    /**
     *  <p>Put the attribute reportedUsage for a key.</p>
     *
     *  @param key    the key
     *  @param value  the value
     */
    public void putReportedUsage(String key, double value) {   
        initReportedUsage();
        m_reportedUsage.put(key,

                            new java.lang.Double(value)

                            );
    }

    /**
     *  <p>Get the default value of the attribute reportedUsage.</p>
     *  @return the default value of the attribute reportedUsage
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public double getDefaultReportedUsage() {
        if (m_reportedUsage == null) {
            throw new IllegalStateException("default value for attribute reportedUsage not found");
        }
        java.lang.Double ret = (java.lang.Double)m_reportedUsage.get("default");
        if (ret == null) {
            throw new IllegalStateException("default value for attribute reportedUsage not found");
        }

        return ret.doubleValue();

    }
   
    /**
     *  <p>Get the reportedUsage attribute for a key.</p>
     *  @param   key   the key
     *  @return  the reportedUsage attribute for the host or the
     *           default value of  reportedUsage
     */
    public double getReportedUsage(String key) {
        initReportedUsage();
        if (m_reportedUsage.containsKey(key)) {      
            java.lang.Double ret = (java.lang.Double)m_reportedUsage.get(key);
            if (ret != null) {

                return ret.doubleValue();

            } else {
                return 0.0;
            }
        } else {
            return getDefaultReportedUsage();
        }
    }


    /**
     *  <p>remove the attribute reportedUsage for a key.</p>
     *
     *  @param key tje key
     *  @return the value for the key or <code>null</code>
     *          if the value attribute was not defined for the key.
     */
    public java.lang.Double removeReportedUsage(String key) {
        initReportedUsage();
        return (java.lang.Double)m_reportedUsage.remove(key);
    }

    /**
     *  <p>Remove the attribute reportedUsage for all keys.</p>
     */
    public void removeAllReportedUsage() {
        if (m_reportedUsage != null) {
            m_reportedUsage.clear();
        }
    }
   
    /**
     *  Get the set of keys which have the attribute reportedUsage set.
     *  @return set of keys
     */
    public Set<String> getReportedUsageKeys() {
        if (m_reportedUsage == null) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(m_reportedUsage.keySet());
        }
    }
   
    /**
     *  Get the number of keys which have the attribute reportedUsage set.
     *  @return the number of keys which have the attribute reportedUsage set.
     */
    public int getReportedUsageCount() {
        if (m_reportedUsage == null) {
            return 0;
        } else {
            return m_reportedUsage.size();
        }
    }
   
    /**
     *  Determine if any reportedUsage attribute is set
     *  @return <code>true</code> if the reportedUsage attribute is set
     */
    public boolean isSetReportedUsage () {
        return (m_reportedUsage != null) && (!m_reportedUsage.isEmpty());
    }
   
    /**
     *  Determine if any reportedUsage attribute is for a key is set
     *  @param  key the key
     *  @return <code>true</code> if the reportedUsage attribute is set
     */
    public boolean isSetReportedUsage(String key) {
        return (m_reportedUsage != null) && (m_reportedUsage.get(key) != null);
    }
   


    // Attribute fshare ------------------------------------------------

    private boolean isFshareSet;
   
    /**
     *  Determine if the fshare attribute is set
     *  @return <code>true</code> if the fshare attribute is set
     */
    public boolean isSetFshare() {

        return isFshareSet;

    }
   
    private int m_fshare;

    /**
     *   Set the fshare attribute.
     *
     *   @param aFshare  the new value for the  fshare attribute
     */
    public void setFshare(int aFshare) {   
        m_fshare = aFshare;

        isFshareSet = true;

    }

    /**
     *  Get the value of the fshare attribute.
     *  @return the value of the fshare attribute
     */
    public int getFshare() {
        return m_fshare;
    }


    // Attribute tix ------------------------------------------------

    private boolean isTixSet;
   
    /**
     *  Determine if the tix attribute is set
     *  @return <code>true</code> if the tix attribute is set
     */
    public boolean isSetTix() {

        return isTixSet;

    }
   
    private double m_tix;

    /**
     *   Set the tix attribute.
     *
     *   @param aTix  the new value for the  tix attribute
     */
    public void setTix(double aTix) {   
        m_tix = aTix;

        isTixSet = true;

    }

    /**
     *  Get the value of the tix attribute.
     *  @return the value of the tix attribute
     */
    public double getTix() {
        return m_tix;
    }


    // Attribute oticket ------------------------------------------------

    private boolean isOticketSet;
   
    /**
     *  Determine if the oticket attribute is set
     *  @return <code>true</code> if the oticket attribute is set
     */
    public boolean isSetOticket() {

        return isOticketSet;

    }
   
    private double m_oticket;

    /**
     *   Set the oticket attribute.
     *
     *   @param aOticket  the new value for the  oticket attribute
     */
    public void setOticket(double aOticket) {   
        m_oticket = aOticket;

        isOticketSet = true;

    }

    /**
     *  Get the value of the oticket attribute.
     *  @return the value of the oticket attribute
     */
    public double getOticket() {
        return m_oticket;
    }


    // Attribute fticket ------------------------------------------------

    private boolean isFticketSet;
   
    /**
     *  Determine if the fticket attribute is set
     *  @return <code>true</code> if the fticket attribute is set
     */
    public boolean isSetFticket() {

        return isFticketSet;

    }
   
    private double m_fticket;

    /**
     *   Set the fticket attribute.
     *
     *   @param aFticket  the new value for the  fticket attribute
     */
    public void setFticket(double aFticket) {   
        m_fticket = aFticket;

        isFticketSet = true;

    }

    /**
     *  Get the value of the fticket attribute.
     *  @return the value of the fticket attribute
     */
    public double getFticket() {
        return m_fticket;
    }


    // Attribute sticket ------------------------------------------------

    private boolean isSticketSet;
   
    /**
     *  Determine if the sticket attribute is set
     *  @return <code>true</code> if the sticket attribute is set
     */
    public boolean isSetSticket() {

        return isSticketSet;

    }
   
    private double m_sticket;

    /**
     *   Set the sticket attribute.
     *
     *   @param aSticket  the new value for the  sticket attribute
     */
    public void setSticket(double aSticket) {   
        m_sticket = aSticket;

        isSticketSet = true;

    }

    /**
     *  Get the value of the sticket attribute.
     *  @return the value of the sticket attribute
     */
    public double getSticket() {
        return m_sticket;
    }


    // Attribute share ------------------------------------------------

    private boolean isShareSet;
   
    /**
     *  Determine if the share attribute is set
     *  @return <code>true</code> if the share attribute is set
     */
    public boolean isSetShare() {

        return isShareSet;

    }
   
    private double m_share;

    /**
     *   Set the share attribute.
     *
     *   @param aShare  the new value for the  share attribute
     */
    public void setShare(double aShare) {   
        m_share = aShare;

        isShareSet = true;

    }

    /**
     *  Get the value of the share attribute.
     *  @return the value of the share attribute
     */
    public double getShare() {
        return m_share;
    }


    // Attribute suitable ------------------------------------------------

    private boolean isSuitableSet;
   
    /**
     *  Determine if the suitable attribute is set
     *  @return <code>true</code> if the suitable attribute is set
     */
    public boolean isSetSuitable() {

        return isSuitableSet;

    }
   
    private int m_suitable;

    /**
     *   Set the suitable attribute.
     *
     *   @param aSuitable  the new value for the  suitable attribute
     */
    public void setSuitable(int aSuitable) {   
        m_suitable = aSuitable;

        isSuitableSet = true;

    }

    /**
     *  Get the value of the suitable attribute.
     *  @return the value of the suitable attribute
     */
    public int getSuitable() {
        return m_suitable;
    }


    // Attribute taskList ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.PETask > m_taskList;
   
    private void initTask() {
        if (m_taskList == null) {
            m_taskList = new LinkedList< com.sun.grid.jgdi.configuration.PETask >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.PETask attribute.

     *   @param atask  the new com.sun.grid.jgdi.configuration.PETask attribute
     */
    public void addTask(com.sun.grid.jgdi.configuration.PETask atask) {   
        initTask();
        
        m_taskList.add(atask);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.PETask attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.PETask attribute
     *   @param atask  the new com.sun.grid.jgdi.configuration.PETask attribute
     */
    public void setTask(int index, com.sun.grid.jgdi.configuration.PETask atask) {
        initTask();
        m_taskList.set(index, atask);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.PETask attributes.
     */
    public void removeAllTask() {
        if (m_taskList != null) {
            m_taskList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.PETask attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.PETask attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.PETask attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.PETask removeTask(int index) {
        initTask();
        return (com.sun.grid.jgdi.configuration.PETask)m_taskList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.PETask attribute.
     *  @param atask  the com.sun.grid.jgdi.configuration.PETask attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.PETask attribute has been removed
     */
    public boolean removeTask(com.sun.grid.jgdi.configuration.PETask atask) {
        initTask();
        return m_taskList.remove(atask);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.PETask attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.PETask attributes
     */
    public List< com.sun.grid.jgdi.configuration.PETask > getTaskList() {
        initTask();
        return Collections.unmodifiableList(m_taskList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.PETask attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.PETask attributes.
     */
    public int getTaskCount() {
        if (m_taskList != null) {
            return m_taskList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.PETask attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.PETask attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.PETask attribute
     */
    public com.sun.grid.jgdi.configuration.PETask getTask(int index) {
        initTask();
        return (com.sun.grid.jgdi.configuration.PETask)m_taskList.get(index);
    }
   
    /**
     *  Determine if the task attribute is set
     *  @return <code>true</code> if the task attribute is set
     */
    public boolean isSetTask () {
        return (m_taskList != null) && (!m_taskList.isEmpty());
    }
   

    // Attribute finishedTaskList ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.FPET > m_finishedTaskList;
   
    private void initFinishedTask() {
        if (m_finishedTaskList == null) {
            m_finishedTaskList = new LinkedList< com.sun.grid.jgdi.configuration.FPET >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.FPET attribute.

     *   @param afinishedTask  the new com.sun.grid.jgdi.configuration.FPET attribute
     */
    public void addFinishedTask(com.sun.grid.jgdi.configuration.FPET afinishedTask) {   
        initFinishedTask();
        
        m_finishedTaskList.add(afinishedTask);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.FPET attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.FPET attribute
     *   @param afinishedTask  the new com.sun.grid.jgdi.configuration.FPET attribute
     */
    public void setFinishedTask(int index, com.sun.grid.jgdi.configuration.FPET afinishedTask) {
        initFinishedTask();
        m_finishedTaskList.set(index, afinishedTask);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.FPET attributes.
     */
    public void removeAllFinishedTask() {
        if (m_finishedTaskList != null) {
            m_finishedTaskList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.FPET attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.FPET attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.FPET attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.FPET removeFinishedTask(int index) {
        initFinishedTask();
        return (com.sun.grid.jgdi.configuration.FPET)m_finishedTaskList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.FPET attribute.
     *  @param afinishedTask  the com.sun.grid.jgdi.configuration.FPET attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.FPET attribute has been removed
     */
    public boolean removeFinishedTask(com.sun.grid.jgdi.configuration.FPET afinishedTask) {
        initFinishedTask();
        return m_finishedTaskList.remove(afinishedTask);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.FPET attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.FPET attributes
     */
    public List< com.sun.grid.jgdi.configuration.FPET > getFinishedTaskList() {
        initFinishedTask();
        return Collections.unmodifiableList(m_finishedTaskList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.FPET attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.FPET attributes.
     */
    public int getFinishedTaskCount() {
        if (m_finishedTaskList != null) {
            return m_finishedTaskList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.FPET attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.FPET attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.FPET attribute
     */
    public com.sun.grid.jgdi.configuration.FPET getFinishedTask(int index) {
        initFinishedTask();
        return (com.sun.grid.jgdi.configuration.FPET)m_finishedTaskList.get(index);
    }
   
    /**
     *  Determine if the finishedTask attribute is set
     *  @return <code>true</code> if the finishedTask attribute is set
     */
    public boolean isSetFinishedTask () {
        return (m_finishedTaskList != null) && (!m_finishedTaskList.isEmpty());
    }
   

    // Attribute previousUsageList ------------------------------------------------

    // keyClassName for SGE_STRING = String

   
    private Map m_previousUsage;

    private void initPreviousUsage() {
        if (m_previousUsage == null) {
            m_previousUsage = new LinkedHashMap();
        }
    }
   
    /**
     *  <p>Put the attribute previousUsage for a key.</p>
     *
     *  @param key    the key
     *  @param value  the value
     */
    public void putPreviousUsage(String key, double value) {   
        initPreviousUsage();
        m_previousUsage.put(key,

                            new java.lang.Double(value)

                            );
    }

    /**
     *  <p>Get the default value of the attribute previousUsage.</p>
     *  @return the default value of the attribute previousUsage
     *  @throws  java.lang.IllegalStateException if the default value is not set
     */
    public double getDefaultPreviousUsage() {
        if (m_previousUsage == null) {
            throw new IllegalStateException("default value for attribute previousUsage not found");
        }
        java.lang.Double ret = (java.lang.Double)m_previousUsage.get("default");
        if (ret == null) {
            throw new IllegalStateException("default value for attribute previousUsage not found");
        }

        return ret.doubleValue();

    }
   
    /**
     *  <p>Get the previousUsage attribute for a key.</p>
     *  @param   key   the key
     *  @return  the previousUsage attribute for the host or the
     *           default value of  previousUsage
     */
    public double getPreviousUsage(String key) {
        initPreviousUsage();
        if (m_previousUsage.containsKey(key)) {      
            java.lang.Double ret = (java.lang.Double)m_previousUsage.get(key);
            if (ret != null) {

                return ret.doubleValue();

            } else {
                return 0.0;
            }
        } else {
            return getDefaultPreviousUsage();
        }
    }


    /**
     *  <p>remove the attribute previousUsage for a key.</p>
     *
     *  @param key tje key
     *  @return the value for the key or <code>null</code>
     *          if the value attribute was not defined for the key.
     */
    public java.lang.Double removePreviousUsage(String key) {
        initPreviousUsage();
        return (java.lang.Double)m_previousUsage.remove(key);
    }

    /**
     *  <p>Remove the attribute previousUsage for all keys.</p>
     */
    public void removeAllPreviousUsage() {
        if (m_previousUsage != null) {
            m_previousUsage.clear();
        }
    }
   
    /**
     *  Get the set of keys which have the attribute previousUsage set.
     *  @return set of keys
     */
    public Set<String> getPreviousUsageKeys() {
        if (m_previousUsage == null) {
            return Collections.EMPTY_SET;
        } else {
            return Collections.unmodifiableSet(m_previousUsage.keySet());
        }
    }
   
    /**
     *  Get the number of keys which have the attribute previousUsage set.
     *  @return the number of keys which have the attribute previousUsage set.
     */
    public int getPreviousUsageCount() {
        if (m_previousUsage == null) {
            return 0;
        } else {
            return m_previousUsage.size();
        }
    }
   
    /**
     *  Determine if any previousUsage attribute is set
     *  @return <code>true</code> if the previousUsage attribute is set
     */
    public boolean isSetPreviousUsage () {
        return (m_previousUsage != null) && (!m_previousUsage.isEmpty());
    }
   
    /**
     *  Determine if any previousUsage attribute is for a key is set
     *  @param  key the key
     *  @return <code>true</code> if the previousUsage attribute is set
     */
    public boolean isSetPreviousUsage(String key) {
        return (m_previousUsage != null) && (m_previousUsage.get(key) != null);
    }
   


    // Attribute peObject ------------------------------------------------
   
    /**
     *  Determine if the peObject attribute is set
     *  @return <code>true</code> if the peObject attribute is set
     */
    public boolean isSetPeObject() {
   
        return  (m_peObject != null);

    }
   
    private com.sun.grid.jgdi.configuration.ParallelEnvironment m_peObject;

    /**
     *   Set the peObject attribute.
     *
     *   @param aPeObject  the new value for the  peObject attribute
     */
    public void setPeObject(com.sun.grid.jgdi.configuration.ParallelEnvironment aPeObject) {   
        m_peObject = aPeObject;

    }

    /**
     *  Get the value of the peObject attribute.
     *  @return the value of the peObject attribute
     */
    public com.sun.grid.jgdi.configuration.ParallelEnvironment getPeObject() {
        return m_peObject;
    }


    // Attribute nextPeTaskId ------------------------------------------------

    private boolean isNextPeTaskIdSet;
   
    /**
     *  Determine if the nextPeTaskId attribute is set
     *  @return <code>true</code> if the nextPeTaskId attribute is set
     */
    public boolean isSetNextPeTaskId() {

        return isNextPeTaskIdSet;

    }
   
    private int m_nextPeTaskId;

    /**
     *   Set the nextPeTaskId attribute.
     *
     *   @param aNextPeTaskId  the new value for the  nextPeTaskId attribute
     */
    public void setNextPeTaskId(int aNextPeTaskId) {   
        m_nextPeTaskId = aNextPeTaskId;

        isNextPeTaskIdSet = true;

    }

    /**
     *  Get the value of the nextPeTaskId attribute.
     *  @return the value of the nextPeTaskId attribute
     */
    public int getNextPeTaskId() {
        return m_nextPeTaskId;
    }


    // Attribute stopInitiateTime ------------------------------------------------

    private boolean isStopInitiateTimeSet;
   
    /**
     *  Determine if the stopInitiateTime attribute is set
     *  @return <code>true</code> if the stopInitiateTime attribute is set
     */
    public boolean isSetStopInitiateTime() {

        return isStopInitiateTimeSet;

    }
   
    private int m_stopInitiateTime;

    /**
     *   Set the stopInitiateTime attribute.
     *
     *   @param aStopInitiateTime  the new value for the  stopInitiateTime attribute
     */
    public void setStopInitiateTime(int aStopInitiateTime) {   
        m_stopInitiateTime = aStopInitiateTime;

        isStopInitiateTimeSet = true;

    }

    /**
     *  Get the value of the stopInitiateTime attribute.
     *  @return the value of the stopInitiateTime attribute
     */
    public int getStopInitiateTime() {
        return m_stopInitiateTime;
    }


    // Attribute prio ------------------------------------------------

    private boolean isPrioSet;
   
    /**
     *  Determine if the prio attribute is set
     *  @return <code>true</code> if the prio attribute is set
     */
    public boolean isSetPrio() {

        return isPrioSet;

    }
   
    private double m_prio;

    /**
     *   Set the prio attribute.
     *
     *   @param aPrio  the new value for the  prio attribute
     */
    public void setPrio(double aPrio) {   
        m_prio = aPrio;

        isPrioSet = true;

    }

    /**
     *  Get the value of the prio attribute.
     *  @return the value of the prio attribute
     */
    public double getPrio() {
        return m_prio;
    }


    // Attribute ntix ------------------------------------------------

    private boolean isNtixSet;
   
    /**
     *  Determine if the ntix attribute is set
     *  @return <code>true</code> if the ntix attribute is set
     */
    public boolean isSetNtix() {

        return isNtixSet;

    }
   
    private double m_ntix;

    /**
     *   Set the ntix attribute.
     *
     *   @param aNtix  the new value for the  ntix attribute
     */
    public void setNtix(double aNtix) {   
        m_ntix = aNtix;

        isNtixSet = true;

    }

    /**
     *  Get the value of the ntix attribute.
     *  @return the value of the ntix attribute
     */
    public double getNtix() {
        return m_ntix;
    }


    // Attribute wallclockLimit ------------------------------------------------

    private boolean isWallclockLimitSet;
   
    /**
     *  Determine if the wallclockLimit attribute is set
     *  @return <code>true</code> if the wallclockLimit attribute is set
     */
    public boolean isSetWallclockLimit() {

        return isWallclockLimitSet;

    }
   
    private int m_wallclockLimit;

    /**
     *   Set the wallclockLimit attribute.
     *
     *   @param aWallclockLimit  the new value for the  wallclockLimit attribute
     */
    public void setWallclockLimit(int aWallclockLimit) {   
        m_wallclockLimit = aWallclockLimit;

        isWallclockLimitSet = true;

    }

    /**
     *  Get the value of the wallclockLimit attribute.
     *  @return the value of the wallclockLimit attribute
     */
    public int getWallclockLimit() {
        return m_wallclockLimit;
    }


    // Attribute messageList ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.QueueInstanceMessage > m_messageList;
   
    private void initMessage() {
        if (m_messageList == null) {
            m_messageList = new LinkedList< com.sun.grid.jgdi.configuration.QueueInstanceMessage >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.QueueInstanceMessage attribute.

     *   @param amessage  the new com.sun.grid.jgdi.configuration.QueueInstanceMessage attribute
     */
    public void addMessage(com.sun.grid.jgdi.configuration.QueueInstanceMessage amessage) {   
        initMessage();
        
        m_messageList.add(amessage);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.QueueInstanceMessage attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.QueueInstanceMessage attribute
     *   @param amessage  the new com.sun.grid.jgdi.configuration.QueueInstanceMessage attribute
     */
    public void setMessage(int index, com.sun.grid.jgdi.configuration.QueueInstanceMessage amessage) {
        initMessage();
        m_messageList.set(index, amessage);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.QueueInstanceMessage attributes.
     */
    public void removeAllMessage() {
        if (m_messageList != null) {
            m_messageList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.QueueInstanceMessage attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.QueueInstanceMessage attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.QueueInstanceMessage attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.QueueInstanceMessage removeMessage(int index) {
        initMessage();
        return (com.sun.grid.jgdi.configuration.QueueInstanceMessage)m_messageList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.QueueInstanceMessage attribute.
     *  @param amessage  the com.sun.grid.jgdi.configuration.QueueInstanceMessage attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.QueueInstanceMessage attribute has been removed
     */
    public boolean removeMessage(com.sun.grid.jgdi.configuration.QueueInstanceMessage amessage) {
        initMessage();
        return m_messageList.remove(amessage);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.QueueInstanceMessage attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.QueueInstanceMessage attributes
     */
    public List< com.sun.grid.jgdi.configuration.QueueInstanceMessage > getMessageList() {
        initMessage();
        return Collections.unmodifiableList(m_messageList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.QueueInstanceMessage attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.QueueInstanceMessage attributes.
     */
    public int getMessageCount() {
        if (m_messageList != null) {
            return m_messageList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.QueueInstanceMessage attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.QueueInstanceMessage attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.QueueInstanceMessage attribute
     */
    public com.sun.grid.jgdi.configuration.QueueInstanceMessage getMessage(int index) {
        initMessage();
        return (com.sun.grid.jgdi.configuration.QueueInstanceMessage)m_messageList.get(index);
    }
   
    /**
     *  Determine if the message attribute is set
     *  @return <code>true</code> if the message attribute is set
     */
    public boolean isSetMessage () {
        return (m_messageList != null) && (!m_messageList.isEmpty());
    }
   



    /**
     *  Is the primary key information equal to the primary key information
     *  of <code>obj</code>.
     *
     *  @param obj   the compared object
     *  @return <code>true</code> if the primary key information is equal to the
     *          primary key informations of <code>obj</code>.
     */
    public boolean equals(Object obj) {

        return (obj instanceof JobTaskImpl && getTaskNumber() == ((com.sun.grid.jgdi.configuration.JobTask)obj).getTaskNumber());

    }

    
    
    public boolean equalsCompletely(Object obj) {
        Logger logger = Logger.getLogger(getClass().getName());
        if (obj instanceof  JobTaskImpl) {
            com.sun.grid.jgdi.configuration.JobTask obj1 = (com.sun.grid.jgdi.configuration.JobTask)obj;

            {
                int value1 = getTaskNumber();
                int value2 = obj1.getTaskNumber();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes JAT_task_number are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getStatus();
                int value2 = obj1.getStatus();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes JAT_status are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getStartTime();
                int value2 = obj1.getStartTime();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes JAT_start_time are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getEndTime();
                int value2 = obj1.getEndTime();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes JAT_end_time are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getHold();
                int value2 = obj1.getHold();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes JAT_hold are not equal");
                }
                return false;
            }

            }

            {
                java.lang.String value1 = getGrantedPe();
                java.lang.String value2 = obj1.getGrantedPe();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute JAT_granted_pe of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes JAT_granted_pe are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                int value1 = getJobRestarted();
                int value2 = obj1.getJobRestarted();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes JAT_job_restarted are not equal");
                }
                return false;
            }

            }

            {
                int grantedDestinIdentifierCount = getGrantedDestinIdentifierCount();
                if (grantedDestinIdentifierCount != obj1.getGrantedDestinIdentifierCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists grantedDestinIdentifier has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < grantedDestinIdentifierCount; i++) {
                    com.sun.grid.jgdi.configuration.JG value1 = getGrantedDestinIdentifier(i);
                    com.sun.grid.jgdi.configuration.JG value2 = obj1.getGrantedDestinIdentifier(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute JAT_granted_destin_identifier_list of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

                } // end of for
            }

            {
                java.lang.String value1 = getMasterQueue();
                java.lang.String value2 = obj1.getMasterQueue();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute JAT_master_queue of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes JAT_master_queue are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                int value1 = getState();
                int value2 = obj1.getState();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes JAT_state are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getPvmCkptPid();
                int value2 = obj1.getPvmCkptPid();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes JAT_pvm_ckpt_pid are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getPendingSignal();
                int value2 = obj1.getPendingSignal();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes JAT_pending_signal are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getPendingSignalDeliveryTime();
                int value2 = obj1.getPendingSignalDeliveryTime();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes JAT_pending_signal_delivery_time are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getPid();
                int value2 = obj1.getPid();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes JAT_pid are not equal");
                }
                return false;
            }

            }

            {
                java.lang.String value1 = getOsjobid();
                java.lang.String value2 = obj1.getOsjobid();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute JAT_osjobid of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes JAT_osjobid are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }
           
            {
                Set usageSet1 = getUsageKeys();
                Set usageSet2 = obj1.getUsageKeys();
                if (usageSet1.size() != usageSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("maps usage has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getUsageKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    double value1 = getUsage(key);
                    double value2 = obj1.getUsage(key);             

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes UA_value are not equal");
                }
                return false;
            }

                }
            }
           
            {
                Set scaledUsageSet1 = getScaledUsageKeys();
                Set scaledUsageSet2 = obj1.getScaledUsageKeys();
                if (scaledUsageSet1.size() != scaledUsageSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("maps scaledUsage has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getScaledUsageKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    double value1 = getScaledUsage(key);
                    double value2 = obj1.getScaledUsage(key);             

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes UA_value are not equal");
                }
                return false;
            }

                }
            }
           
            {
                Set reportedUsageSet1 = getReportedUsageKeys();
                Set reportedUsageSet2 = obj1.getReportedUsageKeys();
                if (reportedUsageSet1.size() != reportedUsageSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("maps reportedUsage has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getReportedUsageKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    double value1 = getReportedUsage(key);
                    double value2 = obj1.getReportedUsage(key);             

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes UA_value are not equal");
                }
                return false;
            }

                }
            }

            {
                int value1 = getFshare();
                int value2 = obj1.getFshare();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes JAT_fshare are not equal");
                }
                return false;
            }

            }

            {
                double value1 = getTix();
                double value2 = obj1.getTix();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes JAT_tix are not equal");
                }
                return false;
            }

            }

            {
                double value1 = getOticket();
                double value2 = obj1.getOticket();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes JAT_oticket are not equal");
                }
                return false;
            }

            }

            {
                double value1 = getFticket();
                double value2 = obj1.getFticket();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes JAT_fticket are not equal");
                }
                return false;
            }

            }

            {
                double value1 = getSticket();
                double value2 = obj1.getSticket();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes JAT_sticket are not equal");
                }
                return false;
            }

            }

            {
                double value1 = getShare();
                double value2 = obj1.getShare();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes JAT_share are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getSuitable();
                int value2 = obj1.getSuitable();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes JAT_suitable are not equal");
                }
                return false;
            }

            }

            {
                int taskCount = getTaskCount();
                if (taskCount != obj1.getTaskCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists task has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < taskCount; i++) {
                    com.sun.grid.jgdi.configuration.PETask value1 = getTask(i);
                    com.sun.grid.jgdi.configuration.PETask value2 = obj1.getTask(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute JAT_task_list of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

                } // end of for
            }

            {
                int finishedTaskCount = getFinishedTaskCount();
                if (finishedTaskCount != obj1.getFinishedTaskCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists finishedTask has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < finishedTaskCount; i++) {
                    com.sun.grid.jgdi.configuration.FPET value1 = getFinishedTask(i);
                    com.sun.grid.jgdi.configuration.FPET value2 = obj1.getFinishedTask(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute JAT_finished_task_list of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

                } // end of for
            }
           
            {
                Set previousUsageSet1 = getPreviousUsageKeys();
                Set previousUsageSet2 = obj1.getPreviousUsageKeys();
                if (previousUsageSet1.size() != previousUsageSet2.size()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("maps previousUsage has different key sizes");
                    }
                    return false;
                }
                Iterator iter = getPreviousUsageKeys().iterator();
                while (iter.hasNext()) {
                    java.lang.String key = (java.lang.String)iter.next();
                    double value1 = getPreviousUsage(key);
                    double value2 = obj1.getPreviousUsage(key);             

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes UA_value are not equal");
                }
                return false;
            }

                }
            }

            {
                com.sun.grid.jgdi.configuration.ParallelEnvironment value1 = getPeObject();
                com.sun.grid.jgdi.configuration.ParallelEnvironment value2 = obj1.getPeObject();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute JAT_pe_object of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

            }

            {
                int value1 = getNextPeTaskId();
                int value2 = obj1.getNextPeTaskId();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes JAT_next_pe_task_id are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getStopInitiateTime();
                int value2 = obj1.getStopInitiateTime();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes JAT_stop_initiate_time are not equal");
                }
                return false;
            }

            }

            {
                double value1 = getPrio();
                double value2 = obj1.getPrio();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes JAT_prio are not equal");
                }
                return false;
            }

            }

            {
                double value1 = getNtix();
                double value2 = obj1.getNtix();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes JAT_ntix are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getWallclockLimit();
                int value2 = obj1.getWallclockLimit();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes JAT_wallclock_limit are not equal");
                }
                return false;
            }

            }

            {
                int messageCount = getMessageCount();
                if (messageCount != obj1.getMessageCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists message has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < messageCount; i++) {
                    com.sun.grid.jgdi.configuration.QueueInstanceMessage value1 = getMessage(i);
                    com.sun.grid.jgdi.configuration.QueueInstanceMessage value2 = obj1.getMessage(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute JAT_message_list of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

                } // end of for
            }

            return true;
        } else {
            return true;
        }
    }
  
    public java.lang.String toString() {
        StringBuilder ret = new StringBuilder();
        ret.append("JobTaskImpl(");

        ret.append(getTaskNumber());

        ret.append(")");
        return ret.toString();
    }



    public java.lang.String dump() {
        StringBuilder sb = new StringBuilder();

            {
                int value = getTaskNumber();
                sb.append("TaskNumber = " + value + "\n");
            }

            {
                int value = getStatus();
                sb.append("Status = " + value + "\n");
            }

            {
                int value = getStartTime();
                sb.append("StartTime = " + value + "\n");
            }

            {
                int value = getEndTime();
                sb.append("EndTime = " + value + "\n");
            }

            {
                int value = getHold();
                sb.append("Hold = " + value + "\n");
            }

            {
                java.lang.String value = getGrantedPe();
                sb.append("GrantedPe = " + value + "\n");
            }

            {
                int value = getJobRestarted();
                sb.append("JobRestarted = " + value + "\n");
            }

            int grantedDestinIdentifierCount = getGrantedDestinIdentifierCount();
            for (int i = 0; i < grantedDestinIdentifierCount; i++) {
                com.sun.grid.jgdi.configuration.JG value = getGrantedDestinIdentifier(i);
                
                sb.append("GrantedDestinIdentifier[" + i + "] = " + value.dump() + "\n");
                
            } // end of for

            {
                java.lang.String value = getMasterQueue();
                sb.append("MasterQueue = " + value + "\n");
            }

            {
                int value = getState();
                sb.append("State = " + value + "\n");
            }

            {
                int value = getPvmCkptPid();
                sb.append("PvmCkptPid = " + value + "\n");
            }

            {
                int value = getPendingSignal();
                sb.append("PendingSignal = " + value + "\n");
            }

            {
                int value = getPendingSignalDeliveryTime();
                sb.append("PendingSignalDeliveryTime = " + value + "\n");
            }

            {
                int value = getPid();
                sb.append("Pid = " + value + "\n");
            }

            {
                java.lang.String value = getOsjobid();
                sb.append("Osjobid = " + value + "\n");
            }

            for (java.lang.String key : getUsageKeys()) {
                double value = getUsage(key);
                
                sb.append("Usage[" + key + "] = " + value + "\n");
                
            }

            for (java.lang.String key : getScaledUsageKeys()) {
                double value = getScaledUsage(key);
                
                sb.append("ScaledUsage[" + key + "] = " + value + "\n");
                
            }

            for (java.lang.String key : getReportedUsageKeys()) {
                double value = getReportedUsage(key);
                
                sb.append("ReportedUsage[" + key + "] = " + value + "\n");
                
            }

            {
                int value = getFshare();
                sb.append("Fshare = " + value + "\n");
            }

            {
                double value = getTix();
                sb.append("Tix = " + value + "\n");
            }

            {
                double value = getOticket();
                sb.append("Oticket = " + value + "\n");
            }

            {
                double value = getFticket();
                sb.append("Fticket = " + value + "\n");
            }

            {
                double value = getSticket();
                sb.append("Sticket = " + value + "\n");
            }

            {
                double value = getShare();
                sb.append("Share = " + value + "\n");
            }

            {
                int value = getSuitable();
                sb.append("Suitable = " + value + "\n");
            }

            int taskCount = getTaskCount();
            for (int i = 0; i < taskCount; i++) {
                com.sun.grid.jgdi.configuration.PETask value = getTask(i);
                
                sb.append("Task[" + i + "] = " + value.dump() + "\n");
                
            } // end of for

            int finishedTaskCount = getFinishedTaskCount();
            for (int i = 0; i < finishedTaskCount; i++) {
                com.sun.grid.jgdi.configuration.FPET value = getFinishedTask(i);
                
                sb.append("FinishedTask[" + i + "] = " + value.dump() + "\n");
                
            } // end of for

            for (java.lang.String key : getPreviousUsageKeys()) {
                double value = getPreviousUsage(key);
                
                sb.append("PreviousUsage[" + key + "] = " + value + "\n");
                
            }

            {
                com.sun.grid.jgdi.configuration.ParallelEnvironment value = getPeObject();
                sb.append("PeObject = " + value + "\n");
            }

            {
                int value = getNextPeTaskId();
                sb.append("NextPeTaskId = " + value + "\n");
            }

            {
                int value = getStopInitiateTime();
                sb.append("StopInitiateTime = " + value + "\n");
            }

            {
                double value = getPrio();
                sb.append("Prio = " + value + "\n");
            }

            {
                double value = getNtix();
                sb.append("Ntix = " + value + "\n");
            }

            {
                int value = getWallclockLimit();
                sb.append("WallclockLimit = " + value + "\n");
            }

            int messageCount = getMessageCount();
            for (int i = 0; i < messageCount; i++) {
                com.sun.grid.jgdi.configuration.QueueInstanceMessage value = getMessage(i);
                
                sb.append("Message[" + i + "] = " + value.dump() + "\n");
                
            } // end of for

        return sb.toString();
    }    

 
}
