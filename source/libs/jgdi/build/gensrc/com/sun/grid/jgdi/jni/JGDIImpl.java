/*___INFO__MARK_BEGIN__*/
/*************************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  the Sun Industry Standards Source License Version 1.2
 *
 *  Sun Microsystems Inc., March, 2001
 *
 *
 *  Sun Industry Standards Source License Version 1.2
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.2 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *   Copyright: 2001 by Sun Microsystems, Inc.
 *
 *   All Rights Reserved.
 *
 ************************************************************************/
/*___INFO__MARK_END__*/
/**
 *  Generated from java_jni_jgdi.jsp
 *  !!! DO NOT EDIT THIS FILE !!!
 */

package com.sun.grid.jgdi.jni;

import com.sun.grid.jgdi.JGDIException;
import com.sun.grid.jgdi.filter.*;
import java.util.List;
import java.util.LinkedList;
import com.sun.grid.jgdi.CullConstants;
import com.sun.grid.jgdi.configuration.JGDIAnswer;
import com.sun.grid.jgdi.monitoring.filter.UserFilter;

// for Hostgroup
import com.sun.grid.jgdi.configuration.Hostgroup;
import com.sun.grid.jgdi.configuration.HostgroupImpl;        
// for SubmitHost
import com.sun.grid.jgdi.configuration.SubmitHost;
import com.sun.grid.jgdi.configuration.SubmitHostImpl;        
// for ExecHost
import com.sun.grid.jgdi.configuration.ExecHost;
import com.sun.grid.jgdi.configuration.ExecHostImpl;        
// for Manager
import com.sun.grid.jgdi.configuration.Manager;
import com.sun.grid.jgdi.configuration.ManagerImpl;        
// for AdvanceReservation
import com.sun.grid.jgdi.configuration.AdvanceReservation;
import com.sun.grid.jgdi.configuration.AdvanceReservationImpl;        
// for SchedConf
import com.sun.grid.jgdi.configuration.SchedConf;
import com.sun.grid.jgdi.configuration.SchedConfImpl;        
// for Configuration
import com.sun.grid.jgdi.configuration.Configuration;
import com.sun.grid.jgdi.configuration.ConfigurationImpl;        
// for Project
import com.sun.grid.jgdi.configuration.Project;
import com.sun.grid.jgdi.configuration.ProjectImpl;        
// for ShareTree
import com.sun.grid.jgdi.configuration.ShareTree;
import com.sun.grid.jgdi.configuration.ShareTreeImpl;        
// for AdminHost
import com.sun.grid.jgdi.configuration.AdminHost;
import com.sun.grid.jgdi.configuration.AdminHostImpl;        
// for Checkpoint
import com.sun.grid.jgdi.configuration.Checkpoint;
import com.sun.grid.jgdi.configuration.CheckpointImpl;        
// for ParallelEnvironment
import com.sun.grid.jgdi.configuration.ParallelEnvironment;
import com.sun.grid.jgdi.configuration.ParallelEnvironmentImpl;        
// for ComplexEntry
import com.sun.grid.jgdi.configuration.ComplexEntry;
import com.sun.grid.jgdi.configuration.ComplexEntryImpl;        
// for ClusterQueue
import com.sun.grid.jgdi.configuration.ClusterQueue;
import com.sun.grid.jgdi.configuration.ClusterQueueImpl;        
// for JobSchedulingInfo
import com.sun.grid.jgdi.configuration.JobSchedulingInfo;
import com.sun.grid.jgdi.configuration.JobSchedulingInfoImpl;        
// for UserSet
import com.sun.grid.jgdi.configuration.UserSet;
import com.sun.grid.jgdi.configuration.UserSetImpl;        
// for Calendar
import com.sun.grid.jgdi.configuration.Calendar;
import com.sun.grid.jgdi.configuration.CalendarImpl;        
// for Operator
import com.sun.grid.jgdi.configuration.Operator;
import com.sun.grid.jgdi.configuration.OperatorImpl;        
// for Job
import com.sun.grid.jgdi.configuration.Job;
import com.sun.grid.jgdi.configuration.JobImpl;        
// for ResourceQuotaSet
import com.sun.grid.jgdi.configuration.ResourceQuotaSet;
import com.sun.grid.jgdi.configuration.ResourceQuotaSetImpl;        
// for EventClient
import com.sun.grid.jgdi.configuration.EventClient;
import com.sun.grid.jgdi.configuration.EventClientImpl;        
// for User
import com.sun.grid.jgdi.configuration.User;
import com.sun.grid.jgdi.configuration.UserImpl;        

/**
 *  JNI implementation of {@link com.sun.grid.jgdi.JGDI}
 * 
 */
public class JGDIImpl extends JGDIBaseImpl implements com.sun.grid.jgdi.JGDI {

   
    /**
     * Get the list of real exec hosts (excludes "template" and "global").
     *
     * @throws com.sun.grid.jgdi.JGDIException 
     * @return the list of real exec hosts
     */
   public List getRealExecHostList() throws com.sun.grid.jgdi.JGDIException {
        List<ExecHost> ret = new LinkedList<ExecHost>();
        PrimaryKeyFilter filter = new PrimaryKeyFilter("EH_Type");
        filter.exclude(CullConstants.EH_name, "template" ); 
        filter.exclude(CullConstants.EH_name, "global" );
        fillExecHostList(ret, filter);
        return ret;
   }

       
   /**
    *   Update a <code>Hostgroup</code> object.
    *   @param obj   the <code>Hostgroup</code> object with the new values
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void updateHostgroup(Hostgroup obj) throws JGDIException;

   /**
    *   Update a <code>Hostgroup</code> object.
    *   @param obj      the <code>Hostgroup</code> object with the new values
    *   @param answers  the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void updateHostgroupWithAnswer(Hostgroup obj, List<JGDIAnswer> answers) throws JGDIException;
        
   /**
    *   Delete a <code>Hostgroup</code> object.
    *   @param obj  <code>Hostgroup</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteHostgroup(Hostgroup obj) throws JGDIException;

   /**
    *   Delete a <code>Hostgroup</code> object.
    *   @param obj  <code>Hostgroup</code> object with the primary key information
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteHostgroupWithAnswer(Hostgroup obj, List<JGDIAnswer> answers) throws JGDIException;
   
   /**
    *   Delete several <code>Hostgroup</code> objects.
    *   @param objs  <code>Hostgroup</code> object array with the primary key information
    *   @param force  <code>force</code> delete flag
    *   @param userFilter  delete object for users contained in userFilter
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteHostgroupsWithAnswer(Object[] objs, boolean force, UserFilter userFilter, List<JGDIAnswer> answers) throws JGDIException;
   


   /**
    *   Delete a <code>Hostgroup</code> object by its primary key
    *   @param HGRP_name   the HGRP_name of the <code>Hostgroup</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteHostgroup(String HGRP_name) throws JGDIException {
       Hostgroup obj = new HostgroupImpl(HGRP_name);
       deleteHostgroup(obj);
    }

   /**
    *   Delete a <code>Hostgroup</code> object by its primary key
    *   @param HGRP_name   the HGRP_name of the <code>Hostgroup</code> object

       *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteHostgroupWithAnswer(String HGRP_name, List<JGDIAnswer> answers) throws JGDIException {
       Hostgroup obj = new HostgroupImpl(HGRP_name);
       deleteHostgroupWithAnswer(obj, answers);
    }

   /**
    *   Delete several <code>Hostgroup</code> objects by its primary key
    *   @param HGRP_names   the HGRP_name of the <code>Hostgroup</code> object
    *   @param answers  <code>answer list</code> object  
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteHostgroupsWithAnswer(String[] HGRP_names, List<JGDIAnswer> answers) throws JGDIException {

    
       // Other objects
       List< Hostgroup > list = new LinkedList< Hostgroup >();

       for (int i=0; HGRP_names != null && i < HGRP_names.length; i++) {
             Hostgroup obj = new HostgroupImpl(
       
       HGRP_names[i]
  );
         list.add(obj);
       }
       deleteHostgroupsWithAnswer(list.toArray(), false, null, answers);      
    
  }

   /**
    *   Add a new <code>Hostgroup</code> object.
    *   @param  obj the new <code>Hostgroup</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void addHostgroup(Hostgroup obj) throws JGDIException;

   /**
    *   Add a new <code>Hostgroup</code> object.
    *   @param  obj the new <code>Hostgroup</code> object
    *   @param  answers the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void addHostgroupWithAnswer(Hostgroup obj, List<JGDIAnswer> answers) throws JGDIException;

        
   private native void fillHostgroupListWithAnswer(List< Hostgroup > list, JGDIFilter filter, List<JGDIAnswer> answers) throws JGDIException;
   
   private void fillHostgroupList(List< Hostgroup > list, JGDIFilter filter) throws JGDIException {
      fillHostgroupListWithAnswer(list, filter, null);
   }
   
   private void fillHostgroupList(List< Hostgroup > list) throws JGDIException {
      fillHostgroupListWithAnswer(list, null, null);
   }
   
   private void fillHostgroupListWithAnswer(List< Hostgroup > list, List<JGDIAnswer> answers) throws JGDIException {
      fillHostgroupListWithAnswer(list, null, answers);
   }

   
        
   /**
    *   Get the list of all defined <code>Hostgroup</code> objects.
    *   @return list of <code>Hostgroup</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getHostgroupList() throws JGDIException {
      List< Hostgroup > ret = new LinkedList< Hostgroup >();
      fillHostgroupList(ret);
      return ret;
   }
   /**
    *   Get the list of all defined <code>Hostgroup</code> objects.
    *   @param  answers the <code>answer list</code> object
    *   @return list of <code>Hostgroup</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getHostgroupListWithAnswer(List<JGDIAnswer> answers) throws JGDIException {
      List< Hostgroup > ret = new LinkedList< Hostgroup >();
      fillHostgroupListWithAnswer(ret, answers);
      return ret;
   }

        
   /**
    *  Get a Hostgroup by its primary key
    *
    *  @return the Hostgroup
    *  @param HGRP_name   the HGRP_name of the <code>Hostgroup</code> object
    *  @return the found <code>Hostgroup</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public Hostgroup getHostgroup( String HGRP_name ) throws JGDIException {
    
        List< Hostgroup > ret = new LinkedList< Hostgroup >();
        PrimaryKeyFilter filter = new PrimaryKeyFilter("HGRP_Type");

        filter.include(CullConstants.HGRP_name, HGRP_name);

        fillHostgroupList(ret, filter);

        switch(ret.size()) {
           case 0:  return null;
           case 1:  return (Hostgroup)ret.get(0);
           default:
                throw new IllegalStateException("Duplicate primary key");
        }
   }
   
   /**
    *  Get a Hostgroup by its primary key
    *
    *  @return the Hostgroup
    *  @param HGRP_name   the HGRP_name of the <code>Hostgroup</code> object
   *  @param  answers the <code>answer list</code> object
    *  @return the found <code>Hostgroup</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public Hostgroup getHostgroupWithAnswer( String HGRP_name , List<JGDIAnswer> answers) throws JGDIException {
    
        List< Hostgroup >  ret = new LinkedList< Hostgroup >();
        
        PrimaryKeyFilter filter = new PrimaryKeyFilter("HGRP_Type");
        filter.include(CullConstants.HGRP_name, HGRP_name); 
        fillHostgroupListWithAnswer(ret, filter, answers);

        switch(ret.size()) {
           case 0:  return null;
           case 1:  return (Hostgroup)ret.get(0);
           default:
                throw new IllegalStateException("Duplicate primary key");
        }
   }
   
        
   /**
    *   Delete a <code>SubmitHost</code> object.
    *   @param obj  <code>SubmitHost</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteSubmitHost(SubmitHost obj) throws JGDIException;

   /**
    *   Delete a <code>SubmitHost</code> object.
    *   @param obj  <code>SubmitHost</code> object with the primary key information
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteSubmitHostWithAnswer(SubmitHost obj, List<JGDIAnswer> answers) throws JGDIException;
   
   /**
    *   Delete several <code>SubmitHost</code> objects.
    *   @param objs  <code>SubmitHost</code> object array with the primary key information
    *   @param force  <code>force</code> delete flag
    *   @param userFilter  delete object for users contained in userFilter
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteSubmitHostsWithAnswer(Object[] objs, boolean force, UserFilter userFilter, List<JGDIAnswer> answers) throws JGDIException;
   


   /**
    *   Delete a <code>SubmitHost</code> object by its primary key
    *   @param SH_name   the SH_name of the <code>SubmitHost</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteSubmitHost(String SH_name) throws JGDIException {
       SubmitHost obj = new SubmitHostImpl(SH_name);
       deleteSubmitHost(obj);
    }

   /**
    *   Delete a <code>SubmitHost</code> object by its primary key
    *   @param SH_name   the SH_name of the <code>SubmitHost</code> object

       *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteSubmitHostWithAnswer(String SH_name, List<JGDIAnswer> answers) throws JGDIException {
       SubmitHost obj = new SubmitHostImpl(SH_name);
       deleteSubmitHostWithAnswer(obj, answers);
    }

   /**
    *   Delete several <code>SubmitHost</code> objects by its primary key
    *   @param SH_names   the SH_name of the <code>SubmitHost</code> object
    *   @param answers  <code>answer list</code> object  
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteSubmitHostsWithAnswer(String[] SH_names, List<JGDIAnswer> answers) throws JGDIException {

    
       // Other objects
       List< SubmitHost > list = new LinkedList< SubmitHost >();

       for (int i=0; SH_names != null && i < SH_names.length; i++) {
             SubmitHost obj = new SubmitHostImpl(
       
       SH_names[i]
  );
         list.add(obj);
       }
       deleteSubmitHostsWithAnswer(list.toArray(), false, null, answers);      
    
  }

   /**
    *   Add a new <code>SubmitHost</code> object.
    *   @param  obj the new <code>SubmitHost</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void addSubmitHost(SubmitHost obj) throws JGDIException;

   /**
    *   Add a new <code>SubmitHost</code> object.
    *   @param  obj the new <code>SubmitHost</code> object
    *   @param  answers the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void addSubmitHostWithAnswer(SubmitHost obj, List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Add a new <code>SubmitHost</code> object.
    *   @param  name the new <code>String</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addSubmitHost(String name) throws JGDIException {
      SubmitHost obj = new SubmitHostImpl(name);
      addSubmitHost(obj);
   }

   /**
    *   Add a new <code>SubmitHost</code> object.
    *   @param  name the new <code>String</code> object
    *   @param  answers the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addSubmitHostWithAnswer(String name, List<JGDIAnswer> answers) throws JGDIException {
      SubmitHost obj = new SubmitHostImpl(name);
       addSubmitHostWithAnswer(obj, answers);
   }
   
        
   private native void fillSubmitHostListWithAnswer(List< SubmitHost > list, JGDIFilter filter, List<JGDIAnswer> answers) throws JGDIException;
   
   private void fillSubmitHostList(List< SubmitHost > list, JGDIFilter filter) throws JGDIException {
      fillSubmitHostListWithAnswer(list, filter, null);
   }
   
   private void fillSubmitHostList(List< SubmitHost > list) throws JGDIException {
      fillSubmitHostListWithAnswer(list, null, null);
   }
   
   private void fillSubmitHostListWithAnswer(List< SubmitHost > list, List<JGDIAnswer> answers) throws JGDIException {
      fillSubmitHostListWithAnswer(list, null, answers);
   }

   
        
   /**
    *   Get the list of all defined <code>SubmitHost</code> objects.
    *   @return list of <code>SubmitHost</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getSubmitHostList() throws JGDIException {
      List< SubmitHost > ret = new LinkedList< SubmitHost >();
      fillSubmitHostList(ret);
      return ret;
   }
   /**
    *   Get the list of all defined <code>SubmitHost</code> objects.
    *   @param  answers the <code>answer list</code> object
    *   @return list of <code>SubmitHost</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getSubmitHostListWithAnswer(List<JGDIAnswer> answers) throws JGDIException {
      List< SubmitHost > ret = new LinkedList< SubmitHost >();
      fillSubmitHostListWithAnswer(ret, answers);
      return ret;
   }

       
   /**
    *   Update a <code>ExecHost</code> object.
    *   @param obj   the <code>ExecHost</code> object with the new values
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void updateExecHost(ExecHost obj) throws JGDIException;

   /**
    *   Update a <code>ExecHost</code> object.
    *   @param obj      the <code>ExecHost</code> object with the new values
    *   @param answers  the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void updateExecHostWithAnswer(ExecHost obj, List<JGDIAnswer> answers) throws JGDIException;
        
   /**
    *   Delete a <code>ExecHost</code> object.
    *   @param obj  <code>ExecHost</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteExecHost(ExecHost obj) throws JGDIException;

   /**
    *   Delete a <code>ExecHost</code> object.
    *   @param obj  <code>ExecHost</code> object with the primary key information
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteExecHostWithAnswer(ExecHost obj, List<JGDIAnswer> answers) throws JGDIException;
   
   /**
    *   Delete several <code>ExecHost</code> objects.
    *   @param objs  <code>ExecHost</code> object array with the primary key information
    *   @param force  <code>force</code> delete flag
    *   @param userFilter  delete object for users contained in userFilter
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteExecHostsWithAnswer(Object[] objs, boolean force, UserFilter userFilter, List<JGDIAnswer> answers) throws JGDIException;
   


   /**
    *   Delete a <code>ExecHost</code> object by its primary key
    *   @param EH_name   the EH_name of the <code>ExecHost</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteExecHost(String EH_name) throws JGDIException {
       ExecHost obj = new ExecHostImpl(EH_name);
       deleteExecHost(obj);
    }

   /**
    *   Delete a <code>ExecHost</code> object by its primary key
    *   @param EH_name   the EH_name of the <code>ExecHost</code> object

       *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteExecHostWithAnswer(String EH_name, List<JGDIAnswer> answers) throws JGDIException {
       ExecHost obj = new ExecHostImpl(EH_name);
       deleteExecHostWithAnswer(obj, answers);
    }

   /**
    *   Delete several <code>ExecHost</code> objects by its primary key
    *   @param EH_names   the EH_name of the <code>ExecHost</code> object
    *   @param answers  <code>answer list</code> object  
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteExecHostsWithAnswer(String[] EH_names, List<JGDIAnswer> answers) throws JGDIException {

    
       // Other objects
       List< ExecHost > list = new LinkedList< ExecHost >();

       for (int i=0; EH_names != null && i < EH_names.length; i++) {
             ExecHost obj = new ExecHostImpl(
       
       EH_names[i]
  );
         list.add(obj);
       }
       deleteExecHostsWithAnswer(list.toArray(), false, null, answers);      
    
  }

   /**
    *   Add a new <code>ExecHost</code> object.
    *   @param  obj the new <code>ExecHost</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void addExecHost(ExecHost obj) throws JGDIException;

   /**
    *   Add a new <code>ExecHost</code> object.
    *   @param  obj the new <code>ExecHost</code> object
    *   @param  answers the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void addExecHostWithAnswer(ExecHost obj, List<JGDIAnswer> answers) throws JGDIException;

        
   private native void fillExecHostListWithAnswer(List< ExecHost > list, JGDIFilter filter, List<JGDIAnswer> answers) throws JGDIException;
   
   private void fillExecHostList(List< ExecHost > list, JGDIFilter filter) throws JGDIException {
      fillExecHostListWithAnswer(list, filter, null);
   }
   
   private void fillExecHostList(List< ExecHost > list) throws JGDIException {
      fillExecHostListWithAnswer(list, null, null);
   }
   
   private void fillExecHostListWithAnswer(List< ExecHost > list, List<JGDIAnswer> answers) throws JGDIException {
      fillExecHostListWithAnswer(list, null, answers);
   }

   
        
   /**
    *   Get the list of all defined <code>ExecHost</code> objects.
    *   @return list of <code>ExecHost</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getExecHostList() throws JGDIException {
      List< ExecHost > ret = new LinkedList< ExecHost >();
      fillExecHostList(ret);
      return ret;
   }
   /**
    *   Get the list of all defined <code>ExecHost</code> objects.
    *   @param  answers the <code>answer list</code> object
    *   @return list of <code>ExecHost</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getExecHostListWithAnswer(List<JGDIAnswer> answers) throws JGDIException {
      List< ExecHost > ret = new LinkedList< ExecHost >();
      fillExecHostListWithAnswer(ret, answers);
      return ret;
   }

        
   /**
    *  Get a ExecHost by its primary key
    *
    *  @return the ExecHost
    *  @param EH_name   the EH_name of the <code>ExecHost</code> object
    *  @return the found <code>ExecHost</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public ExecHost getExecHost( String EH_name ) throws JGDIException {
    
        List< ExecHost > ret = new LinkedList< ExecHost >();
        PrimaryKeyFilter filter = new PrimaryKeyFilter("EH_Type");

        filter.include(CullConstants.EH_name, EH_name);

        fillExecHostList(ret, filter);

        switch(ret.size()) {
           case 0:  return null;
           case 1:  return (ExecHost)ret.get(0);
           default:
                throw new IllegalStateException("Duplicate primary key");
        }
   }
   
   /**
    *  Get a ExecHost by its primary key
    *
    *  @return the ExecHost
    *  @param EH_name   the EH_name of the <code>ExecHost</code> object
   *  @param  answers the <code>answer list</code> object
    *  @return the found <code>ExecHost</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public ExecHost getExecHostWithAnswer( String EH_name , List<JGDIAnswer> answers) throws JGDIException {
    
        List< ExecHost >  ret = new LinkedList< ExecHost >();
        
        PrimaryKeyFilter filter = new PrimaryKeyFilter("EH_Type");
        filter.include(CullConstants.EH_name, EH_name); 
        fillExecHostListWithAnswer(ret, filter, answers);

        switch(ret.size()) {
           case 0:  return null;
           case 1:  return (ExecHost)ret.get(0);
           default:
                throw new IllegalStateException("Duplicate primary key");
        }
   }
   
        
   /**
    *   Delete a <code>Manager</code> object.
    *   @param obj  <code>Manager</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteManager(Manager obj) throws JGDIException;

   /**
    *   Delete a <code>Manager</code> object.
    *   @param obj  <code>Manager</code> object with the primary key information
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteManagerWithAnswer(Manager obj, List<JGDIAnswer> answers) throws JGDIException;
   
   /**
    *   Delete several <code>Manager</code> objects.
    *   @param objs  <code>Manager</code> object array with the primary key information
    *   @param force  <code>force</code> delete flag
    *   @param userFilter  delete object for users contained in userFilter
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteManagersWithAnswer(Object[] objs, boolean force, UserFilter userFilter, List<JGDIAnswer> answers) throws JGDIException;
   


   /**
    *   Delete a <code>Manager</code> object by its primary key
    *   @param UM_name   the UM_name of the <code>Manager</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteManager(String UM_name) throws JGDIException {
       Manager obj = new ManagerImpl(UM_name);
       deleteManager(obj);
    }

   /**
    *   Delete a <code>Manager</code> object by its primary key
    *   @param UM_name   the UM_name of the <code>Manager</code> object

       *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteManagerWithAnswer(String UM_name, List<JGDIAnswer> answers) throws JGDIException {
       Manager obj = new ManagerImpl(UM_name);
       deleteManagerWithAnswer(obj, answers);
    }

   /**
    *   Delete several <code>Manager</code> objects by its primary key
    *   @param UM_names   the UM_name of the <code>Manager</code> object
    *   @param answers  <code>answer list</code> object  
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteManagersWithAnswer(String[] UM_names, List<JGDIAnswer> answers) throws JGDIException {

    
       // Other objects
       List< Manager > list = new LinkedList< Manager >();

       for (int i=0; UM_names != null && i < UM_names.length; i++) {
             Manager obj = new ManagerImpl(
       
       UM_names[i]
  );
         list.add(obj);
       }
       deleteManagersWithAnswer(list.toArray(), false, null, answers);      
    
  }

   /**
    *   Add a new <code>Manager</code> object.
    *   @param  obj the new <code>Manager</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void addManager(Manager obj) throws JGDIException;

   /**
    *   Add a new <code>Manager</code> object.
    *   @param  obj the new <code>Manager</code> object
    *   @param  answers the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void addManagerWithAnswer(Manager obj, List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Add a new <code>Manager</code> object.
    *   @param  name the new <code>String</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addManager(String name) throws JGDIException {
      Manager obj = new ManagerImpl(name);
      addManager(obj);
   }

   /**
    *   Add a new <code>Manager</code> object.
    *   @param  name the new <code>String</code> object
    *   @param  answers the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addManagerWithAnswer(String name, List<JGDIAnswer> answers) throws JGDIException {
      Manager obj = new ManagerImpl(name);
       addManagerWithAnswer(obj, answers);
   }
   
        
   private native void fillManagerListWithAnswer(List< Manager > list, JGDIFilter filter, List<JGDIAnswer> answers) throws JGDIException;
   
   private void fillManagerList(List< Manager > list, JGDIFilter filter) throws JGDIException {
      fillManagerListWithAnswer(list, filter, null);
   }
   
   private void fillManagerList(List< Manager > list) throws JGDIException {
      fillManagerListWithAnswer(list, null, null);
   }
   
   private void fillManagerListWithAnswer(List< Manager > list, List<JGDIAnswer> answers) throws JGDIException {
      fillManagerListWithAnswer(list, null, answers);
   }

   
        
   /**
    *   Get the list of all defined <code>Manager</code> objects.
    *   @return list of <code>Manager</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getManagerList() throws JGDIException {
      List< Manager > ret = new LinkedList< Manager >();
      fillManagerList(ret);
      return ret;
   }
   /**
    *   Get the list of all defined <code>Manager</code> objects.
    *   @param  answers the <code>answer list</code> object
    *   @return list of <code>Manager</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getManagerListWithAnswer(List<JGDIAnswer> answers) throws JGDIException {
      List< Manager > ret = new LinkedList< Manager >();
      fillManagerListWithAnswer(ret, answers);
      return ret;
   }

        
   /**
    *  Get a Manager by its primary key
    *
    *  @return the Manager
    *  @param UM_name   the UM_name of the <code>Manager</code> object
    *  @return the found <code>Manager</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public Manager getManager( String UM_name ) throws JGDIException {
    
        List< Manager > ret = new LinkedList< Manager >();
        PrimaryKeyFilter filter = new PrimaryKeyFilter("UM_Type");

        filter.include(CullConstants.UM_name, UM_name);

        fillManagerList(ret, filter);

        switch(ret.size()) {
           case 0:  return null;
           case 1:  return (Manager)ret.get(0);
           default:
                throw new IllegalStateException("Duplicate primary key");
        }
   }
   
   /**
    *  Get a Manager by its primary key
    *
    *  @return the Manager
    *  @param UM_name   the UM_name of the <code>Manager</code> object
   *  @param  answers the <code>answer list</code> object
    *  @return the found <code>Manager</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public Manager getManagerWithAnswer( String UM_name , List<JGDIAnswer> answers) throws JGDIException {
    
        List< Manager >  ret = new LinkedList< Manager >();
        
        PrimaryKeyFilter filter = new PrimaryKeyFilter("UM_Type");
        filter.include(CullConstants.UM_name, UM_name); 
        fillManagerListWithAnswer(ret, filter, answers);

        switch(ret.size()) {
           case 0:  return null;
           case 1:  return (Manager)ret.get(0);
           default:
                throw new IllegalStateException("Duplicate primary key");
        }
   }
   
        
   /**
    *   Delete a <code>AdvanceReservation</code> object.
    *   @param obj  <code>AdvanceReservation</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteAdvanceReservation(AdvanceReservation obj) throws JGDIException;

   /**
    *   Delete a <code>AdvanceReservation</code> object.
    *   @param obj  <code>AdvanceReservation</code> object with the primary key information
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteAdvanceReservationWithAnswer(AdvanceReservation obj, List<JGDIAnswer> answers) throws JGDIException;
   
   /**
    *   Delete several <code>AdvanceReservation</code> objects.
    *   @param objs  <code>AdvanceReservation</code> object array with the primary key information
    *   @param force  <code>force</code> delete flag
    *   @param userFilter  delete object for users contained in userFilter
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteAdvanceReservationsWithAnswer(Object[] objs, boolean force, UserFilter userFilter, List<JGDIAnswer> answers) throws JGDIException;
   


   /**
    *   Delete a <code>AdvanceReservation</code> object by its primary key
    *   @param AR_id   the AR_id of the <code>AdvanceReservation</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteAdvanceReservation(int AR_id) throws JGDIException {
       AdvanceReservation obj = new AdvanceReservationImpl(AR_id);
       deleteAdvanceReservation(obj);
    }

   /**
    *   Delete a <code>AdvanceReservation</code> object by its primary key
    *   @param AR_id   the AR_id of the <code>AdvanceReservation</code> object

       *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteAdvanceReservationWithAnswer(int AR_id, List<JGDIAnswer> answers) throws JGDIException {
       AdvanceReservation obj = new AdvanceReservationImpl(AR_id);
       deleteAdvanceReservationWithAnswer(obj, answers);
    }

   /**
    *   Delete several <code>AdvanceReservation</code> objects by its primary key
    *   @param AR_ids   the AR_id of the <code>AdvanceReservation</code> object
    
    *   @param forced  <code>forced</code> delete flag
    *   @param userFilter  delete objects owned by users contained in userFilter 
    *   @param answers  <code>answer list</code> object  
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteAdvanceReservationsWithAnswer(String[] AR_ids, boolean forced, UserFilter userFilter
    , List<JGDIAnswer> answers) throws JGDIException {

    
         deleteAdvanceReservationsWithAnswer(  
         
            (Object[])AR_ids
         
       , forced, userFilter, answers);
    
  }

   /**
    *   Add a new <code>AdvanceReservation</code> object.
    *   @param  obj the new <code>AdvanceReservation</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void addAdvanceReservation(AdvanceReservation obj) throws JGDIException;

   /**
    *   Add a new <code>AdvanceReservation</code> object.
    *   @param  obj the new <code>AdvanceReservation</code> object
    *   @param  answers the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void addAdvanceReservationWithAnswer(AdvanceReservation obj, List<JGDIAnswer> answers) throws JGDIException;

        
   private native void fillAdvanceReservationListWithAnswer(List< AdvanceReservation > list, JGDIFilter filter, List<JGDIAnswer> answers) throws JGDIException;
   
   private void fillAdvanceReservationList(List< AdvanceReservation > list, JGDIFilter filter) throws JGDIException {
      fillAdvanceReservationListWithAnswer(list, filter, null);
   }
   
   private void fillAdvanceReservationList(List< AdvanceReservation > list) throws JGDIException {
      fillAdvanceReservationListWithAnswer(list, null, null);
   }
   
   private void fillAdvanceReservationListWithAnswer(List< AdvanceReservation > list, List<JGDIAnswer> answers) throws JGDIException {
      fillAdvanceReservationListWithAnswer(list, null, answers);
   }

   
        
   /**
    *   Get the list of all defined <code>AdvanceReservation</code> objects.
    *   @return list of <code>AdvanceReservation</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getAdvanceReservationList() throws JGDIException {
      List< AdvanceReservation > ret = new LinkedList< AdvanceReservation >();
      fillAdvanceReservationList(ret);
      return ret;
   }
   /**
    *   Get the list of all defined <code>AdvanceReservation</code> objects.
    *   @param  answers the <code>answer list</code> object
    *   @return list of <code>AdvanceReservation</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getAdvanceReservationListWithAnswer(List<JGDIAnswer> answers) throws JGDIException {
      List< AdvanceReservation > ret = new LinkedList< AdvanceReservation >();
      fillAdvanceReservationListWithAnswer(ret, answers);
      return ret;
   }

        
   /**
    *  Get a AdvanceReservation by its primary key
    *
    *  @return the AdvanceReservation
    *  @param AR_id   the AR_id of the <code>AdvanceReservation</code> object
    *  @return the found <code>AdvanceReservation</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public AdvanceReservation getAdvanceReservation( int AR_id ) throws JGDIException {
    
        List< AdvanceReservation > ret = new LinkedList< AdvanceReservation >();
        PrimaryKeyFilter filter = new PrimaryKeyFilter("AR_Type");

        filter.include(CullConstants.AR_id, AR_id);

        fillAdvanceReservationList(ret, filter);

        switch(ret.size()) {
           case 0:  return null;
           case 1:  return (AdvanceReservation)ret.get(0);
           default:
                throw new IllegalStateException("Duplicate primary key");
        }
   }
   
   /**
    *  Get a AdvanceReservation by its primary key
    *
    *  @return the AdvanceReservation
    *  @param AR_id   the AR_id of the <code>AdvanceReservation</code> object
   *  @param  answers the <code>answer list</code> object
    *  @return the found <code>AdvanceReservation</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public AdvanceReservation getAdvanceReservationWithAnswer( int AR_id , List<JGDIAnswer> answers) throws JGDIException {
    
        List< AdvanceReservation >  ret = new LinkedList< AdvanceReservation >();
        
        PrimaryKeyFilter filter = new PrimaryKeyFilter("AR_Type");
        filter.include(CullConstants.AR_id, AR_id); 
        fillAdvanceReservationListWithAnswer(ret, filter, answers);

        switch(ret.size()) {
           case 0:  return null;
           case 1:  return (AdvanceReservation)ret.get(0);
           default:
                throw new IllegalStateException("Duplicate primary key");
        }
   }
   
       
   /**
    *   Update a <code>SchedConf</code> object.
    *   @param obj   the <code>SchedConf</code> object with the new values
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void updateSchedConf(SchedConf obj) throws JGDIException;

   /**
    *   Update a <code>SchedConf</code> object.
    *   @param obj      the <code>SchedConf</code> object with the new values
    *   @param answers  the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void updateSchedConfWithAnswer(SchedConf obj, List<JGDIAnswer> answers) throws JGDIException;
        
   private native void fillSchedConfListWithAnswer(List< SchedConf > list, JGDIFilter filter, List<JGDIAnswer> answers) throws JGDIException;
   
   private void fillSchedConfList(List< SchedConf > list, JGDIFilter filter) throws JGDIException {
      fillSchedConfListWithAnswer(list, filter, null);
   }
   
   private void fillSchedConfList(List< SchedConf > list) throws JGDIException {
      fillSchedConfListWithAnswer(list, null, null);
   }
   
   private void fillSchedConfListWithAnswer(List< SchedConf > list, List<JGDIAnswer> answers) throws JGDIException {
      fillSchedConfListWithAnswer(list, null, answers);
   }

   

   /**
    *   Get the <code>SchedConf</code> object
    *   @return the <code>SchedConf</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public SchedConf getSchedConf() throws JGDIException {
      List< SchedConf > ret = new LinkedList< SchedConf >();
      fillSchedConfList(ret);
      switch(ret.size()) {
         case 0: throw new IllegalStateException("static  SchedConf object not found");
         case 1: return (SchedConf)ret.get(0);
         default:
           throw new IllegalStateException("Got more than 1 static SchedConf objects");
      }
   }

   /**
    *   Get the <code>SchedConf</code> object.
    *   @param  answers the <code>answer list</code> object
    *   @return the <code>SchedConf</code> object.
    *   @throws JGDIException on any error on the GDI layer
    */
   public SchedConf getSchedConfWithAnswer(List<JGDIAnswer> answers) throws JGDIException {
      List< SchedConf > ret = new LinkedList< SchedConf >();
      fillSchedConfListWithAnswer(ret, answers);
      switch(ret.size()) {
         case 0: throw new IllegalStateException("static  SchedConf object not found");
         case 1: return (SchedConf)ret.get(0);
         default:
           throw new IllegalStateException("Got more than 1 static SchedConf objects");
      }
   }
       
   /**
    *   Update a <code>Configuration</code> object.
    *   @param obj   the <code>Configuration</code> object with the new values
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void updateConfiguration(Configuration obj) throws JGDIException;

   /**
    *   Update a <code>Configuration</code> object.
    *   @param obj      the <code>Configuration</code> object with the new values
    *   @param answers  the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void updateConfigurationWithAnswer(Configuration obj, List<JGDIAnswer> answers) throws JGDIException;
        
   /**
    *   Delete a <code>Configuration</code> object.
    *   @param obj  <code>Configuration</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteConfiguration(Configuration obj) throws JGDIException;

   /**
    *   Delete a <code>Configuration</code> object.
    *   @param obj  <code>Configuration</code> object with the primary key information
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteConfigurationWithAnswer(Configuration obj, List<JGDIAnswer> answers) throws JGDIException;
   
   /**
    *   Delete several <code>Configuration</code> objects.
    *   @param objs  <code>Configuration</code> object array with the primary key information
    *   @param force  <code>force</code> delete flag
    *   @param userFilter  delete object for users contained in userFilter
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteConfigurationsWithAnswer(Object[] objs, boolean force, UserFilter userFilter, List<JGDIAnswer> answers) throws JGDIException;
   


   /**
    *   Delete a <code>Configuration</code> object by its primary key
    *   @param CONF_name   the CONF_name of the <code>Configuration</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteConfiguration(String CONF_name) throws JGDIException {
       Configuration obj = new ConfigurationImpl(CONF_name);
       deleteConfiguration(obj);
    }

   /**
    *   Delete a <code>Configuration</code> object by its primary key
    *   @param CONF_name   the CONF_name of the <code>Configuration</code> object

       *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteConfigurationWithAnswer(String CONF_name, List<JGDIAnswer> answers) throws JGDIException {
       Configuration obj = new ConfigurationImpl(CONF_name);
       deleteConfigurationWithAnswer(obj, answers);
    }

   /**
    *   Delete several <code>Configuration</code> objects by its primary key
    *   @param CONF_names   the CONF_name of the <code>Configuration</code> object
    *   @param answers  <code>answer list</code> object  
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteConfigurationsWithAnswer(String[] CONF_names, List<JGDIAnswer> answers) throws JGDIException {

    
       // Other objects
       List< Configuration > list = new LinkedList< Configuration >();

       for (int i=0; CONF_names != null && i < CONF_names.length; i++) {
             Configuration obj = new ConfigurationImpl(
       
       CONF_names[i]
  );
         list.add(obj);
       }
       deleteConfigurationsWithAnswer(list.toArray(), false, null, answers);      
    
  }

   /**
    *   Add a new <code>Configuration</code> object.
    *   @param  obj the new <code>Configuration</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void addConfiguration(Configuration obj) throws JGDIException;

   /**
    *   Add a new <code>Configuration</code> object.
    *   @param  obj the new <code>Configuration</code> object
    *   @param  answers the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void addConfigurationWithAnswer(Configuration obj, List<JGDIAnswer> answers) throws JGDIException;

        
   private native void fillConfigurationListWithAnswer(List< Configuration > list, JGDIFilter filter, List<JGDIAnswer> answers) throws JGDIException;
   
   private void fillConfigurationList(List< Configuration > list, JGDIFilter filter) throws JGDIException {
      fillConfigurationListWithAnswer(list, filter, null);
   }
   
   private void fillConfigurationList(List< Configuration > list) throws JGDIException {
      fillConfigurationListWithAnswer(list, null, null);
   }
   
   private void fillConfigurationListWithAnswer(List< Configuration > list, List<JGDIAnswer> answers) throws JGDIException {
      fillConfigurationListWithAnswer(list, null, answers);
   }

   
        
   /**
    *   Get the list of all defined <code>Configuration</code> objects.
    *   @return list of <code>Configuration</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getConfigurationList() throws JGDIException {
      List< Configuration > ret = new LinkedList< Configuration >();
      fillConfigurationList(ret);
      return ret;
   }
   /**
    *   Get the list of all defined <code>Configuration</code> objects.
    *   @param  answers the <code>answer list</code> object
    *   @return list of <code>Configuration</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getConfigurationListWithAnswer(List<JGDIAnswer> answers) throws JGDIException {
      List< Configuration > ret = new LinkedList< Configuration >();
      fillConfigurationListWithAnswer(ret, answers);
      return ret;
   }

        
   /**
    *  Get a Configuration by its primary key
    *
    *  @return the Configuration
    *  @param CONF_name   the CONF_name of the <code>Configuration</code> object
    *  @return the found <code>Configuration</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public Configuration getConfiguration( String CONF_name ) throws JGDIException {
    
        List< Configuration > ret = new LinkedList< Configuration >();
        PrimaryKeyFilter filter = new PrimaryKeyFilter("CONF_Type");

        filter.include(CullConstants.CONF_name, CONF_name);

        fillConfigurationList(ret, filter);

        switch(ret.size()) {
           case 0:  return null;
           case 1:  return (Configuration)ret.get(0);
           default:
                throw new IllegalStateException("Duplicate primary key");
        }
   }
   
   /**
    *  Get a Configuration by its primary key
    *
    *  @return the Configuration
    *  @param CONF_name   the CONF_name of the <code>Configuration</code> object
   *  @param  answers the <code>answer list</code> object
    *  @return the found <code>Configuration</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public Configuration getConfigurationWithAnswer( String CONF_name , List<JGDIAnswer> answers) throws JGDIException {
    
        List< Configuration >  ret = new LinkedList< Configuration >();
        
        PrimaryKeyFilter filter = new PrimaryKeyFilter("CONF_Type");
        filter.include(CullConstants.CONF_name, CONF_name); 
        fillConfigurationListWithAnswer(ret, filter, answers);

        switch(ret.size()) {
           case 0:  return null;
           case 1:  return (Configuration)ret.get(0);
           default:
                throw new IllegalStateException("Duplicate primary key");
        }
   }
   
       
   /**
    *   Update a <code>Project</code> object.
    *   @param obj   the <code>Project</code> object with the new values
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void updateProject(Project obj) throws JGDIException;

   /**
    *   Update a <code>Project</code> object.
    *   @param obj      the <code>Project</code> object with the new values
    *   @param answers  the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void updateProjectWithAnswer(Project obj, List<JGDIAnswer> answers) throws JGDIException;
        
   /**
    *   Delete a <code>Project</code> object.
    *   @param obj  <code>Project</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteProject(Project obj) throws JGDIException;

   /**
    *   Delete a <code>Project</code> object.
    *   @param obj  <code>Project</code> object with the primary key information
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteProjectWithAnswer(Project obj, List<JGDIAnswer> answers) throws JGDIException;
   
   /**
    *   Delete several <code>Project</code> objects.
    *   @param objs  <code>Project</code> object array with the primary key information
    *   @param force  <code>force</code> delete flag
    *   @param userFilter  delete object for users contained in userFilter
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteProjectsWithAnswer(Object[] objs, boolean force, UserFilter userFilter, List<JGDIAnswer> answers) throws JGDIException;
   


   /**
    *   Delete a <code>Project</code> object by its primary key
    *   @param PR_name   the PR_name of the <code>Project</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteProject(String PR_name) throws JGDIException {
       Project obj = new ProjectImpl(PR_name);
       deleteProject(obj);
    }

   /**
    *   Delete a <code>Project</code> object by its primary key
    *   @param PR_name   the PR_name of the <code>Project</code> object

       *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteProjectWithAnswer(String PR_name, List<JGDIAnswer> answers) throws JGDIException {
       Project obj = new ProjectImpl(PR_name);
       deleteProjectWithAnswer(obj, answers);
    }

   /**
    *   Delete several <code>Project</code> objects by its primary key
    *   @param PR_names   the PR_name of the <code>Project</code> object
    *   @param answers  <code>answer list</code> object  
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteProjectsWithAnswer(String[] PR_names, List<JGDIAnswer> answers) throws JGDIException {

    
       // Other objects
       List< Project > list = new LinkedList< Project >();

       for (int i=0; PR_names != null && i < PR_names.length; i++) {
             Project obj = new ProjectImpl(
       
       PR_names[i]
  );
         list.add(obj);
       }
       deleteProjectsWithAnswer(list.toArray(), false, null, answers);      
    
  }

   /**
    *   Add a new <code>Project</code> object.
    *   @param  obj the new <code>Project</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void addProject(Project obj) throws JGDIException;

   /**
    *   Add a new <code>Project</code> object.
    *   @param  obj the new <code>Project</code> object
    *   @param  answers the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void addProjectWithAnswer(Project obj, List<JGDIAnswer> answers) throws JGDIException;

        
   private native void fillProjectListWithAnswer(List< Project > list, JGDIFilter filter, List<JGDIAnswer> answers) throws JGDIException;
   
   private void fillProjectList(List< Project > list, JGDIFilter filter) throws JGDIException {
      fillProjectListWithAnswer(list, filter, null);
   }
   
   private void fillProjectList(List< Project > list) throws JGDIException {
      fillProjectListWithAnswer(list, null, null);
   }
   
   private void fillProjectListWithAnswer(List< Project > list, List<JGDIAnswer> answers) throws JGDIException {
      fillProjectListWithAnswer(list, null, answers);
   }

   
        
   /**
    *   Get the list of all defined <code>Project</code> objects.
    *   @return list of <code>Project</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getProjectList() throws JGDIException {
      List< Project > ret = new LinkedList< Project >();
      fillProjectList(ret);
      return ret;
   }
   /**
    *   Get the list of all defined <code>Project</code> objects.
    *   @param  answers the <code>answer list</code> object
    *   @return list of <code>Project</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getProjectListWithAnswer(List<JGDIAnswer> answers) throws JGDIException {
      List< Project > ret = new LinkedList< Project >();
      fillProjectListWithAnswer(ret, answers);
      return ret;
   }

        
   /**
    *  Get a Project by its primary key
    *
    *  @return the Project
    *  @param PR_name   the PR_name of the <code>Project</code> object
    *  @return the found <code>Project</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public Project getProject( String PR_name ) throws JGDIException {
    
        List< Project > ret = new LinkedList< Project >();
        PrimaryKeyFilter filter = new PrimaryKeyFilter("PR_Type");

        filter.include(CullConstants.PR_name, PR_name);

        fillProjectList(ret, filter);

        switch(ret.size()) {
           case 0:  return null;
           case 1:  return (Project)ret.get(0);
           default:
                throw new IllegalStateException("Duplicate primary key");
        }
   }
   
   /**
    *  Get a Project by its primary key
    *
    *  @return the Project
    *  @param PR_name   the PR_name of the <code>Project</code> object
   *  @param  answers the <code>answer list</code> object
    *  @return the found <code>Project</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public Project getProjectWithAnswer( String PR_name , List<JGDIAnswer> answers) throws JGDIException {
    
        List< Project >  ret = new LinkedList< Project >();
        
        PrimaryKeyFilter filter = new PrimaryKeyFilter("PR_Type");
        filter.include(CullConstants.PR_name, PR_name); 
        fillProjectListWithAnswer(ret, filter, answers);

        switch(ret.size()) {
           case 0:  return null;
           case 1:  return (Project)ret.get(0);
           default:
                throw new IllegalStateException("Duplicate primary key");
        }
   }
   
       
   /**
    *   Update a <code>ShareTree</code> object.
    *   @param obj   the <code>ShareTree</code> object with the new values
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void updateShareTree(ShareTree obj) throws JGDIException;

   /**
    *   Update a <code>ShareTree</code> object.
    *   @param obj      the <code>ShareTree</code> object with the new values
    *   @param answers  the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void updateShareTreeWithAnswer(ShareTree obj, List<JGDIAnswer> answers) throws JGDIException;
        
   private native void fillShareTreeListWithAnswer(List< ShareTree > list, JGDIFilter filter, List<JGDIAnswer> answers) throws JGDIException;
   
   private void fillShareTreeList(List< ShareTree > list, JGDIFilter filter) throws JGDIException {
      fillShareTreeListWithAnswer(list, filter, null);
   }
   
   private void fillShareTreeList(List< ShareTree > list) throws JGDIException {
      fillShareTreeListWithAnswer(list, null, null);
   }
   
   private void fillShareTreeListWithAnswer(List< ShareTree > list, List<JGDIAnswer> answers) throws JGDIException {
      fillShareTreeListWithAnswer(list, null, answers);
   }

   
        
   /**
    *  Get a ShareTree by its primary key
    *
    *  @return the ShareTree
    *  @param STN_name   the STN_name of the <code>ShareTree</code> object
    *  @return the found <code>ShareTree</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public ShareTree getShareTree( String STN_name ) throws JGDIException {
    
        List< ShareTree > ret = new LinkedList< ShareTree >();
        PrimaryKeyFilter filter = new PrimaryKeyFilter("STN_Type");

        filter.include(CullConstants.STN_name, STN_name);

        fillShareTreeList(ret, filter);

        switch(ret.size()) {
           case 0:  return null;
           case 1:  return (ShareTree)ret.get(0);
           default:
                throw new IllegalStateException("Duplicate primary key");
        }
   }
   
   /**
    *  Get a ShareTree by its primary key
    *
    *  @return the ShareTree
    *  @param STN_name   the STN_name of the <code>ShareTree</code> object
   *  @param  answers the <code>answer list</code> object
    *  @return the found <code>ShareTree</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public ShareTree getShareTreeWithAnswer( String STN_name , List<JGDIAnswer> answers) throws JGDIException {
    
        List< ShareTree >  ret = new LinkedList< ShareTree >();
        
        PrimaryKeyFilter filter = new PrimaryKeyFilter("STN_Type");
        filter.include(CullConstants.STN_name, STN_name); 
        fillShareTreeListWithAnswer(ret, filter, answers);

        switch(ret.size()) {
           case 0:  return null;
           case 1:  return (ShareTree)ret.get(0);
           default:
                throw new IllegalStateException("Duplicate primary key");
        }
   }
   
        
   /**
    *   Delete a <code>AdminHost</code> object.
    *   @param obj  <code>AdminHost</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteAdminHost(AdminHost obj) throws JGDIException;

   /**
    *   Delete a <code>AdminHost</code> object.
    *   @param obj  <code>AdminHost</code> object with the primary key information
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteAdminHostWithAnswer(AdminHost obj, List<JGDIAnswer> answers) throws JGDIException;
   
   /**
    *   Delete several <code>AdminHost</code> objects.
    *   @param objs  <code>AdminHost</code> object array with the primary key information
    *   @param force  <code>force</code> delete flag
    *   @param userFilter  delete object for users contained in userFilter
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteAdminHostsWithAnswer(Object[] objs, boolean force, UserFilter userFilter, List<JGDIAnswer> answers) throws JGDIException;
   


   /**
    *   Delete a <code>AdminHost</code> object by its primary key
    *   @param AH_name   the AH_name of the <code>AdminHost</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteAdminHost(String AH_name) throws JGDIException {
       AdminHost obj = new AdminHostImpl(AH_name);
       deleteAdminHost(obj);
    }

   /**
    *   Delete a <code>AdminHost</code> object by its primary key
    *   @param AH_name   the AH_name of the <code>AdminHost</code> object

       *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteAdminHostWithAnswer(String AH_name, List<JGDIAnswer> answers) throws JGDIException {
       AdminHost obj = new AdminHostImpl(AH_name);
       deleteAdminHostWithAnswer(obj, answers);
    }

   /**
    *   Delete several <code>AdminHost</code> objects by its primary key
    *   @param AH_names   the AH_name of the <code>AdminHost</code> object
    *   @param answers  <code>answer list</code> object  
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteAdminHostsWithAnswer(String[] AH_names, List<JGDIAnswer> answers) throws JGDIException {

    
       // Other objects
       List< AdminHost > list = new LinkedList< AdminHost >();

       for (int i=0; AH_names != null && i < AH_names.length; i++) {
             AdminHost obj = new AdminHostImpl(
       
       AH_names[i]
  );
         list.add(obj);
       }
       deleteAdminHostsWithAnswer(list.toArray(), false, null, answers);      
    
  }

   /**
    *   Add a new <code>AdminHost</code> object.
    *   @param  obj the new <code>AdminHost</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void addAdminHost(AdminHost obj) throws JGDIException;

   /**
    *   Add a new <code>AdminHost</code> object.
    *   @param  obj the new <code>AdminHost</code> object
    *   @param  answers the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void addAdminHostWithAnswer(AdminHost obj, List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Add a new <code>AdminHost</code> object.
    *   @param  name the new <code>String</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addAdminHost(String name) throws JGDIException {
      AdminHost obj = new AdminHostImpl(name);
      addAdminHost(obj);
   }

   /**
    *   Add a new <code>AdminHost</code> object.
    *   @param  name the new <code>String</code> object
    *   @param  answers the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addAdminHostWithAnswer(String name, List<JGDIAnswer> answers) throws JGDIException {
      AdminHost obj = new AdminHostImpl(name);
       addAdminHostWithAnswer(obj, answers);
   }
   
        
   private native void fillAdminHostListWithAnswer(List< AdminHost > list, JGDIFilter filter, List<JGDIAnswer> answers) throws JGDIException;
   
   private void fillAdminHostList(List< AdminHost > list, JGDIFilter filter) throws JGDIException {
      fillAdminHostListWithAnswer(list, filter, null);
   }
   
   private void fillAdminHostList(List< AdminHost > list) throws JGDIException {
      fillAdminHostListWithAnswer(list, null, null);
   }
   
   private void fillAdminHostListWithAnswer(List< AdminHost > list, List<JGDIAnswer> answers) throws JGDIException {
      fillAdminHostListWithAnswer(list, null, answers);
   }

   
        
   /**
    *   Get the list of all defined <code>AdminHost</code> objects.
    *   @return list of <code>AdminHost</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getAdminHostList() throws JGDIException {
      List< AdminHost > ret = new LinkedList< AdminHost >();
      fillAdminHostList(ret);
      return ret;
   }
   /**
    *   Get the list of all defined <code>AdminHost</code> objects.
    *   @param  answers the <code>answer list</code> object
    *   @return list of <code>AdminHost</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getAdminHostListWithAnswer(List<JGDIAnswer> answers) throws JGDIException {
      List< AdminHost > ret = new LinkedList< AdminHost >();
      fillAdminHostListWithAnswer(ret, answers);
      return ret;
   }

       
   /**
    *   Update a <code>Checkpoint</code> object.
    *   @param obj   the <code>Checkpoint</code> object with the new values
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void updateCheckpoint(Checkpoint obj) throws JGDIException;

   /**
    *   Update a <code>Checkpoint</code> object.
    *   @param obj      the <code>Checkpoint</code> object with the new values
    *   @param answers  the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void updateCheckpointWithAnswer(Checkpoint obj, List<JGDIAnswer> answers) throws JGDIException;
        
   /**
    *   Delete a <code>Checkpoint</code> object.
    *   @param obj  <code>Checkpoint</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteCheckpoint(Checkpoint obj) throws JGDIException;

   /**
    *   Delete a <code>Checkpoint</code> object.
    *   @param obj  <code>Checkpoint</code> object with the primary key information
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteCheckpointWithAnswer(Checkpoint obj, List<JGDIAnswer> answers) throws JGDIException;
   
   /**
    *   Delete several <code>Checkpoint</code> objects.
    *   @param objs  <code>Checkpoint</code> object array with the primary key information
    *   @param force  <code>force</code> delete flag
    *   @param userFilter  delete object for users contained in userFilter
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteCheckpointsWithAnswer(Object[] objs, boolean force, UserFilter userFilter, List<JGDIAnswer> answers) throws JGDIException;
   


   /**
    *   Delete a <code>Checkpoint</code> object by its primary key
    *   @param CK_name   the CK_name of the <code>Checkpoint</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteCheckpoint(String CK_name) throws JGDIException {
       Checkpoint obj = new CheckpointImpl(CK_name);
       deleteCheckpoint(obj);
    }

   /**
    *   Delete a <code>Checkpoint</code> object by its primary key
    *   @param CK_name   the CK_name of the <code>Checkpoint</code> object

       *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteCheckpointWithAnswer(String CK_name, List<JGDIAnswer> answers) throws JGDIException {
       Checkpoint obj = new CheckpointImpl(CK_name);
       deleteCheckpointWithAnswer(obj, answers);
    }

   /**
    *   Delete several <code>Checkpoint</code> objects by its primary key
    *   @param CK_names   the CK_name of the <code>Checkpoint</code> object
    *   @param answers  <code>answer list</code> object  
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteCheckpointsWithAnswer(String[] CK_names, List<JGDIAnswer> answers) throws JGDIException {

    
       // Other objects
       List< Checkpoint > list = new LinkedList< Checkpoint >();

       for (int i=0; CK_names != null && i < CK_names.length; i++) {
             Checkpoint obj = new CheckpointImpl(
       
       CK_names[i]
  );
         list.add(obj);
       }
       deleteCheckpointsWithAnswer(list.toArray(), false, null, answers);      
    
  }

   /**
    *   Add a new <code>Checkpoint</code> object.
    *   @param  obj the new <code>Checkpoint</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void addCheckpoint(Checkpoint obj) throws JGDIException;

   /**
    *   Add a new <code>Checkpoint</code> object.
    *   @param  obj the new <code>Checkpoint</code> object
    *   @param  answers the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void addCheckpointWithAnswer(Checkpoint obj, List<JGDIAnswer> answers) throws JGDIException;

        
   private native void fillCheckpointListWithAnswer(List< Checkpoint > list, JGDIFilter filter, List<JGDIAnswer> answers) throws JGDIException;
   
   private void fillCheckpointList(List< Checkpoint > list, JGDIFilter filter) throws JGDIException {
      fillCheckpointListWithAnswer(list, filter, null);
   }
   
   private void fillCheckpointList(List< Checkpoint > list) throws JGDIException {
      fillCheckpointListWithAnswer(list, null, null);
   }
   
   private void fillCheckpointListWithAnswer(List< Checkpoint > list, List<JGDIAnswer> answers) throws JGDIException {
      fillCheckpointListWithAnswer(list, null, answers);
   }

   
        
   /**
    *   Get the list of all defined <code>Checkpoint</code> objects.
    *   @return list of <code>Checkpoint</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getCheckpointList() throws JGDIException {
      List< Checkpoint > ret = new LinkedList< Checkpoint >();
      fillCheckpointList(ret);
      return ret;
   }
   /**
    *   Get the list of all defined <code>Checkpoint</code> objects.
    *   @param  answers the <code>answer list</code> object
    *   @return list of <code>Checkpoint</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getCheckpointListWithAnswer(List<JGDIAnswer> answers) throws JGDIException {
      List< Checkpoint > ret = new LinkedList< Checkpoint >();
      fillCheckpointListWithAnswer(ret, answers);
      return ret;
   }

        
   /**
    *  Get a Checkpoint by its primary key
    *
    *  @return the Checkpoint
    *  @param CK_name   the CK_name of the <code>Checkpoint</code> object
    *  @return the found <code>Checkpoint</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public Checkpoint getCheckpoint( String CK_name ) throws JGDIException {
    
        List< Checkpoint > ret = new LinkedList< Checkpoint >();
        PrimaryKeyFilter filter = new PrimaryKeyFilter("CK_Type");

        filter.include(CullConstants.CK_name, CK_name);

        fillCheckpointList(ret, filter);

        switch(ret.size()) {
           case 0:  return null;
           case 1:  return (Checkpoint)ret.get(0);
           default:
                throw new IllegalStateException("Duplicate primary key");
        }
   }
   
   /**
    *  Get a Checkpoint by its primary key
    *
    *  @return the Checkpoint
    *  @param CK_name   the CK_name of the <code>Checkpoint</code> object
   *  @param  answers the <code>answer list</code> object
    *  @return the found <code>Checkpoint</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public Checkpoint getCheckpointWithAnswer( String CK_name , List<JGDIAnswer> answers) throws JGDIException {
    
        List< Checkpoint >  ret = new LinkedList< Checkpoint >();
        
        PrimaryKeyFilter filter = new PrimaryKeyFilter("CK_Type");
        filter.include(CullConstants.CK_name, CK_name); 
        fillCheckpointListWithAnswer(ret, filter, answers);

        switch(ret.size()) {
           case 0:  return null;
           case 1:  return (Checkpoint)ret.get(0);
           default:
                throw new IllegalStateException("Duplicate primary key");
        }
   }
   
       
   /**
    *   Update a <code>ParallelEnvironment</code> object.
    *   @param obj   the <code>ParallelEnvironment</code> object with the new values
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void updateParallelEnvironment(ParallelEnvironment obj) throws JGDIException;

   /**
    *   Update a <code>ParallelEnvironment</code> object.
    *   @param obj      the <code>ParallelEnvironment</code> object with the new values
    *   @param answers  the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void updateParallelEnvironmentWithAnswer(ParallelEnvironment obj, List<JGDIAnswer> answers) throws JGDIException;
        
   /**
    *   Delete a <code>ParallelEnvironment</code> object.
    *   @param obj  <code>ParallelEnvironment</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteParallelEnvironment(ParallelEnvironment obj) throws JGDIException;

   /**
    *   Delete a <code>ParallelEnvironment</code> object.
    *   @param obj  <code>ParallelEnvironment</code> object with the primary key information
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteParallelEnvironmentWithAnswer(ParallelEnvironment obj, List<JGDIAnswer> answers) throws JGDIException;
   
   /**
    *   Delete several <code>ParallelEnvironment</code> objects.
    *   @param objs  <code>ParallelEnvironment</code> object array with the primary key information
    *   @param force  <code>force</code> delete flag
    *   @param userFilter  delete object for users contained in userFilter
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteParallelEnvironmentsWithAnswer(Object[] objs, boolean force, UserFilter userFilter, List<JGDIAnswer> answers) throws JGDIException;
   


   /**
    *   Delete a <code>ParallelEnvironment</code> object by its primary key
    *   @param PE_name   the PE_name of the <code>ParallelEnvironment</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteParallelEnvironment(String PE_name) throws JGDIException {
       ParallelEnvironment obj = new ParallelEnvironmentImpl(PE_name);
       deleteParallelEnvironment(obj);
    }

   /**
    *   Delete a <code>ParallelEnvironment</code> object by its primary key
    *   @param PE_name   the PE_name of the <code>ParallelEnvironment</code> object

       *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteParallelEnvironmentWithAnswer(String PE_name, List<JGDIAnswer> answers) throws JGDIException {
       ParallelEnvironment obj = new ParallelEnvironmentImpl(PE_name);
       deleteParallelEnvironmentWithAnswer(obj, answers);
    }

   /**
    *   Delete several <code>ParallelEnvironment</code> objects by its primary key
    *   @param PE_names   the PE_name of the <code>ParallelEnvironment</code> object
    *   @param answers  <code>answer list</code> object  
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteParallelEnvironmentsWithAnswer(String[] PE_names, List<JGDIAnswer> answers) throws JGDIException {

    
       // Other objects
       List< ParallelEnvironment > list = new LinkedList< ParallelEnvironment >();

       for (int i=0; PE_names != null && i < PE_names.length; i++) {
             ParallelEnvironment obj = new ParallelEnvironmentImpl(
       
       PE_names[i]
  );
         list.add(obj);
       }
       deleteParallelEnvironmentsWithAnswer(list.toArray(), false, null, answers);      
    
  }

   /**
    *   Add a new <code>ParallelEnvironment</code> object.
    *   @param  obj the new <code>ParallelEnvironment</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void addParallelEnvironment(ParallelEnvironment obj) throws JGDIException;

   /**
    *   Add a new <code>ParallelEnvironment</code> object.
    *   @param  obj the new <code>ParallelEnvironment</code> object
    *   @param  answers the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void addParallelEnvironmentWithAnswer(ParallelEnvironment obj, List<JGDIAnswer> answers) throws JGDIException;

        
   private native void fillParallelEnvironmentListWithAnswer(List< ParallelEnvironment > list, JGDIFilter filter, List<JGDIAnswer> answers) throws JGDIException;
   
   private void fillParallelEnvironmentList(List< ParallelEnvironment > list, JGDIFilter filter) throws JGDIException {
      fillParallelEnvironmentListWithAnswer(list, filter, null);
   }
   
   private void fillParallelEnvironmentList(List< ParallelEnvironment > list) throws JGDIException {
      fillParallelEnvironmentListWithAnswer(list, null, null);
   }
   
   private void fillParallelEnvironmentListWithAnswer(List< ParallelEnvironment > list, List<JGDIAnswer> answers) throws JGDIException {
      fillParallelEnvironmentListWithAnswer(list, null, answers);
   }

   
        
   /**
    *   Get the list of all defined <code>ParallelEnvironment</code> objects.
    *   @return list of <code>ParallelEnvironment</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getParallelEnvironmentList() throws JGDIException {
      List< ParallelEnvironment > ret = new LinkedList< ParallelEnvironment >();
      fillParallelEnvironmentList(ret);
      return ret;
   }
   /**
    *   Get the list of all defined <code>ParallelEnvironment</code> objects.
    *   @param  answers the <code>answer list</code> object
    *   @return list of <code>ParallelEnvironment</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getParallelEnvironmentListWithAnswer(List<JGDIAnswer> answers) throws JGDIException {
      List< ParallelEnvironment > ret = new LinkedList< ParallelEnvironment >();
      fillParallelEnvironmentListWithAnswer(ret, answers);
      return ret;
   }

        
   /**
    *  Get a ParallelEnvironment by its primary key
    *
    *  @return the ParallelEnvironment
    *  @param PE_name   the PE_name of the <code>ParallelEnvironment</code> object
    *  @return the found <code>ParallelEnvironment</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public ParallelEnvironment getParallelEnvironment( String PE_name ) throws JGDIException {
    
        List< ParallelEnvironment > ret = new LinkedList< ParallelEnvironment >();
        PrimaryKeyFilter filter = new PrimaryKeyFilter("PE_Type");

        filter.include(CullConstants.PE_name, PE_name);

        fillParallelEnvironmentList(ret, filter);

        switch(ret.size()) {
           case 0:  return null;
           case 1:  return (ParallelEnvironment)ret.get(0);
           default:
                throw new IllegalStateException("Duplicate primary key");
        }
   }
   
   /**
    *  Get a ParallelEnvironment by its primary key
    *
    *  @return the ParallelEnvironment
    *  @param PE_name   the PE_name of the <code>ParallelEnvironment</code> object
   *  @param  answers the <code>answer list</code> object
    *  @return the found <code>ParallelEnvironment</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public ParallelEnvironment getParallelEnvironmentWithAnswer( String PE_name , List<JGDIAnswer> answers) throws JGDIException {
    
        List< ParallelEnvironment >  ret = new LinkedList< ParallelEnvironment >();
        
        PrimaryKeyFilter filter = new PrimaryKeyFilter("PE_Type");
        filter.include(CullConstants.PE_name, PE_name); 
        fillParallelEnvironmentListWithAnswer(ret, filter, answers);

        switch(ret.size()) {
           case 0:  return null;
           case 1:  return (ParallelEnvironment)ret.get(0);
           default:
                throw new IllegalStateException("Duplicate primary key");
        }
   }
   
       
   /**
    *   Update a <code>ComplexEntry</code> object.
    *   @param obj   the <code>ComplexEntry</code> object with the new values
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void updateComplexEntry(ComplexEntry obj) throws JGDIException;

   /**
    *   Update a <code>ComplexEntry</code> object.
    *   @param obj      the <code>ComplexEntry</code> object with the new values
    *   @param answers  the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void updateComplexEntryWithAnswer(ComplexEntry obj, List<JGDIAnswer> answers) throws JGDIException;
        
   /**
    *   Delete a <code>ComplexEntry</code> object.
    *   @param obj  <code>ComplexEntry</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteComplexEntry(ComplexEntry obj) throws JGDIException;

   /**
    *   Delete a <code>ComplexEntry</code> object.
    *   @param obj  <code>ComplexEntry</code> object with the primary key information
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteComplexEntryWithAnswer(ComplexEntry obj, List<JGDIAnswer> answers) throws JGDIException;
   
   /**
    *   Delete several <code>ComplexEntry</code> objects.
    *   @param objs  <code>ComplexEntry</code> object array with the primary key information
    *   @param force  <code>force</code> delete flag
    *   @param userFilter  delete object for users contained in userFilter
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteComplexEntrysWithAnswer(Object[] objs, boolean force, UserFilter userFilter, List<JGDIAnswer> answers) throws JGDIException;
   


   /**
    *   Delete a <code>ComplexEntry</code> object by its primary key
    *   @param CE_name   the CE_name of the <code>ComplexEntry</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteComplexEntry(String CE_name) throws JGDIException {
       ComplexEntry obj = new ComplexEntryImpl(CE_name);
       deleteComplexEntry(obj);
    }

   /**
    *   Delete a <code>ComplexEntry</code> object by its primary key
    *   @param CE_name   the CE_name of the <code>ComplexEntry</code> object

       *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteComplexEntryWithAnswer(String CE_name, List<JGDIAnswer> answers) throws JGDIException {
       ComplexEntry obj = new ComplexEntryImpl(CE_name);
       deleteComplexEntryWithAnswer(obj, answers);
    }

   /**
    *   Delete several <code>ComplexEntry</code> objects by its primary key
    *   @param CE_names   the CE_name of the <code>ComplexEntry</code> object
    *   @param answers  <code>answer list</code> object  
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteComplexEntrysWithAnswer(String[] CE_names, List<JGDIAnswer> answers) throws JGDIException {

    
       // Other objects
       List< ComplexEntry > list = new LinkedList< ComplexEntry >();

       for (int i=0; CE_names != null && i < CE_names.length; i++) {
             ComplexEntry obj = new ComplexEntryImpl(
       
       CE_names[i]
  );
         list.add(obj);
       }
       deleteComplexEntrysWithAnswer(list.toArray(), false, null, answers);      
    
  }

   /**
    *   Add a new <code>ComplexEntry</code> object.
    *   @param  obj the new <code>ComplexEntry</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void addComplexEntry(ComplexEntry obj) throws JGDIException;

   /**
    *   Add a new <code>ComplexEntry</code> object.
    *   @param  obj the new <code>ComplexEntry</code> object
    *   @param  answers the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void addComplexEntryWithAnswer(ComplexEntry obj, List<JGDIAnswer> answers) throws JGDIException;

        
   private native void fillComplexEntryListWithAnswer(List< ComplexEntry > list, JGDIFilter filter, List<JGDIAnswer> answers) throws JGDIException;
   
   private void fillComplexEntryList(List< ComplexEntry > list, JGDIFilter filter) throws JGDIException {
      fillComplexEntryListWithAnswer(list, filter, null);
   }
   
   private void fillComplexEntryList(List< ComplexEntry > list) throws JGDIException {
      fillComplexEntryListWithAnswer(list, null, null);
   }
   
   private void fillComplexEntryListWithAnswer(List< ComplexEntry > list, List<JGDIAnswer> answers) throws JGDIException {
      fillComplexEntryListWithAnswer(list, null, answers);
   }

   
        
   /**
    *   Get the list of all defined <code>ComplexEntry</code> objects.
    *   @return list of <code>ComplexEntry</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getComplexEntryList() throws JGDIException {
      List< ComplexEntry > ret = new LinkedList< ComplexEntry >();
      fillComplexEntryList(ret);
      return ret;
   }
   /**
    *   Get the list of all defined <code>ComplexEntry</code> objects.
    *   @param  answers the <code>answer list</code> object
    *   @return list of <code>ComplexEntry</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getComplexEntryListWithAnswer(List<JGDIAnswer> answers) throws JGDIException {
      List< ComplexEntry > ret = new LinkedList< ComplexEntry >();
      fillComplexEntryListWithAnswer(ret, answers);
      return ret;
   }

        
   /**
    *  Get a ComplexEntry by its primary key
    *
    *  @return the ComplexEntry
    *  @param CE_name   the CE_name of the <code>ComplexEntry</code> object
    *  @return the found <code>ComplexEntry</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public ComplexEntry getComplexEntry( String CE_name ) throws JGDIException {
    
        List< ComplexEntry > ret = new LinkedList< ComplexEntry >();
        PrimaryKeyFilter filter = new PrimaryKeyFilter("CE_Type");

        filter.include(CullConstants.CE_name, CE_name);

        fillComplexEntryList(ret, filter);

        switch(ret.size()) {
           case 0:  return null;
           case 1:  return (ComplexEntry)ret.get(0);
           default:
                throw new IllegalStateException("Duplicate primary key");
        }
   }
   
   /**
    *  Get a ComplexEntry by its primary key
    *
    *  @return the ComplexEntry
    *  @param CE_name   the CE_name of the <code>ComplexEntry</code> object
   *  @param  answers the <code>answer list</code> object
    *  @return the found <code>ComplexEntry</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public ComplexEntry getComplexEntryWithAnswer( String CE_name , List<JGDIAnswer> answers) throws JGDIException {
    
        List< ComplexEntry >  ret = new LinkedList< ComplexEntry >();
        
        PrimaryKeyFilter filter = new PrimaryKeyFilter("CE_Type");
        filter.include(CullConstants.CE_name, CE_name); 
        fillComplexEntryListWithAnswer(ret, filter, answers);

        switch(ret.size()) {
           case 0:  return null;
           case 1:  return (ComplexEntry)ret.get(0);
           default:
                throw new IllegalStateException("Duplicate primary key");
        }
   }
   
       
   /**
    *   Update a <code>ClusterQueue</code> object.
    *   @param obj   the <code>ClusterQueue</code> object with the new values
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void updateClusterQueue(ClusterQueue obj) throws JGDIException;

   /**
    *   Update a <code>ClusterQueue</code> object.
    *   @param obj      the <code>ClusterQueue</code> object with the new values
    *   @param answers  the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void updateClusterQueueWithAnswer(ClusterQueue obj, List<JGDIAnswer> answers) throws JGDIException;
        
   /**
    *   Delete a <code>ClusterQueue</code> object.
    *   @param obj  <code>ClusterQueue</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteClusterQueue(ClusterQueue obj) throws JGDIException;

   /**
    *   Delete a <code>ClusterQueue</code> object.
    *   @param obj  <code>ClusterQueue</code> object with the primary key information
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteClusterQueueWithAnswer(ClusterQueue obj, List<JGDIAnswer> answers) throws JGDIException;
   
   /**
    *   Delete several <code>ClusterQueue</code> objects.
    *   @param objs  <code>ClusterQueue</code> object array with the primary key information
    *   @param force  <code>force</code> delete flag
    *   @param userFilter  delete object for users contained in userFilter
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteClusterQueuesWithAnswer(Object[] objs, boolean force, UserFilter userFilter, List<JGDIAnswer> answers) throws JGDIException;
   


   /**
    *   Delete a <code>ClusterQueue</code> object by its primary key
    *   @param CQ_name   the CQ_name of the <code>ClusterQueue</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteClusterQueue(String CQ_name) throws JGDIException {
       ClusterQueue obj = new ClusterQueueImpl(CQ_name);
       deleteClusterQueue(obj);
    }

   /**
    *   Delete a <code>ClusterQueue</code> object by its primary key
    *   @param CQ_name   the CQ_name of the <code>ClusterQueue</code> object

       *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteClusterQueueWithAnswer(String CQ_name, List<JGDIAnswer> answers) throws JGDIException {
       ClusterQueue obj = new ClusterQueueImpl(CQ_name);
       deleteClusterQueueWithAnswer(obj, answers);
    }

   /**
    *   Delete several <code>ClusterQueue</code> objects by its primary key
    *   @param CQ_names   the CQ_name of the <code>ClusterQueue</code> object
    *   @param answers  <code>answer list</code> object  
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteClusterQueuesWithAnswer(String[] CQ_names, List<JGDIAnswer> answers) throws JGDIException {

    
       // Other objects
       List< ClusterQueue > list = new LinkedList< ClusterQueue >();

       for (int i=0; CQ_names != null && i < CQ_names.length; i++) {
             ClusterQueue obj = new ClusterQueueImpl(
       
       CQ_names[i]
  );
         list.add(obj);
       }
       deleteClusterQueuesWithAnswer(list.toArray(), false, null, answers);      
    
  }

   /**
    *   Add a new <code>ClusterQueue</code> object.
    *   @param  obj the new <code>ClusterQueue</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void addClusterQueue(ClusterQueue obj) throws JGDIException;

   /**
    *   Add a new <code>ClusterQueue</code> object.
    *   @param  obj the new <code>ClusterQueue</code> object
    *   @param  answers the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void addClusterQueueWithAnswer(ClusterQueue obj, List<JGDIAnswer> answers) throws JGDIException;

        
   private native void fillClusterQueueListWithAnswer(List< ClusterQueue > list, JGDIFilter filter, List<JGDIAnswer> answers) throws JGDIException;
   
   private void fillClusterQueueList(List< ClusterQueue > list, JGDIFilter filter) throws JGDIException {
      fillClusterQueueListWithAnswer(list, filter, null);
   }
   
   private void fillClusterQueueList(List< ClusterQueue > list) throws JGDIException {
      fillClusterQueueListWithAnswer(list, null, null);
   }
   
   private void fillClusterQueueListWithAnswer(List< ClusterQueue > list, List<JGDIAnswer> answers) throws JGDIException {
      fillClusterQueueListWithAnswer(list, null, answers);
   }

   
        
   /**
    *   Get the list of all defined <code>ClusterQueue</code> objects.
    *   @return list of <code>ClusterQueue</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getClusterQueueList() throws JGDIException {
      List< ClusterQueue > ret = new LinkedList< ClusterQueue >();
      fillClusterQueueList(ret);
      return ret;
   }
   /**
    *   Get the list of all defined <code>ClusterQueue</code> objects.
    *   @param  answers the <code>answer list</code> object
    *   @return list of <code>ClusterQueue</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getClusterQueueListWithAnswer(List<JGDIAnswer> answers) throws JGDIException {
      List< ClusterQueue > ret = new LinkedList< ClusterQueue >();
      fillClusterQueueListWithAnswer(ret, answers);
      return ret;
   }

        
   /**
    *  Get a ClusterQueue by its primary key
    *
    *  @return the ClusterQueue
    *  @param CQ_name   the CQ_name of the <code>ClusterQueue</code> object
    *  @return the found <code>ClusterQueue</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public ClusterQueue getClusterQueue( String CQ_name ) throws JGDIException {
    
        List< ClusterQueue > ret = new LinkedList< ClusterQueue >();
        PrimaryKeyFilter filter = new PrimaryKeyFilter("CQ_Type");

        filter.include(CullConstants.CQ_name, CQ_name);

        fillClusterQueueList(ret, filter);

        switch(ret.size()) {
           case 0:  return null;
           case 1:  return (ClusterQueue)ret.get(0);
           default:
                throw new IllegalStateException("Duplicate primary key");
        }
   }
   
   /**
    *  Get a ClusterQueue by its primary key
    *
    *  @return the ClusterQueue
    *  @param CQ_name   the CQ_name of the <code>ClusterQueue</code> object
   *  @param  answers the <code>answer list</code> object
    *  @return the found <code>ClusterQueue</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public ClusterQueue getClusterQueueWithAnswer( String CQ_name , List<JGDIAnswer> answers) throws JGDIException {
    
        List< ClusterQueue >  ret = new LinkedList< ClusterQueue >();
        
        PrimaryKeyFilter filter = new PrimaryKeyFilter("CQ_Type");
        filter.include(CullConstants.CQ_name, CQ_name); 
        fillClusterQueueListWithAnswer(ret, filter, answers);

        switch(ret.size()) {
           case 0:  return null;
           case 1:  return (ClusterQueue)ret.get(0);
           default:
                throw new IllegalStateException("Duplicate primary key");
        }
   }
   
        
   private native void fillJobSchedulingInfoListWithAnswer(List< JobSchedulingInfo > list, JGDIFilter filter, List<JGDIAnswer> answers) throws JGDIException;
   
   private void fillJobSchedulingInfoList(List< JobSchedulingInfo > list, JGDIFilter filter) throws JGDIException {
      fillJobSchedulingInfoListWithAnswer(list, filter, null);
   }
   
   private void fillJobSchedulingInfoList(List< JobSchedulingInfo > list) throws JGDIException {
      fillJobSchedulingInfoListWithAnswer(list, null, null);
   }
   
   private void fillJobSchedulingInfoListWithAnswer(List< JobSchedulingInfo > list, List<JGDIAnswer> answers) throws JGDIException {
      fillJobSchedulingInfoListWithAnswer(list, null, answers);
   }

   

   /**
    *   Get the <code>JobSchedulingInfo</code> object
    *   @return the <code>JobSchedulingInfo</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public JobSchedulingInfo getJobSchedulingInfo() throws JGDIException {
      List< JobSchedulingInfo > ret = new LinkedList< JobSchedulingInfo >();
      fillJobSchedulingInfoList(ret);
      switch(ret.size()) {
         case 0: throw new IllegalStateException("static  JobSchedulingInfo object not found");
         case 1: return (JobSchedulingInfo)ret.get(0);
         default:
           throw new IllegalStateException("Got more than 1 static JobSchedulingInfo objects");
      }
   }

   /**
    *   Get the <code>JobSchedulingInfo</code> object.
    *   @param  answers the <code>answer list</code> object
    *   @return the <code>JobSchedulingInfo</code> object.
    *   @throws JGDIException on any error on the GDI layer
    */
   public JobSchedulingInfo getJobSchedulingInfoWithAnswer(List<JGDIAnswer> answers) throws JGDIException {
      List< JobSchedulingInfo > ret = new LinkedList< JobSchedulingInfo >();
      fillJobSchedulingInfoListWithAnswer(ret, answers);
      switch(ret.size()) {
         case 0: throw new IllegalStateException("static  JobSchedulingInfo object not found");
         case 1: return (JobSchedulingInfo)ret.get(0);
         default:
           throw new IllegalStateException("Got more than 1 static JobSchedulingInfo objects");
      }
   }
       
   /**
    *   Update a <code>UserSet</code> object.
    *   @param obj   the <code>UserSet</code> object with the new values
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void updateUserSet(UserSet obj) throws JGDIException;

   /**
    *   Update a <code>UserSet</code> object.
    *   @param obj      the <code>UserSet</code> object with the new values
    *   @param answers  the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void updateUserSetWithAnswer(UserSet obj, List<JGDIAnswer> answers) throws JGDIException;
        
   /**
    *   Delete a <code>UserSet</code> object.
    *   @param obj  <code>UserSet</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteUserSet(UserSet obj) throws JGDIException;

   /**
    *   Delete a <code>UserSet</code> object.
    *   @param obj  <code>UserSet</code> object with the primary key information
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteUserSetWithAnswer(UserSet obj, List<JGDIAnswer> answers) throws JGDIException;
   
   /**
    *   Delete several <code>UserSet</code> objects.
    *   @param objs  <code>UserSet</code> object array with the primary key information
    *   @param force  <code>force</code> delete flag
    *   @param userFilter  delete object for users contained in userFilter
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteUserSetsWithAnswer(Object[] objs, boolean force, UserFilter userFilter, List<JGDIAnswer> answers) throws JGDIException;
   


   /**
    *   Delete a <code>UserSet</code> object by its primary key
    *   @param US_name   the US_name of the <code>UserSet</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteUserSet(String US_name) throws JGDIException {
       UserSet obj = new UserSetImpl(US_name);
       deleteUserSet(obj);
    }

   /**
    *   Delete a <code>UserSet</code> object by its primary key
    *   @param US_name   the US_name of the <code>UserSet</code> object

       *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteUserSetWithAnswer(String US_name, List<JGDIAnswer> answers) throws JGDIException {
       UserSet obj = new UserSetImpl(US_name);
       deleteUserSetWithAnswer(obj, answers);
    }

   /**
    *   Delete several <code>UserSet</code> objects by its primary key
    *   @param US_names   the US_name of the <code>UserSet</code> object
    *   @param answers  <code>answer list</code> object  
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteUserSetsWithAnswer(String[] US_names, List<JGDIAnswer> answers) throws JGDIException {

    
       // Other objects
       List< UserSet > list = new LinkedList< UserSet >();

       for (int i=0; US_names != null && i < US_names.length; i++) {
             UserSet obj = new UserSetImpl(
       
       US_names[i]
  );
         list.add(obj);
       }
       deleteUserSetsWithAnswer(list.toArray(), false, null, answers);      
    
  }

   /**
    *   Add a new <code>UserSet</code> object.
    *   @param  obj the new <code>UserSet</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void addUserSet(UserSet obj) throws JGDIException;

   /**
    *   Add a new <code>UserSet</code> object.
    *   @param  obj the new <code>UserSet</code> object
    *   @param  answers the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void addUserSetWithAnswer(UserSet obj, List<JGDIAnswer> answers) throws JGDIException;

        
   private native void fillUserSetListWithAnswer(List< UserSet > list, JGDIFilter filter, List<JGDIAnswer> answers) throws JGDIException;
   
   private void fillUserSetList(List< UserSet > list, JGDIFilter filter) throws JGDIException {
      fillUserSetListWithAnswer(list, filter, null);
   }
   
   private void fillUserSetList(List< UserSet > list) throws JGDIException {
      fillUserSetListWithAnswer(list, null, null);
   }
   
   private void fillUserSetListWithAnswer(List< UserSet > list, List<JGDIAnswer> answers) throws JGDIException {
      fillUserSetListWithAnswer(list, null, answers);
   }

   
        
   /**
    *   Get the list of all defined <code>UserSet</code> objects.
    *   @return list of <code>UserSet</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getUserSetList() throws JGDIException {
      List< UserSet > ret = new LinkedList< UserSet >();
      fillUserSetList(ret);
      return ret;
   }
   /**
    *   Get the list of all defined <code>UserSet</code> objects.
    *   @param  answers the <code>answer list</code> object
    *   @return list of <code>UserSet</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getUserSetListWithAnswer(List<JGDIAnswer> answers) throws JGDIException {
      List< UserSet > ret = new LinkedList< UserSet >();
      fillUserSetListWithAnswer(ret, answers);
      return ret;
   }

        
   /**
    *  Get a UserSet by its primary key
    *
    *  @return the UserSet
    *  @param US_name   the US_name of the <code>UserSet</code> object
    *  @return the found <code>UserSet</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public UserSet getUserSet( String US_name ) throws JGDIException {
    
        List< UserSet > ret = new LinkedList< UserSet >();
        PrimaryKeyFilter filter = new PrimaryKeyFilter("US_Type");

        filter.include(CullConstants.US_name, US_name);

        fillUserSetList(ret, filter);

        switch(ret.size()) {
           case 0:  return null;
           case 1:  return (UserSet)ret.get(0);
           default:
                throw new IllegalStateException("Duplicate primary key");
        }
   }
   
   /**
    *  Get a UserSet by its primary key
    *
    *  @return the UserSet
    *  @param US_name   the US_name of the <code>UserSet</code> object
   *  @param  answers the <code>answer list</code> object
    *  @return the found <code>UserSet</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public UserSet getUserSetWithAnswer( String US_name , List<JGDIAnswer> answers) throws JGDIException {
    
        List< UserSet >  ret = new LinkedList< UserSet >();
        
        PrimaryKeyFilter filter = new PrimaryKeyFilter("US_Type");
        filter.include(CullConstants.US_name, US_name); 
        fillUserSetListWithAnswer(ret, filter, answers);

        switch(ret.size()) {
           case 0:  return null;
           case 1:  return (UserSet)ret.get(0);
           default:
                throw new IllegalStateException("Duplicate primary key");
        }
   }
   
       
   /**
    *   Update a <code>Calendar</code> object.
    *   @param obj   the <code>Calendar</code> object with the new values
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void updateCalendar(Calendar obj) throws JGDIException;

   /**
    *   Update a <code>Calendar</code> object.
    *   @param obj      the <code>Calendar</code> object with the new values
    *   @param answers  the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void updateCalendarWithAnswer(Calendar obj, List<JGDIAnswer> answers) throws JGDIException;
        
   /**
    *   Delete a <code>Calendar</code> object.
    *   @param obj  <code>Calendar</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteCalendar(Calendar obj) throws JGDIException;

   /**
    *   Delete a <code>Calendar</code> object.
    *   @param obj  <code>Calendar</code> object with the primary key information
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteCalendarWithAnswer(Calendar obj, List<JGDIAnswer> answers) throws JGDIException;
   
   /**
    *   Delete several <code>Calendar</code> objects.
    *   @param objs  <code>Calendar</code> object array with the primary key information
    *   @param force  <code>force</code> delete flag
    *   @param userFilter  delete object for users contained in userFilter
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteCalendarsWithAnswer(Object[] objs, boolean force, UserFilter userFilter, List<JGDIAnswer> answers) throws JGDIException;
   


   /**
    *   Delete a <code>Calendar</code> object by its primary key
    *   @param CAL_name   the CAL_name of the <code>Calendar</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteCalendar(String CAL_name) throws JGDIException {
       Calendar obj = new CalendarImpl(CAL_name);
       deleteCalendar(obj);
    }

   /**
    *   Delete a <code>Calendar</code> object by its primary key
    *   @param CAL_name   the CAL_name of the <code>Calendar</code> object

       *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteCalendarWithAnswer(String CAL_name, List<JGDIAnswer> answers) throws JGDIException {
       Calendar obj = new CalendarImpl(CAL_name);
       deleteCalendarWithAnswer(obj, answers);
    }

   /**
    *   Delete several <code>Calendar</code> objects by its primary key
    *   @param CAL_names   the CAL_name of the <code>Calendar</code> object
    *   @param answers  <code>answer list</code> object  
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteCalendarsWithAnswer(String[] CAL_names, List<JGDIAnswer> answers) throws JGDIException {

    
       // Other objects
       List< Calendar > list = new LinkedList< Calendar >();

       for (int i=0; CAL_names != null && i < CAL_names.length; i++) {
             Calendar obj = new CalendarImpl(
       
       CAL_names[i]
  );
         list.add(obj);
       }
       deleteCalendarsWithAnswer(list.toArray(), false, null, answers);      
    
  }

   /**
    *   Add a new <code>Calendar</code> object.
    *   @param  obj the new <code>Calendar</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void addCalendar(Calendar obj) throws JGDIException;

   /**
    *   Add a new <code>Calendar</code> object.
    *   @param  obj the new <code>Calendar</code> object
    *   @param  answers the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void addCalendarWithAnswer(Calendar obj, List<JGDIAnswer> answers) throws JGDIException;

        
   private native void fillCalendarListWithAnswer(List< Calendar > list, JGDIFilter filter, List<JGDIAnswer> answers) throws JGDIException;
   
   private void fillCalendarList(List< Calendar > list, JGDIFilter filter) throws JGDIException {
      fillCalendarListWithAnswer(list, filter, null);
   }
   
   private void fillCalendarList(List< Calendar > list) throws JGDIException {
      fillCalendarListWithAnswer(list, null, null);
   }
   
   private void fillCalendarListWithAnswer(List< Calendar > list, List<JGDIAnswer> answers) throws JGDIException {
      fillCalendarListWithAnswer(list, null, answers);
   }

   
        
   /**
    *   Get the list of all defined <code>Calendar</code> objects.
    *   @return list of <code>Calendar</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getCalendarList() throws JGDIException {
      List< Calendar > ret = new LinkedList< Calendar >();
      fillCalendarList(ret);
      return ret;
   }
   /**
    *   Get the list of all defined <code>Calendar</code> objects.
    *   @param  answers the <code>answer list</code> object
    *   @return list of <code>Calendar</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getCalendarListWithAnswer(List<JGDIAnswer> answers) throws JGDIException {
      List< Calendar > ret = new LinkedList< Calendar >();
      fillCalendarListWithAnswer(ret, answers);
      return ret;
   }

        
   /**
    *  Get a Calendar by its primary key
    *
    *  @return the Calendar
    *  @param CAL_name   the CAL_name of the <code>Calendar</code> object
    *  @return the found <code>Calendar</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public Calendar getCalendar( String CAL_name ) throws JGDIException {
    
        List< Calendar > ret = new LinkedList< Calendar >();
        PrimaryKeyFilter filter = new PrimaryKeyFilter("CAL_Type");

        filter.include(CullConstants.CAL_name, CAL_name);

        fillCalendarList(ret, filter);

        switch(ret.size()) {
           case 0:  return null;
           case 1:  return (Calendar)ret.get(0);
           default:
                throw new IllegalStateException("Duplicate primary key");
        }
   }
   
   /**
    *  Get a Calendar by its primary key
    *
    *  @return the Calendar
    *  @param CAL_name   the CAL_name of the <code>Calendar</code> object
   *  @param  answers the <code>answer list</code> object
    *  @return the found <code>Calendar</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public Calendar getCalendarWithAnswer( String CAL_name , List<JGDIAnswer> answers) throws JGDIException {
    
        List< Calendar >  ret = new LinkedList< Calendar >();
        
        PrimaryKeyFilter filter = new PrimaryKeyFilter("CAL_Type");
        filter.include(CullConstants.CAL_name, CAL_name); 
        fillCalendarListWithAnswer(ret, filter, answers);

        switch(ret.size()) {
           case 0:  return null;
           case 1:  return (Calendar)ret.get(0);
           default:
                throw new IllegalStateException("Duplicate primary key");
        }
   }
   
        
   /**
    *   Delete a <code>Operator</code> object.
    *   @param obj  <code>Operator</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteOperator(Operator obj) throws JGDIException;

   /**
    *   Delete a <code>Operator</code> object.
    *   @param obj  <code>Operator</code> object with the primary key information
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteOperatorWithAnswer(Operator obj, List<JGDIAnswer> answers) throws JGDIException;
   
   /**
    *   Delete several <code>Operator</code> objects.
    *   @param objs  <code>Operator</code> object array with the primary key information
    *   @param force  <code>force</code> delete flag
    *   @param userFilter  delete object for users contained in userFilter
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteOperatorsWithAnswer(Object[] objs, boolean force, UserFilter userFilter, List<JGDIAnswer> answers) throws JGDIException;
   


   /**
    *   Delete a <code>Operator</code> object by its primary key
    *   @param UO_name   the UO_name of the <code>Operator</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteOperator(String UO_name) throws JGDIException {
       Operator obj = new OperatorImpl(UO_name);
       deleteOperator(obj);
    }

   /**
    *   Delete a <code>Operator</code> object by its primary key
    *   @param UO_name   the UO_name of the <code>Operator</code> object

       *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteOperatorWithAnswer(String UO_name, List<JGDIAnswer> answers) throws JGDIException {
       Operator obj = new OperatorImpl(UO_name);
       deleteOperatorWithAnswer(obj, answers);
    }

   /**
    *   Delete several <code>Operator</code> objects by its primary key
    *   @param UO_names   the UO_name of the <code>Operator</code> object
    *   @param answers  <code>answer list</code> object  
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteOperatorsWithAnswer(String[] UO_names, List<JGDIAnswer> answers) throws JGDIException {

    
       // Other objects
       List< Operator > list = new LinkedList< Operator >();

       for (int i=0; UO_names != null && i < UO_names.length; i++) {
             Operator obj = new OperatorImpl(
       
       UO_names[i]
  );
         list.add(obj);
       }
       deleteOperatorsWithAnswer(list.toArray(), false, null, answers);      
    
  }

   /**
    *   Add a new <code>Operator</code> object.
    *   @param  obj the new <code>Operator</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void addOperator(Operator obj) throws JGDIException;

   /**
    *   Add a new <code>Operator</code> object.
    *   @param  obj the new <code>Operator</code> object
    *   @param  answers the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void addOperatorWithAnswer(Operator obj, List<JGDIAnswer> answers) throws JGDIException;


   /**
    *   Add a new <code>Operator</code> object.
    *   @param  name the new <code>String</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addOperator(String name) throws JGDIException {
      Operator obj = new OperatorImpl(name);
      addOperator(obj);
   }

   /**
    *   Add a new <code>Operator</code> object.
    *   @param  name the new <code>String</code> object
    *   @param  answers the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void addOperatorWithAnswer(String name, List<JGDIAnswer> answers) throws JGDIException {
      Operator obj = new OperatorImpl(name);
       addOperatorWithAnswer(obj, answers);
   }
   
        
   private native void fillOperatorListWithAnswer(List< Operator > list, JGDIFilter filter, List<JGDIAnswer> answers) throws JGDIException;
   
   private void fillOperatorList(List< Operator > list, JGDIFilter filter) throws JGDIException {
      fillOperatorListWithAnswer(list, filter, null);
   }
   
   private void fillOperatorList(List< Operator > list) throws JGDIException {
      fillOperatorListWithAnswer(list, null, null);
   }
   
   private void fillOperatorListWithAnswer(List< Operator > list, List<JGDIAnswer> answers) throws JGDIException {
      fillOperatorListWithAnswer(list, null, answers);
   }

   
        
   /**
    *   Get the list of all defined <code>Operator</code> objects.
    *   @return list of <code>Operator</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getOperatorList() throws JGDIException {
      List< Operator > ret = new LinkedList< Operator >();
      fillOperatorList(ret);
      return ret;
   }
   /**
    *   Get the list of all defined <code>Operator</code> objects.
    *   @param  answers the <code>answer list</code> object
    *   @return list of <code>Operator</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getOperatorListWithAnswer(List<JGDIAnswer> answers) throws JGDIException {
      List< Operator > ret = new LinkedList< Operator >();
      fillOperatorListWithAnswer(ret, answers);
      return ret;
   }

        
   /**
    *  Get a Operator by its primary key
    *
    *  @return the Operator
    *  @param UO_name   the UO_name of the <code>Operator</code> object
    *  @return the found <code>Operator</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public Operator getOperator( String UO_name ) throws JGDIException {
    
        List< Operator > ret = new LinkedList< Operator >();
        PrimaryKeyFilter filter = new PrimaryKeyFilter("UO_Type");

        filter.include(CullConstants.UO_name, UO_name);

        fillOperatorList(ret, filter);

        switch(ret.size()) {
           case 0:  return null;
           case 1:  return (Operator)ret.get(0);
           default:
                throw new IllegalStateException("Duplicate primary key");
        }
   }
   
   /**
    *  Get a Operator by its primary key
    *
    *  @return the Operator
    *  @param UO_name   the UO_name of the <code>Operator</code> object
   *  @param  answers the <code>answer list</code> object
    *  @return the found <code>Operator</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public Operator getOperatorWithAnswer( String UO_name , List<JGDIAnswer> answers) throws JGDIException {
    
        List< Operator >  ret = new LinkedList< Operator >();
        
        PrimaryKeyFilter filter = new PrimaryKeyFilter("UO_Type");
        filter.include(CullConstants.UO_name, UO_name); 
        fillOperatorListWithAnswer(ret, filter, answers);

        switch(ret.size()) {
           case 0:  return null;
           case 1:  return (Operator)ret.get(0);
           default:
                throw new IllegalStateException("Duplicate primary key");
        }
   }
   
       
   /**
    *   Update a <code>Job</code> object.
    *   @param obj   the <code>Job</code> object with the new values
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void updateJob(Job obj) throws JGDIException;

   /**
    *   Update a <code>Job</code> object.
    *   @param obj      the <code>Job</code> object with the new values
    *   @param answers  the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void updateJobWithAnswer(Job obj, List<JGDIAnswer> answers) throws JGDIException;
        
   /**
    *   Delete a <code>Job</code> object.
    *   @param obj  <code>Job</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteJob(Job obj) throws JGDIException;

   /**
    *   Delete a <code>Job</code> object.
    *   @param obj  <code>Job</code> object with the primary key information
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteJobWithAnswer(Job obj, List<JGDIAnswer> answers) throws JGDIException;
   
   /**
    *   Delete several <code>Job</code> objects.
    *   @param objs  <code>Job</code> object array with the primary key information
    *   @param force  <code>force</code> delete flag
    *   @param userFilter  delete object for users contained in userFilter
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteJobsWithAnswer(Object[] objs, boolean force, UserFilter userFilter, List<JGDIAnswer> answers) throws JGDIException;
   


   /**
    *   Delete a <code>Job</code> object by its primary key
    *   @param JB_job_number   the JB_job_number of the <code>Job</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteJob(int JB_job_number) throws JGDIException {
       Job obj = new JobImpl(JB_job_number);
       deleteJob(obj);
    }

   /**
    *   Delete a <code>Job</code> object by its primary key
    *   @param JB_job_number   the JB_job_number of the <code>Job</code> object

       *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteJobWithAnswer(int JB_job_number, List<JGDIAnswer> answers) throws JGDIException {
       Job obj = new JobImpl(JB_job_number);
       deleteJobWithAnswer(obj, answers);
    }

   /**
    *   Delete several <code>Job</code> objects by its primary key
    *   @param JB_job_numbers   the JB_job_number of the <code>Job</code> object
    
    *   @param forced  <code>forced</code> delete flag
    *   @param userFilter  delete objects owned by users contained in userFilter 
    *   @param answers  <code>answer list</code> object  
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteJobsWithAnswer(String[] JB_job_numbers, boolean forced, UserFilter userFilter
    , List<JGDIAnswer> answers) throws JGDIException {

    
         deleteJobsWithAnswer(  
         
            (Object[])JB_job_numbers
         
       , forced, userFilter, answers);
    
  }

   /**
    *   Add a new <code>Job</code> object.
    *   @param  obj the new <code>Job</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void addJob(Job obj) throws JGDIException;

   /**
    *   Add a new <code>Job</code> object.
    *   @param  obj the new <code>Job</code> object
    *   @param  answers the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void addJobWithAnswer(Job obj, List<JGDIAnswer> answers) throws JGDIException;

        
   private native void fillJobListWithAnswer(List< Job > list, JGDIFilter filter, List<JGDIAnswer> answers) throws JGDIException;
   
   private void fillJobList(List< Job > list, JGDIFilter filter) throws JGDIException {
      fillJobListWithAnswer(list, filter, null);
   }
   
   private void fillJobList(List< Job > list) throws JGDIException {
      fillJobListWithAnswer(list, null, null);
   }
   
   private void fillJobListWithAnswer(List< Job > list, List<JGDIAnswer> answers) throws JGDIException {
      fillJobListWithAnswer(list, null, answers);
   }

   
        
   /**
    *   Get the list of all defined <code>Job</code> objects.
    *   @return list of <code>Job</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getJobList() throws JGDIException {
      List< Job > ret = new LinkedList< Job >();
      fillJobList(ret);
      return ret;
   }
   /**
    *   Get the list of all defined <code>Job</code> objects.
    *   @param  answers the <code>answer list</code> object
    *   @return list of <code>Job</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getJobListWithAnswer(List<JGDIAnswer> answers) throws JGDIException {
      List< Job > ret = new LinkedList< Job >();
      fillJobListWithAnswer(ret, answers);
      return ret;
   }

        
   /**
    *  Get a Job by its primary key
    *
    *  @return the Job
    *  @param JB_job_number   the JB_job_number of the <code>Job</code> object
    *  @return the found <code>Job</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public Job getJob( int JB_job_number ) throws JGDIException {
    
        List< Job > ret = new LinkedList< Job >();
        PrimaryKeyFilter filter = new PrimaryKeyFilter("JB_Type");

        filter.include(CullConstants.JB_job_number, JB_job_number);

        fillJobList(ret, filter);

        switch(ret.size()) {
           case 0:  return null;
           case 1:  return (Job)ret.get(0);
           default:
                throw new IllegalStateException("Duplicate primary key");
        }
   }
   
   /**
    *  Get a Job by its primary key
    *
    *  @return the Job
    *  @param JB_job_number   the JB_job_number of the <code>Job</code> object
   *  @param  answers the <code>answer list</code> object
    *  @return the found <code>Job</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public Job getJobWithAnswer( int JB_job_number , List<JGDIAnswer> answers) throws JGDIException {
    
        List< Job >  ret = new LinkedList< Job >();
        
        PrimaryKeyFilter filter = new PrimaryKeyFilter("JB_Type");
        filter.include(CullConstants.JB_job_number, JB_job_number); 
        fillJobListWithAnswer(ret, filter, answers);

        switch(ret.size()) {
           case 0:  return null;
           case 1:  return (Job)ret.get(0);
           default:
                throw new IllegalStateException("Duplicate primary key");
        }
   }
   
       
   /**
    *   Update a <code>ResourceQuotaSet</code> object.
    *   @param obj   the <code>ResourceQuotaSet</code> object with the new values
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void updateResourceQuotaSet(ResourceQuotaSet obj) throws JGDIException;

   /**
    *   Update a <code>ResourceQuotaSet</code> object.
    *   @param obj      the <code>ResourceQuotaSet</code> object with the new values
    *   @param answers  the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void updateResourceQuotaSetWithAnswer(ResourceQuotaSet obj, List<JGDIAnswer> answers) throws JGDIException;
        
   /**
    *   Delete a <code>ResourceQuotaSet</code> object.
    *   @param obj  <code>ResourceQuotaSet</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteResourceQuotaSet(ResourceQuotaSet obj) throws JGDIException;

   /**
    *   Delete a <code>ResourceQuotaSet</code> object.
    *   @param obj  <code>ResourceQuotaSet</code> object with the primary key information
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteResourceQuotaSetWithAnswer(ResourceQuotaSet obj, List<JGDIAnswer> answers) throws JGDIException;
   
   /**
    *   Delete several <code>ResourceQuotaSet</code> objects.
    *   @param objs  <code>ResourceQuotaSet</code> object array with the primary key information
    *   @param force  <code>force</code> delete flag
    *   @param userFilter  delete object for users contained in userFilter
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteResourceQuotaSetsWithAnswer(Object[] objs, boolean force, UserFilter userFilter, List<JGDIAnswer> answers) throws JGDIException;
   


   /**
    *   Delete a <code>ResourceQuotaSet</code> object by its primary key
    *   @param RQS_name   the RQS_name of the <code>ResourceQuotaSet</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteResourceQuotaSet(String RQS_name) throws JGDIException {
       ResourceQuotaSet obj = new ResourceQuotaSetImpl(RQS_name);
       deleteResourceQuotaSet(obj);
    }

   /**
    *   Delete a <code>ResourceQuotaSet</code> object by its primary key
    *   @param RQS_name   the RQS_name of the <code>ResourceQuotaSet</code> object

       *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteResourceQuotaSetWithAnswer(String RQS_name, List<JGDIAnswer> answers) throws JGDIException {
       ResourceQuotaSet obj = new ResourceQuotaSetImpl(RQS_name);
       deleteResourceQuotaSetWithAnswer(obj, answers);
    }

   /**
    *   Delete several <code>ResourceQuotaSet</code> objects by its primary key
    *   @param RQS_names   the RQS_name of the <code>ResourceQuotaSet</code> object
    *   @param answers  <code>answer list</code> object  
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteResourceQuotaSetsWithAnswer(String[] RQS_names, List<JGDIAnswer> answers) throws JGDIException {

    
       // Other objects
       List< ResourceQuotaSet > list = new LinkedList< ResourceQuotaSet >();

       for (int i=0; RQS_names != null && i < RQS_names.length; i++) {
             ResourceQuotaSet obj = new ResourceQuotaSetImpl(
       
       RQS_names[i]
  );
         list.add(obj);
       }
       deleteResourceQuotaSetsWithAnswer(list.toArray(), false, null, answers);      
    
  }

   /**
    *   Add a new <code>ResourceQuotaSet</code> object.
    *   @param  obj the new <code>ResourceQuotaSet</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void addResourceQuotaSet(ResourceQuotaSet obj) throws JGDIException;

   /**
    *   Add a new <code>ResourceQuotaSet</code> object.
    *   @param  obj the new <code>ResourceQuotaSet</code> object
    *   @param  answers the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void addResourceQuotaSetWithAnswer(ResourceQuotaSet obj, List<JGDIAnswer> answers) throws JGDIException;

        
   private native void fillResourceQuotaSetListWithAnswer(List< ResourceQuotaSet > list, JGDIFilter filter, List<JGDIAnswer> answers) throws JGDIException;
   
   private void fillResourceQuotaSetList(List< ResourceQuotaSet > list, JGDIFilter filter) throws JGDIException {
      fillResourceQuotaSetListWithAnswer(list, filter, null);
   }
   
   private void fillResourceQuotaSetList(List< ResourceQuotaSet > list) throws JGDIException {
      fillResourceQuotaSetListWithAnswer(list, null, null);
   }
   
   private void fillResourceQuotaSetListWithAnswer(List< ResourceQuotaSet > list, List<JGDIAnswer> answers) throws JGDIException {
      fillResourceQuotaSetListWithAnswer(list, null, answers);
   }

   
        
   /**
    *   Get the list of all defined <code>ResourceQuotaSet</code> objects.
    *   @return list of <code>ResourceQuotaSet</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getResourceQuotaSetList() throws JGDIException {
      List< ResourceQuotaSet > ret = new LinkedList< ResourceQuotaSet >();
      fillResourceQuotaSetList(ret);
      return ret;
   }
   /**
    *   Get the list of all defined <code>ResourceQuotaSet</code> objects.
    *   @param  answers the <code>answer list</code> object
    *   @return list of <code>ResourceQuotaSet</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getResourceQuotaSetListWithAnswer(List<JGDIAnswer> answers) throws JGDIException {
      List< ResourceQuotaSet > ret = new LinkedList< ResourceQuotaSet >();
      fillResourceQuotaSetListWithAnswer(ret, answers);
      return ret;
   }

        
   /**
    *  Get a ResourceQuotaSet by its primary key
    *
    *  @return the ResourceQuotaSet
    *  @param RQS_name   the RQS_name of the <code>ResourceQuotaSet</code> object
    *  @return the found <code>ResourceQuotaSet</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public ResourceQuotaSet getResourceQuotaSet( String RQS_name ) throws JGDIException {
    
        List< ResourceQuotaSet > ret = new LinkedList< ResourceQuotaSet >();
        PrimaryKeyFilter filter = new PrimaryKeyFilter("RQS_Type");

        filter.include(CullConstants.RQS_name, RQS_name);

        fillResourceQuotaSetList(ret, filter);

        switch(ret.size()) {
           case 0:  return null;
           case 1:  return (ResourceQuotaSet)ret.get(0);
           default:
                throw new IllegalStateException("Duplicate primary key");
        }
   }
   
   /**
    *  Get a ResourceQuotaSet by its primary key
    *
    *  @return the ResourceQuotaSet
    *  @param RQS_name   the RQS_name of the <code>ResourceQuotaSet</code> object
   *  @param  answers the <code>answer list</code> object
    *  @return the found <code>ResourceQuotaSet</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public ResourceQuotaSet getResourceQuotaSetWithAnswer( String RQS_name , List<JGDIAnswer> answers) throws JGDIException {
    
        List< ResourceQuotaSet >  ret = new LinkedList< ResourceQuotaSet >();
        
        PrimaryKeyFilter filter = new PrimaryKeyFilter("RQS_Type");
        filter.include(CullConstants.RQS_name, RQS_name); 
        fillResourceQuotaSetListWithAnswer(ret, filter, answers);

        switch(ret.size()) {
           case 0:  return null;
           case 1:  return (ResourceQuotaSet)ret.get(0);
           default:
                throw new IllegalStateException("Duplicate primary key");
        }
   }
   
        
   private native void fillEventClientListWithAnswer(List< EventClient > list, JGDIFilter filter, List<JGDIAnswer> answers) throws JGDIException;
   
   private void fillEventClientList(List< EventClient > list, JGDIFilter filter) throws JGDIException {
      fillEventClientListWithAnswer(list, filter, null);
   }
   
   private void fillEventClientList(List< EventClient > list) throws JGDIException {
      fillEventClientListWithAnswer(list, null, null);
   }
   
   private void fillEventClientListWithAnswer(List< EventClient > list, List<JGDIAnswer> answers) throws JGDIException {
      fillEventClientListWithAnswer(list, null, answers);
   }

   
        
   /**
    *   Get the list of all defined <code>EventClient</code> objects.
    *   @return list of <code>EventClient</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getEventClientList() throws JGDIException {
      List< EventClient > ret = new LinkedList< EventClient >();
      fillEventClientList(ret);
      return ret;
   }
   /**
    *   Get the list of all defined <code>EventClient</code> objects.
    *   @param  answers the <code>answer list</code> object
    *   @return list of <code>EventClient</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getEventClientListWithAnswer(List<JGDIAnswer> answers) throws JGDIException {
      List< EventClient > ret = new LinkedList< EventClient >();
      fillEventClientListWithAnswer(ret, answers);
      return ret;
   }

       
   /**
    *   Update a <code>User</code> object.
    *   @param obj   the <code>User</code> object with the new values
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void updateUser(User obj) throws JGDIException;

   /**
    *   Update a <code>User</code> object.
    *   @param obj      the <code>User</code> object with the new values
    *   @param answers  the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void updateUserWithAnswer(User obj, List<JGDIAnswer> answers) throws JGDIException;
        
   /**
    *   Delete a <code>User</code> object.
    *   @param obj  <code>User</code> object with the primary key information
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteUser(User obj) throws JGDIException;

   /**
    *   Delete a <code>User</code> object.
    *   @param obj  <code>User</code> object with the primary key information
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteUserWithAnswer(User obj, List<JGDIAnswer> answers) throws JGDIException;
   
   /**
    *   Delete several <code>User</code> objects.
    *   @param objs  <code>User</code> object array with the primary key information
    *   @param force  <code>force</code> delete flag
    *   @param userFilter  delete object for users contained in userFilter
    *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void deleteUsersWithAnswer(Object[] objs, boolean force, UserFilter userFilter, List<JGDIAnswer> answers) throws JGDIException;
   


   /**
    *   Delete a <code>User</code> object by its primary key
    *   @param UU_name   the UU_name of the <code>User</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteUser(String UU_name) throws JGDIException {
       User obj = new UserImpl(UU_name);
       deleteUser(obj);
    }

   /**
    *   Delete a <code>User</code> object by its primary key
    *   @param UU_name   the UU_name of the <code>User</code> object

       *   @param answers  <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteUserWithAnswer(String UU_name, List<JGDIAnswer> answers) throws JGDIException {
       User obj = new UserImpl(UU_name);
       deleteUserWithAnswer(obj, answers);
    }

   /**
    *   Delete several <code>User</code> objects by its primary key
    *   @param UU_names   the UU_name of the <code>User</code> object
    *   @param answers  <code>answer list</code> object  
    *   @throws JGDIException on any error on the GDI layer
    */
   public void deleteUsersWithAnswer(String[] UU_names, List<JGDIAnswer> answers) throws JGDIException {

    
       // Other objects
       List< User > list = new LinkedList< User >();

       for (int i=0; UU_names != null && i < UU_names.length; i++) {
             User obj = new UserImpl(
       
       UU_names[i]
  );
         list.add(obj);
       }
       deleteUsersWithAnswer(list.toArray(), false, null, answers);      
    
  }

   /**
    *   Add a new <code>User</code> object.
    *   @param  obj the new <code>User</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void addUser(User obj) throws JGDIException;

   /**
    *   Add a new <code>User</code> object.
    *   @param  obj the new <code>User</code> object
    *   @param  answers the <code>answer list</code> object
    *   @throws JGDIException on any error on the GDI layer
    */
   public native void addUserWithAnswer(User obj, List<JGDIAnswer> answers) throws JGDIException;

        
   private native void fillUserListWithAnswer(List< User > list, JGDIFilter filter, List<JGDIAnswer> answers) throws JGDIException;
   
   private void fillUserList(List< User > list, JGDIFilter filter) throws JGDIException {
      fillUserListWithAnswer(list, filter, null);
   }
   
   private void fillUserList(List< User > list) throws JGDIException {
      fillUserListWithAnswer(list, null, null);
   }
   
   private void fillUserListWithAnswer(List< User > list, List<JGDIAnswer> answers) throws JGDIException {
      fillUserListWithAnswer(list, null, answers);
   }

   
        
   /**
    *   Get the list of all defined <code>User</code> objects.
    *   @return list of <code>User</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getUserList() throws JGDIException {
      List< User > ret = new LinkedList< User >();
      fillUserList(ret);
      return ret;
   }
   /**
    *   Get the list of all defined <code>User</code> objects.
    *   @param  answers the <code>answer list</code> object
    *   @return list of <code>User</code> objects
    *   @throws JGDIException on any error on the GDI layer
    */
   public List getUserListWithAnswer(List<JGDIAnswer> answers) throws JGDIException {
      List< User > ret = new LinkedList< User >();
      fillUserListWithAnswer(ret, answers);
      return ret;
   }

        
   /**
    *  Get a User by its primary key
    *
    *  @return the User
    *  @param UU_name   the UU_name of the <code>User</code> object
    *  @return the found <code>User</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public User getUser( String UU_name ) throws JGDIException {
    
        List< User > ret = new LinkedList< User >();
        PrimaryKeyFilter filter = new PrimaryKeyFilter("UU_Type");

        filter.include(CullConstants.UU_name, UU_name);

        fillUserList(ret, filter);

        switch(ret.size()) {
           case 0:  return null;
           case 1:  return (User)ret.get(0);
           default:
                throw new IllegalStateException("Duplicate primary key");
        }
   }
   
   /**
    *  Get a User by its primary key
    *
    *  @return the User
    *  @param UU_name   the UU_name of the <code>User</code> object
   *  @param  answers the <code>answer list</code> object
    *  @return the found <code>User</code> object of <code>null</code>    
    *  @throws JGDIException on any error on the GDI layer
    */
   public User getUserWithAnswer( String UU_name , List<JGDIAnswer> answers) throws JGDIException {
    
        List< User >  ret = new LinkedList< User >();
        
        PrimaryKeyFilter filter = new PrimaryKeyFilter("UU_Type");
        filter.include(CullConstants.UU_name, UU_name); 
        fillUserListWithAnswer(ret, filter, answers);

        switch(ret.size()) {
           case 0:  return null;
           case 1:  return (User)ret.get(0);
           default:
                throw new IllegalStateException("Duplicate primary key");
        }
   }
   


}
