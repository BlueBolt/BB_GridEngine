/*___INFO__MARK_BEGIN__*/
/*************************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  the Sun Industry Standards Source License Version 1.2
 *
 *  Sun Microsystems Inc., March, 2001
 *
 *
 *  Sun Industry Standards Source License Version 1.2
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.2 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *   Copyright: 2001 by Sun Microsystems, Inc.
 *
 *   All Rights Reserved.
 *
 ************************************************************************/
/*___INFO__MARK_END__*/
/**
 *  Generated from javamodel_impl.jsp
 *  !!! DO NOT EDIT THIS FILE !!!
 */

package com.sun.grid.jgdi.configuration;

import javax.management.*;
import com.sun.grid.jgdi.configuration.GEObject;
import java.util.List;
import java.util.LinkedList;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.logging.Logger;
import java.util.logging.Level;

/**
 *  Java representation of the cull object QU_Type
 *  defined in sge_all_listsL.template
 *
 *  <p><strong>Warning:</strong>  The  QueueInstanceImpl class will 
 *  not be compatible with future Sun&trade; Grid Engine releases.</p>
 */
public class QueueInstanceImpl extends    GEObjectImpl implements QueueInstance {


   /**
    *  Create a new instance of QueueInstanceImpl. The new instance
    *  will not be initialized with the default values.
    */
   public QueueInstanceImpl() {
      this(false);
   }
   
   /**
    *   Create a new instanceof
    *   @param  initWithDefaultValues if <code>true</code> the new instance will
    *                                 be initialized with the default values as defined
    *                                 in the cull definition.
    */
   public QueueInstanceImpl(boolean initWithDefaultValues) { 

      if (initWithDefaultValues) {     
    }

  } // end of default constructor
  
  // --- newInstance method with primary key field
  

   /**
    *  Create a new instance of QueueInstanceImpl
    */
   public QueueInstanceImpl(java.lang.String fullName ) {

   
         setFullName(fullName);

    }



    // Attribute qhostname ------------------------------------------------
   
    /**
     *  Determine if the qhostname attribute is set
     *  @return <code>true</code> if the qhostname attribute is set
     */
    public boolean isSetQhostname() {
   
        return  (m_qhostname != null);

    }
   
    private java.lang.String m_qhostname;

    /**
     *   Set the qhostname attribute.
     *
     *   @param aQhostname  the new value for the  qhostname attribute
     */
    public void setQhostname(java.lang.String aQhostname) {   
        m_qhostname = aQhostname;

    }

    /**
     *  Get the value of the qhostname attribute.
     *  @return the value of the qhostname attribute
     */
    public java.lang.String getQhostname() {
        return m_qhostname;
    }


    // Attribute qname ------------------------------------------------
   
    /**
     *  Determine if the qname attribute is set
     *  @return <code>true</code> if the qname attribute is set
     */
    public boolean isSetQname() {
   
        return  (m_qname != null);

    }
   
    private java.lang.String m_qname;

    /**
     *   Set the qname attribute.
     *
     *   @param aQname  the new value for the  qname attribute
     */
    public void setQname(java.lang.String aQname) {   
        m_qname = aQname;

    }

    /**
     *  Get the value of the qname attribute.
     *  @return the value of the qname attribute
     */
    public java.lang.String getQname() {
        return m_qname;
    }


    // Attribute fullName ------------------------------------------------
   
    /**
     *  Determine if the fullName attribute is set
     *  @return <code>true</code> if the fullName attribute is set
     */
    public boolean isSetFullName() {
   
        return  (m_fullName != null);

    }
   
    private java.lang.String m_fullName;

    /**
     *   Set the fullName attribute.
     *
     *   @param aFullName  the new value for the  fullName attribute
     */
    public void setFullName(java.lang.String aFullName) {   
        m_fullName = aFullName;

    }

    /**
     *  Get the value of the fullName attribute.
     *  @return the value of the fullName attribute
     */
    public java.lang.String getFullName() {
        return m_fullName;
    }


    // Attribute tag ------------------------------------------------

    private boolean isTagSet;
   
    /**
     *  Determine if the tag attribute is set
     *  @return <code>true</code> if the tag attribute is set
     */
    public boolean isSetTag() {

        return isTagSet;

    }
   
    private int m_tag;

    /**
     *   Set the tag attribute.
     *
     *   @param aTag  the new value for the  tag attribute
     */
    public void setTag(int aTag) {   
        m_tag = aTag;

        isTagSet = true;

    }

    /**
     *  Get the value of the tag attribute.
     *  @return the value of the tag attribute
     */
    public int getTag() {
        return m_tag;
    }


    // Attribute availableAt ------------------------------------------------

    private boolean isAvailableAtSet;
   
    /**
     *  Determine if the availableAt attribute is set
     *  @return <code>true</code> if the availableAt attribute is set
     */
    public boolean isSetAvailableAt() {

        return isAvailableAtSet;

    }
   
    private int m_availableAt;

    /**
     *   Set the availableAt attribute.
     *
     *   @param aAvailableAt  the new value for the  availableAt attribute
     */
    public void setAvailableAt(int aAvailableAt) {   
        m_availableAt = aAvailableAt;

        isAvailableAtSet = true;

    }

    /**
     *  Get the value of the availableAt attribute.
     *  @return the value of the availableAt attribute
     */
    public int getAvailableAt() {
        return m_availableAt;
    }


    // Attribute seqNo ------------------------------------------------

    private boolean isSeqNoSet;
   
    /**
     *  Determine if the seqNo attribute is set
     *  @return <code>true</code> if the seqNo attribute is set
     */
    public boolean isSetSeqNo() {

        return isSeqNoSet;

    }
   
    private int m_seqNo;

    /**
     *   Set the seqNo attribute.
     *
     *   @param aSeqNo  the new value for the  seqNo attribute
     */
    public void setSeqNo(int aSeqNo) {   
        m_seqNo = aSeqNo;

        isSeqNoSet = true;

    }

    /**
     *  Get the value of the seqNo attribute.
     *  @return the value of the seqNo attribute
     */
    public int getSeqNo() {
        return m_seqNo;
    }


    // Attribute nsuspend ------------------------------------------------

    private boolean isNsuspendSet;
   
    /**
     *  Determine if the nsuspend attribute is set
     *  @return <code>true</code> if the nsuspend attribute is set
     */
    public boolean isSetNsuspend() {

        return isNsuspendSet;

    }
   
    private int m_nsuspend;

    /**
     *   Set the nsuspend attribute.
     *
     *   @param aNsuspend  the new value for the  nsuspend attribute
     */
    public void setNsuspend(int aNsuspend) {   
        m_nsuspend = aNsuspend;

        isNsuspendSet = true;

    }

    /**
     *  Get the value of the nsuspend attribute.
     *  @return the value of the nsuspend attribute
     */
    public int getNsuspend() {
        return m_nsuspend;
    }


    // Attribute qtype ------------------------------------------------

    private boolean isQtypeSet;
   
    /**
     *  Determine if the qtype attribute is set
     *  @return <code>true</code> if the qtype attribute is set
     */
    public boolean isSetQtype() {

        return isQtypeSet;

    }
   
    private int m_qtype;

    /**
     *   Set the qtype attribute.
     *
     *   @param aQtype  the new value for the  qtype attribute
     */
    public void setQtype(int aQtype) {   
        m_qtype = aQtype;

        isQtypeSet = true;

    }

    /**
     *  Get the value of the qtype attribute.
     *  @return the value of the qtype attribute
     */
    public int getQtype() {
        return m_qtype;
    }


    // Attribute jobSlots ------------------------------------------------

    private boolean isJobSlotsSet;
   
    /**
     *  Determine if the jobSlots attribute is set
     *  @return <code>true</code> if the jobSlots attribute is set
     */
    public boolean isSetJobSlots() {

        return isJobSlotsSet;

    }
   
    private int m_jobSlots;

    /**
     *   Set the jobSlots attribute.
     *
     *   @param aJobSlots  the new value for the  jobSlots attribute
     */
    public void setJobSlots(int aJobSlots) {   
        m_jobSlots = aJobSlots;

        isJobSlotsSet = true;

    }

    /**
     *  Get the value of the jobSlots attribute.
     *  @return the value of the jobSlots attribute
     */
    public int getJobSlots() {
        return m_jobSlots;
    }


    // Attribute tmpdir ------------------------------------------------
   
    /**
     *  Determine if the tmpdir attribute is set
     *  @return <code>true</code> if the tmpdir attribute is set
     */
    public boolean isSetTmpdir() {
   
        return  (m_tmpdir != null);

    }
   
    private java.lang.String m_tmpdir;

    /**
     *   Set the tmpdir attribute.
     *
     *   @param aTmpdir  the new value for the  tmpdir attribute
     */
    public void setTmpdir(java.lang.String aTmpdir) {   
        m_tmpdir = aTmpdir;

    }

    /**
     *  Get the value of the tmpdir attribute.
     *  @return the value of the tmpdir attribute
     */
    public java.lang.String getTmpdir() {
        return m_tmpdir;
    }


    // Attribute shell ------------------------------------------------
   
    /**
     *  Determine if the shell attribute is set
     *  @return <code>true</code> if the shell attribute is set
     */
    public boolean isSetShell() {
   
        return  (m_shell != null);

    }
   
    private java.lang.String m_shell;

    /**
     *   Set the shell attribute.
     *
     *   @param aShell  the new value for the  shell attribute
     */
    public void setShell(java.lang.String aShell) {   
        m_shell = aShell;

    }

    /**
     *  Get the value of the shell attribute.
     *  @return the value of the shell attribute
     */
    public java.lang.String getShell() {
        return m_shell;
    }


    // Attribute calendar ------------------------------------------------
   
    /**
     *  Determine if the calendar attribute is set
     *  @return <code>true</code> if the calendar attribute is set
     */
    public boolean isSetCalendar() {
   
        return  (m_calendar != null);

    }
   
    private java.lang.String m_calendar;

    /**
     *   Set the calendar attribute.
     *
     *   @param aCalendar  the new value for the  calendar attribute
     */
    public void setCalendar(java.lang.String aCalendar) {   
        m_calendar = aCalendar;

    }

    /**
     *  Get the value of the calendar attribute.
     *  @return the value of the calendar attribute
     */
    public java.lang.String getCalendar() {
        return m_calendar;
    }


    // Attribute priority ------------------------------------------------
   
    /**
     *  Determine if the priority attribute is set
     *  @return <code>true</code> if the priority attribute is set
     */
    public boolean isSetPriority() {
   
        return  (m_priority != null);

    }
   
    private java.lang.String m_priority;

    /**
     *   Set the priority attribute.
     *
     *   @param aPriority  the new value for the  priority attribute
     */
    public void setPriority(java.lang.String aPriority) {   
        m_priority = aPriority;

    }

    /**
     *  Get the value of the priority attribute.
     *  @return the value of the priority attribute
     */
    public java.lang.String getPriority() {
        return m_priority;
    }


    // Attribute processors ------------------------------------------------
   
    /**
     *  Determine if the processors attribute is set
     *  @return <code>true</code> if the processors attribute is set
     */
    public boolean isSetProcessors() {
   
        return  (m_processors != null);

    }
   
    private java.lang.String m_processors;

    /**
     *   Set the processors attribute.
     *
     *   @param aProcessors  the new value for the  processors attribute
     */
    public void setProcessors(java.lang.String aProcessors) {   
        m_processors = aProcessors;

    }

    /**
     *  Get the value of the processors attribute.
     *  @return the value of the processors attribute
     */
    public java.lang.String getProcessors() {
        return m_processors;
    }


    // Attribute prolog ------------------------------------------------
   
    /**
     *  Determine if the prolog attribute is set
     *  @return <code>true</code> if the prolog attribute is set
     */
    public boolean isSetProlog() {
   
        return  (m_prolog != null);

    }
   
    private java.lang.String m_prolog;

    /**
     *   Set the prolog attribute.
     *
     *   @param aProlog  the new value for the  prolog attribute
     */
    public void setProlog(java.lang.String aProlog) {   
        m_prolog = aProlog;

    }

    /**
     *  Get the value of the prolog attribute.
     *  @return the value of the prolog attribute
     */
    public java.lang.String getProlog() {
        return m_prolog;
    }


    // Attribute epilog ------------------------------------------------
   
    /**
     *  Determine if the epilog attribute is set
     *  @return <code>true</code> if the epilog attribute is set
     */
    public boolean isSetEpilog() {
   
        return  (m_epilog != null);

    }
   
    private java.lang.String m_epilog;

    /**
     *   Set the epilog attribute.
     *
     *   @param aEpilog  the new value for the  epilog attribute
     */
    public void setEpilog(java.lang.String aEpilog) {   
        m_epilog = aEpilog;

    }

    /**
     *  Get the value of the epilog attribute.
     *  @return the value of the epilog attribute
     */
    public java.lang.String getEpilog() {
        return m_epilog;
    }


    // Attribute shellStartMode ------------------------------------------------
   
    /**
     *  Determine if the shellStartMode attribute is set
     *  @return <code>true</code> if the shellStartMode attribute is set
     */
    public boolean isSetShellStartMode() {
   
        return  (m_shellStartMode != null);

    }
   
    private java.lang.String m_shellStartMode;

    /**
     *   Set the shellStartMode attribute.
     *
     *   @param aShellStartMode  the new value for the  shellStartMode attribute
     */
    public void setShellStartMode(java.lang.String aShellStartMode) {   
        m_shellStartMode = aShellStartMode;

    }

    /**
     *  Get the value of the shellStartMode attribute.
     *  @return the value of the shellStartMode attribute
     */
    public java.lang.String getShellStartMode() {
        return m_shellStartMode;
    }


    // Attribute starterMethod ------------------------------------------------
   
    /**
     *  Determine if the starterMethod attribute is set
     *  @return <code>true</code> if the starterMethod attribute is set
     */
    public boolean isSetStarterMethod() {
   
        return  (m_starterMethod != null);

    }
   
    private java.lang.String m_starterMethod;

    /**
     *   Set the starterMethod attribute.
     *
     *   @param aStarterMethod  the new value for the  starterMethod attribute
     */
    public void setStarterMethod(java.lang.String aStarterMethod) {   
        m_starterMethod = aStarterMethod;

    }

    /**
     *  Get the value of the starterMethod attribute.
     *  @return the value of the starterMethod attribute
     */
    public java.lang.String getStarterMethod() {
        return m_starterMethod;
    }


    // Attribute suspendMethod ------------------------------------------------
   
    /**
     *  Determine if the suspendMethod attribute is set
     *  @return <code>true</code> if the suspendMethod attribute is set
     */
    public boolean isSetSuspendMethod() {
   
        return  (m_suspendMethod != null);

    }
   
    private java.lang.String m_suspendMethod;

    /**
     *   Set the suspendMethod attribute.
     *
     *   @param aSuspendMethod  the new value for the  suspendMethod attribute
     */
    public void setSuspendMethod(java.lang.String aSuspendMethod) {   
        m_suspendMethod = aSuspendMethod;

    }

    /**
     *  Get the value of the suspendMethod attribute.
     *  @return the value of the suspendMethod attribute
     */
    public java.lang.String getSuspendMethod() {
        return m_suspendMethod;
    }


    // Attribute resumeMethod ------------------------------------------------
   
    /**
     *  Determine if the resumeMethod attribute is set
     *  @return <code>true</code> if the resumeMethod attribute is set
     */
    public boolean isSetResumeMethod() {
   
        return  (m_resumeMethod != null);

    }
   
    private java.lang.String m_resumeMethod;

    /**
     *   Set the resumeMethod attribute.
     *
     *   @param aResumeMethod  the new value for the  resumeMethod attribute
     */
    public void setResumeMethod(java.lang.String aResumeMethod) {   
        m_resumeMethod = aResumeMethod;

    }

    /**
     *  Get the value of the resumeMethod attribute.
     *  @return the value of the resumeMethod attribute
     */
    public java.lang.String getResumeMethod() {
        return m_resumeMethod;
    }


    // Attribute terminateMethod ------------------------------------------------
   
    /**
     *  Determine if the terminateMethod attribute is set
     *  @return <code>true</code> if the terminateMethod attribute is set
     */
    public boolean isSetTerminateMethod() {
   
        return  (m_terminateMethod != null);

    }
   
    private java.lang.String m_terminateMethod;

    /**
     *   Set the terminateMethod attribute.
     *
     *   @param aTerminateMethod  the new value for the  terminateMethod attribute
     */
    public void setTerminateMethod(java.lang.String aTerminateMethod) {   
        m_terminateMethod = aTerminateMethod;

    }

    /**
     *  Get the value of the terminateMethod attribute.
     *  @return the value of the terminateMethod attribute
     */
    public java.lang.String getTerminateMethod() {
        return m_terminateMethod;
    }


    // Attribute initialState ------------------------------------------------
   
    /**
     *  Determine if the initialState attribute is set
     *  @return <code>true</code> if the initialState attribute is set
     */
    public boolean isSetInitialState() {
   
        return  (m_initialState != null);

    }
   
    private java.lang.String m_initialState;

    /**
     *   Set the initialState attribute.
     *
     *   @param aInitialState  the new value for the  initialState attribute
     */
    public void setInitialState(java.lang.String aInitialState) {   
        m_initialState = aInitialState;

    }

    /**
     *  Get the value of the initialState attribute.
     *  @return the value of the initialState attribute
     */
    public java.lang.String getInitialState() {
        return m_initialState;
    }


    // Attribute rerun ------------------------------------------------

    private boolean isRerunSet;
   
    /**
     *  Determine if the rerun attribute is set
     *  @return <code>true</code> if the rerun attribute is set
     */
    public boolean isSetRerun() {

        return isRerunSet;

    }
   
    private boolean m_rerun;

    /**
     *   Set the rerun attribute.
     *
     *   @param aRerun  the new value for the  rerun attribute
     */
    public void setRerun(boolean aRerun) {   
        m_rerun = aRerun;

        isRerunSet = true;

    }

    /**
     *  Get the value of the rerun attribute.
     *  @return the value of the rerun attribute
     */
    public boolean isRerun() {
        return m_rerun;
    }


    // Attribute sRt ------------------------------------------------
   
    /**
     *  Determine if the sRt attribute is set
     *  @return <code>true</code> if the sRt attribute is set
     */
    public boolean isSetSRt() {
   
        return  (m_sRt != null);

    }
   
    private java.lang.String m_sRt;

    /**
     *   Set the sRt attribute.
     *
     *   @param aSRt  the new value for the  sRt attribute
     */
    public void setSRt(java.lang.String aSRt) {   
        m_sRt = aSRt;

    }

    /**
     *  Get the value of the sRt attribute.
     *  @return the value of the sRt attribute
     */
    public java.lang.String getSRt() {
        return m_sRt;
    }


    // Attribute hRt ------------------------------------------------
   
    /**
     *  Determine if the hRt attribute is set
     *  @return <code>true</code> if the hRt attribute is set
     */
    public boolean isSetHRt() {
   
        return  (m_hRt != null);

    }
   
    private java.lang.String m_hRt;

    /**
     *   Set the hRt attribute.
     *
     *   @param aHRt  the new value for the  hRt attribute
     */
    public void setHRt(java.lang.String aHRt) {   
        m_hRt = aHRt;

    }

    /**
     *  Get the value of the hRt attribute.
     *  @return the value of the hRt attribute
     */
    public java.lang.String getHRt() {
        return m_hRt;
    }


    // Attribute sCpu ------------------------------------------------
   
    /**
     *  Determine if the sCpu attribute is set
     *  @return <code>true</code> if the sCpu attribute is set
     */
    public boolean isSetSCpu() {
   
        return  (m_sCpu != null);

    }
   
    private java.lang.String m_sCpu;

    /**
     *   Set the sCpu attribute.
     *
     *   @param aSCpu  the new value for the  sCpu attribute
     */
    public void setSCpu(java.lang.String aSCpu) {   
        m_sCpu = aSCpu;

    }

    /**
     *  Get the value of the sCpu attribute.
     *  @return the value of the sCpu attribute
     */
    public java.lang.String getSCpu() {
        return m_sCpu;
    }


    // Attribute hCpu ------------------------------------------------
   
    /**
     *  Determine if the hCpu attribute is set
     *  @return <code>true</code> if the hCpu attribute is set
     */
    public boolean isSetHCpu() {
   
        return  (m_hCpu != null);

    }
   
    private java.lang.String m_hCpu;

    /**
     *   Set the hCpu attribute.
     *
     *   @param aHCpu  the new value for the  hCpu attribute
     */
    public void setHCpu(java.lang.String aHCpu) {   
        m_hCpu = aHCpu;

    }

    /**
     *  Get the value of the hCpu attribute.
     *  @return the value of the hCpu attribute
     */
    public java.lang.String getHCpu() {
        return m_hCpu;
    }


    // Attribute sFsize ------------------------------------------------
   
    /**
     *  Determine if the sFsize attribute is set
     *  @return <code>true</code> if the sFsize attribute is set
     */
    public boolean isSetSFsize() {
   
        return  (m_sFsize != null);

    }
   
    private java.lang.String m_sFsize;

    /**
     *   Set the sFsize attribute.
     *
     *   @param aSFsize  the new value for the  sFsize attribute
     */
    public void setSFsize(java.lang.String aSFsize) {   
        m_sFsize = aSFsize;

    }

    /**
     *  Get the value of the sFsize attribute.
     *  @return the value of the sFsize attribute
     */
    public java.lang.String getSFsize() {
        return m_sFsize;
    }


    // Attribute hFsize ------------------------------------------------
   
    /**
     *  Determine if the hFsize attribute is set
     *  @return <code>true</code> if the hFsize attribute is set
     */
    public boolean isSetHFsize() {
   
        return  (m_hFsize != null);

    }
   
    private java.lang.String m_hFsize;

    /**
     *   Set the hFsize attribute.
     *
     *   @param aHFsize  the new value for the  hFsize attribute
     */
    public void setHFsize(java.lang.String aHFsize) {   
        m_hFsize = aHFsize;

    }

    /**
     *  Get the value of the hFsize attribute.
     *  @return the value of the hFsize attribute
     */
    public java.lang.String getHFsize() {
        return m_hFsize;
    }


    // Attribute sData ------------------------------------------------
   
    /**
     *  Determine if the sData attribute is set
     *  @return <code>true</code> if the sData attribute is set
     */
    public boolean isSetSData() {
   
        return  (m_sData != null);

    }
   
    private java.lang.String m_sData;

    /**
     *   Set the sData attribute.
     *
     *   @param aSData  the new value for the  sData attribute
     */
    public void setSData(java.lang.String aSData) {   
        m_sData = aSData;

    }

    /**
     *  Get the value of the sData attribute.
     *  @return the value of the sData attribute
     */
    public java.lang.String getSData() {
        return m_sData;
    }


    // Attribute hData ------------------------------------------------
   
    /**
     *  Determine if the hData attribute is set
     *  @return <code>true</code> if the hData attribute is set
     */
    public boolean isSetHData() {
   
        return  (m_hData != null);

    }
   
    private java.lang.String m_hData;

    /**
     *   Set the hData attribute.
     *
     *   @param aHData  the new value for the  hData attribute
     */
    public void setHData(java.lang.String aHData) {   
        m_hData = aHData;

    }

    /**
     *  Get the value of the hData attribute.
     *  @return the value of the hData attribute
     */
    public java.lang.String getHData() {
        return m_hData;
    }


    // Attribute sStack ------------------------------------------------
   
    /**
     *  Determine if the sStack attribute is set
     *  @return <code>true</code> if the sStack attribute is set
     */
    public boolean isSetSStack() {
   
        return  (m_sStack != null);

    }
   
    private java.lang.String m_sStack;

    /**
     *   Set the sStack attribute.
     *
     *   @param aSStack  the new value for the  sStack attribute
     */
    public void setSStack(java.lang.String aSStack) {   
        m_sStack = aSStack;

    }

    /**
     *  Get the value of the sStack attribute.
     *  @return the value of the sStack attribute
     */
    public java.lang.String getSStack() {
        return m_sStack;
    }


    // Attribute hStack ------------------------------------------------
   
    /**
     *  Determine if the hStack attribute is set
     *  @return <code>true</code> if the hStack attribute is set
     */
    public boolean isSetHStack() {
   
        return  (m_hStack != null);

    }
   
    private java.lang.String m_hStack;

    /**
     *   Set the hStack attribute.
     *
     *   @param aHStack  the new value for the  hStack attribute
     */
    public void setHStack(java.lang.String aHStack) {   
        m_hStack = aHStack;

    }

    /**
     *  Get the value of the hStack attribute.
     *  @return the value of the hStack attribute
     */
    public java.lang.String getHStack() {
        return m_hStack;
    }


    // Attribute sCore ------------------------------------------------
   
    /**
     *  Determine if the sCore attribute is set
     *  @return <code>true</code> if the sCore attribute is set
     */
    public boolean isSetSCore() {
   
        return  (m_sCore != null);

    }
   
    private java.lang.String m_sCore;

    /**
     *   Set the sCore attribute.
     *
     *   @param aSCore  the new value for the  sCore attribute
     */
    public void setSCore(java.lang.String aSCore) {   
        m_sCore = aSCore;

    }

    /**
     *  Get the value of the sCore attribute.
     *  @return the value of the sCore attribute
     */
    public java.lang.String getSCore() {
        return m_sCore;
    }


    // Attribute hCore ------------------------------------------------
   
    /**
     *  Determine if the hCore attribute is set
     *  @return <code>true</code> if the hCore attribute is set
     */
    public boolean isSetHCore() {
   
        return  (m_hCore != null);

    }
   
    private java.lang.String m_hCore;

    /**
     *   Set the hCore attribute.
     *
     *   @param aHCore  the new value for the  hCore attribute
     */
    public void setHCore(java.lang.String aHCore) {   
        m_hCore = aHCore;

    }

    /**
     *  Get the value of the hCore attribute.
     *  @return the value of the hCore attribute
     */
    public java.lang.String getHCore() {
        return m_hCore;
    }


    // Attribute sRss ------------------------------------------------
   
    /**
     *  Determine if the sRss attribute is set
     *  @return <code>true</code> if the sRss attribute is set
     */
    public boolean isSetSRss() {
   
        return  (m_sRss != null);

    }
   
    private java.lang.String m_sRss;

    /**
     *   Set the sRss attribute.
     *
     *   @param aSRss  the new value for the  sRss attribute
     */
    public void setSRss(java.lang.String aSRss) {   
        m_sRss = aSRss;

    }

    /**
     *  Get the value of the sRss attribute.
     *  @return the value of the sRss attribute
     */
    public java.lang.String getSRss() {
        return m_sRss;
    }


    // Attribute hRss ------------------------------------------------
   
    /**
     *  Determine if the hRss attribute is set
     *  @return <code>true</code> if the hRss attribute is set
     */
    public boolean isSetHRss() {
   
        return  (m_hRss != null);

    }
   
    private java.lang.String m_hRss;

    /**
     *   Set the hRss attribute.
     *
     *   @param aHRss  the new value for the  hRss attribute
     */
    public void setHRss(java.lang.String aHRss) {   
        m_hRss = aHRss;

    }

    /**
     *  Get the value of the hRss attribute.
     *  @return the value of the hRss attribute
     */
    public java.lang.String getHRss() {
        return m_hRss;
    }


    // Attribute sVmem ------------------------------------------------
   
    /**
     *  Determine if the sVmem attribute is set
     *  @return <code>true</code> if the sVmem attribute is set
     */
    public boolean isSetSVmem() {
   
        return  (m_sVmem != null);

    }
   
    private java.lang.String m_sVmem;

    /**
     *   Set the sVmem attribute.
     *
     *   @param aSVmem  the new value for the  sVmem attribute
     */
    public void setSVmem(java.lang.String aSVmem) {   
        m_sVmem = aSVmem;

    }

    /**
     *  Get the value of the sVmem attribute.
     *  @return the value of the sVmem attribute
     */
    public java.lang.String getSVmem() {
        return m_sVmem;
    }


    // Attribute hVmem ------------------------------------------------
   
    /**
     *  Determine if the hVmem attribute is set
     *  @return <code>true</code> if the hVmem attribute is set
     */
    public boolean isSetHVmem() {
   
        return  (m_hVmem != null);

    }
   
    private java.lang.String m_hVmem;

    /**
     *   Set the hVmem attribute.
     *
     *   @param aHVmem  the new value for the  hVmem attribute
     */
    public void setHVmem(java.lang.String aHVmem) {   
        m_hVmem = aHVmem;

    }

    /**
     *  Get the value of the hVmem attribute.
     *  @return the value of the hVmem attribute
     */
    public java.lang.String getHVmem() {
        return m_hVmem;
    }


    // Attribute suspendInterval ------------------------------------------------
   
    /**
     *  Determine if the suspendInterval attribute is set
     *  @return <code>true</code> if the suspendInterval attribute is set
     */
    public boolean isSetSuspendInterval() {
   
        return  (m_suspendInterval != null);

    }
   
    private java.lang.String m_suspendInterval;

    /**
     *   Set the suspendInterval attribute.
     *
     *   @param aSuspendInterval  the new value for the  suspendInterval attribute
     */
    public void setSuspendInterval(java.lang.String aSuspendInterval) {   
        m_suspendInterval = aSuspendInterval;

    }

    /**
     *  Get the value of the suspendInterval attribute.
     *  @return the value of the suspendInterval attribute
     */
    public java.lang.String getSuspendInterval() {
        return m_suspendInterval;
    }


    // Attribute minCpuInterval ------------------------------------------------
   
    /**
     *  Determine if the minCpuInterval attribute is set
     *  @return <code>true</code> if the minCpuInterval attribute is set
     */
    public boolean isSetMinCpuInterval() {
   
        return  (m_minCpuInterval != null);

    }
   
    private java.lang.String m_minCpuInterval;

    /**
     *   Set the minCpuInterval attribute.
     *
     *   @param aMinCpuInterval  the new value for the  minCpuInterval attribute
     */
    public void setMinCpuInterval(java.lang.String aMinCpuInterval) {   
        m_minCpuInterval = aMinCpuInterval;

    }

    /**
     *  Get the value of the minCpuInterval attribute.
     *  @return the value of the minCpuInterval attribute
     */
    public java.lang.String getMinCpuInterval() {
        return m_minCpuInterval;
    }


    // Attribute notify ------------------------------------------------
   
    /**
     *  Determine if the notify attribute is set
     *  @return <code>true</code> if the notify attribute is set
     */
    public boolean isSetNotify() {
   
        return  (m_notify != null);

    }
   
    private java.lang.String m_notify;

    /**
     *   Set the notify attribute.
     *
     *   @param aNotify  the new value for the  notify attribute
     */
    public void setNotify(java.lang.String aNotify) {   
        m_notify = aNotify;

    }

    /**
     *  Get the value of the notify attribute.
     *  @return the value of the notify attribute
     */
    public java.lang.String getNotify() {
        return m_notify;
    }


    // Attribute ckptList ------------------------------------------------

    private List< java.lang.String > m_ckptList;
   
    private void initCkpt() {
        if (m_ckptList == null) {
            m_ckptList = new LinkedList< java.lang.String >();
        }
    }

    /**
     *   Add a java.lang.String attribute.

     *   @param ackpt  the new java.lang.String attribute
     */
    public void addCkpt(java.lang.String ackpt) {   
        initCkpt();
        
        m_ckptList.add(ackpt);
        
    }
   
   
    /**
     *   Set a java.lang.String attribute.
     *   @param index   index of the java.lang.String attribute
     *   @param ackpt  the new java.lang.String attribute
     */
    public void setCkpt(int index, java.lang.String ackpt) {
        initCkpt();
        m_ckptList.set(index, ackpt);
    }

    /**
     *  Remove all java.lang.String attributes.
     */
    public void removeAllCkpt() {
        if (m_ckptList != null) {
            m_ckptList.clear();
        }
    }

    /**
     *  Remote a java.lang.String attribute at an index.
     *  @param index  the index of the java.lang.String attribute which should be
     *                removed
     *  @return the removed java.lang.String attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public java.lang.String removeCkpt(int index) {
        initCkpt();
        return (java.lang.String)m_ckptList.remove(index);
    }

    /**
     *  Remote a specific java.lang.String attribute.
     *  @param ackpt  the java.lang.String attribute which should be
     *                         removed
     *  @return <code>true</code> if the java.lang.String attribute has been removed
     */
    public boolean removeCkpt(java.lang.String ackpt) {
        initCkpt();
        return m_ckptList.remove(ackpt);
    }
   
    /**
     *   Get a unmodifiable list of all java.lang.String attributes.
     *
     *   @return Unmodifiable list with all java.lang.String attributes
     */
    public List< java.lang.String > getCkptList() {
        initCkpt();
        return Collections.unmodifiableList(m_ckptList);
    }

    /**
     *  Get the number of java.lang.String attributes.
     *
     *  @return The number of java.lang.String attributes.
     */
    public int getCkptCount() {
        if (m_ckptList != null) {
            return m_ckptList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a java.lang.String attribute at an index.
     *  @param index  the index of the java.lang.String attribute which should be
     *                removed
     *  @return the java.lang.String attribute
     */
    public java.lang.String getCkpt(int index) {
        initCkpt();
        return (java.lang.String)m_ckptList.get(index);
    }
   
    /**
     *  Determine if the ckpt attribute is set
     *  @return <code>true</code> if the ckpt attribute is set
     */
    public boolean isSetCkpt () {
        return (m_ckptList != null) && (!m_ckptList.isEmpty());
    }
   

    // Attribute peList ------------------------------------------------

    private List< java.lang.String > m_peList;
   
    private void initPe() {
        if (m_peList == null) {
            m_peList = new LinkedList< java.lang.String >();
        }
    }

    /**
     *   Add a java.lang.String attribute.

     *   @param ape  the new java.lang.String attribute
     */
    public void addPe(java.lang.String ape) {   
        initPe();
        
        m_peList.add(ape);
        
    }
   
   
    /**
     *   Set a java.lang.String attribute.
     *   @param index   index of the java.lang.String attribute
     *   @param ape  the new java.lang.String attribute
     */
    public void setPe(int index, java.lang.String ape) {
        initPe();
        m_peList.set(index, ape);
    }

    /**
     *  Remove all java.lang.String attributes.
     */
    public void removeAllPe() {
        if (m_peList != null) {
            m_peList.clear();
        }
    }

    /**
     *  Remote a java.lang.String attribute at an index.
     *  @param index  the index of the java.lang.String attribute which should be
     *                removed
     *  @return the removed java.lang.String attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public java.lang.String removePe(int index) {
        initPe();
        return (java.lang.String)m_peList.remove(index);
    }

    /**
     *  Remote a specific java.lang.String attribute.
     *  @param ape  the java.lang.String attribute which should be
     *                         removed
     *  @return <code>true</code> if the java.lang.String attribute has been removed
     */
    public boolean removePe(java.lang.String ape) {
        initPe();
        return m_peList.remove(ape);
    }
   
    /**
     *   Get a unmodifiable list of all java.lang.String attributes.
     *
     *   @return Unmodifiable list with all java.lang.String attributes
     */
    public List< java.lang.String > getPeList() {
        initPe();
        return Collections.unmodifiableList(m_peList);
    }

    /**
     *  Get the number of java.lang.String attributes.
     *
     *  @return The number of java.lang.String attributes.
     */
    public int getPeCount() {
        if (m_peList != null) {
            return m_peList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a java.lang.String attribute at an index.
     *  @param index  the index of the java.lang.String attribute which should be
     *                removed
     *  @return the java.lang.String attribute
     */
    public java.lang.String getPe(int index) {
        initPe();
        return (java.lang.String)m_peList.get(index);
    }
   
    /**
     *  Determine if the pe attribute is set
     *  @return <code>true</code> if the pe attribute is set
     */
    public boolean isSetPe () {
        return (m_peList != null) && (!m_peList.isEmpty());
    }
   

    // Attribute ownerList ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.UserSet > m_ownerList;
   
    private void initOwner() {
        if (m_ownerList == null) {
            m_ownerList = new LinkedList< com.sun.grid.jgdi.configuration.UserSet >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.UserSet attribute.

     *   @param aowner  the new com.sun.grid.jgdi.configuration.UserSet attribute
     */
    public void addOwner(com.sun.grid.jgdi.configuration.UserSet aowner) {   
        initOwner();
        
        m_ownerList.add(aowner);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.UserSet attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.UserSet attribute
     *   @param aowner  the new com.sun.grid.jgdi.configuration.UserSet attribute
     */
    public void setOwner(int index, com.sun.grid.jgdi.configuration.UserSet aowner) {
        initOwner();
        m_ownerList.set(index, aowner);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.UserSet attributes.
     */
    public void removeAllOwner() {
        if (m_ownerList != null) {
            m_ownerList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.UserSet attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.UserSet attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.UserSet attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.UserSet removeOwner(int index) {
        initOwner();
        return (com.sun.grid.jgdi.configuration.UserSet)m_ownerList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.UserSet attribute.
     *  @param aowner  the com.sun.grid.jgdi.configuration.UserSet attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.UserSet attribute has been removed
     */
    public boolean removeOwner(com.sun.grid.jgdi.configuration.UserSet aowner) {
        initOwner();
        return m_ownerList.remove(aowner);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.UserSet attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.UserSet attributes
     */
    public List< com.sun.grid.jgdi.configuration.UserSet > getOwnerList() {
        initOwner();
        return Collections.unmodifiableList(m_ownerList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.UserSet attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.UserSet attributes.
     */
    public int getOwnerCount() {
        if (m_ownerList != null) {
            return m_ownerList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.UserSet attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.UserSet attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.UserSet attribute
     */
    public com.sun.grid.jgdi.configuration.UserSet getOwner(int index) {
        initOwner();
        return (com.sun.grid.jgdi.configuration.UserSet)m_ownerList.get(index);
    }
   
    /**
     *  Determine if the owner attribute is set
     *  @return <code>true</code> if the owner attribute is set
     */
    public boolean isSetOwner () {
        return (m_ownerList != null) && (!m_ownerList.isEmpty());
    }
   

    // Attribute acl ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.UserSet > m_aclList;
   
    private void initAcl() {
        if (m_aclList == null) {
            m_aclList = new LinkedList< com.sun.grid.jgdi.configuration.UserSet >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.UserSet attribute.

     *   @param aacl  the new com.sun.grid.jgdi.configuration.UserSet attribute
     */
    public void addAcl(com.sun.grid.jgdi.configuration.UserSet aacl) {   
        initAcl();
        
        m_aclList.add(aacl);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.UserSet attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.UserSet attribute
     *   @param aacl  the new com.sun.grid.jgdi.configuration.UserSet attribute
     */
    public void setAcl(int index, com.sun.grid.jgdi.configuration.UserSet aacl) {
        initAcl();
        m_aclList.set(index, aacl);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.UserSet attributes.
     */
    public void removeAllAcl() {
        if (m_aclList != null) {
            m_aclList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.UserSet attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.UserSet attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.UserSet attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.UserSet removeAcl(int index) {
        initAcl();
        return (com.sun.grid.jgdi.configuration.UserSet)m_aclList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.UserSet attribute.
     *  @param aacl  the com.sun.grid.jgdi.configuration.UserSet attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.UserSet attribute has been removed
     */
    public boolean removeAcl(com.sun.grid.jgdi.configuration.UserSet aacl) {
        initAcl();
        return m_aclList.remove(aacl);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.UserSet attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.UserSet attributes
     */
    public List< com.sun.grid.jgdi.configuration.UserSet > getAclList() {
        initAcl();
        return Collections.unmodifiableList(m_aclList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.UserSet attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.UserSet attributes.
     */
    public int getAclCount() {
        if (m_aclList != null) {
            return m_aclList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.UserSet attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.UserSet attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.UserSet attribute
     */
    public com.sun.grid.jgdi.configuration.UserSet getAcl(int index) {
        initAcl();
        return (com.sun.grid.jgdi.configuration.UserSet)m_aclList.get(index);
    }
   
    /**
     *  Determine if the acl attribute is set
     *  @return <code>true</code> if the acl attribute is set
     */
    public boolean isSetAcl () {
        return (m_aclList != null) && (!m_aclList.isEmpty());
    }
   

    // Attribute xacl ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.UserSet > m_xaclList;
   
    private void initXacl() {
        if (m_xaclList == null) {
            m_xaclList = new LinkedList< com.sun.grid.jgdi.configuration.UserSet >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.UserSet attribute.

     *   @param axacl  the new com.sun.grid.jgdi.configuration.UserSet attribute
     */
    public void addXacl(com.sun.grid.jgdi.configuration.UserSet axacl) {   
        initXacl();
        
        m_xaclList.add(axacl);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.UserSet attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.UserSet attribute
     *   @param axacl  the new com.sun.grid.jgdi.configuration.UserSet attribute
     */
    public void setXacl(int index, com.sun.grid.jgdi.configuration.UserSet axacl) {
        initXacl();
        m_xaclList.set(index, axacl);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.UserSet attributes.
     */
    public void removeAllXacl() {
        if (m_xaclList != null) {
            m_xaclList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.UserSet attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.UserSet attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.UserSet attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.UserSet removeXacl(int index) {
        initXacl();
        return (com.sun.grid.jgdi.configuration.UserSet)m_xaclList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.UserSet attribute.
     *  @param axacl  the com.sun.grid.jgdi.configuration.UserSet attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.UserSet attribute has been removed
     */
    public boolean removeXacl(com.sun.grid.jgdi.configuration.UserSet axacl) {
        initXacl();
        return m_xaclList.remove(axacl);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.UserSet attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.UserSet attributes
     */
    public List< com.sun.grid.jgdi.configuration.UserSet > getXaclList() {
        initXacl();
        return Collections.unmodifiableList(m_xaclList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.UserSet attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.UserSet attributes.
     */
    public int getXaclCount() {
        if (m_xaclList != null) {
            return m_xaclList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.UserSet attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.UserSet attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.UserSet attribute
     */
    public com.sun.grid.jgdi.configuration.UserSet getXacl(int index) {
        initXacl();
        return (com.sun.grid.jgdi.configuration.UserSet)m_xaclList.get(index);
    }
   
    /**
     *  Determine if the xacl attribute is set
     *  @return <code>true</code> if the xacl attribute is set
     */
    public boolean isSetXacl () {
        return (m_xaclList != null) && (!m_xaclList.isEmpty());
    }
   

    // Attribute projects ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.Project > m_projectsList;
   
    private void initProjects() {
        if (m_projectsList == null) {
            m_projectsList = new LinkedList< com.sun.grid.jgdi.configuration.Project >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.Project attribute.

     *   @param aprojects  the new com.sun.grid.jgdi.configuration.Project attribute
     */
    public void addProjects(com.sun.grid.jgdi.configuration.Project aprojects) {   
        initProjects();
        
        m_projectsList.add(aprojects);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.Project attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.Project attribute
     *   @param aprojects  the new com.sun.grid.jgdi.configuration.Project attribute
     */
    public void setProjects(int index, com.sun.grid.jgdi.configuration.Project aprojects) {
        initProjects();
        m_projectsList.set(index, aprojects);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.Project attributes.
     */
    public void removeAllProjects() {
        if (m_projectsList != null) {
            m_projectsList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.Project attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.Project attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.Project attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.Project removeProjects(int index) {
        initProjects();
        return (com.sun.grid.jgdi.configuration.Project)m_projectsList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.Project attribute.
     *  @param aprojects  the com.sun.grid.jgdi.configuration.Project attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.Project attribute has been removed
     */
    public boolean removeProjects(com.sun.grid.jgdi.configuration.Project aprojects) {
        initProjects();
        return m_projectsList.remove(aprojects);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.Project attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.Project attributes
     */
    public List< com.sun.grid.jgdi.configuration.Project > getProjectsList() {
        initProjects();
        return Collections.unmodifiableList(m_projectsList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.Project attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.Project attributes.
     */
    public int getProjectsCount() {
        if (m_projectsList != null) {
            return m_projectsList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.Project attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.Project attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.Project attribute
     */
    public com.sun.grid.jgdi.configuration.Project getProjects(int index) {
        initProjects();
        return (com.sun.grid.jgdi.configuration.Project)m_projectsList.get(index);
    }
   
    /**
     *  Determine if the projects attribute is set
     *  @return <code>true</code> if the projects attribute is set
     */
    public boolean isSetProjects () {
        return (m_projectsList != null) && (!m_projectsList.isEmpty());
    }
   

    // Attribute xprojects ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.Project > m_xprojectsList;
   
    private void initXprojects() {
        if (m_xprojectsList == null) {
            m_xprojectsList = new LinkedList< com.sun.grid.jgdi.configuration.Project >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.Project attribute.

     *   @param axprojects  the new com.sun.grid.jgdi.configuration.Project attribute
     */
    public void addXprojects(com.sun.grid.jgdi.configuration.Project axprojects) {   
        initXprojects();
        
        m_xprojectsList.add(axprojects);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.Project attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.Project attribute
     *   @param axprojects  the new com.sun.grid.jgdi.configuration.Project attribute
     */
    public void setXprojects(int index, com.sun.grid.jgdi.configuration.Project axprojects) {
        initXprojects();
        m_xprojectsList.set(index, axprojects);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.Project attributes.
     */
    public void removeAllXprojects() {
        if (m_xprojectsList != null) {
            m_xprojectsList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.Project attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.Project attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.Project attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.Project removeXprojects(int index) {
        initXprojects();
        return (com.sun.grid.jgdi.configuration.Project)m_xprojectsList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.Project attribute.
     *  @param axprojects  the com.sun.grid.jgdi.configuration.Project attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.Project attribute has been removed
     */
    public boolean removeXprojects(com.sun.grid.jgdi.configuration.Project axprojects) {
        initXprojects();
        return m_xprojectsList.remove(axprojects);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.Project attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.Project attributes
     */
    public List< com.sun.grid.jgdi.configuration.Project > getXprojectsList() {
        initXprojects();
        return Collections.unmodifiableList(m_xprojectsList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.Project attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.Project attributes.
     */
    public int getXprojectsCount() {
        if (m_xprojectsList != null) {
            return m_xprojectsList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.Project attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.Project attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.Project attribute
     */
    public com.sun.grid.jgdi.configuration.Project getXprojects(int index) {
        initXprojects();
        return (com.sun.grid.jgdi.configuration.Project)m_xprojectsList.get(index);
    }
   
    /**
     *  Determine if the xprojects attribute is set
     *  @return <code>true</code> if the xprojects attribute is set
     */
    public boolean isSetXprojects () {
        return (m_xprojectsList != null) && (!m_xprojectsList.isEmpty());
    }
   

    // Attribute consumableConfigList ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.ComplexEntry > m_consumableConfigList;
   
    private void initConsumableConfig() {
        if (m_consumableConfigList == null) {
            m_consumableConfigList = new LinkedList< com.sun.grid.jgdi.configuration.ComplexEntry >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.ComplexEntry attribute.

     *   @param aconsumableConfig  the new com.sun.grid.jgdi.configuration.ComplexEntry attribute
     */
    public void addConsumableConfig(com.sun.grid.jgdi.configuration.ComplexEntry aconsumableConfig) {   
        initConsumableConfig();
        
        m_consumableConfigList.add(aconsumableConfig);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.ComplexEntry attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.ComplexEntry attribute
     *   @param aconsumableConfig  the new com.sun.grid.jgdi.configuration.ComplexEntry attribute
     */
    public void setConsumableConfig(int index, com.sun.grid.jgdi.configuration.ComplexEntry aconsumableConfig) {
        initConsumableConfig();
        m_consumableConfigList.set(index, aconsumableConfig);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.ComplexEntry attributes.
     */
    public void removeAllConsumableConfig() {
        if (m_consumableConfigList != null) {
            m_consumableConfigList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.ComplexEntry attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.ComplexEntry attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.ComplexEntry attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.ComplexEntry removeConsumableConfig(int index) {
        initConsumableConfig();
        return (com.sun.grid.jgdi.configuration.ComplexEntry)m_consumableConfigList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.ComplexEntry attribute.
     *  @param aconsumableConfig  the com.sun.grid.jgdi.configuration.ComplexEntry attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.ComplexEntry attribute has been removed
     */
    public boolean removeConsumableConfig(com.sun.grid.jgdi.configuration.ComplexEntry aconsumableConfig) {
        initConsumableConfig();
        return m_consumableConfigList.remove(aconsumableConfig);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.ComplexEntry attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.ComplexEntry attributes
     */
    public List< com.sun.grid.jgdi.configuration.ComplexEntry > getConsumableConfigList() {
        initConsumableConfig();
        return Collections.unmodifiableList(m_consumableConfigList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.ComplexEntry attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.ComplexEntry attributes.
     */
    public int getConsumableConfigCount() {
        if (m_consumableConfigList != null) {
            return m_consumableConfigList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.ComplexEntry attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.ComplexEntry attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.ComplexEntry attribute
     */
    public com.sun.grid.jgdi.configuration.ComplexEntry getConsumableConfig(int index) {
        initConsumableConfig();
        return (com.sun.grid.jgdi.configuration.ComplexEntry)m_consumableConfigList.get(index);
    }
   
    /**
     *  Determine if the consumableConfig attribute is set
     *  @return <code>true</code> if the consumableConfig attribute is set
     */
    public boolean isSetConsumableConfig () {
        return (m_consumableConfigList != null) && (!m_consumableConfigList.isEmpty());
    }
   

    // Attribute loadThresholds ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.ComplexEntry > m_loadThresholdsList;
   
    private void initLoadThresholds() {
        if (m_loadThresholdsList == null) {
            m_loadThresholdsList = new LinkedList< com.sun.grid.jgdi.configuration.ComplexEntry >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.ComplexEntry attribute.

     *   @param aloadThresholds  the new com.sun.grid.jgdi.configuration.ComplexEntry attribute
     */
    public void addLoadThresholds(com.sun.grid.jgdi.configuration.ComplexEntry aloadThresholds) {   
        initLoadThresholds();
        
        m_loadThresholdsList.add(aloadThresholds);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.ComplexEntry attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.ComplexEntry attribute
     *   @param aloadThresholds  the new com.sun.grid.jgdi.configuration.ComplexEntry attribute
     */
    public void setLoadThresholds(int index, com.sun.grid.jgdi.configuration.ComplexEntry aloadThresholds) {
        initLoadThresholds();
        m_loadThresholdsList.set(index, aloadThresholds);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.ComplexEntry attributes.
     */
    public void removeAllLoadThresholds() {
        if (m_loadThresholdsList != null) {
            m_loadThresholdsList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.ComplexEntry attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.ComplexEntry attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.ComplexEntry attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.ComplexEntry removeLoadThresholds(int index) {
        initLoadThresholds();
        return (com.sun.grid.jgdi.configuration.ComplexEntry)m_loadThresholdsList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.ComplexEntry attribute.
     *  @param aloadThresholds  the com.sun.grid.jgdi.configuration.ComplexEntry attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.ComplexEntry attribute has been removed
     */
    public boolean removeLoadThresholds(com.sun.grid.jgdi.configuration.ComplexEntry aloadThresholds) {
        initLoadThresholds();
        return m_loadThresholdsList.remove(aloadThresholds);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.ComplexEntry attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.ComplexEntry attributes
     */
    public List< com.sun.grid.jgdi.configuration.ComplexEntry > getLoadThresholdsList() {
        initLoadThresholds();
        return Collections.unmodifiableList(m_loadThresholdsList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.ComplexEntry attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.ComplexEntry attributes.
     */
    public int getLoadThresholdsCount() {
        if (m_loadThresholdsList != null) {
            return m_loadThresholdsList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.ComplexEntry attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.ComplexEntry attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.ComplexEntry attribute
     */
    public com.sun.grid.jgdi.configuration.ComplexEntry getLoadThresholds(int index) {
        initLoadThresholds();
        return (com.sun.grid.jgdi.configuration.ComplexEntry)m_loadThresholdsList.get(index);
    }
   
    /**
     *  Determine if the loadThresholds attribute is set
     *  @return <code>true</code> if the loadThresholds attribute is set
     */
    public boolean isSetLoadThresholds () {
        return (m_loadThresholdsList != null) && (!m_loadThresholdsList.isEmpty());
    }
   

    // Attribute suspendThresholds ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.ComplexEntry > m_suspendThresholdsList;
   
    private void initSuspendThresholds() {
        if (m_suspendThresholdsList == null) {
            m_suspendThresholdsList = new LinkedList< com.sun.grid.jgdi.configuration.ComplexEntry >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.ComplexEntry attribute.

     *   @param asuspendThresholds  the new com.sun.grid.jgdi.configuration.ComplexEntry attribute
     */
    public void addSuspendThresholds(com.sun.grid.jgdi.configuration.ComplexEntry asuspendThresholds) {   
        initSuspendThresholds();
        
        m_suspendThresholdsList.add(asuspendThresholds);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.ComplexEntry attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.ComplexEntry attribute
     *   @param asuspendThresholds  the new com.sun.grid.jgdi.configuration.ComplexEntry attribute
     */
    public void setSuspendThresholds(int index, com.sun.grid.jgdi.configuration.ComplexEntry asuspendThresholds) {
        initSuspendThresholds();
        m_suspendThresholdsList.set(index, asuspendThresholds);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.ComplexEntry attributes.
     */
    public void removeAllSuspendThresholds() {
        if (m_suspendThresholdsList != null) {
            m_suspendThresholdsList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.ComplexEntry attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.ComplexEntry attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.ComplexEntry attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.ComplexEntry removeSuspendThresholds(int index) {
        initSuspendThresholds();
        return (com.sun.grid.jgdi.configuration.ComplexEntry)m_suspendThresholdsList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.ComplexEntry attribute.
     *  @param asuspendThresholds  the com.sun.grid.jgdi.configuration.ComplexEntry attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.ComplexEntry attribute has been removed
     */
    public boolean removeSuspendThresholds(com.sun.grid.jgdi.configuration.ComplexEntry asuspendThresholds) {
        initSuspendThresholds();
        return m_suspendThresholdsList.remove(asuspendThresholds);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.ComplexEntry attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.ComplexEntry attributes
     */
    public List< com.sun.grid.jgdi.configuration.ComplexEntry > getSuspendThresholdsList() {
        initSuspendThresholds();
        return Collections.unmodifiableList(m_suspendThresholdsList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.ComplexEntry attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.ComplexEntry attributes.
     */
    public int getSuspendThresholdsCount() {
        if (m_suspendThresholdsList != null) {
            return m_suspendThresholdsList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.ComplexEntry attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.ComplexEntry attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.ComplexEntry attribute
     */
    public com.sun.grid.jgdi.configuration.ComplexEntry getSuspendThresholds(int index) {
        initSuspendThresholds();
        return (com.sun.grid.jgdi.configuration.ComplexEntry)m_suspendThresholdsList.get(index);
    }
   
    /**
     *  Determine if the suspendThresholds attribute is set
     *  @return <code>true</code> if the suspendThresholds attribute is set
     */
    public boolean isSetSuspendThresholds () {
        return (m_suspendThresholdsList != null) && (!m_suspendThresholdsList.isEmpty());
    }
   

    // Attribute subordinateList ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.Subordinate > m_subordinateList;
   
    private void initSubordinate() {
        if (m_subordinateList == null) {
            m_subordinateList = new LinkedList< com.sun.grid.jgdi.configuration.Subordinate >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.Subordinate attribute.

     *   @param asubordinate  the new com.sun.grid.jgdi.configuration.Subordinate attribute
     */
    public void addSubordinate(com.sun.grid.jgdi.configuration.Subordinate asubordinate) {   
        initSubordinate();
        
        m_subordinateList.add(asubordinate);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.Subordinate attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.Subordinate attribute
     *   @param asubordinate  the new com.sun.grid.jgdi.configuration.Subordinate attribute
     */
    public void setSubordinate(int index, com.sun.grid.jgdi.configuration.Subordinate asubordinate) {
        initSubordinate();
        m_subordinateList.set(index, asubordinate);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.Subordinate attributes.
     */
    public void removeAllSubordinate() {
        if (m_subordinateList != null) {
            m_subordinateList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.Subordinate attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.Subordinate attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.Subordinate attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.Subordinate removeSubordinate(int index) {
        initSubordinate();
        return (com.sun.grid.jgdi.configuration.Subordinate)m_subordinateList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.Subordinate attribute.
     *  @param asubordinate  the com.sun.grid.jgdi.configuration.Subordinate attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.Subordinate attribute has been removed
     */
    public boolean removeSubordinate(com.sun.grid.jgdi.configuration.Subordinate asubordinate) {
        initSubordinate();
        return m_subordinateList.remove(asubordinate);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.Subordinate attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.Subordinate attributes
     */
    public List< com.sun.grid.jgdi.configuration.Subordinate > getSubordinateList() {
        initSubordinate();
        return Collections.unmodifiableList(m_subordinateList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.Subordinate attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.Subordinate attributes.
     */
    public int getSubordinateCount() {
        if (m_subordinateList != null) {
            return m_subordinateList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.Subordinate attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.Subordinate attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.Subordinate attribute
     */
    public com.sun.grid.jgdi.configuration.Subordinate getSubordinate(int index) {
        initSubordinate();
        return (com.sun.grid.jgdi.configuration.Subordinate)m_subordinateList.get(index);
    }
   
    /**
     *  Determine if the subordinate attribute is set
     *  @return <code>true</code> if the subordinate attribute is set
     */
    public boolean isSetSubordinate () {
        return (m_subordinateList != null) && (!m_subordinateList.isEmpty());
    }
   

    // Attribute tagged4schedule ------------------------------------------------

    private boolean isTagged4scheduleSet;
   
    /**
     *  Determine if the tagged4schedule attribute is set
     *  @return <code>true</code> if the tagged4schedule attribute is set
     */
    public boolean isSetTagged4schedule() {

        return isTagged4scheduleSet;

    }
   
    private int m_tagged4schedule;

    /**
     *   Set the tagged4schedule attribute.
     *
     *   @param aTagged4schedule  the new value for the  tagged4schedule attribute
     */
    public void setTagged4schedule(int aTagged4schedule) {   
        m_tagged4schedule = aTagged4schedule;

        isTagged4scheduleSet = true;

    }

    /**
     *  Get the value of the tagged4schedule attribute.
     *  @return the value of the tagged4schedule attribute
     */
    public int getTagged4schedule() {
        return m_tagged4schedule;
    }


    // Attribute cacheVersion ------------------------------------------------

    private boolean isCacheVersionSet;
   
    /**
     *  Determine if the cacheVersion attribute is set
     *  @return <code>true</code> if the cacheVersion attribute is set
     */
    public boolean isSetCacheVersion() {

        return isCacheVersionSet;

    }
   
    private int m_cacheVersion;

    /**
     *   Set the cacheVersion attribute.
     *
     *   @param aCacheVersion  the new value for the  cacheVersion attribute
     */
    public void setCacheVersion(int aCacheVersion) {   
        m_cacheVersion = aCacheVersion;

        isCacheVersionSet = true;

    }

    /**
     *  Get the value of the cacheVersion attribute.
     *  @return the value of the cacheVersion attribute
     */
    public int getCacheVersion() {
        return m_cacheVersion;
    }


    // Attribute pendingSignal ------------------------------------------------

    private boolean isPendingSignalSet;
   
    /**
     *  Determine if the pendingSignal attribute is set
     *  @return <code>true</code> if the pendingSignal attribute is set
     */
    public boolean isSetPendingSignal() {

        return isPendingSignalSet;

    }
   
    private int m_pendingSignal;

    /**
     *   Set the pendingSignal attribute.
     *
     *   @param aPendingSignal  the new value for the  pendingSignal attribute
     */
    public void setPendingSignal(int aPendingSignal) {   
        m_pendingSignal = aPendingSignal;

        isPendingSignalSet = true;

    }

    /**
     *  Get the value of the pendingSignal attribute.
     *  @return the value of the pendingSignal attribute
     */
    public int getPendingSignal() {
        return m_pendingSignal;
    }


    // Attribute pendingSignalDeliveryTime ------------------------------------------------

    private boolean isPendingSignalDeliveryTimeSet;
   
    /**
     *  Determine if the pendingSignalDeliveryTime attribute is set
     *  @return <code>true</code> if the pendingSignalDeliveryTime attribute is set
     */
    public boolean isSetPendingSignalDeliveryTime() {

        return isPendingSignalDeliveryTimeSet;

    }
   
    private int m_pendingSignalDeliveryTime;

    /**
     *   Set the pendingSignalDeliveryTime attribute.
     *
     *   @param aPendingSignalDeliveryTime  the new value for the  pendingSignalDeliveryTime attribute
     */
    public void setPendingSignalDeliveryTime(int aPendingSignalDeliveryTime) {   
        m_pendingSignalDeliveryTime = aPendingSignalDeliveryTime;

        isPendingSignalDeliveryTimeSet = true;

    }

    /**
     *  Get the value of the pendingSignalDeliveryTime attribute.
     *  @return the value of the pendingSignalDeliveryTime attribute
     */
    public int getPendingSignalDeliveryTime() {
        return m_pendingSignalDeliveryTime;
    }


    // Attribute version ------------------------------------------------

    private boolean isVersionSet;
   
    /**
     *  Determine if the version attribute is set
     *  @return <code>true</code> if the version attribute is set
     */
    public boolean isSetVersion() {

        return isVersionSet;

    }
   
    private int m_version;

    /**
     *   Set the version attribute.
     *
     *   @param aVersion  the new value for the  version attribute
     */
    public void setVersion(int aVersion) {   
        m_version = aVersion;

        isVersionSet = true;

    }

    /**
     *  Get the value of the version attribute.
     *  @return the value of the version attribute
     */
    public int getVersion() {
        return m_version;
    }


    // Attribute suspendedOnSubordinate ------------------------------------------------

    private boolean isSuspendedOnSubordinateSet;
   
    /**
     *  Determine if the suspendedOnSubordinate attribute is set
     *  @return <code>true</code> if the suspendedOnSubordinate attribute is set
     */
    public boolean isSetSuspendedOnSubordinate() {

        return isSuspendedOnSubordinateSet;

    }
   
    private int m_suspendedOnSubordinate;

    /**
     *   Set the suspendedOnSubordinate attribute.
     *
     *   @param aSuspendedOnSubordinate  the new value for the  suspendedOnSubordinate attribute
     */
    public void setSuspendedOnSubordinate(int aSuspendedOnSubordinate) {   
        m_suspendedOnSubordinate = aSuspendedOnSubordinate;

        isSuspendedOnSubordinateSet = true;

    }

    /**
     *  Get the value of the suspendedOnSubordinate attribute.
     *  @return the value of the suspendedOnSubordinate attribute
     */
    public int getSuspendedOnSubordinate() {
        return m_suspendedOnSubordinate;
    }


    // Attribute lastSuspendThresholdCkeck ------------------------------------------------

    private boolean isLastSuspendThresholdCkeckSet;
   
    /**
     *  Determine if the lastSuspendThresholdCkeck attribute is set
     *  @return <code>true</code> if the lastSuspendThresholdCkeck attribute is set
     */
    public boolean isSetLastSuspendThresholdCkeck() {

        return isLastSuspendThresholdCkeckSet;

    }
   
    private int m_lastSuspendThresholdCkeck;

    /**
     *   Set the lastSuspendThresholdCkeck attribute.
     *
     *   @param aLastSuspendThresholdCkeck  the new value for the  lastSuspendThresholdCkeck attribute
     */
    public void setLastSuspendThresholdCkeck(int aLastSuspendThresholdCkeck) {   
        m_lastSuspendThresholdCkeck = aLastSuspendThresholdCkeck;

        isLastSuspendThresholdCkeckSet = true;

    }

    /**
     *  Get the value of the lastSuspendThresholdCkeck attribute.
     *  @return the value of the lastSuspendThresholdCkeck attribute
     */
    public int getLastSuspendThresholdCkeck() {
        return m_lastSuspendThresholdCkeck;
    }


    // Attribute jobCnt ------------------------------------------------

    private boolean isJobCntSet;
   
    /**
     *  Determine if the jobCnt attribute is set
     *  @return <code>true</code> if the jobCnt attribute is set
     */
    public boolean isSetJobCnt() {

        return isJobCntSet;

    }
   
    private int m_jobCnt;

    /**
     *   Set the jobCnt attribute.
     *
     *   @param aJobCnt  the new value for the  jobCnt attribute
     */
    public void setJobCnt(int aJobCnt) {   
        m_jobCnt = aJobCnt;

        isJobCntSet = true;

    }

    /**
     *  Get the value of the jobCnt attribute.
     *  @return the value of the jobCnt attribute
     */
    public int getJobCnt() {
        return m_jobCnt;
    }


    // Attribute pendingJobCnt ------------------------------------------------

    private boolean isPendingJobCntSet;
   
    /**
     *  Determine if the pendingJobCnt attribute is set
     *  @return <code>true</code> if the pendingJobCnt attribute is set
     */
    public boolean isSetPendingJobCnt() {

        return isPendingJobCntSet;

    }
   
    private int m_pendingJobCnt;

    /**
     *   Set the pendingJobCnt attribute.
     *
     *   @param aPendingJobCnt  the new value for the  pendingJobCnt attribute
     */
    public void setPendingJobCnt(int aPendingJobCnt) {   
        m_pendingJobCnt = aPendingJobCnt;

        isPendingJobCntSet = true;

    }

    /**
     *  Get the value of the pendingJobCnt attribute.
     *  @return the value of the pendingJobCnt attribute
     */
    public int getPendingJobCnt() {
        return m_pendingJobCnt;
    }


    // Attribute softViolation ------------------------------------------------

    private boolean isSoftViolationSet;
   
    /**
     *  Determine if the softViolation attribute is set
     *  @return <code>true</code> if the softViolation attribute is set
     */
    public boolean isSetSoftViolation() {

        return isSoftViolationSet;

    }
   
    private int m_softViolation;

    /**
     *   Set the softViolation attribute.
     *
     *   @param aSoftViolation  the new value for the  softViolation attribute
     */
    public void setSoftViolation(int aSoftViolation) {   
        m_softViolation = aSoftViolation;

        isSoftViolationSet = true;

    }

    /**
     *  Get the value of the softViolation attribute.
     *  @return the value of the softViolation attribute
     */
    public int getSoftViolation() {
        return m_softViolation;
    }


    // Attribute hostSeqNo ------------------------------------------------

    private boolean isHostSeqNoSet;
   
    /**
     *  Determine if the hostSeqNo attribute is set
     *  @return <code>true</code> if the hostSeqNo attribute is set
     */
    public boolean isSetHostSeqNo() {

        return isHostSeqNoSet;

    }
   
    private int m_hostSeqNo;

    /**
     *   Set the hostSeqNo attribute.
     *
     *   @param aHostSeqNo  the new value for the  hostSeqNo attribute
     */
    public void setHostSeqNo(int aHostSeqNo) {   
        m_hostSeqNo = aHostSeqNo;

        isHostSeqNoSet = true;

    }

    /**
     *  Get the value of the hostSeqNo attribute.
     *  @return the value of the hostSeqNo attribute
     */
    public int getHostSeqNo() {
        return m_hostSeqNo;
    }


    // Attribute resourceUtilization ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.ResourceUtilization > m_resourceUtilizationList;
   
    private void initResourceUtilization() {
        if (m_resourceUtilizationList == null) {
            m_resourceUtilizationList = new LinkedList< com.sun.grid.jgdi.configuration.ResourceUtilization >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.ResourceUtilization attribute.

     *   @param aresourceUtilization  the new com.sun.grid.jgdi.configuration.ResourceUtilization attribute
     */
    public void addResourceUtilization(com.sun.grid.jgdi.configuration.ResourceUtilization aresourceUtilization) {   
        initResourceUtilization();
        
        m_resourceUtilizationList.add(aresourceUtilization);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.ResourceUtilization attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.ResourceUtilization attribute
     *   @param aresourceUtilization  the new com.sun.grid.jgdi.configuration.ResourceUtilization attribute
     */
    public void setResourceUtilization(int index, com.sun.grid.jgdi.configuration.ResourceUtilization aresourceUtilization) {
        initResourceUtilization();
        m_resourceUtilizationList.set(index, aresourceUtilization);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.ResourceUtilization attributes.
     */
    public void removeAllResourceUtilization() {
        if (m_resourceUtilizationList != null) {
            m_resourceUtilizationList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.ResourceUtilization attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.ResourceUtilization attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.ResourceUtilization attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.ResourceUtilization removeResourceUtilization(int index) {
        initResourceUtilization();
        return (com.sun.grid.jgdi.configuration.ResourceUtilization)m_resourceUtilizationList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.ResourceUtilization attribute.
     *  @param aresourceUtilization  the com.sun.grid.jgdi.configuration.ResourceUtilization attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.ResourceUtilization attribute has been removed
     */
    public boolean removeResourceUtilization(com.sun.grid.jgdi.configuration.ResourceUtilization aresourceUtilization) {
        initResourceUtilization();
        return m_resourceUtilizationList.remove(aresourceUtilization);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.ResourceUtilization attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.ResourceUtilization attributes
     */
    public List< com.sun.grid.jgdi.configuration.ResourceUtilization > getResourceUtilizationList() {
        initResourceUtilization();
        return Collections.unmodifiableList(m_resourceUtilizationList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.ResourceUtilization attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.ResourceUtilization attributes.
     */
    public int getResourceUtilizationCount() {
        if (m_resourceUtilizationList != null) {
            return m_resourceUtilizationList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.ResourceUtilization attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.ResourceUtilization attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.ResourceUtilization attribute
     */
    public com.sun.grid.jgdi.configuration.ResourceUtilization getResourceUtilization(int index) {
        initResourceUtilization();
        return (com.sun.grid.jgdi.configuration.ResourceUtilization)m_resourceUtilizationList.get(index);
    }
   
    /**
     *  Determine if the resourceUtilization attribute is set
     *  @return <code>true</code> if the resourceUtilization attribute is set
     */
    public boolean isSetResourceUtilization () {
        return (m_resourceUtilizationList != null) && (!m_resourceUtilizationList.isEmpty());
    }
   

    // Attribute messageList ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.QueueInstanceMessage > m_messageList;
   
    private void initMessage() {
        if (m_messageList == null) {
            m_messageList = new LinkedList< com.sun.grid.jgdi.configuration.QueueInstanceMessage >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.QueueInstanceMessage attribute.

     *   @param amessage  the new com.sun.grid.jgdi.configuration.QueueInstanceMessage attribute
     */
    public void addMessage(com.sun.grid.jgdi.configuration.QueueInstanceMessage amessage) {   
        initMessage();
        
        m_messageList.add(amessage);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.QueueInstanceMessage attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.QueueInstanceMessage attribute
     *   @param amessage  the new com.sun.grid.jgdi.configuration.QueueInstanceMessage attribute
     */
    public void setMessage(int index, com.sun.grid.jgdi.configuration.QueueInstanceMessage amessage) {
        initMessage();
        m_messageList.set(index, amessage);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.QueueInstanceMessage attributes.
     */
    public void removeAllMessage() {
        if (m_messageList != null) {
            m_messageList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.QueueInstanceMessage attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.QueueInstanceMessage attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.QueueInstanceMessage attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.QueueInstanceMessage removeMessage(int index) {
        initMessage();
        return (com.sun.grid.jgdi.configuration.QueueInstanceMessage)m_messageList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.QueueInstanceMessage attribute.
     *  @param amessage  the com.sun.grid.jgdi.configuration.QueueInstanceMessage attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.QueueInstanceMessage attribute has been removed
     */
    public boolean removeMessage(com.sun.grid.jgdi.configuration.QueueInstanceMessage amessage) {
        initMessage();
        return m_messageList.remove(amessage);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.QueueInstanceMessage attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.QueueInstanceMessage attributes
     */
    public List< com.sun.grid.jgdi.configuration.QueueInstanceMessage > getMessageList() {
        initMessage();
        return Collections.unmodifiableList(m_messageList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.QueueInstanceMessage attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.QueueInstanceMessage attributes.
     */
    public int getMessageCount() {
        if (m_messageList != null) {
            return m_messageList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.QueueInstanceMessage attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.QueueInstanceMessage attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.QueueInstanceMessage attribute
     */
    public com.sun.grid.jgdi.configuration.QueueInstanceMessage getMessage(int index) {
        initMessage();
        return (com.sun.grid.jgdi.configuration.QueueInstanceMessage)m_messageList.get(index);
    }
   
    /**
     *  Determine if the message attribute is set
     *  @return <code>true</code> if the message attribute is set
     */
    public boolean isSetMessage () {
        return (m_messageList != null) && (!m_messageList.isEmpty());
    }
   

    // Attribute gdiDoLater ------------------------------------------------

    private boolean isGdiDoLaterSet;
   
    /**
     *  Determine if the gdiDoLater attribute is set
     *  @return <code>true</code> if the gdiDoLater attribute is set
     */
    public boolean isSetGdiDoLater() {

        return isGdiDoLaterSet;

    }
   
    private int m_gdiDoLater;

    /**
     *   Set the gdiDoLater attribute.
     *
     *   @param aGdiDoLater  the new value for the  gdiDoLater attribute
     */
    public void setGdiDoLater(int aGdiDoLater) {   
        m_gdiDoLater = aGdiDoLater;

        isGdiDoLaterSet = true;

    }

    /**
     *  Get the value of the gdiDoLater attribute.
     *  @return the value of the gdiDoLater attribute
     */
    public int getGdiDoLater() {
        return m_gdiDoLater;
    }


    // Attribute stateChanges ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.CalendarQueueState > m_stateChangesList;
   
    private void initStateChanges() {
        if (m_stateChangesList == null) {
            m_stateChangesList = new LinkedList< com.sun.grid.jgdi.configuration.CalendarQueueState >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.CalendarQueueState attribute.

     *   @param astateChanges  the new com.sun.grid.jgdi.configuration.CalendarQueueState attribute
     */
    public void addStateChanges(com.sun.grid.jgdi.configuration.CalendarQueueState astateChanges) {   
        initStateChanges();
        
        m_stateChangesList.add(astateChanges);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.CalendarQueueState attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.CalendarQueueState attribute
     *   @param astateChanges  the new com.sun.grid.jgdi.configuration.CalendarQueueState attribute
     */
    public void setStateChanges(int index, com.sun.grid.jgdi.configuration.CalendarQueueState astateChanges) {
        initStateChanges();
        m_stateChangesList.set(index, astateChanges);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.CalendarQueueState attributes.
     */
    public void removeAllStateChanges() {
        if (m_stateChangesList != null) {
            m_stateChangesList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.CalendarQueueState attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.CalendarQueueState attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.CalendarQueueState attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.CalendarQueueState removeStateChanges(int index) {
        initStateChanges();
        return (com.sun.grid.jgdi.configuration.CalendarQueueState)m_stateChangesList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.CalendarQueueState attribute.
     *  @param astateChanges  the com.sun.grid.jgdi.configuration.CalendarQueueState attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.CalendarQueueState attribute has been removed
     */
    public boolean removeStateChanges(com.sun.grid.jgdi.configuration.CalendarQueueState astateChanges) {
        initStateChanges();
        return m_stateChangesList.remove(astateChanges);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.CalendarQueueState attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.CalendarQueueState attributes
     */
    public List< com.sun.grid.jgdi.configuration.CalendarQueueState > getStateChangesList() {
        initStateChanges();
        return Collections.unmodifiableList(m_stateChangesList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.CalendarQueueState attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.CalendarQueueState attributes.
     */
    public int getStateChangesCount() {
        if (m_stateChangesList != null) {
            return m_stateChangesList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.CalendarQueueState attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.CalendarQueueState attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.CalendarQueueState attribute
     */
    public com.sun.grid.jgdi.configuration.CalendarQueueState getStateChanges(int index) {
        initStateChanges();
        return (com.sun.grid.jgdi.configuration.CalendarQueueState)m_stateChangesList.get(index);
    }
   
    /**
     *  Determine if the stateChanges attribute is set
     *  @return <code>true</code> if the stateChanges attribute is set
     */
    public boolean isSetStateChanges () {
        return (m_stateChangesList != null) && (!m_stateChangesList.isEmpty());
    }
   



    /**
     *  Is the primary key information equal to the primary key information
     *  of <code>obj</code>.
     *
     *  @param obj   the compared object
     *  @return <code>true</code> if the primary key information is equal to the
     *          primary key informations of <code>obj</code>.
     */
    public boolean equals(Object obj) {

        return (obj instanceof QueueInstanceImpl && getFullName().equals(((com.sun.grid.jgdi.configuration.QueueInstance)obj).getFullName()));

    }

    
    
    public boolean equalsCompletely(Object obj) {
        Logger logger = Logger.getLogger(getClass().getName());
        if (obj instanceof  QueueInstanceImpl) {
            com.sun.grid.jgdi.configuration.QueueInstance obj1 = (com.sun.grid.jgdi.configuration.QueueInstance)obj;

            return true;
        } else {
            return true;
        }
    }
  
    public java.lang.String toString() {
        StringBuilder ret = new StringBuilder();
        ret.append("QueueInstanceImpl(");

        ret.append(getFullName());

        ret.append(")");
        return ret.toString();
    }



    public java.lang.String dump() {
        StringBuilder sb = new StringBuilder();

        return sb.toString();
    }    

 
}
