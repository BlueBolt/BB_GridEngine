/*___INFO__MARK_BEGIN__*/
/*************************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  the Sun Industry Standards Source License Version 1.2
 *
 *  Sun Microsystems Inc., March, 2001
 *
 *
 *  Sun Industry Standards Source License Version 1.2
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.2 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *   Copyright: 2001 by Sun Microsystems, Inc.
 *
 *   All Rights Reserved.
 *
 ************************************************************************/
/*___INFO__MARK_END__*/
/**
 *  Generated from javamodel_impl.jsp
 *  !!! DO NOT EDIT THIS FILE !!!
 */

package com.sun.grid.jgdi.configuration;

import javax.management.*;
import com.sun.grid.jgdi.configuration.GEObject;
import java.util.List;
import java.util.LinkedList;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.logging.Logger;
import java.util.logging.Level;

/**
 *  Java representation of the cull object JG_Type
 *  defined in sge_all_listsL.template
 *
 *  <p><strong>Warning:</strong>  The  JGImpl class will 
 *  not be compatible with future Sun&trade; Grid Engine releases.</p>
 */
public class JGImpl extends    GEObjectImpl implements JG {


   /**
    *  Create a new instance of JGImpl. The new instance
    *  will not be initialized with the default values.
    */
   public JGImpl() {
      this(false);
   }
   
   /**
    *   Create a new instanceof
    *   @param  initWithDefaultValues if <code>true</code> the new instance will
    *                                 be initialized with the default values as defined
    *                                 in the cull definition.
    */
   public JGImpl(boolean initWithDefaultValues) { 

      if (initWithDefaultValues) {     
    }

  } // end of default constructor
  
  // --- newInstance method with primary key field
  

   /**
    *  Create a new instance of JGImpl
    */
   public JGImpl(java.lang.String qname ) {

   
         setQname(qname);

    }



    // Attribute qname ------------------------------------------------
   
    /**
     *  Determine if the qname attribute is set
     *  @return <code>true</code> if the qname attribute is set
     */
    public boolean isSetQname() {
   
        return  (m_qname != null);

    }
   
    private java.lang.String m_qname;

    /**
     *   Set the qname attribute.
     *
     *   @param aQname  the new value for the  qname attribute
     */
    public void setQname(java.lang.String aQname) {   
        m_qname = aQname;

    }

    /**
     *  Get the value of the qname attribute.
     *  @return the value of the qname attribute
     */
    public java.lang.String getQname() {
        return m_qname;
    }


    // Attribute qhostname ------------------------------------------------
   
    /**
     *  Determine if the qhostname attribute is set
     *  @return <code>true</code> if the qhostname attribute is set
     */
    public boolean isSetQhostname() {
   
        return  (m_qhostname != null);

    }
   
    private java.lang.String m_qhostname;

    /**
     *   Set the qhostname attribute.
     *
     *   @param aQhostname  the new value for the  qhostname attribute
     */
    public void setQhostname(java.lang.String aQhostname) {   
        m_qhostname = aQhostname;

    }

    /**
     *  Get the value of the qhostname attribute.
     *  @return the value of the qhostname attribute
     */
    public java.lang.String getQhostname() {
        return m_qhostname;
    }


    // Attribute slots ------------------------------------------------

    private boolean isSlotsSet;
   
    /**
     *  Determine if the slots attribute is set
     *  @return <code>true</code> if the slots attribute is set
     */
    public boolean isSetSlots() {

        return isSlotsSet;

    }
   
    private int m_slots;

    /**
     *   Set the slots attribute.
     *
     *   @param aSlots  the new value for the  slots attribute
     */
    public void setSlots(int aSlots) {   
        m_slots = aSlots;

        isSlotsSet = true;

    }

    /**
     *  Get the value of the slots attribute.
     *  @return the value of the slots attribute
     */
    public int getSlots() {
        return m_slots;
    }




    /**
     *  Is the primary key information equal to the primary key information
     *  of <code>obj</code>.
     *
     *  @param obj   the compared object
     *  @return <code>true</code> if the primary key information is equal to the
     *          primary key informations of <code>obj</code>.
     */
    public boolean equals(Object obj) {

        return (obj instanceof JGImpl && getQname().equals(((com.sun.grid.jgdi.configuration.JG)obj).getQname()));

    }

    
    
    public boolean equalsCompletely(Object obj) {
        Logger logger = Logger.getLogger(getClass().getName());
        if (obj instanceof  JGImpl) {
            com.sun.grid.jgdi.configuration.JG obj1 = (com.sun.grid.jgdi.configuration.JG)obj;

            {
                java.lang.String value1 = getQname();
                java.lang.String value2 = obj1.getQname();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute JG_qname of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes JG_qname are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                java.lang.String value1 = getQhostname();
                java.lang.String value2 = obj1.getQhostname();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute JG_qhostname of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes JG_qhostname are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                int value1 = getSlots();
                int value2 = obj1.getSlots();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes JG_slots are not equal");
                }
                return false;
            }

            }

            return true;
        } else {
            return true;
        }
    }
  
    public java.lang.String toString() {
        StringBuilder ret = new StringBuilder();
        ret.append("JGImpl(");

        ret.append(getQname());

        ret.append(")");
        return ret.toString();
    }



    public java.lang.String dump() {
        StringBuilder sb = new StringBuilder();

            {
                java.lang.String value = getQname();
                sb.append("Qname = " + value + "\n");
            }

            {
                java.lang.String value = getQhostname();
                sb.append("Qhostname = " + value + "\n");
            }

            {
                int value = getSlots();
                sb.append("Slots = " + value + "\n");
            }

        return sb.toString();
    }    

 
}
