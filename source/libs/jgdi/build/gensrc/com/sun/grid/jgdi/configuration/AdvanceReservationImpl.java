/*___INFO__MARK_BEGIN__*/
/*************************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  the Sun Industry Standards Source License Version 1.2
 *
 *  Sun Microsystems Inc., March, 2001
 *
 *
 *  Sun Industry Standards Source License Version 1.2
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.2 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *   Copyright: 2001 by Sun Microsystems, Inc.
 *
 *   All Rights Reserved.
 *
 ************************************************************************/
/*___INFO__MARK_END__*/
/**
 *  Generated from javamodel_impl.jsp
 *  !!! DO NOT EDIT THIS FILE !!!
 */

package com.sun.grid.jgdi.configuration;

import javax.management.*;
import com.sun.grid.jgdi.configuration.GEObject;
import java.util.List;
import java.util.LinkedList;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.logging.Logger;
import java.util.logging.Level;

/**
 *  Java representation of the cull object AR_Type
 *  defined in sge_all_listsL.template
 *
 *  <p><strong>Warning:</strong>  The  AdvanceReservationImpl class will 
 *  not be compatible with future Sun&trade; Grid Engine releases.</p>
 */
public class AdvanceReservationImpl extends    GEObjectImpl implements AdvanceReservation {


   /**
    *  Create a new instance of AdvanceReservationImpl. The new instance
    *  will not be initialized with the default values.
    */
   public AdvanceReservationImpl() {
      this(false);
   }
   
   /**
    *   Create a new instanceof
    *   @param  initWithDefaultValues if <code>true</code> the new instance will
    *                                 be initialized with the default values as defined
    *                                 in the cull definition.
    */
   public AdvanceReservationImpl(boolean initWithDefaultValues) { 

      if (initWithDefaultValues) {     
    }

  } // end of default constructor
  
  // --- newInstance method with primary key field
  

   /**
    *  Create a new instance of AdvanceReservationImpl
    */
   public AdvanceReservationImpl(int id ) {

   
         setId(id);

    }



    // Attribute id ------------------------------------------------

    private boolean isIdSet;
   
    /**
     *  Determine if the id attribute is set
     *  @return <code>true</code> if the id attribute is set
     */
    public boolean isSetId() {

        return isIdSet;

    }
   
    private int m_id;

    /**
     *   Set the id attribute.
     *
     *   @param aId  the new value for the  id attribute
     */
    public void setId(int aId) {   
        m_id = aId;

        isIdSet = true;

    }

    /**
     *  Get the value of the id attribute.
     *  @return the value of the id attribute
     */
    public int getId() {
        return m_id;
    }


    // Attribute name ------------------------------------------------
   
    /**
     *  Determine if the name attribute is set
     *  @return <code>true</code> if the name attribute is set
     */
    public boolean isSetName() {
   
        return  (m_name != null);

    }
   
    private java.lang.String m_name;

    /**
     *   Set the name attribute.
     *
     *   @param aName  the new value for the  name attribute
     */
    public void setName(java.lang.String aName) {   
        m_name = aName;

    }

    /**
     *  Get the value of the name attribute.
     *  @return the value of the name attribute
     */
    public java.lang.String getName() {
        return m_name;
    }


    // Attribute account ------------------------------------------------
   
    /**
     *  Determine if the account attribute is set
     *  @return <code>true</code> if the account attribute is set
     */
    public boolean isSetAccount() {
   
        return  (m_account != null);

    }
   
    private java.lang.String m_account;

    /**
     *   Set the account attribute.
     *
     *   @param aAccount  the new value for the  account attribute
     */
    public void setAccount(java.lang.String aAccount) {   
        m_account = aAccount;

    }

    /**
     *  Get the value of the account attribute.
     *  @return the value of the account attribute
     */
    public java.lang.String getAccount() {
        return m_account;
    }


    // Attribute owner ------------------------------------------------
   
    /**
     *  Determine if the owner attribute is set
     *  @return <code>true</code> if the owner attribute is set
     */
    public boolean isSetOwner() {
   
        return  (m_owner != null);

    }
   
    private java.lang.String m_owner;

    /**
     *   Set the owner attribute.
     *
     *   @param aOwner  the new value for the  owner attribute
     */
    public void setOwner(java.lang.String aOwner) {   
        m_owner = aOwner;

    }

    /**
     *  Get the value of the owner attribute.
     *  @return the value of the owner attribute
     */
    public java.lang.String getOwner() {
        return m_owner;
    }


    // Attribute group ------------------------------------------------
   
    /**
     *  Determine if the group attribute is set
     *  @return <code>true</code> if the group attribute is set
     */
    public boolean isSetGroup() {
   
        return  (m_group != null);

    }
   
    private java.lang.String m_group;

    /**
     *   Set the group attribute.
     *
     *   @param aGroup  the new value for the  group attribute
     */
    public void setGroup(java.lang.String aGroup) {   
        m_group = aGroup;

    }

    /**
     *  Get the value of the group attribute.
     *  @return the value of the group attribute
     */
    public java.lang.String getGroup() {
        return m_group;
    }


    // Attribute submissionTime ------------------------------------------------

    private boolean isSubmissionTimeSet;
   
    /**
     *  Determine if the submissionTime attribute is set
     *  @return <code>true</code> if the submissionTime attribute is set
     */
    public boolean isSetSubmissionTime() {

        return isSubmissionTimeSet;

    }
   
    private int m_submissionTime;

    /**
     *   Set the submissionTime attribute.
     *
     *   @param aSubmissionTime  the new value for the  submissionTime attribute
     */
    public void setSubmissionTime(int aSubmissionTime) {   
        m_submissionTime = aSubmissionTime;

        isSubmissionTimeSet = true;

    }

    /**
     *  Get the value of the submissionTime attribute.
     *  @return the value of the submissionTime attribute
     */
    public int getSubmissionTime() {
        return m_submissionTime;
    }


    // Attribute startTime ------------------------------------------------

    private boolean isStartTimeSet;
   
    /**
     *  Determine if the startTime attribute is set
     *  @return <code>true</code> if the startTime attribute is set
     */
    public boolean isSetStartTime() {

        return isStartTimeSet;

    }
   
    private int m_startTime;

    /**
     *   Set the startTime attribute.
     *
     *   @param aStartTime  the new value for the  startTime attribute
     */
    public void setStartTime(int aStartTime) {   
        m_startTime = aStartTime;

        isStartTimeSet = true;

    }

    /**
     *  Get the value of the startTime attribute.
     *  @return the value of the startTime attribute
     */
    public int getStartTime() {
        return m_startTime;
    }


    // Attribute endTime ------------------------------------------------

    private boolean isEndTimeSet;
   
    /**
     *  Determine if the endTime attribute is set
     *  @return <code>true</code> if the endTime attribute is set
     */
    public boolean isSetEndTime() {

        return isEndTimeSet;

    }
   
    private int m_endTime;

    /**
     *   Set the endTime attribute.
     *
     *   @param aEndTime  the new value for the  endTime attribute
     */
    public void setEndTime(int aEndTime) {   
        m_endTime = aEndTime;

        isEndTimeSet = true;

    }

    /**
     *  Get the value of the endTime attribute.
     *  @return the value of the endTime attribute
     */
    public int getEndTime() {
        return m_endTime;
    }


    // Attribute duration ------------------------------------------------

    private boolean isDurationSet;
   
    /**
     *  Determine if the duration attribute is set
     *  @return <code>true</code> if the duration attribute is set
     */
    public boolean isSetDuration() {

        return isDurationSet;

    }
   
    private int m_duration;

    /**
     *   Set the duration attribute.
     *
     *   @param aDuration  the new value for the  duration attribute
     */
    public void setDuration(int aDuration) {   
        m_duration = aDuration;

        isDurationSet = true;

    }

    /**
     *  Get the value of the duration attribute.
     *  @return the value of the duration attribute
     */
    public int getDuration() {
        return m_duration;
    }


    // Attribute verify ------------------------------------------------

    private boolean isVerifySet;
   
    /**
     *  Determine if the verify attribute is set
     *  @return <code>true</code> if the verify attribute is set
     */
    public boolean isSetVerify() {

        return isVerifySet;

    }
   
    private int m_verify;

    /**
     *   Set the verify attribute.
     *
     *   @param aVerify  the new value for the  verify attribute
     */
    public void setVerify(int aVerify) {   
        m_verify = aVerify;

        isVerifySet = true;

    }

    /**
     *  Get the value of the verify attribute.
     *  @return the value of the verify attribute
     */
    public int getVerify() {
        return m_verify;
    }


    // Attribute errorHandling ------------------------------------------------

    private boolean isErrorHandlingSet;
   
    /**
     *  Determine if the errorHandling attribute is set
     *  @return <code>true</code> if the errorHandling attribute is set
     */
    public boolean isSetErrorHandling() {

        return isErrorHandlingSet;

    }
   
    private int m_errorHandling;

    /**
     *   Set the errorHandling attribute.
     *
     *   @param aErrorHandling  the new value for the  errorHandling attribute
     */
    public void setErrorHandling(int aErrorHandling) {   
        m_errorHandling = aErrorHandling;

        isErrorHandlingSet = true;

    }

    /**
     *  Get the value of the errorHandling attribute.
     *  @return the value of the errorHandling attribute
     */
    public int getErrorHandling() {
        return m_errorHandling;
    }


    // Attribute state ------------------------------------------------

    private boolean isStateSet;
   
    /**
     *  Determine if the state attribute is set
     *  @return <code>true</code> if the state attribute is set
     */
    public boolean isSetState() {

        return isStateSet;

    }
   
    private int m_state;

    /**
     *   Set the state attribute.
     *
     *   @param aState  the new value for the  state attribute
     */
    public void setState(int aState) {   
        m_state = aState;

        isStateSet = true;

    }

    /**
     *  Get the value of the state attribute.
     *  @return the value of the state attribute
     */
    public int getState() {
        return m_state;
    }


    // Attribute checkpointName ------------------------------------------------
   
    /**
     *  Determine if the checkpointName attribute is set
     *  @return <code>true</code> if the checkpointName attribute is set
     */
    public boolean isSetCheckpointName() {
   
        return  (m_checkpointName != null);

    }
   
    private java.lang.String m_checkpointName;

    /**
     *   Set the checkpointName attribute.
     *
     *   @param aCheckpointName  the new value for the  checkpointName attribute
     */
    public void setCheckpointName(java.lang.String aCheckpointName) {   
        m_checkpointName = aCheckpointName;

    }

    /**
     *  Get the value of the checkpointName attribute.
     *  @return the value of the checkpointName attribute
     */
    public java.lang.String getCheckpointName() {
        return m_checkpointName;
    }


    // Attribute resourceList ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.ComplexEntry > m_resourceList;
   
    private void initResource() {
        if (m_resourceList == null) {
            m_resourceList = new LinkedList< com.sun.grid.jgdi.configuration.ComplexEntry >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.ComplexEntry attribute.

     *   @param aresource  the new com.sun.grid.jgdi.configuration.ComplexEntry attribute
     */
    public void addResource(com.sun.grid.jgdi.configuration.ComplexEntry aresource) {   
        initResource();
        
        m_resourceList.add(aresource);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.ComplexEntry attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.ComplexEntry attribute
     *   @param aresource  the new com.sun.grid.jgdi.configuration.ComplexEntry attribute
     */
    public void setResource(int index, com.sun.grid.jgdi.configuration.ComplexEntry aresource) {
        initResource();
        m_resourceList.set(index, aresource);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.ComplexEntry attributes.
     */
    public void removeAllResource() {
        if (m_resourceList != null) {
            m_resourceList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.ComplexEntry attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.ComplexEntry attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.ComplexEntry attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.ComplexEntry removeResource(int index) {
        initResource();
        return (com.sun.grid.jgdi.configuration.ComplexEntry)m_resourceList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.ComplexEntry attribute.
     *  @param aresource  the com.sun.grid.jgdi.configuration.ComplexEntry attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.ComplexEntry attribute has been removed
     */
    public boolean removeResource(com.sun.grid.jgdi.configuration.ComplexEntry aresource) {
        initResource();
        return m_resourceList.remove(aresource);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.ComplexEntry attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.ComplexEntry attributes
     */
    public List< com.sun.grid.jgdi.configuration.ComplexEntry > getResourceList() {
        initResource();
        return Collections.unmodifiableList(m_resourceList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.ComplexEntry attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.ComplexEntry attributes.
     */
    public int getResourceCount() {
        if (m_resourceList != null) {
            return m_resourceList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.ComplexEntry attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.ComplexEntry attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.ComplexEntry attribute
     */
    public com.sun.grid.jgdi.configuration.ComplexEntry getResource(int index) {
        initResource();
        return (com.sun.grid.jgdi.configuration.ComplexEntry)m_resourceList.get(index);
    }
   
    /**
     *  Determine if the resource attribute is set
     *  @return <code>true</code> if the resource attribute is set
     */
    public boolean isSetResource () {
        return (m_resourceList != null) && (!m_resourceList.isEmpty());
    }
   

    // Attribute resourceUtilization ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.ResourceUtilization > m_resourceUtilizationList;
   
    private void initResourceUtilization() {
        if (m_resourceUtilizationList == null) {
            m_resourceUtilizationList = new LinkedList< com.sun.grid.jgdi.configuration.ResourceUtilization >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.ResourceUtilization attribute.

     *   @param aresourceUtilization  the new com.sun.grid.jgdi.configuration.ResourceUtilization attribute
     */
    public void addResourceUtilization(com.sun.grid.jgdi.configuration.ResourceUtilization aresourceUtilization) {   
        initResourceUtilization();
        
        m_resourceUtilizationList.add(aresourceUtilization);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.ResourceUtilization attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.ResourceUtilization attribute
     *   @param aresourceUtilization  the new com.sun.grid.jgdi.configuration.ResourceUtilization attribute
     */
    public void setResourceUtilization(int index, com.sun.grid.jgdi.configuration.ResourceUtilization aresourceUtilization) {
        initResourceUtilization();
        m_resourceUtilizationList.set(index, aresourceUtilization);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.ResourceUtilization attributes.
     */
    public void removeAllResourceUtilization() {
        if (m_resourceUtilizationList != null) {
            m_resourceUtilizationList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.ResourceUtilization attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.ResourceUtilization attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.ResourceUtilization attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.ResourceUtilization removeResourceUtilization(int index) {
        initResourceUtilization();
        return (com.sun.grid.jgdi.configuration.ResourceUtilization)m_resourceUtilizationList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.ResourceUtilization attribute.
     *  @param aresourceUtilization  the com.sun.grid.jgdi.configuration.ResourceUtilization attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.ResourceUtilization attribute has been removed
     */
    public boolean removeResourceUtilization(com.sun.grid.jgdi.configuration.ResourceUtilization aresourceUtilization) {
        initResourceUtilization();
        return m_resourceUtilizationList.remove(aresourceUtilization);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.ResourceUtilization attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.ResourceUtilization attributes
     */
    public List< com.sun.grid.jgdi.configuration.ResourceUtilization > getResourceUtilizationList() {
        initResourceUtilization();
        return Collections.unmodifiableList(m_resourceUtilizationList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.ResourceUtilization attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.ResourceUtilization attributes.
     */
    public int getResourceUtilizationCount() {
        if (m_resourceUtilizationList != null) {
            return m_resourceUtilizationList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.ResourceUtilization attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.ResourceUtilization attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.ResourceUtilization attribute
     */
    public com.sun.grid.jgdi.configuration.ResourceUtilization getResourceUtilization(int index) {
        initResourceUtilization();
        return (com.sun.grid.jgdi.configuration.ResourceUtilization)m_resourceUtilizationList.get(index);
    }
   
    /**
     *  Determine if the resourceUtilization attribute is set
     *  @return <code>true</code> if the resourceUtilization attribute is set
     */
    public boolean isSetResourceUtilization () {
        return (m_resourceUtilizationList != null) && (!m_resourceUtilizationList.isEmpty());
    }
   

    // Attribute queueList ------------------------------------------------

    private List< java.lang.String > m_queueList;
   
    private void initQueue() {
        if (m_queueList == null) {
            m_queueList = new LinkedList< java.lang.String >();
        }
    }

    /**
     *   Add a java.lang.String attribute.

     *   @param aqueue  the new java.lang.String attribute
     */
    public void addQueue(java.lang.String aqueue) {   
        initQueue();
        
        m_queueList.add(aqueue);
        
    }
   
   
    /**
     *   Set a java.lang.String attribute.
     *   @param index   index of the java.lang.String attribute
     *   @param aqueue  the new java.lang.String attribute
     */
    public void setQueue(int index, java.lang.String aqueue) {
        initQueue();
        m_queueList.set(index, aqueue);
    }

    /**
     *  Remove all java.lang.String attributes.
     */
    public void removeAllQueue() {
        if (m_queueList != null) {
            m_queueList.clear();
        }
    }

    /**
     *  Remote a java.lang.String attribute at an index.
     *  @param index  the index of the java.lang.String attribute which should be
     *                removed
     *  @return the removed java.lang.String attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public java.lang.String removeQueue(int index) {
        initQueue();
        return (java.lang.String)m_queueList.remove(index);
    }

    /**
     *  Remote a specific java.lang.String attribute.
     *  @param aqueue  the java.lang.String attribute which should be
     *                         removed
     *  @return <code>true</code> if the java.lang.String attribute has been removed
     */
    public boolean removeQueue(java.lang.String aqueue) {
        initQueue();
        return m_queueList.remove(aqueue);
    }
   
    /**
     *   Get a unmodifiable list of all java.lang.String attributes.
     *
     *   @return Unmodifiable list with all java.lang.String attributes
     */
    public List< java.lang.String > getQueueList() {
        initQueue();
        return Collections.unmodifiableList(m_queueList);
    }

    /**
     *  Get the number of java.lang.String attributes.
     *
     *  @return The number of java.lang.String attributes.
     */
    public int getQueueCount() {
        if (m_queueList != null) {
            return m_queueList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a java.lang.String attribute at an index.
     *  @param index  the index of the java.lang.String attribute which should be
     *                removed
     *  @return the java.lang.String attribute
     */
    public java.lang.String getQueue(int index) {
        initQueue();
        return (java.lang.String)m_queueList.get(index);
    }
   
    /**
     *  Determine if the queue attribute is set
     *  @return <code>true</code> if the queue attribute is set
     */
    public boolean isSetQueue () {
        return (m_queueList != null) && (!m_queueList.isEmpty());
    }
   

    // Attribute grantedSlots ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.JG > m_grantedSlotsList;
   
    private void initGrantedSlots() {
        if (m_grantedSlotsList == null) {
            m_grantedSlotsList = new LinkedList< com.sun.grid.jgdi.configuration.JG >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.JG attribute.

     *   @param agrantedSlots  the new com.sun.grid.jgdi.configuration.JG attribute
     */
    public void addGrantedSlots(com.sun.grid.jgdi.configuration.JG agrantedSlots) {   
        initGrantedSlots();
        
        m_grantedSlotsList.add(agrantedSlots);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.JG attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.JG attribute
     *   @param agrantedSlots  the new com.sun.grid.jgdi.configuration.JG attribute
     */
    public void setGrantedSlots(int index, com.sun.grid.jgdi.configuration.JG agrantedSlots) {
        initGrantedSlots();
        m_grantedSlotsList.set(index, agrantedSlots);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.JG attributes.
     */
    public void removeAllGrantedSlots() {
        if (m_grantedSlotsList != null) {
            m_grantedSlotsList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.JG attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.JG attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.JG attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.JG removeGrantedSlots(int index) {
        initGrantedSlots();
        return (com.sun.grid.jgdi.configuration.JG)m_grantedSlotsList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.JG attribute.
     *  @param agrantedSlots  the com.sun.grid.jgdi.configuration.JG attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.JG attribute has been removed
     */
    public boolean removeGrantedSlots(com.sun.grid.jgdi.configuration.JG agrantedSlots) {
        initGrantedSlots();
        return m_grantedSlotsList.remove(agrantedSlots);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.JG attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.JG attributes
     */
    public List< com.sun.grid.jgdi.configuration.JG > getGrantedSlotsList() {
        initGrantedSlots();
        return Collections.unmodifiableList(m_grantedSlotsList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.JG attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.JG attributes.
     */
    public int getGrantedSlotsCount() {
        if (m_grantedSlotsList != null) {
            return m_grantedSlotsList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.JG attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.JG attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.JG attribute
     */
    public com.sun.grid.jgdi.configuration.JG getGrantedSlots(int index) {
        initGrantedSlots();
        return (com.sun.grid.jgdi.configuration.JG)m_grantedSlotsList.get(index);
    }
   
    /**
     *  Determine if the grantedSlots attribute is set
     *  @return <code>true</code> if the grantedSlots attribute is set
     */
    public boolean isSetGrantedSlots () {
        return (m_grantedSlotsList != null) && (!m_grantedSlotsList.isEmpty());
    }
   

    // Attribute reservedQueues ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.QueueInstance > m_reservedQueuesList;
   
    private void initReservedQueues() {
        if (m_reservedQueuesList == null) {
            m_reservedQueuesList = new LinkedList< com.sun.grid.jgdi.configuration.QueueInstance >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.QueueInstance attribute.

     *   @param areservedQueues  the new com.sun.grid.jgdi.configuration.QueueInstance attribute
     */
    public void addReservedQueues(com.sun.grid.jgdi.configuration.QueueInstance areservedQueues) {   
        initReservedQueues();
        
        m_reservedQueuesList.add(areservedQueues);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.QueueInstance attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.QueueInstance attribute
     *   @param areservedQueues  the new com.sun.grid.jgdi.configuration.QueueInstance attribute
     */
    public void setReservedQueues(int index, com.sun.grid.jgdi.configuration.QueueInstance areservedQueues) {
        initReservedQueues();
        m_reservedQueuesList.set(index, areservedQueues);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.QueueInstance attributes.
     */
    public void removeAllReservedQueues() {
        if (m_reservedQueuesList != null) {
            m_reservedQueuesList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.QueueInstance attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.QueueInstance attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.QueueInstance attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.QueueInstance removeReservedQueues(int index) {
        initReservedQueues();
        return (com.sun.grid.jgdi.configuration.QueueInstance)m_reservedQueuesList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.QueueInstance attribute.
     *  @param areservedQueues  the com.sun.grid.jgdi.configuration.QueueInstance attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.QueueInstance attribute has been removed
     */
    public boolean removeReservedQueues(com.sun.grid.jgdi.configuration.QueueInstance areservedQueues) {
        initReservedQueues();
        return m_reservedQueuesList.remove(areservedQueues);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.QueueInstance attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.QueueInstance attributes
     */
    public List< com.sun.grid.jgdi.configuration.QueueInstance > getReservedQueuesList() {
        initReservedQueues();
        return Collections.unmodifiableList(m_reservedQueuesList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.QueueInstance attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.QueueInstance attributes.
     */
    public int getReservedQueuesCount() {
        if (m_reservedQueuesList != null) {
            return m_reservedQueuesList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.QueueInstance attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.QueueInstance attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.QueueInstance attribute
     */
    public com.sun.grid.jgdi.configuration.QueueInstance getReservedQueues(int index) {
        initReservedQueues();
        return (com.sun.grid.jgdi.configuration.QueueInstance)m_reservedQueuesList.get(index);
    }
   
    /**
     *  Determine if the reservedQueues attribute is set
     *  @return <code>true</code> if the reservedQueues attribute is set
     */
    public boolean isSetReservedQueues () {
        return (m_reservedQueuesList != null) && (!m_reservedQueuesList.isEmpty());
    }
   

    // Attribute mailOptions ------------------------------------------------

    private boolean isMailOptionsSet;
   
    /**
     *  Determine if the mailOptions attribute is set
     *  @return <code>true</code> if the mailOptions attribute is set
     */
    public boolean isSetMailOptions() {

        return isMailOptionsSet;

    }
   
    private int m_mailOptions;

    /**
     *   Set the mailOptions attribute.
     *
     *   @param aMailOptions  the new value for the  mailOptions attribute
     */
    public void setMailOptions(int aMailOptions) {   
        m_mailOptions = aMailOptions;

        isMailOptionsSet = true;

    }

    /**
     *  Get the value of the mailOptions attribute.
     *  @return the value of the mailOptions attribute
     */
    public int getMailOptions() {
        return m_mailOptions;
    }


    // Attribute mailList ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.MailReceiver > m_mailList;
   
    private void initMail() {
        if (m_mailList == null) {
            m_mailList = new LinkedList< com.sun.grid.jgdi.configuration.MailReceiver >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.MailReceiver attribute.

     *   @param amail  the new com.sun.grid.jgdi.configuration.MailReceiver attribute
     */
    public void addMail(com.sun.grid.jgdi.configuration.MailReceiver amail) {   
        initMail();
        
        m_mailList.add(amail);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.MailReceiver attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.MailReceiver attribute
     *   @param amail  the new com.sun.grid.jgdi.configuration.MailReceiver attribute
     */
    public void setMail(int index, com.sun.grid.jgdi.configuration.MailReceiver amail) {
        initMail();
        m_mailList.set(index, amail);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.MailReceiver attributes.
     */
    public void removeAllMail() {
        if (m_mailList != null) {
            m_mailList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.MailReceiver attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.MailReceiver attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.MailReceiver attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.MailReceiver removeMail(int index) {
        initMail();
        return (com.sun.grid.jgdi.configuration.MailReceiver)m_mailList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.MailReceiver attribute.
     *  @param amail  the com.sun.grid.jgdi.configuration.MailReceiver attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.MailReceiver attribute has been removed
     */
    public boolean removeMail(com.sun.grid.jgdi.configuration.MailReceiver amail) {
        initMail();
        return m_mailList.remove(amail);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.MailReceiver attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.MailReceiver attributes
     */
    public List< com.sun.grid.jgdi.configuration.MailReceiver > getMailList() {
        initMail();
        return Collections.unmodifiableList(m_mailList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.MailReceiver attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.MailReceiver attributes.
     */
    public int getMailCount() {
        if (m_mailList != null) {
            return m_mailList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.MailReceiver attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.MailReceiver attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.MailReceiver attribute
     */
    public com.sun.grid.jgdi.configuration.MailReceiver getMail(int index) {
        initMail();
        return (com.sun.grid.jgdi.configuration.MailReceiver)m_mailList.get(index);
    }
   
    /**
     *  Determine if the mail attribute is set
     *  @return <code>true</code> if the mail attribute is set
     */
    public boolean isSetMail () {
        return (m_mailList != null) && (!m_mailList.isEmpty());
    }
   

    // Attribute pe ------------------------------------------------
   
    /**
     *  Determine if the pe attribute is set
     *  @return <code>true</code> if the pe attribute is set
     */
    public boolean isSetPe() {
   
        return  (m_pe != null);

    }
   
    private java.lang.String m_pe;

    /**
     *   Set the pe attribute.
     *
     *   @param aPe  the new value for the  pe attribute
     */
    public void setPe(java.lang.String aPe) {   
        m_pe = aPe;

    }

    /**
     *  Get the value of the pe attribute.
     *  @return the value of the pe attribute
     */
    public java.lang.String getPe() {
        return m_pe;
    }


    // Attribute peRange ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.Range > m_peRangeList;
   
    private void initPeRange() {
        if (m_peRangeList == null) {
            m_peRangeList = new LinkedList< com.sun.grid.jgdi.configuration.Range >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.Range attribute.

     *   @param apeRange  the new com.sun.grid.jgdi.configuration.Range attribute
     */
    public void addPeRange(com.sun.grid.jgdi.configuration.Range apeRange) {   
        initPeRange();
        
        m_peRangeList.add(apeRange);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.Range attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.Range attribute
     *   @param apeRange  the new com.sun.grid.jgdi.configuration.Range attribute
     */
    public void setPeRange(int index, com.sun.grid.jgdi.configuration.Range apeRange) {
        initPeRange();
        m_peRangeList.set(index, apeRange);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.Range attributes.
     */
    public void removeAllPeRange() {
        if (m_peRangeList != null) {
            m_peRangeList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.Range attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.Range attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.Range attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.Range removePeRange(int index) {
        initPeRange();
        return (com.sun.grid.jgdi.configuration.Range)m_peRangeList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.Range attribute.
     *  @param apeRange  the com.sun.grid.jgdi.configuration.Range attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.Range attribute has been removed
     */
    public boolean removePeRange(com.sun.grid.jgdi.configuration.Range apeRange) {
        initPeRange();
        return m_peRangeList.remove(apeRange);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.Range attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.Range attributes
     */
    public List< com.sun.grid.jgdi.configuration.Range > getPeRangeList() {
        initPeRange();
        return Collections.unmodifiableList(m_peRangeList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.Range attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.Range attributes.
     */
    public int getPeRangeCount() {
        if (m_peRangeList != null) {
            return m_peRangeList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.Range attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.Range attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.Range attribute
     */
    public com.sun.grid.jgdi.configuration.Range getPeRange(int index) {
        initPeRange();
        return (com.sun.grid.jgdi.configuration.Range)m_peRangeList.get(index);
    }
   
    /**
     *  Determine if the peRange attribute is set
     *  @return <code>true</code> if the peRange attribute is set
     */
    public boolean isSetPeRange () {
        return (m_peRangeList != null) && (!m_peRangeList.isEmpty());
    }
   

    // Attribute grantedPe ------------------------------------------------
   
    /**
     *  Determine if the grantedPe attribute is set
     *  @return <code>true</code> if the grantedPe attribute is set
     */
    public boolean isSetGrantedPe() {
   
        return  (m_grantedPe != null);

    }
   
    private java.lang.String m_grantedPe;

    /**
     *   Set the grantedPe attribute.
     *
     *   @param aGrantedPe  the new value for the  grantedPe attribute
     */
    public void setGrantedPe(java.lang.String aGrantedPe) {   
        m_grantedPe = aGrantedPe;

    }

    /**
     *  Get the value of the grantedPe attribute.
     *  @return the value of the grantedPe attribute
     */
    public java.lang.String getGrantedPe() {
        return m_grantedPe;
    }


    // Attribute masterQueueList ------------------------------------------------

    private List< java.lang.String > m_masterQueueList;
   
    private void initMasterQueue() {
        if (m_masterQueueList == null) {
            m_masterQueueList = new LinkedList< java.lang.String >();
        }
    }

    /**
     *   Add a java.lang.String attribute.

     *   @param amasterQueue  the new java.lang.String attribute
     */
    public void addMasterQueue(java.lang.String amasterQueue) {   
        initMasterQueue();
        
        m_masterQueueList.add(amasterQueue);
        
    }
   
   
    /**
     *   Set a java.lang.String attribute.
     *   @param index   index of the java.lang.String attribute
     *   @param amasterQueue  the new java.lang.String attribute
     */
    public void setMasterQueue(int index, java.lang.String amasterQueue) {
        initMasterQueue();
        m_masterQueueList.set(index, amasterQueue);
    }

    /**
     *  Remove all java.lang.String attributes.
     */
    public void removeAllMasterQueue() {
        if (m_masterQueueList != null) {
            m_masterQueueList.clear();
        }
    }

    /**
     *  Remote a java.lang.String attribute at an index.
     *  @param index  the index of the java.lang.String attribute which should be
     *                removed
     *  @return the removed java.lang.String attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public java.lang.String removeMasterQueue(int index) {
        initMasterQueue();
        return (java.lang.String)m_masterQueueList.remove(index);
    }

    /**
     *  Remote a specific java.lang.String attribute.
     *  @param amasterQueue  the java.lang.String attribute which should be
     *                         removed
     *  @return <code>true</code> if the java.lang.String attribute has been removed
     */
    public boolean removeMasterQueue(java.lang.String amasterQueue) {
        initMasterQueue();
        return m_masterQueueList.remove(amasterQueue);
    }
   
    /**
     *   Get a unmodifiable list of all java.lang.String attributes.
     *
     *   @return Unmodifiable list with all java.lang.String attributes
     */
    public List< java.lang.String > getMasterQueueList() {
        initMasterQueue();
        return Collections.unmodifiableList(m_masterQueueList);
    }

    /**
     *  Get the number of java.lang.String attributes.
     *
     *  @return The number of java.lang.String attributes.
     */
    public int getMasterQueueCount() {
        if (m_masterQueueList != null) {
            return m_masterQueueList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a java.lang.String attribute at an index.
     *  @param index  the index of the java.lang.String attribute which should be
     *                removed
     *  @return the java.lang.String attribute
     */
    public java.lang.String getMasterQueue(int index) {
        initMasterQueue();
        return (java.lang.String)m_masterQueueList.get(index);
    }
   
    /**
     *  Determine if the masterQueue attribute is set
     *  @return <code>true</code> if the masterQueue attribute is set
     */
    public boolean isSetMasterQueue () {
        return (m_masterQueueList != null) && (!m_masterQueueList.isEmpty());
    }
   

    // Attribute aclList ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.ARA > m_aclList;
   
    private void initAcl() {
        if (m_aclList == null) {
            m_aclList = new LinkedList< com.sun.grid.jgdi.configuration.ARA >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.ARA attribute.

     *   @param aacl  the new com.sun.grid.jgdi.configuration.ARA attribute
     */
    public void addAcl(com.sun.grid.jgdi.configuration.ARA aacl) {   
        initAcl();
        
        m_aclList.add(aacl);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.ARA attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.ARA attribute
     *   @param aacl  the new com.sun.grid.jgdi.configuration.ARA attribute
     */
    public void setAcl(int index, com.sun.grid.jgdi.configuration.ARA aacl) {
        initAcl();
        m_aclList.set(index, aacl);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.ARA attributes.
     */
    public void removeAllAcl() {
        if (m_aclList != null) {
            m_aclList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.ARA attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.ARA attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.ARA attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.ARA removeAcl(int index) {
        initAcl();
        return (com.sun.grid.jgdi.configuration.ARA)m_aclList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.ARA attribute.
     *  @param aacl  the com.sun.grid.jgdi.configuration.ARA attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.ARA attribute has been removed
     */
    public boolean removeAcl(com.sun.grid.jgdi.configuration.ARA aacl) {
        initAcl();
        return m_aclList.remove(aacl);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.ARA attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.ARA attributes
     */
    public List< com.sun.grid.jgdi.configuration.ARA > getAclList() {
        initAcl();
        return Collections.unmodifiableList(m_aclList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.ARA attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.ARA attributes.
     */
    public int getAclCount() {
        if (m_aclList != null) {
            return m_aclList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.ARA attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.ARA attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.ARA attribute
     */
    public com.sun.grid.jgdi.configuration.ARA getAcl(int index) {
        initAcl();
        return (com.sun.grid.jgdi.configuration.ARA)m_aclList.get(index);
    }
   
    /**
     *  Determine if the acl attribute is set
     *  @return <code>true</code> if the acl attribute is set
     */
    public boolean isSetAcl () {
        return (m_aclList != null) && (!m_aclList.isEmpty());
    }
   

    // Attribute xaclList ------------------------------------------------

    private List< com.sun.grid.jgdi.configuration.ARA > m_xaclList;
   
    private void initXacl() {
        if (m_xaclList == null) {
            m_xaclList = new LinkedList< com.sun.grid.jgdi.configuration.ARA >();
        }
    }

    /**
     *   Add a com.sun.grid.jgdi.configuration.ARA attribute.

     *   @param axacl  the new com.sun.grid.jgdi.configuration.ARA attribute
     */
    public void addXacl(com.sun.grid.jgdi.configuration.ARA axacl) {   
        initXacl();
        
        m_xaclList.add(axacl);
        
    }
   
   
    /**
     *   Set a com.sun.grid.jgdi.configuration.ARA attribute.
     *   @param index   index of the com.sun.grid.jgdi.configuration.ARA attribute
     *   @param axacl  the new com.sun.grid.jgdi.configuration.ARA attribute
     */
    public void setXacl(int index, com.sun.grid.jgdi.configuration.ARA axacl) {
        initXacl();
        m_xaclList.set(index, axacl);
    }

    /**
     *  Remove all com.sun.grid.jgdi.configuration.ARA attributes.
     */
    public void removeAllXacl() {
        if (m_xaclList != null) {
            m_xaclList.clear();
        }
    }

    /**
     *  Remote a com.sun.grid.jgdi.configuration.ARA attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.ARA attribute which should be
     *                removed
     *  @return the removed com.sun.grid.jgdi.configuration.ARA attribute or <code>null</code> if
     *          no attribute at this index is stored
     */
    public com.sun.grid.jgdi.configuration.ARA removeXacl(int index) {
        initXacl();
        return (com.sun.grid.jgdi.configuration.ARA)m_xaclList.remove(index);
    }

    /**
     *  Remote a specific com.sun.grid.jgdi.configuration.ARA attribute.
     *  @param axacl  the com.sun.grid.jgdi.configuration.ARA attribute which should be
     *                         removed
     *  @return <code>true</code> if the com.sun.grid.jgdi.configuration.ARA attribute has been removed
     */
    public boolean removeXacl(com.sun.grid.jgdi.configuration.ARA axacl) {
        initXacl();
        return m_xaclList.remove(axacl);
    }
   
    /**
     *   Get a unmodifiable list of all com.sun.grid.jgdi.configuration.ARA attributes.
     *
     *   @return Unmodifiable list with all com.sun.grid.jgdi.configuration.ARA attributes
     */
    public List< com.sun.grid.jgdi.configuration.ARA > getXaclList() {
        initXacl();
        return Collections.unmodifiableList(m_xaclList);
    }

    /**
     *  Get the number of com.sun.grid.jgdi.configuration.ARA attributes.
     *
     *  @return The number of com.sun.grid.jgdi.configuration.ARA attributes.
     */
    public int getXaclCount() {
        if (m_xaclList != null) {
            return m_xaclList.size();
        } else {
            return 0;
        }
    }
 
    /**
     *  Get a com.sun.grid.jgdi.configuration.ARA attribute at an index.
     *  @param index  the index of the com.sun.grid.jgdi.configuration.ARA attribute which should be
     *                removed
     *  @return the com.sun.grid.jgdi.configuration.ARA attribute
     */
    public com.sun.grid.jgdi.configuration.ARA getXacl(int index) {
        initXacl();
        return (com.sun.grid.jgdi.configuration.ARA)m_xaclList.get(index);
    }
   
    /**
     *  Determine if the xacl attribute is set
     *  @return <code>true</code> if the xacl attribute is set
     */
    public boolean isSetXacl () {
        return (m_xaclList != null) && (!m_xaclList.isEmpty());
    }
   

    // Attribute type ------------------------------------------------

    private boolean isTypeSet;
   
    /**
     *  Determine if the type attribute is set
     *  @return <code>true</code> if the type attribute is set
     */
    public boolean isSetType() {

        return isTypeSet;

    }
   
    private int m_type;

    /**
     *   Set the type attribute.
     *
     *   @param aType  the new value for the  type attribute
     */
    public void setType(int aType) {   
        m_type = aType;

        isTypeSet = true;

    }

    /**
     *  Get the value of the type attribute.
     *  @return the value of the type attribute
     */
    public int getType() {
        return m_type;
    }




    /**
     *  Is the primary key information equal to the primary key information
     *  of <code>obj</code>.
     *
     *  @param obj   the compared object
     *  @return <code>true</code> if the primary key information is equal to the
     *          primary key informations of <code>obj</code>.
     */
    public boolean equals(Object obj) {

        return (obj instanceof AdvanceReservationImpl && getId() == ((com.sun.grid.jgdi.configuration.AdvanceReservation)obj).getId());

    }

    
    
    public boolean equalsCompletely(Object obj) {
        Logger logger = Logger.getLogger(getClass().getName());
        if (obj instanceof  AdvanceReservationImpl) {
            com.sun.grid.jgdi.configuration.AdvanceReservation obj1 = (com.sun.grid.jgdi.configuration.AdvanceReservation)obj;

            {
                int value1 = getId();
                int value2 = obj1.getId();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes AR_id are not equal");
                }
                return false;
            }

            }

            {
                java.lang.String value1 = getName();
                java.lang.String value2 = obj1.getName();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute AR_name of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes AR_name are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                java.lang.String value1 = getAccount();
                java.lang.String value2 = obj1.getAccount();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute AR_account of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes AR_account are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                int value1 = getSubmissionTime();
                int value2 = obj1.getSubmissionTime();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes AR_submission_time are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getStartTime();
                int value2 = obj1.getStartTime();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes AR_start_time are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getEndTime();
                int value2 = obj1.getEndTime();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes AR_end_time are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getDuration();
                int value2 = obj1.getDuration();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes AR_duration are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getVerify();
                int value2 = obj1.getVerify();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes AR_verify are not equal");
                }
                return false;
            }

            }

            {
                int value1 = getErrorHandling();
                int value2 = obj1.getErrorHandling();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes AR_error_handling are not equal");
                }
                return false;
            }

            }

            {
                java.lang.String value1 = getCheckpointName();
                java.lang.String value2 = obj1.getCheckpointName();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute AR_checkpoint_name of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes AR_checkpoint_name are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                int resourceCount = getResourceCount();
                if (resourceCount != obj1.getResourceCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists resource has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < resourceCount; i++) {
                    com.sun.grid.jgdi.configuration.ComplexEntry value1 = getResource(i);
                    com.sun.grid.jgdi.configuration.ComplexEntry value2 = obj1.getResource(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute AR_resource_list of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

                } // end of for
            }

            {
                int queueCount = getQueueCount();
                if (queueCount != obj1.getQueueCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists queue has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < queueCount; i++) {
                    java.lang.String value1 = getQueue(i);
                    java.lang.String value2 = obj1.getQueue(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute AR_queue_list of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes AR_queue_list are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

                } // end of for
            }

            {
                int value1 = getMailOptions();
                int value2 = obj1.getMailOptions();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes AR_mail_options are not equal");
                }
                return false;
            }

            }

            {
                int mailCount = getMailCount();
                if (mailCount != obj1.getMailCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists mail has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < mailCount; i++) {
                    com.sun.grid.jgdi.configuration.MailReceiver value1 = getMail(i);
                    com.sun.grid.jgdi.configuration.MailReceiver value2 = obj1.getMail(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute AR_mail_list of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

                } // end of for
            }

            {
                java.lang.String value1 = getPe();
                java.lang.String value2 = obj1.getPe();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute AR_pe of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes AR_pe are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                int peRangeCount = getPeRangeCount();
                if (peRangeCount != obj1.getPeRangeCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists peRange has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < peRangeCount; i++) {
                    com.sun.grid.jgdi.configuration.Range value1 = getPeRange(i);
                    com.sun.grid.jgdi.configuration.Range value2 = obj1.getPeRange(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute AR_pe_range of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

                } // end of for
            }

            {
                java.lang.String value1 = getGrantedPe();
                java.lang.String value2 = obj1.getGrantedPe();        

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute AR_granted_pe of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes AR_granted_pe are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

            }

            {
                int masterQueueCount = getMasterQueueCount();
                if (masterQueueCount != obj1.getMasterQueueCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists masterQueue has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < masterQueueCount; i++) {
                    java.lang.String value1 = getMasterQueue(i);
                    java.lang.String value2 = obj1.getMasterQueue(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute AR_master_queue_list of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equals(value2)) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attributes AR_master_queue_list are not equal: " + value1 + " != " + value2);
                    }
                    return false;
                }

            }

                } // end of for
            }

            {
                int aclCount = getAclCount();
                if (aclCount != obj1.getAclCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists acl has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < aclCount; i++) {
                    com.sun.grid.jgdi.configuration.ARA value1 = getAcl(i);
                    com.sun.grid.jgdi.configuration.ARA value2 = obj1.getAcl(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute AR_acl_list of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

                } // end of for
            }

            {
                int xaclCount = getXaclCount();
                if (xaclCount != obj1.getXaclCount()) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("lists xacl has different sizes");
                    }
                    return false;
                }
                for (int i = 0; i < xaclCount; i++) {
                    com.sun.grid.jgdi.configuration.ARA value1 = getXacl(i);
                    com.sun.grid.jgdi.configuration.ARA value2 = obj1.getXacl(i);

            if (value1 == null) {
                if (value2 != null) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine("attribute AR_xacl_list of obj1 " + value2 + " is not null as obj " + value1);
                    }
                    return false;
                }
            } else {

                if (!value1.equalsCompletely(value2)) {
                    return false;
                }           

            }

                } // end of for
            }

            {
                int value1 = getType();
                int value2 = obj1.getType();        

            if (value1 != value2) {
                if (logger.isLoggable(Level.FINE)) { 
                    logger.fine("primitive attributes AR_type are not equal");
                }
                return false;
            }

            }

            return true;
        } else {
            return true;
        }
    }
  
    public java.lang.String toString() {
        StringBuilder ret = new StringBuilder();
        ret.append("AdvanceReservationImpl(");

        ret.append(getId());

        ret.append(")");
        return ret.toString();
    }



    public java.lang.String dump() {
        StringBuilder sb = new StringBuilder();

            {
                int value = getId();
                sb.append("Id = " + value + "\n");
            }

            {
                java.lang.String value = getName();
                sb.append("Name = " + value + "\n");
            }

            {
                java.lang.String value = getAccount();
                sb.append("Account = " + value + "\n");
            }

            {
                int value = getSubmissionTime();
                sb.append("SubmissionTime = " + value + "\n");
            }

            {
                int value = getStartTime();
                sb.append("StartTime = " + value + "\n");
            }

            {
                int value = getEndTime();
                sb.append("EndTime = " + value + "\n");
            }

            {
                int value = getDuration();
                sb.append("Duration = " + value + "\n");
            }

            {
                int value = getVerify();
                sb.append("Verify = " + value + "\n");
            }

            {
                int value = getErrorHandling();
                sb.append("ErrorHandling = " + value + "\n");
            }

            {
                java.lang.String value = getCheckpointName();
                sb.append("CheckpointName = " + value + "\n");
            }

            int resourceCount = getResourceCount();
            for (int i = 0; i < resourceCount; i++) {
                com.sun.grid.jgdi.configuration.ComplexEntry value = getResource(i);
                
                sb.append("Resource[" + i + "] = " + value.dump() + "\n");
                
            } // end of for

            int queueCount = getQueueCount();
            for (int i = 0; i < queueCount; i++) {
                java.lang.String value = getQueue(i);
                
                sb.append("Queue[" + i + "] = " + value + "\n");
                
            } // end of for

            {
                int value = getMailOptions();
                sb.append("MailOptions = " + value + "\n");
            }

            int mailCount = getMailCount();
            for (int i = 0; i < mailCount; i++) {
                com.sun.grid.jgdi.configuration.MailReceiver value = getMail(i);
                
                sb.append("Mail[" + i + "] = " + value.dump() + "\n");
                
            } // end of for

            {
                java.lang.String value = getPe();
                sb.append("Pe = " + value + "\n");
            }

            int peRangeCount = getPeRangeCount();
            for (int i = 0; i < peRangeCount; i++) {
                com.sun.grid.jgdi.configuration.Range value = getPeRange(i);
                
                sb.append("PeRange[" + i + "] = " + value.dump() + "\n");
                
            } // end of for

            {
                java.lang.String value = getGrantedPe();
                sb.append("GrantedPe = " + value + "\n");
            }

            int masterQueueCount = getMasterQueueCount();
            for (int i = 0; i < masterQueueCount; i++) {
                java.lang.String value = getMasterQueue(i);
                
                sb.append("MasterQueue[" + i + "] = " + value + "\n");
                
            } // end of for

            int aclCount = getAclCount();
            for (int i = 0; i < aclCount; i++) {
                com.sun.grid.jgdi.configuration.ARA value = getAcl(i);
                
                sb.append("Acl[" + i + "] = " + value.dump() + "\n");
                
            } // end of for

            int xaclCount = getXaclCount();
            for (int i = 0; i < xaclCount; i++) {
                com.sun.grid.jgdi.configuration.ARA value = getXacl(i);
                
                sb.append("Xacl[" + i + "] = " + value.dump() + "\n");
                
            } // end of for

            {
                int value = getType();
                sb.append("Type = " + value + "\n");
            }

        return sb.toString();
    }    

        
   private static String[] arState = { "u", "w", "r", "x", "d", "E", "W" };

   public String getStateAsString() {
      int ord = getState();
      if (ord < 0 || ord > arState.length) {
         return "?";
      }
      return arState[ord];
   }



 
}
