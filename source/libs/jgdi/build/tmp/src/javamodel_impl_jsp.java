public class javamodel_impl_jsp implements com.sun.grid.cull.template.Template {
  public void print(final com.sun.grid.cull.Printer p, final java.util.Map params) {
    p.println("/*___INFO__MARK_BEGIN__*/");
    p.println("/*************************************************************************");
    p.println(" *");
    p.println(" *  The Contents of this file are made available subject to the terms of");
    p.println(" *  the Sun Industry Standards Source License Version 1.2");
    p.println(" *");
    p.println(" *  Sun Microsystems Inc., March, 2001");
    p.println(" *");
    p.println(" *");
    p.println(" *  Sun Industry Standards Source License Version 1.2");
    p.println(" *  =================================================");
    p.println(" *  The contents of this file are subject to the Sun Industry Standards");
    p.println(" *  Source License Version 1.2 (the \"License\"); You may not use this file");
    p.println(" *  except in compliance with the License. You may obtain a copy of the");
    p.println(" *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html");
    p.println(" *");
    p.println(" *  Software provided under this License is provided on an \"AS IS\" basis,");
    p.println(" *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,");
    p.println(" *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,");
    p.println(" *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.");
    p.println(" *  See the License for the specific provisions governing your rights and");
    p.println(" *  obligations concerning the Software.");
    p.println(" *");
    p.println(" *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.");
    p.println(" *");
    p.println(" *   Copyright: 2001 by Sun Microsystems, Inc.");
    p.println(" *");
    p.println(" *   All Rights Reserved.");
    p.println(" *");
    p.println(" ************************************************************************/");
    p.println("/*___INFO__MARK_END__*/");
    p.println("/**");
    p.println(" *  Generated from javamodel_impl.jsp");
    p.println(" *  !!! DO NOT EDIT THIS FILE !!!");
    p.println(" */");
    p.print("");
    
    final com.sun.grid.cull.CullDefinition cullDef = (com.sun.grid.cull.CullDefinition)params.get("cullDef");
    final com.sun.grid.cull.JavaHelper jh = (com.sun.grid.cull.JavaHelper)params.get("javaHelper");
    final com.sun.grid.cull.CullObject cullObj = (com.sun.grid.cull.CullObject)params.get("cullObj");
    com.sun.grid.cull.CullAttr   attr = null;
    final String interfaceName = jh.getClassName(cullObj);
    final String classname = interfaceName + "Impl";
p.println("");
    p.print("package ");
    p.print(jh.getPackageName());p.println(";");
    p.println("");
    p.println("import javax.management.*;");
    p.println("import com.sun.grid.jgdi.configuration.GEObject;");
    p.println("import java.util.List;");
    p.println("import java.util.LinkedList;");
    p.println("import java.util.Collections;");
    p.println("import java.util.Map;");
    p.println("import java.util.Set;");
    p.println("import java.util.Iterator;");
    p.println("import java.util.LinkedHashMap;");
    p.println("import java.util.logging.Logger;");
    p.println("import java.util.logging.Level;");
    p.println("");
    p.println("/**");
    p.print(" *  Java representation of the cull object ");
    p.print(cullObj.getName());p.println("");
    p.print(" *  defined in ");
    p.print(jh.getSource(cullObj).getName());p.println("");
    p.println(" *");
    p.print(" *  <p><strong>Warning:</strong>  The  ");
    p.print(classname);p.println(" class will ");
    p.println(" *  not be compatible with future Sun&trade; Grid Engine releases.</p>");
    p.println(" */");
    p.print("public class ");
    p.print(classname);p.print(" extends ");
    

  if(cullObj.getParentObject() != null) {
p.print("  ");
    p.print(jh.getClassName(cullObj.getParentObject()));p.print("Impl");
    
  } else {
p.print("   GEObjectImpl");
    
  }
p.print(" implements ");
    p.print(interfaceName);p.println(" {");
    p.println("");
    p.print("");
     // Default constructor ----------------------------------------- p.println("");
    p.println("");
    p.println("   /**");
    p.print("    *  Create a new instance of ");
    p.print(classname);p.println(". The new instance");
    p.println("    *  will not be initialized with the default values.");
    p.println("    */");
    p.print("   public ");
    p.print(classname);p.println("() {");
    p.println("      this(false);");
    p.println("   }");
    p.println("   ");
    p.println("   /**");
    p.println("    *   Create a new instanceof");
    p.println("    *   @param  initWithDefaultValues if <code>true</code> the new instance will");
    p.println("    *                                 be initialized with the default values as defined");
    p.println("    *                                 in the cull definition.");
    p.println("    */");
    p.print("   public ");
    p.print(classname);p.println("(boolean initWithDefaultValues) { ");
    p.print("");
    
     if(cullObj.getParentObject() != null) {
p.println("");
    p.println("      super(initWithDefaultValues);");
    p.print("");
    
     }
p.println("");
    p.print("      if (initWithDefaultValues) { ");
    
     for(int i = 0; i < cullObj.getAttrCount(); i++ ) {

       attr = cullObj.getAttr(i);
       
       if(attr.isHidden()) {
           continue;
       }
       
       if( attr.getDefault() != null ) {
          String defaultValue = null;
          String attrValue = attr.getDefault();
          String attrName = jh.getAttrName(attr);
          String attrType = jh.getFullClassName(attr.getType());

          if((attr instanceof com.sun.grid.cull.CullListAttr ||
              attr instanceof com.sun.grid.cull.CullMapListAttr ) && 
              attrName.endsWith("List")) {
              attrName = attrName.substring(0, attrName.length() - 4);
          }
          if( attr instanceof com.sun.grid.cull.CullMapAttr ) {
             
             com.sun.grid.cull.CullMapAttr mapAttr =(com.sun.grid.cull.CullMapAttr)attr;
             
             
             String gsname =  Character.toUpperCase( attrName.charAt(0) ) +
                             attrName.substring(1);
             
             com.sun.grid.cull.CullAttr valueAttr = mapAttr.getValueAttr();
             
             if (attrValue.equalsIgnoreCase("NONE")) {
                defaultValue = null;
             } else {
               defaultValue = jh.getInitializer(valueAttr, attrValue);
             }
             
             String defaultKey = ((com.sun.grid.cull.CullMapAttr )attr).getDefaultKey();
             if (defaultKey != null) {
              if (attr instanceof com.sun.grid.cull.CullMapListAttr) {
                if (gsname.equals("LoadThresholds") && attrValue.indexOf('=') > 0) {
                  String elems[] = attrValue.split("=");
                  String cls = jh.getInitializer(valueAttr, elems[0]);
p.println("");
    p.print("                     ComplexEntryImpl c = ");
    p.print(cls);p.println(";");
    p.print("                     c.setStringval(\"");
    p.print(elems[1]);p.println("\");");
    p.print("                     addDefault");
    p.print(gsname);p.println("(c);");
    p.print("");
    
                } else {
p.println("");
    p.print("                     addDefault");
    p.print(gsname);p.print("(");
    p.print(defaultValue);p.println(");");
    p.print("");
    
               }
              } else {
p.println("");
    p.print("       put");
    p.print(gsname);p.print("(\"");
    p.print(defaultKey);p.print("\", ");
    p.print(defaultValue);p.println(");");
    p.print("");
    
              }              
             }
             
          } else {
       
//          if (attrValue.equalsIgnoreCase("NONE")) {
//             defaultValue = null;
//          } else {
             defaultValue = jh.getInitializer(attr, attrValue);
//          }
          
          String gsname =  Character.toUpperCase( attrName.charAt(0) ) +
                             attrName.substring(1);
      p.println("");
    p.print("       set");
    p.print(gsname);p.print("(");
    p.print(defaultValue);p.print(");");
        
       
          } // end of if
       }
    } // end of for p.println("");
    p.println("    ");
    p.println("    }");
    p.println("");
    p.println("  } // end of default constructor");
    p.println("  ");
    p.println("  // --- newInstance method with primary key field");
    p.println("  ");
    p.print("");
    
   if(cullObj.getPrimaryKeyCount() > 0) {
p.println("");
    p.println("   /**");
    p.print("    *  Create a new instance of ");
    p.print(classname);p.println("");
    p.println("    */");
    p.print("   public ");
    p.print(classname);p.print("(");
          
     for(int i = 0; i < cullObj.getPrimaryKeyCount(); i++ ) {
        com.sun.grid.cull.CullAttr pkAttr = cullObj.getPrimaryKeyAttr(i);
        String pkAttrName = jh.getAttrName(pkAttr);
        if( i > 0 ) {
       p.print(", ");
    
        }
     p.print("");
    p.print(jh.getFullClassName(pkAttr.getType()));p.print(" ");
    p.print(pkAttrName);p.print(" ");
    
     }    
p.println(") {");
    p.println("");
    p.print("");
    
     for(int i = 0; i < cullObj.getPrimaryKeyCount(); i++ ) {
        com.sun.grid.cull.CullAttr pkAttr = cullObj.getPrimaryKeyAttr(i);
        String pkAttrName = jh.getAttrName(pkAttr);

        String pkGsname =  Character.toUpperCase( pkAttrName.charAt(0) ) +
                              pkAttrName.substring(1);   
p.println("   ");
    p.print("         set");
    p.print(pkGsname);p.print("(");
    p.print(pkAttrName);p.println(");");
    p.print("");
    
     } 
p.println("");
    p.println("    }");
    p.print("");
    
  }
p.println("");
    p.println("");
    p.print("");
    
    // Iterate over all attributes and create member variable, 
    // getter and setter
    for (int i = 0; i < cullObj.getAttrCount(); i++) {
        attr = cullObj.getAttr(i);
        String attrType = jh.getFullClassName(attr.getType());
        String attrName = jh.getAttrName(attr);
        String gsname = Character.toUpperCase(attrName.charAt(0)) + attrName.substring(1);
p.println("");
    p.print("    // Attribute ");
    p.print(attrName);p.println(" ------------------------------------------------");
    p.print("");
    
    if (attr instanceof com.sun.grid.cull.CullMapListAttr) {
    /* ------------------------------------------------------------------------
     * ---------------------- MapList Attribute -----------------------------------
     * ------------------------------------------------------------------------
     */ 
        if (attrName.endsWith("List")) {
            attrName = attrName.substring(0, attrName.length() - 4);
            gsname = Character.toUpperCase(attrName.charAt(0)) + attrName.substring(1);
        }
        com.sun.grid.cull.CullMapAttr mapAttr = (com.sun.grid.cull.CullMapAttr)attr;
        com.sun.grid.cull.CullObject subobj = cullDef.getCullObject(mapAttr.getType());
        com.sun.grid.cull.CullAttr keyAttr = mapAttr.getKeyAttr();
        com.sun.grid.cull.CullAttr valueAttr = mapAttr.getValueAttr();
        String keyClassName = jh.getClassName(keyAttr.getType());
        String valueClassName = jh.getClassName(valueAttr.getType());
        String fullValueClassName = jh.getClassName(valueAttr.getType());
        String defaultKey = mapAttr.getDefaultKey();
        if (defaultKey == null) {
            defaultKey = "default";
        }
p.println("");
    p.print("    private Map m_");
    p.print(attrName);p.println(";");
    p.println("    ");
    p.print("    private void init");
    p.print(gsname);p.println("() {");
    p.print("        if (m_");
    p.print(attrName);p.println(" == null) {");
    p.print("            m_");
    p.print(attrName);p.println(" = new LinkedHashMap();");
    p.println("        }");
    p.println("    }");
    p.println("   ");
    p.println("    /**");
    p.print("     *  Get the value of a ");
    p.print(mapAttr.getKeyName());p.println(" at an index.");
    p.print("     *  @param ");
    p.print(mapAttr.getKeyName());p.print(" the ");
    p.print(mapAttr.getKeyName());p.println("");
    p.println("     *  @param index the index");
    p.println("     */");
    p.print("    public ");
    p.print(valueClassName);p.print(" get");
    p.print(gsname);p.print("(");
    p.print(keyClassName);p.print(" ");
    p.print(mapAttr.getKeyName());p.println(", int index) {");
    p.print("        init");
    p.print(gsname);p.println("();");
    p.print("        List list = (List)m_");
    p.print(attrName);p.print(".get(");
    p.print(mapAttr.getKeyName());p.println(");");
    p.println("        if (list == null || index < 0 || index >= list.size()) {");
    p.print("            throw new IllegalArgumentException(\"No ");
    p.print(attrName);p.print(" for \" + ");
    p.print(mapAttr.getKeyName());p.println(" + \"[\" + index + \"] set\");");
    p.println("        }");
    p.print("        ");
    p.print(fullValueClassName);p.print(" ret = (");
    p.print(fullValueClassName);p.println(")list.get(index);");
    p.print("");
    
    if (jh.isPrimitiv(valueAttr)) {
p.println("");
    p.print("        return ret.");
    p.print(valueClassName);p.println("Value();");
    p.print("");
    
    } else {
p.println("");
    p.println("        return ret;");
    p.print("");
    
    }
p.println("");
    p.println("    }");
    p.println("   ");
    p.println("    /**");
    p.print("     *  Get the number of values for a ");
    p.print(mapAttr.getKeyName());p.println("");
    p.print("     *  @param ");
    p.print(mapAttr.getKeyName());p.print(" the ");
    p.print(mapAttr.getKeyName());p.println("");
    p.println("     */");
    p.print("    public int get");
    p.print(gsname);p.print("Count(");
    p.print(keyClassName);p.print(" ");
    p.print(mapAttr.getKeyName());p.println(") {");
    p.print("       if (m_");
    p.print(attrName);p.println(" != null) {");
    p.print("            List list = (List)m_");
    p.print(attrName);p.print(".get(");
    p.print(mapAttr.getKeyName());p.println(");");
    p.println("            if (list != null) {");
    p.println("                return list.size();");
    p.println("            }");
    p.println("        }");
    p.println("        return 0;");
    p.println("    }");
    p.println("   ");
    p.println("    /**");
    p.print("     *  Add a ");
    p.print(mapAttr.getValueName());p.print(" attribute to a ");
    p.print(mapAttr.getKeyName());p.println(".");
    p.println("     *");
    p.print("     *  @param ");
    p.print(mapAttr.getKeyName());p.print("  the ");
    p.print(mapAttr.getKeyName());p.println("");
    p.print("     *  @param ");
    p.print(mapAttr.getValueName());p.print(" the ");
    p.print(mapAttr.getValueName());p.println(" attribute");
    p.println("     */");
    p.print("    public void add");
    p.print(gsname);p.print("(");
    p.print(keyClassName);p.print(" ");
    p.print(mapAttr.getKeyName());p.print(", ");
    p.print(valueClassName);p.print(" ");
    p.print(mapAttr.getValueName());p.println(") {");
    p.print("        init");
    p.print(gsname);p.println("();");
    p.print("        List list = (List)m_");
    p.print(attrName);p.print(".get(");
    p.print(mapAttr.getKeyName());p.println(");");
    p.println("        if (list == null) {");
    p.println("            list = new LinkedList();");
    p.print("            m_");
    p.print(attrName);p.print(".put(");
    p.print(mapAttr.getKeyName());p.println(", list);");
    p.println("        }");
    p.print("");
    
    if (jh.isPrimitiv(valueAttr)) {
p.println("");
    p.print("        list.add(new ");
    p.print(fullValueClassName);p.print("(");
    p.print(mapAttr.getValueName());p.println("));      ");
    p.print("");
    
    } else {
p.println("");
    p.print("        list.add(");
    p.print(mapAttr.getValueName());p.println(");      ");
    p.print("");
    
    }
p.println("   ");
    p.println("    }");
    p.println("");
    p.println("    /**");
    p.print("     *  Initialize <code>");
    p.print(mapAttr.getValueName());p.print("</code> attribute for a <code>");
    p.print(mapAttr.getKeyName());p.println("</code> ");
    p.println("     *  with an empty list.");
    p.println("     *");
    p.print("     *  @param ");
    p.print(mapAttr.getKeyName());p.print("  the ");
    p.print(mapAttr.getKeyName());p.println("");
    p.println("     */");
    p.print("    public void addEmpty");
    p.print(gsname);p.print("(");
    p.print(keyClassName);p.print(" ");
    p.print(mapAttr.getKeyName());p.println(") {");
    p.print("        init");
    p.print(gsname);p.println("();");
    p.print("        List list = (List)m_");
    p.print(attrName);p.print(".get(");
    p.print(mapAttr.getKeyName());p.println(");");
    p.println("        if (list == null) {");
    p.println("            list = new LinkedList();");
    p.print("            m_");
    p.print(attrName);p.print(".put(");
    p.print(mapAttr.getKeyName());p.println(", list);");
    p.println("        }");
    p.println("    }");
    p.println("   ");
    p.println("    /**");
    p.print("     *  Set a ");
    p.print(mapAttr.getValueName());p.print(" attribute for a ");
    p.print(mapAttr.getKeyName());p.println(".");
    p.println("     *");
    p.print("     *  @param ");
    p.print(mapAttr.getKeyName());p.print("  the ");
    p.print(mapAttr.getKeyName());p.println("");
    p.print("     *  @param index  index of the ");
    p.print(mapAttr.getValueName());p.println(" attribute");
    p.print("     *  @param ");
    p.print(mapAttr.getValueName());p.print("  the ");
    p.print(mapAttr.getValueName());p.println(" attribute");
    p.println("     */");
    p.print("    public void set");
    p.print(gsname);p.print("(");
    p.print(keyClassName);p.print(" ");
    p.print(mapAttr.getKeyName());p.print(", int index, ");
    p.print(valueClassName);p.print(" ");
    p.print(mapAttr.getValueName());p.println(") {");
    p.print("        init");
    p.print(gsname);p.println("();");
    p.print("        List list = (List)m_");
    p.print(attrName);p.print(".get(");
    p.print(mapAttr.getKeyName());p.println(");");
    p.println("        if (list == null) {");
    p.println("            list = new LinkedList();");
    p.print("            m_");
    p.print(attrName);p.print(".put(");
    p.print(mapAttr.getKeyName());p.println(", list);");
    p.println("        }");
    p.print("");
    
    if (jh.isPrimitiv(valueAttr)) {
p.println("");
    p.print("        list.set(index, new ");
    p.print(fullValueClassName);p.print("(");
    p.print(mapAttr.getValueName());p.println("));      ");
    p.print("");
    
    } else {
p.println("");
    p.print("        list.set(index, ");
    p.print(mapAttr.getValueName());p.println(");      ");
    p.print("");
    
    }
p.println("   ");
    p.println("    }");
    p.println("   ");
    p.println("    /**");
    p.print("     *  Remove a ");
    p.print(mapAttr.getValueName());p.print(" attribute for a ");
    p.print(mapAttr.getKeyName());p.println(".");
    p.println("     *");
    p.print("     *  @param ");
    p.print(mapAttr.getKeyName());p.print("  the ");
    p.print(mapAttr.getKeyName());p.println("");
    p.print("     *  @param index the index of the ");
    p.print(mapAttr.getValueName());p.println(" attribute");
    p.print("     *  @return the remove ");
    p.print(mapAttr.getValueName());p.println(" attribute of <code>null</code>");
    p.println("     *          if the attribute has not been found");
    p.println("     */");
    p.print("    public Object remove");
    p.print(gsname);p.print("At(");
    p.print(keyClassName);p.print(" ");
    p.print(mapAttr.getKeyName());p.println(", int index) {");
    p.print("        if (m_");
    p.print(attrName);p.println(" != null) {");
    p.print("            List list = (List)m_");
    p.print(attrName);p.print(".get(");
    p.print(mapAttr.getKeyName());p.println(");");
    p.println("            if (list != null) {");
    p.println("                return list.remove(index);");
    p.println("            }");
    p.println("        }");
    p.println("        return null;");
    p.println("    }");
    p.println("   ");
    p.println("    /**");
    p.print("     *  Remove a ");
    p.print(mapAttr.getValueName());p.print(" attribute for a ");
    p.print(mapAttr.getKeyName());p.println(".");
    p.println("     *");
    p.print("     *  @param ");
    p.print(mapAttr.getKeyName());p.print("  the ");
    p.print(mapAttr.getKeyName());p.println("");
    p.print("     *  @param ");
    p.print(mapAttr.getValueName());p.print(" the ");
    p.print(mapAttr.getValueName());p.println(") attribute");
    p.println("     *  @return <code>true</code> if the attribute has been removed");
    p.println("     */");
    p.print("    public boolean remove");
    p.print(gsname);p.print("(");
    p.print(keyClassName);p.print(" ");
    p.print(mapAttr.getKeyName());p.print(", ");
    p.print(valueClassName);p.print(" ");
    p.print(mapAttr.getValueName());p.println(") {");
    p.print("        if (m_");
    p.print(attrName);p.println(" != null) {");
    p.print("            List list = (List)m_");
    p.print(attrName);p.print(".get(");
    p.print(mapAttr.getKeyName());p.println(");");
    p.println("            if (list != null) {");
    p.print("");
    
    if (jh.isPrimitiv(valueAttr)) {
p.println("");
    p.print("                return list.remove(new ");
    p.print(fullValueClassName);p.print("(");
    p.print(mapAttr.getValueName());p.println("));              ");
    p.print("");
    
    } else {
p.println("");
    p.print("                return list.remove(");
    p.print(mapAttr.getValueName());p.println(");      ");
    p.print("");
    
    }
p.println("      ");
    p.println("            }   ");
    p.println("        }");
    p.println("        return false;");
    p.println("    }");
    p.println("   ");
    p.println("    /**");
    p.print("     *  Remove all ");
    p.print(mapAttr.getValueName());p.println(") attributes.");
    p.println("     */");
    p.print("    public void removeAll");
    p.print(gsname);p.println("() {");
    p.print("        if (m_");
    p.print(attrName);p.println(" != null) {");
    p.print("            m_");
    p.print(attrName);p.println(".clear();");
    p.println("        }");
    p.println("    }");
    p.println("   ");
    p.println("    /**");
    p.print("     *  Remove all ");
    p.print(mapAttr.getValueName());p.print(") attributes for a ");
    p.print(mapAttr.getKeyName());p.println(".");
    p.println("     *");
    p.print("     *  @param ");
    p.print(mapAttr.getKeyName());p.print(" the ");
    p.print(mapAttr.getKeyName());p.println("");
    p.println("     */   ");
    p.print("    public void removeAll");
    p.print(gsname);p.print("(");
    p.print(keyClassName);p.print(" ");
    p.print(mapAttr.getKeyName());p.println(") {");
    p.print("        if (m_");
    p.print(attrName);p.println(" != null) {");
    p.print("            List list = (List)m_");
    p.print(attrName);p.print(".get(");
    p.print(mapAttr.getKeyName());p.println(");");
    p.println("            if (list != null) {");
    p.println("                list.clear();");
    p.println("            }");
    p.println("        }");
    p.println("    }");
    p.println("   ");
    p.println("    /**");
    p.print("     *   Get a unmodifiable set of stored ");
    p.print(attrName);p.println(" attribute keys.");
    p.print("     *   @return unmodifiable set of stored ");
    p.print(attrName);p.println(" attribute keys");
    p.println("     */");
    p.print("    public Set<String> get");
    p.print(gsname);p.println("Keys() {");
    p.print("        if (m_");
    p.print(attrName);p.println(" != null) {");
    p.print("            return Collections.unmodifiableSet(m_");
    p.print(attrName);p.println(".keySet());");
    p.println("        } else {");
    p.println("            return Collections.EMPTY_SET;");
    p.println("        }      ");
    p.println("    }");
    p.println("   ");
    p.println("    /**");
    p.print("     *  Determine if the ");
    p.print(attrName);p.println(" is set");
    p.println("     */");
    p.print("    public boolean isSet");
    p.print(gsname);p.println("() {");
    p.print("        return (m_");
    p.print(attrName);p.print(" != null) && (!m_");
    p.print(attrName);p.println(".isEmpty());");
    p.println("    }");
    p.println("   ");
    p.println("    /**");
    p.print("     *  Get a unmodifiable list of ");
    p.print(attrName);p.println(" attributes");
    p.println("     *  @param hostname the key");
    p.print("     *  @return unmodifiable list of ");
    p.print(attrName);p.println(" attributes");
    p.println("     */");
    p.print("    public List get");
    p.print(gsname);p.print("List(");
    p.print(keyClassName);p.print(" ");
    p.print(mapAttr.getKeyName());p.println(") {");
    p.print("        if (m_");
    p.print(attrName);p.println(" != null) {");
    p.print("            List list = (List)m_");
    p.print(attrName);p.print(".get(");
    p.print(mapAttr.getKeyName());p.println(");");
    p.println("            if (list != null) {");
    p.println("                return Collections.unmodifiableList(list);");
    p.println("            }");
    p.println("        }");
    p.println("        return Collections.EMPTY_LIST;");
    p.println("    }");
    p.println("   ");
    p.println("    // default methods");
    p.println("   ");
    p.println("    /**");
    p.print("     *  <p>Get the default value of the attribute ");
    p.print(attrName);p.println(".");
    p.print("     *  (");
    p.print(mapAttr.getDefaultKey());p.println(")</p>");
    p.print("     *  @return the default value of the attribute ");
    p.print(attrName);p.println("");
    p.println("     *  @throws  java.lang.IllegalStateException if the default value is not set");
    p.println("     */");
    p.print("    public ");
    p.print(valueClassName);p.print(" getDefault");
    p.print(gsname);p.println("(int index) {");
    p.print("        return get");
    p.print(gsname);p.print("(\"");
    p.print(mapAttr.getDefaultKey());p.println("\", index);");
    p.println("    }");
    p.println("   ");
    p.println("    /**");
    p.print("     *  Get the number of values for  the default <code>");
    p.print(mapAttr.getKeyName());p.println("</code>");
    p.print("     *  (");
    p.print(mapAttr.getDefaultKey());p.println(").");
    p.println("     */");
    p.print("    public int getDefault");
    p.print(gsname);p.println("Count() {");
    p.print("        return get");
    p.print(gsname);p.print("Count(\"");
    p.print(mapAttr.getDefaultKey());p.println("\");");
    p.println("    }");
    p.println("   ");
    p.println("    /**");
    p.print("     *  Add <code>");
    p.print(mapAttr.getValueName());p.println("</code> attribute to ");
    p.print("     *  the default <code>");
    p.print(mapAttr.getKeyName());p.print("</code>  (");
    p.print(mapAttr.getDefaultKey());p.println(").");
    p.println("     *");
    p.print("     *  @param ");
    p.print(mapAttr.getValueName());p.print(" the ");
    p.print(mapAttr.getValueName());p.println(" attribute");
    p.println("     */");
    p.print("    public void addDefault");
    p.print(gsname);p.print("(");
    p.print(valueClassName);p.print(" ");
    p.print(mapAttr.getValueName());p.println(") {");
    p.print("        add");
    p.print(gsname);p.print("(\"");
    p.print(mapAttr.getDefaultKey());p.print("\", ");
    p.print(mapAttr.getValueName());p.println(");");
    p.println("    }");
    p.println("   ");
    p.println("    /**");
    p.print("     *  Set <code>");
    p.print(mapAttr.getValueName());p.println("</code> attribute for the default");
    p.print("     *  <code>");
    p.print(mapAttr.getKeyName());p.print("</code> (");
    p.print(mapAttr.getDefaultKey());p.println(").");
    p.println("     *");
    p.print("     *  @param index  index of the ");
    p.print(mapAttr.getValueName());p.println(" attribute");
    p.print("     *  @param ");
    p.print(mapAttr.getValueName());p.print("  the ");
    p.print(mapAttr.getValueName());p.println(" attribute");
    p.println("     */");
    p.print("    public void setDefault");
    p.print(gsname);p.print("(int index, ");
    p.print(valueClassName);p.print(" ");
    p.print(mapAttr.getValueName());p.println(") {");
    p.print("        set");
    p.print(gsname);p.print("(\"");
    p.print(mapAttr.getDefaultKey());p.print("\", index, ");
    p.print(mapAttr.getValueName());p.println(");");
    p.println("    }");
    p.println("   ");
    p.println("    /**");
    p.print("     *  Remove <code>");
    p.print(mapAttr.getValueName());p.println("</code> attribute for the");
    p.print("     *  default <code>");
    p.print(mapAttr.getKeyName());p.print("</code> (");
    p.print(mapAttr.getDefaultKey());p.println(").");
    p.println("     *");
    p.print("     *  @param ");
    p.print(mapAttr.getKeyName());p.print("  the ");
    p.print(mapAttr.getKeyName());p.println("");
    p.print("     *  @param index the index of the ");
    p.print(mapAttr.getValueName());p.println(" attribute");
    p.print("     *  @return the remove ");
    p.print(mapAttr.getValueName());p.println(" attribute of <code>null</code>");
    p.println("     *          if the attribute has not been found");
    p.println("     */");
    p.print("    public Object removeDefault");
    p.print(gsname);p.print("At(");
    p.print(keyClassName);p.print(" ");
    p.print(mapAttr.getKeyName());p.println(", int index) {");
    p.print("        return remove");
    p.print(gsname);p.print("At(\"");
    p.print(mapAttr.getDefaultKey());p.println("\", index);");
    p.println("    }");
    p.println("   ");
    p.println("    /**");
    p.print("     *  Remove <code>");
    p.print(mapAttr.getValueName());p.println("</code> attribute from the");
    p.print("     *  default <code>");
    p.print(mapAttr.getKeyName());p.print("</code> (");
    p.print(mapAttr.getDefaultKey());p.println(").");
    p.println("     *");
    p.print("     *  @param ");
    p.print(mapAttr.getValueName());p.print(" the ");
    p.print(mapAttr.getValueName());p.println(") attribute");
    p.println("     *  @return <code>true</code> if the attribute has been removed");
    p.println("     */");
    p.print("    public boolean removeDefault");
    p.print(gsname);p.print("(");
    p.print(keyClassName);p.print(" ");
    p.print(mapAttr.getKeyName());p.print(", ");
    p.print(valueClassName);p.print(" ");
    p.print(mapAttr.getValueName());p.println(") {");
    p.print("        return remove");
    p.print(gsname);p.print("(\"");
    p.print(mapAttr.getDefaultKey());p.print("\", ");
    p.print(mapAttr.getValueName());p.println(");");
    p.println("    }");
    p.println("");
    p.println("    /**");
    p.print("     *  Remove all ");
    p.print(mapAttr.getValueName());p.println(") attributes from ");
    p.print("     *  the default <code>");
    p.print(mapAttr.getKeyName());p.print("</code> (");
    p.print(mapAttr.getDefaultKey());p.println(").");
    p.println("     */");
    p.print("    public void removeAllDefault");
    p.print(gsname);p.println("() {");
    p.print("        removeAll");
    p.print(gsname);p.print("(\"");
    p.print(mapAttr.getDefaultKey());p.println("\");");
    p.println("    }");
    p.println("   ");
    p.println("    ");
    p.print("");
    
    } else if (attr instanceof com.sun.grid.cull.CullMapAttr) {
    /* ------------------------------------------------------------------------
     * ---------------------- Map Attribute -----------------------------------
     * ------------------------------------------------------------------------
     */ 
        if (attrName.endsWith("List")) {          
            attrName = attrName.substring(0, attrName.length() - 4);
            gsname = Character.toUpperCase(attrName.charAt(0)) + attrName.substring(1);
        }
        com.sun.grid.cull.CullMapAttr mapAttr = (com.sun.grid.cull.CullMapAttr)attr;
        com.sun.grid.cull.CullObject subobj = cullDef.getCullObject(mapAttr.getType());
        com.sun.grid.cull.CullAttr keyAttr = mapAttr.getKeyAttr();
        com.sun.grid.cull.CullAttr valueAttr = mapAttr.getValueAttr();
        String keyClassName = jh.getClassName(keyAttr.getType());
p.println("");
    p.print("    // keyClassName for ");
    p.print(keyAttr.getType());p.print(" = ");
    p.print(keyClassName);p.println("");
    p.print("");
    
        String valueClassName = jh.getClassName(valueAttr.getType());
        String fullValueClassName = jh.getFullClassNameOrWrapper(valueAttr.getType());
        String defaultKey = mapAttr.getDefaultKey();
        if (defaultKey == null) {
           defaultKey = "default";
        }
p.println("");
    p.println("   ");
    p.print("    private Map m_");
    p.print(attrName);p.println(";");
    p.println("");
    p.print("    private void init");
    p.print(gsname);p.println("() {");
    p.print("        if (m_");
    p.print(attrName);p.println(" == null) {");
    p.print("            m_");
    p.print(attrName);p.println(" = new LinkedHashMap();");
    p.println("        }");
    p.println("    }");
    p.println("   ");
    p.println("    /**");
    p.print("     *  <p>Put the attribute ");
    p.print(attrName);p.print(" for a ");
    p.print(mapAttr.getKeyName());p.println(".</p>");
    p.println("     *");
    p.print("     *  @param ");
    p.print(mapAttr.getKeyName());p.print("    the ");
    p.print(mapAttr.getKeyName());p.println("");
    p.print("     *  @param ");
    p.print(mapAttr.getValueName());p.print("  the ");
    p.print(mapAttr.getValueName());p.println("");
    p.println("     */");
    p.print("    public void put");
    p.print(gsname);p.print("(");
    p.print(keyClassName);p.print(" ");
    p.print(mapAttr.getKeyName());p.print(", ");
    p.print(valueClassName);p.print(" ");
    p.print(mapAttr.getValueName());p.println(") {   ");
    p.print("        init");
    p.print(gsname);p.println("();");
    p.print("        m_");
    p.print(attrName);p.print(".put(");
    p.print(mapAttr.getKeyName());p.println(",");
    p.print("");
    
        if (jh.isPrimitiv(valueAttr)) {
p.println("");
    p.print("                            new ");
    p.print(fullValueClassName);p.print("(");
    p.print(mapAttr.getValueName());p.println(")");
    p.print("");
    
    } else {
p.println("");
    p.print("                            ");
    p.print(mapAttr.getValueName());p.println("");
    p.print("");
    
    }
p.println("");
    p.println("                            );");
    p.println("    }");
    p.println("");
    p.println("    /**");
    p.print("     *  <p>Get the default value of the attribute ");
    p.print(attrName);p.println(".</p>");
    p.print("     *  @return the default value of the attribute ");
    p.print(attrName);p.println("");
    p.println("     *  @throws  java.lang.IllegalStateException if the default value is not set");
    p.println("     */");
    p.print("    public ");
    p.print(valueClassName);p.print(" getDefault");
    p.print(gsname);p.println("() {");
    p.print("        if (m_");
    p.print(attrName);p.println(" == null) {");
    p.print("            throw new IllegalStateException(\"default value for attribute ");
    p.print(attrName);p.println(" not found\");");
    p.println("        }");
    p.print("        ");
    p.print(fullValueClassName);p.print(" ret = (");
    p.print(fullValueClassName);p.print(")m_");
    p.print(attrName);p.print(".get(\"");
    p.print(defaultKey);p.println("\");");
    p.println("        if (ret == null) {");
    p.print("            throw new IllegalStateException(\"default value for attribute ");
    p.print(attrName);p.println(" not found\");");
    p.println("        }");
    p.print("");
    
        if (jh.isPrimitiv(valueAttr)) {
p.println("");
    p.print("        return ret.");
    p.print(valueClassName);p.println("Value();");
    p.print("");
    
        } else {
p.println("");
    p.println("        return ret;");
    p.print("");
    
        }
p.println("");
    p.println("    }");
    p.println("   ");
    p.println("    /**");
    p.print("     *  <p>Get the ");
    p.print(attrName);p.print(" attribute for a ");
    p.print(mapAttr.getKeyName());p.println(".</p>");
    p.print("     *  @param   ");
    p.print(mapAttr.getKeyName());p.print("   the ");
    p.print(mapAttr.getKeyName());p.println("");
    p.print("     *  @return  the ");
    p.print(attrName);p.println(" attribute for the host or the");
    p.print("     *           default value of  ");
    p.print(attrName);p.println("");
    p.println("     */");
    p.print("    public ");
    p.print(valueClassName);p.print(" get");
    p.print(gsname);p.print("(String ");
    p.print(mapAttr.getKeyName());p.println(") {");
    p.print("        init");
    p.print(gsname);p.println("();");
    p.print("        if (m_");
    p.print(attrName);p.print(".containsKey(");
    p.print(mapAttr.getKeyName());p.println(")) {      ");
    p.print("            ");
    p.print(fullValueClassName);p.print(" ret = (");
    p.print(fullValueClassName);p.print(")m_");
    p.print(attrName);p.print(".get(");
    p.print(mapAttr.getKeyName());p.println(");");
    p.println("            if (ret != null) {");
    p.print("");
    
        if (jh.isPrimitiv(valueAttr)) {
p.println("");
    p.print("                return ret.");
    p.print(valueClassName);p.println("Value();");
    p.print("");
    
        } else {
p.println("");
    p.println("                return ret;");
    p.print("");
    
        }
p.println("");
    p.println("            } else {");
    p.print("                return ");
    p.print(jh.getNullValue(valueAttr));p.println(";");
    p.println("            }");
    p.println("        } else {");
    p.print("            return getDefault");
    p.print(gsname);p.println("();");
    p.println("        }");
    p.println("    }");
    p.print("");
       
   if (mapAttr.getDefaultKey() != null) {
p.println("");
    p.println("    /**");
    p.print("     *  Set <code>");
    p.print(mapAttr.getValueName());p.println("</code> attribute for the default");
    p.print("     *  <code>");
    p.print(mapAttr.getKeyName());p.print("</code> (");
    p.print(mapAttr.getDefaultKey());p.println(").");
    p.println("     *");
    p.print("     *  @param ");
    p.print(mapAttr.getValueName());p.print("  the ");
    p.print(mapAttr.getValueName());p.println(" attribute");
    p.println("     */");
    p.print("    public void setDefault");
    p.print(gsname);p.print("(");
    p.print(valueClassName);p.print(" ");
    p.print(mapAttr.getValueName());p.println(") {");
    p.print("        put");
    p.print(gsname);p.print("(\"");
    p.print(mapAttr.getDefaultKey());p.print("\", ");
    p.print(mapAttr.getValueName());p.println(");");
    p.println("    }");
    p.print("");
        
    }
p.println("");
    p.println("");
    p.println("    /**");
    p.print("     *  <p>remove the attribute ");
    p.print(attrName);p.print(" for a ");
    p.print(mapAttr.getKeyName());p.println(".</p>");
    p.println("     *");
    p.print("     *  @param ");
    p.print(mapAttr.getKeyName());p.print(" tje ");
    p.print(mapAttr.getKeyName());p.println("");
    p.print("     *  @return the ");
    p.print(mapAttr.getValueName());p.print(" for the ");
    p.print(mapAttr.getKeyName());p.println(" or <code>null</code>");
    p.print("     *          if the ");
    p.print(mapAttr.getValueName());p.print(" attribute was not defined for the ");
    p.print(mapAttr.getKeyName());p.println(".");
    p.println("     */");
    p.print("    public ");
    p.print(fullValueClassName);p.print(" remove");
    p.print(gsname);p.print("(String ");
    p.print(mapAttr.getKeyName());p.println(") {");
    p.print("        init");
    p.print(gsname);p.println("();");
    p.print("        return (");
    p.print(fullValueClassName);p.print(")m_");
    p.print(attrName);p.print(".remove(");
    p.print(mapAttr.getKeyName());p.println(");");
    p.println("    }");
    p.println("");
    p.println("    /**");
    p.print("     *  <p>Remove the attribute ");
    p.print(attrName);p.print(" for all ");
    p.print(mapAttr.getKeyName());p.println("s.</p>");
    p.println("     */");
    p.print("    public void removeAll");
    p.print(gsname);p.println("() {");
    p.print("        if (m_");
    p.print(attrName);p.println(" != null) {");
    p.print("            m_");
    p.print(attrName);p.println(".clear();");
    p.println("        }");
    p.println("    }");
    p.println("   ");
    p.println("    /**");
    p.print("     *  Get the set of ");
    p.print(mapAttr.getKeyName());p.print("s which have the attribute ");
    p.print(attrName);p.println(" set.");
    p.print("     *  @return set of ");
    p.print(mapAttr.getKeyName());p.println("s");
    p.println("     */");
    p.print("    public Set<String> get");
    p.print(gsname);p.println("Keys() {");
    p.print("        if (m_");
    p.print(attrName);p.println(" == null) {");
    p.println("            return Collections.EMPTY_SET;");
    p.println("        } else {");
    p.print("            return Collections.unmodifiableSet(m_");
    p.print(attrName);p.println(".keySet());");
    p.println("        }");
    p.println("    }");
    p.println("   ");
    p.println("    /**");
    p.print("     *  Get the number of ");
    p.print(mapAttr.getKeyName());p.print("s which have the attribute ");
    p.print(attrName);p.println(" set.");
    p.print("     *  @return the number of ");
    p.print(mapAttr.getKeyName());p.print("s which have the attribute ");
    p.print(attrName);p.println(" set.");
    p.println("     */");
    p.print("    public int get");
    p.print(gsname);p.println("Count() {");
    p.print("        if (m_");
    p.print(attrName);p.println(" == null) {");
    p.println("            return 0;");
    p.println("        } else {");
    p.print("            return m_");
    p.print(attrName);p.println(".size();");
    p.println("        }");
    p.println("    }");
    p.println("   ");
    p.println("    /**");
    p.print("     *  Determine if any ");
    p.print(attrName);p.println(" attribute is set");
    p.print("     *  @return <code>true</code> if the ");
    p.print(attrName);p.println(" attribute is set");
    p.println("     */");
    p.print("    public boolean isSet");
    p.print(gsname);p.println(" () {");
    p.print("        return (m_");
    p.print(attrName);p.print(" != null) && (!m_");
    p.print(attrName);p.println(".isEmpty());");
    p.println("    }");
    p.println("   ");
    p.println("    /**");
    p.print("     *  Determine if any ");
    p.print(attrName);p.print(" attribute is for a ");
    p.print(mapAttr.getKeyName());p.println(" is set");
    p.print("     *  @param  ");
    p.print(mapAttr.getKeyName());p.print(" the ");
    p.print(mapAttr.getKeyName());p.println("");
    p.print("     *  @return <code>true</code> if the ");
    p.print(attrName);p.println(" attribute is set");
    p.println("     */");
    p.print("    public boolean isSet");
    p.print(gsname);p.print("(String ");
    p.print(mapAttr.getKeyName());p.println(") {");
    p.print("        return (m_");
    p.print(attrName);p.print(" != null) && (m_");
    p.print(attrName);p.print(".get(");
    p.print(mapAttr.getKeyName());p.println(") != null);");
    p.println("    }");
    p.println("   ");
    p.println("");
    p.print("");
    
    // end of Map Attribute  
    } else if (attr instanceof com.sun.grid.cull.CullListAttr) {
    /* ------------------------------------------------------------------------
     * ---------------------- List Attribute ----------------------------------
     * ------------------------------------------------------------------------
     */
        if (attrName.endsWith("List")) {
            attrName = attrName.substring(0, attrName.length() - 4);
            gsname =  Character.toUpperCase(attrName.charAt(0)) + attrName.substring(1);
        }
p.println("");
    p.print("    private List< ");
    p.print(attrType);p.print(" > m_");
    p.print(attrName);p.println("List;");
    p.println("   ");
    p.print("    private void init");
    p.print(gsname);p.println("() {");
    p.print("        if (m_");
    p.print(attrName);p.println("List == null) {");
    p.print("            m_");
    p.print(attrName);p.print("List = new LinkedList< ");
    p.print(attrType);p.println(" >();");
    p.println("        }");
    p.println("    }");
    p.println("");
    p.println("    /**");
    p.print("     *   Add a ");
    p.print(attrType);p.println(" attribute.");
    p.print("");
     if (classname.equals("UserSetImpl") && gsname.equals("Entries") ) { p.println("");
    p.print("     *   If the value already exists in the list it is not added ");
     } p.println("");
    p.print("     *   @param a");
    p.print(attrName);p.print("  the new ");
    p.print(attrType);p.println(" attribute");
    p.println("     */");
    p.print("    public void add");
    p.print(gsname);p.print("(");
    p.print(attrType);p.print(" a");
    p.print(attrName);p.println(") {   ");
    p.print("        init");
    p.print(gsname);p.println("();");
    p.print("        ");
     if (classname.equals("UserSetImpl") && gsname.equals("Entries") ) { p.println("");
    p.print("        if (!m_");
    p.print(attrName);p.print("List.contains(a");
    p.print(attrName);p.println(")) {");
    p.print("            m_");
    p.print(attrName);p.print("List.add(a");
    p.print(attrName);p.println(");");
    p.print("        } ");
     } else { p.println("");
    p.print("        m_");
    p.print(attrName);p.print("List.add(a");
    p.print(attrName);p.println(");");
    p.print("        ");
     } p.println("");
    p.println("    }");
    p.println("   ");
    p.println("   ");
    p.println("    /**");
    p.print("     *   Set a ");
    p.print(attrType);p.println(" attribute.");
    p.print("     *   @param index   index of the ");
    p.print(attrType);p.println(" attribute");
    p.print("     *   @param a");
    p.print(attrName);p.print("  the new ");
    p.print(attrType);p.println(" attribute");
    p.println("     */");
    p.print("    public void set");
    p.print(gsname);p.print("(int index, ");
    p.print(attrType);p.print(" a");
    p.print(attrName);p.println(") {");
    p.print("        init");
    p.print(gsname);p.println("();");
    p.print("        m_");
    p.print(attrName);p.print("List.set(index, a");
    p.print(attrName);p.println(");");
    p.println("    }");
    p.println("");
    p.println("    /**");
    p.print("     *  Remove all ");
    p.print(attrType);p.println(" attributes.");
    p.println("     */");
    p.print("    public void removeAll");
    p.print(gsname);p.println("() {");
    p.print("        if (m_");
    p.print(attrName);p.println("List != null) {");
    p.print("            m_");
    p.print(attrName);p.println("List.clear();");
    p.println("        }");
    p.println("    }");
    p.println("");
    p.println("    /**");
    p.print("     *  Remote a ");
    p.print(attrType);p.println(" attribute at an index.");
    p.print("     *  @param index  the index of the ");
    p.print(attrType);p.println(" attribute which should be");
    p.println("     *                removed");
    p.print("     *  @return the removed ");
    p.print(attrType);p.println(" attribute or <code>null</code> if");
    p.println("     *          no attribute at this index is stored");
    p.println("     */");
    p.print("    public ");
    p.print(attrType);p.print(" remove");
    p.print(gsname);p.println("(int index) {");
    p.print("        init");
    p.print(gsname);p.println("();");
    p.print("        return (");
    p.print(attrType);p.print(")m_");
    p.print(attrName);p.println("List.remove(index);");
    p.println("    }");
    p.println("");
    p.println("    /**");
    p.print("     *  Remote a specific ");
    p.print(attrType);p.println(" attribute.");
    p.print("     *  @param a");
    p.print(attrName);p.print("  the ");
    p.print(attrType);p.println(" attribute which should be");
    p.println("     *                         removed");
    p.print("     *  @return <code>true</code> if the ");
    p.print(attrType);p.println(" attribute has been removed");
    p.println("     */");
    p.print("    public boolean remove");
    p.print(gsname);p.print("(");
    p.print(attrType);p.print(" a");
    p.print(attrName);p.println(") {");
    p.print("        init");
    p.print(gsname);p.println("();");
    p.print("        return m_");
    p.print(attrName);p.print("List.remove(a");
    p.print(attrName);p.println(");");
    p.println("    }");
    p.println("   ");
    p.println("    /**");
    p.print("     *   Get a unmodifiable list of all ");
    p.print(attrType);p.println(" attributes.");
    p.println("     *");
    p.print("     *   @return Unmodifiable list with all ");
    p.print(attrType);p.println(" attributes");
    p.println("     */");
    p.print("    public List< ");
    p.print(attrType);p.print(" > get");
    p.print(gsname);p.println("List() {");
    p.print("        init");
    p.print(gsname);p.println("();");
    p.print("        return Collections.unmodifiableList(m_");
    p.print(attrName);p.println("List);");
    p.println("    }");
    p.println("");
    p.println("    /**");
    p.print("     *  Get the number of ");
    p.print(attrType);p.println(" attributes.");
    p.println("     *");
    p.print("     *  @return The number of ");
    p.print(attrType);p.println(" attributes.");
    p.println("     */");
    p.print("    public int get");
    p.print(gsname);p.println("Count() {");
    p.print("        if (m_");
    p.print(attrName);p.println("List != null) {");
    p.print("            return m_");
    p.print(attrName);p.println("List.size();");
    p.println("        } else {");
    p.println("            return 0;");
    p.println("        }");
    p.println("    }");
    p.println(" ");
    p.println("    /**");
    p.print("     *  Get a ");
    p.print(attrType);p.println(" attribute at an index.");
    p.print("     *  @param index  the index of the ");
    p.print(attrType);p.println(" attribute which should be");
    p.println("     *                removed");
    p.print("     *  @return the ");
    p.print(attrType);p.println(" attribute");
    p.println("     */");
    p.print("    public ");
    p.print(attrType);p.print(" get");
    p.print(gsname);p.println("(int index) {");
    p.print("        init");
    p.print(gsname);p.println("();");
    p.print("        return (");
    p.print(attrType);p.print(")m_");
    p.print(attrName);p.println("List.get(index);");
    p.println("    }");
    p.println("   ");
    p.println("    /**");
    p.print("     *  Determine if the ");
    p.print(attrName);p.println(" attribute is set");
    p.print("     *  @return <code>true</code> if the ");
    p.print(attrName);p.println(" attribute is set");
    p.println("     */");
    p.print("    public boolean isSet");
    p.print(gsname);p.println(" () {");
    p.print("        return (m_");
    p.print(attrName);p.print("List != null) && (!m_");
    p.print(attrName);p.println("List.isEmpty());");
    p.println("    }");
    p.println("   ");
    p.print("");
    
    // end of List Attribute
    } else {
    /* ------------------------------------------------------------------------
     * ---------------------- Simple Attribute ----------------------------------
     * ------------------------------------------------------------------------
     */
    if (jh.isPrimitiv(attr)) {
p.println("");
    p.print("    private boolean is");
    p.print(gsname);p.println("Set;");
    p.print("");
    
    }
p.println("   ");
    p.println("    /**");
    p.print("     *  Determine if the ");
    p.print(attrName);p.println(" attribute is set");
    p.print("     *  @return <code>true</code> if the ");
    p.print(attrName);p.println(" attribute is set");
    p.println("     */");
    p.print("    public boolean isSet");
    p.print(gsname);p.println("() {");
    p.print("");
    
    if (jh.isPrimitiv(attr)) {
p.println("");
    p.print("        return is");
    p.print(gsname);p.println("Set;");
    p.print("");
    
    } else {
p.println("   ");
    p.print("        return  (m_");
    p.print(attrName);p.println(" != null);");
    p.print("");
    
    }
p.println("");
    p.println("    }");
    p.println("   ");
    p.print("    private ");
    p.print(attrType);p.print(" m_");
    p.print(attrName);p.println(";");
    p.println("");
    p.println("    /**");
    p.print("     *   Set the ");
    p.print(attrName);p.println(" attribute.");
    p.println("     *");
    p.print("     *   @param a");
    p.print(gsname);p.print("  the new value for the  ");
    p.print(attrName);p.println(" attribute");
    p.println("     */");
    p.print("    public void set");
    p.print(gsname);p.print("(");
    p.print(attrType);p.print(" a");
    p.print(gsname);p.println(") {   ");
    p.print("        m_");
    p.print(attrName);p.print(" = a");
    p.print(gsname);p.println(";");
    p.print("");
    
        if (jh.isPrimitiv(attr)) {
p.println("");
    p.print("        is");
    p.print(gsname);p.println("Set = true;");
    p.print("");
    
        }
p.println("");
    p.println("    }");
    p.println("");
    p.println("    /**");
    p.print("     *  Get the value of the ");
    p.print(attrName);p.println(" attribute.");
    p.print("     *  @return the value of the ");
    p.print(attrName);p.println(" attribute");
    p.println("     */");
    p.print("    public ");
    p.print(attrType);p.print(" ");
    p.print(attrType.endsWith("oolean")?"is":"get");p.print("");
    p.print(gsname);p.println("() {");
    p.print("        return m_");
    p.print(attrName);p.println(";");
    p.println("    }");
    p.println("");
    p.print("");
    
    } // end of else normal attributes
} // end of for of attribute
// equals method ----------------------------------------- 
p.println("");
    p.println("");
    p.println("");
    p.println("    /**");
    p.println("     *  Is the primary key information equal to the primary key information");
    p.println("     *  of <code>obj</code>.");
    p.println("     *");
    p.println("     *  @param obj   the compared object");
    p.println("     *  @return <code>true</code> if the primary key information is equal to the");
    p.println("     *          primary key informations of <code>obj</code>.");
    p.println("     */");
    p.println("    public boolean equals(Object obj) {");
    p.print("");
    
    if (cullObj.getParentObject() != null) {
p.println("");
    p.print("        return obj instanceof ");
    p.print(classname);p.println(" && super.equals(obj);");
    p.print("");
    
    } else {
        for (int i = 0; i < cullObj.getPrimaryKeyCount(); i++) {
            attr = cullObj.getPrimaryKeyAttr(i);
            String attrName = jh.getAttrName(attr);
            String gsname = Character.toUpperCase(attrName.charAt(0)) + attrName.substring(1);
            if (jh.isPrimitiv(attr)) {
p.println("");
    p.print("        return (obj instanceof ");
    p.print(classname);p.print(" && get");
    p.print(gsname);p.print("() == ((");
    p.print(jh.getFullClassName(cullObj));p.print(")obj).get");
    p.print(gsname);p.println("());");
    p.print("");
    
            } else {
p.println("");
    p.print("        return (obj instanceof ");
    p.print(classname);p.print(" && get");
    p.print(gsname);p.print("().equals(((");
    p.print(jh.getFullClassName(cullObj));p.print(")obj).get");
    p.print(gsname);p.println("()));");
    p.print("");
    
            } // end of isPrimitiv
        } // end of for
        // for loop has been skipped
        if (cullObj.getPrimaryKeyCount() == 0) {
p.println("            ");
    p.print("            return obj instanceof ");
    p.print(classname);p.println(";");
    p.print("");
    
        }
    } // end of if (cullObj.getParentObject() != null)
p.println("");
    p.println("    }");
    p.println("");
    p.print("");
    
    class EqualsCompletelyGenerator {
        public void gen(com.sun.grid.cull.CullAttr attr) {
            if (!attr.isReadOnly()) {
                if (attr instanceof com.sun.grid.cull.CullMapListAttr) {
                    genMapListAttr((com.sun.grid.cull.CullMapListAttr)attr);
                } else if (attr instanceof com.sun.grid.cull.CullMapAttr) {
                    genMapAttr((com.sun.grid.cull.CullMapAttr)attr);
                } else if (attr instanceof com.sun.grid.cull.CullListAttr) {
                    genListAttr((com.sun.grid.cull.CullListAttr)attr);
                } else {
                    genSimpleAttr(attr);
                }
            }
        } // end of gen
        public void genMapListAttr(com.sun.grid.cull.CullMapListAttr attr) {
            com.sun.grid.cull.CullAttr keyAttr = attr.getKeyAttr();
            com.sun.grid.cull.CullAttr valueAttr = attr.getValueAttr();
            String attrName = jh.getAttrName(attr);  
            if (attrName.endsWith("List")) {
                attrName = attrName.substring(0, attrName.length() - 4);
            }
            String gsname = Character.toUpperCase(attrName.charAt(0)) + attrName.substring(1);
p.println("        ");
    p.println("            {");
    p.print("                Set ");
    p.print(attrName);p.print("Set1 = get");
    p.print(gsname);p.println("Keys();");
    p.print("                Set ");
    p.print(attrName);p.print("Set2 = obj1.get");
    p.print(gsname);p.println("Keys();");
    p.println("          ");
    p.print("                if (");
    p.print(attrName);p.print("Set1.size() != ");
    p.print(attrName);p.println("Set2.size()) {");
    p.println("                    if (logger.isLoggable(Level.FINE)) {");
    p.print("                        logger.fine(\"map lists ");
    p.print(attrName);p.println(" has different key sizes\");");
    p.println("                    }");
    p.println("                    return false;");
    p.println("                }");
    p.print("                Iterator iter = get");
    p.print(gsname);p.println("Keys().iterator();");
    p.println("                while (iter.hasNext()) {");
    p.print("                    ");
    p.print(jh.getFullClassNameOrWrapper(keyAttr.getType()));p.print(" key = (");
    p.print(jh.getFullClassNameOrWrapper(keyAttr.getType()));p.println(")iter.next();");
    p.print("                    int count = get");
    p.print(gsname);p.println("Count(key);");
    p.print("                    if (count != obj1.get");
    p.print(gsname);p.println("Count(key)) {");
    p.println("                    if (logger.isLoggable(Level.FINE)) {");
    p.print("                        logger.fine(\"map list ");
    p.print(attrName);p.println(" is different list size for key \" + key);");
    p.println("                    }");
    p.println("                    return false;");
    p.println("                }");
    p.println("                for (int i = 0; i < count; i++) {");
    p.print("                    ");
    p.print(jh.getFullClassName(valueAttr.getType()));p.print(" value1 = get");
    p.print(gsname);p.println("(key, i);");
    p.print("                    ");
    p.print(jh.getFullClassName(valueAttr.getType()));p.print(" value2 = obj1.get");
    p.print(gsname);p.println("(key, i);");
    p.print("");
    
                    genValueCompare(valueAttr, "value1", "value2");
p.println("");
    p.println("                }");
    p.println("            }");
    p.println("        }");
    p.print("");
    
        } // end of genMapListAttr
        public void genMapAttr(com.sun.grid.cull.CullMapAttr mapAttr) {
            com.sun.grid.cull.CullAttr keyAttr = mapAttr.getKeyAttr();
            com.sun.grid.cull.CullAttr valueAttr = mapAttr.getValueAttr();
            String attrName = jh.getAttrName(mapAttr);   
            if (attrName.endsWith("List")) {
                attrName  = attrName.substring(0, attrName.length() - 4 );
            }
            String gsname = Character.toUpperCase(attrName.charAt(0)) + attrName.substring(1);
p.println("           ");
    p.println("            {");
    p.print("                Set ");
    p.print(attrName);p.print("Set1 = get");
    p.print(gsname);p.println("Keys();");
    p.print("                Set ");
    p.print(attrName);p.print("Set2 = obj1.get");
    p.print(gsname);p.println("Keys();");
    p.print("                if (");
    p.print(attrName);p.print("Set1.size() != ");
    p.print(attrName);p.println("Set2.size()) {");
    p.println("                    if (logger.isLoggable(Level.FINE)) {");
    p.print("                        logger.fine(\"maps ");
    p.print(attrName);p.println(" has different key sizes\");");
    p.println("                    }");
    p.println("                    return false;");
    p.println("                }");
    p.print("                Iterator iter = get");
    p.print(gsname);p.println("Keys().iterator();");
    p.println("                while (iter.hasNext()) {");
    p.print("                    ");
    p.print(jh.getFullClassNameOrWrapper(keyAttr.getType()));p.print(" key = (");
    p.print(jh.getFullClassNameOrWrapper(keyAttr.getType()));p.println(")iter.next();");
    p.print("                    ");
    p.print(jh.getFullClassName(valueAttr.getType()));p.print(" value1 = get");
    p.print(gsname);p.println("(key);");
    p.print("                    ");
    p.print(jh.getFullClassName(valueAttr.getType()));p.print(" value2 = obj1.get");
    p.print(gsname);p.println("(key);             ");
    p.print("");
    
                    genValueCompare(valueAttr, "value1", "value2");
p.println("");
    p.println("                }");
    p.println("            }");
    p.print("");
    
        } // end of genMapAttr
        public void genListAttr(com.sun.grid.cull.CullListAttr attr) {
            String attrName = jh.getAttrName(attr);
            if (attrName.endsWith("List")) {
                attrName = attrName.substring(0, attrName.length() - 4);
            }
            String gsname = Character.toUpperCase(attrName.charAt(0)) + attrName.substring(1);
p.println("");
    p.println("            {");
    p.print("                int ");
    p.print(attrName);p.print("Count = get");
    p.print(gsname);p.println("Count();");
    p.print("                if (");
    p.print(attrName);p.print("Count != obj1.get");
    p.print(gsname);p.println("Count()) {");
    p.println("                    if (logger.isLoggable(Level.FINE)) {");
    p.print("                        logger.fine(\"lists ");
    p.print(attrName);p.println(" has different sizes\");");
    p.println("                    }");
    p.println("                    return false;");
    p.println("                }");
    p.print("                for (int i = 0; i < ");
    p.print(attrName);p.println("Count; i++) {");
    p.print("                    ");
    p.print(jh.getFullClassName(attr.getType()));p.print(" value1 = get");
    p.print(gsname);p.println("(i);");
    p.print("                    ");
    p.print(jh.getFullClassName(attr.getType()));p.print(" value2 = obj1.get");
    p.print(gsname);p.println("(i);");
    p.print("");
    
                    genValueCompare(attr, "value1", "value2");
p.println("");
    p.println("                } // end of for");
    p.println("            }");
    p.print("");
    
        } // end of genListAttr
        public void genSimpleAttr(com.sun.grid.cull.CullAttr attr) {
            String attrName = jh.getAttrName(attr);
            String gsname = Character.toUpperCase(attrName.charAt(0)) + attrName.substring(1);
            String getter = null;
            if (jh.getClassName(attr.getType()).endsWith("oolean")) {
                getter = "is" + gsname;
            } else {
                getter = "get" + gsname;
            }
p.println("");
    p.println("            {");
    p.print("                ");
    p.print(jh.getFullClassName(attr.getType()));p.print(" value1 = ");
    p.print(getter);p.println("();");
    p.print("                ");
    p.print(jh.getFullClassName(attr.getType()));p.print(" value2 = obj1.");
    p.print(getter);p.println("();        ");
    p.print("");
    
                genValueCompare(attr, "value1", "value2");
p.println("");
    p.println("            }");
    p.print("");
    
        } // end of genSimpleAttr
        public void genValueCompare(com.sun.grid.cull.CullAttr attr, String value1, String value2) {
            if (jh.isPrimitiv(attr)) { 
p.println("");
    p.print("            if (");
    p.print(value1);p.print(" != ");
    p.print(value2);p.println(") {");
    p.println("                if (logger.isLoggable(Level.FINE)) { ");
    p.print("                    logger.fine(\"primitive attributes ");
    p.print(attr.getName());p.println(" are not equal\");");
    p.println("                }");
    p.println("                return false;");
    p.println("            }");
    p.print("");
    
            } else {
p.println("");
    p.print("            if (");
    p.print(value1);p.println(" == null) {");
    p.print("                if (");
    p.print(value2);p.println(" != null) {");
    p.println("                    if (logger.isLoggable(Level.FINE)) {");
    p.print("                        logger.fine(\"attribute ");
    p.print(attr.getName());p.print(" of obj1 \" + ");
    p.print(value2);p.print(" + \" is not null as obj \" + ");
    p.print(value1);p.println(");");
    p.println("                    }");
    p.println("                    return false;");
    p.println("                }");
    p.println("            } else {");
    p.print("");
    
                if (jh.getClassName(attr.getType()).equals("String") || 
                    cullDef.getCullObject(attr.getType()).getType() == com.sun.grid.cull.CullObject.TYPE_MAPPED) {
p.println("");
    p.print("                if (!");
    p.print(value1);p.print(".equals(");
    p.print(value2);p.println(")) {");
    p.println("                    if (logger.isLoggable(Level.FINE)) {");
    p.print("                        logger.fine(\"attributes ");
    p.print(attr.getName());p.print(" are not equal: \" + ");
    p.print(value1);p.print(" + \" != \" + ");
    p.print(value2);p.println(");");
    p.println("                    }");
    p.println("                    return false;");
    p.println("                }");
    p.print("");
    
                } else {
p.println("");
    p.print("                if (!");
    p.print(value1);p.print(".equalsCompletely(");
    p.print(value2);p.println(")) {");
    p.println("                    return false;");
    p.println("                }           ");
    p.print("");
    
                }
p.println("");
    p.println("            }");
    p.print("");
    
            }
        } // end of genValueCompare
    } // end of EqualsCompletelyGenerator
p.println("    ");
    p.println("    ");
    p.println("    public boolean equalsCompletely(Object obj) {");
    p.println("        Logger logger = Logger.getLogger(getClass().getName());");
    p.print("        if (obj instanceof  ");
    p.print(classname);p.println(") {");
    p.print("            ");
    p.print(jh.getFullClassName(cullObj));p.print(" obj1 = (");
    p.print(jh.getFullClassName(cullObj));p.println(")obj;");
    p.print("");
    
    EqualsCompletelyGenerator equalsCompletelyGenerator = new EqualsCompletelyGenerator();
    for (int i = 0; i < cullObj.getAttrCount(); i++ ) {
        attr = cullObj.getAttr(i);
        equalsCompletelyGenerator.gen(attr);
    }
p.println("");
    p.println("            return true;");
    p.println("        } else {");
    p.println("            return true;");
    p.println("        }");
    p.println("    }");
    p.println("  ");
    p.println("    public java.lang.String toString() {");
    p.println("        StringBuilder ret = new StringBuilder();");
    p.print("        ret.append(\"");
    p.print(classname);p.println("(\");");
    p.print("");
    
    {
        boolean first = true;
        com.sun.grid.cull.CullObject c = cullObj;
        if (cullObj.getParentObject() != null) {
            c = cullObj.getParentObject();
        }
        for (int i = 0; i < c.getAttrCount(); i++) {
            attr = c.getAttr(i);
            String attrName = jh.getAttrName(attr);
            String gsname = Character.toUpperCase(attrName.charAt(0)) + attrName.substring(1);
            if (attr.isPrimaryKey()) {
                if (first) {
                    first = false;
                } else {
p.println("");
    p.println("        ret.append(\", \");");
    p.print("");
    
                }
p.println("");
    p.print("        ret.append(get");
    p.print(gsname);p.println("());");
    p.print("");
    
        }
    }
}
p.println("");
    p.println("        ret.append(\")\");");
    p.println("        return ret.toString();");
    p.println("    }");
    p.println("");
    p.print("");
    
    class DumpCompletelyGenerator {
        public void dump(com.sun.grid.cull.CullAttr attr) {
            if (!attr.isReadOnly()) {
                if (attr instanceof com.sun.grid.cull.CullMapListAttr) {
                    dumpMapListAttr((com.sun.grid.cull.CullMapListAttr)attr);
                } else if (attr instanceof com.sun.grid.cull.CullMapAttr) {
                    dumpMapAttr((com.sun.grid.cull.CullMapAttr)attr);
                } else if (attr instanceof com.sun.grid.cull.CullListAttr) {
                    dumpListAttr((com.sun.grid.cull.CullListAttr)attr);
                } else {
                    dumpSimpleAttr(attr);
                }
            }
        } // end of dump
        public void dumpMapListAttr(com.sun.grid.cull.CullMapListAttr attr) {
            com.sun.grid.cull.CullAttr keyAttr = attr.getKeyAttr();
            com.sun.grid.cull.CullAttr valueAttr = attr.getValueAttr();
            String attrName = jh.getAttrName(attr);
            if (attrName.endsWith("List")) {
                attrName = attrName.substring(0, attrName.length() - 4);
            }
            String gsname = Character.toUpperCase(attrName.charAt(0)) + attrName.substring(1);
p.println("        ");
    p.print("            for (");
    p.print(jh.getFullClassNameOrWrapper(keyAttr.getType()));p.print(" key : get");
    p.print(gsname);p.println("Keys()) {");
    p.print("                int count = get");
    p.print(gsname);p.println("Count(key);");
    p.println("                for (int i = 0; i < count; i++) {");
    p.print("                    ");
    p.print(jh.getFullClassName(valueAttr.getType()));p.print(" value = get");
    p.print(gsname);p.println("(key, i);");
    p.print("                    ");
    
                    if (jh.isPrimitiv(valueAttr) || jh.isString(valueAttr)) {
                    p.println("");
    p.print("                    sb.append(\"");
    p.print(gsname);p.println("[\" + key + \",\" + i + \"] = \" + value + \"\\n\");");
    p.print("                    ");
    
                    } else {
                    p.println("");
    p.print("                    sb.append(\"");
    p.print(gsname);p.println("[\" + key + \",\" + i + \"] = \" + value.dump() + \"\\n\");");
    p.print("                    ");
    
                    }
                    p.println("");
    p.println("                }");
    p.println("            }");
    p.print("");
    
        } // end of dumpMapListAttr
        public void dumpMapAttr(com.sun.grid.cull.CullMapAttr mapAttr) {
            com.sun.grid.cull.CullAttr keyAttr = mapAttr.getKeyAttr();
            com.sun.grid.cull.CullAttr valueAttr = mapAttr.getValueAttr();
            String attrName = jh.getAttrName(mapAttr);   
            if (attrName.endsWith("List")) {
                attrName = attrName.substring(0, attrName.length() - 4);
            }
            String gsname =  Character.toUpperCase(attrName.charAt(0)) + attrName.substring(1);
p.println("");
    p.print("            for (");
    p.print(jh.getFullClassNameOrWrapper(keyAttr.getType()));p.print(" key : get");
    p.print(gsname);p.println("Keys()) {");
    p.print("                ");
    p.print(jh.getFullClassName(valueAttr.getType()));p.print(" value = get");
    p.print(gsname);p.println("(key);");
    p.print("                ");
    
                if (jh.isPrimitiv(valueAttr) || jh.isString(valueAttr)) {
                p.println("");
    p.print("                sb.append(\"");
    p.print(gsname);p.println("[\" + key + \"] = \" + value + \"\\n\");");
    p.print("                ");
    
                } else {
                p.println("");
    p.print("                sb.append(\"");
    p.print(gsname);p.println("[\" + key + \"] = \" + value.dump() + \"\\n\");");
    p.print("                ");
    
                }
                p.println("");
    p.println("            }");
    p.print("");
    
        } // end of dumpMapAttr
        public void dumpListAttr(com.sun.grid.cull.CullListAttr attr) {
            String attrName = jh.getAttrName(attr);
            if (attrName.endsWith("List")) {
                attrName  = attrName.substring(0, attrName.length() - 4);
            }
            String gsname = Character.toUpperCase(attrName.charAt(0)) + attrName.substring(1);
p.println("");
    p.print("            int ");
    p.print(attrName);p.print("Count = get");
    p.print(gsname);p.println("Count();");
    p.print("            for (int i = 0; i < ");
    p.print(attrName);p.println("Count; i++) {");
    p.print("                ");
    p.print(jh.getFullClassName(attr.getType()));p.print(" value = get");
    p.print(gsname);p.println("(i);");
    p.print("                ");
    
                if (jh.isPrimitiv(attr) || jh.isString(attr)) {
                p.println("");
    p.print("                sb.append(\"");
    p.print(gsname);p.println("[\" + i + \"] = \" + value + \"\\n\");");
    p.print("                ");
    
                } else {
                p.println("");
    p.print("                sb.append(\"");
    p.print(gsname);p.println("[\" + i + \"] = \" + value.dump() + \"\\n\");");
    p.print("                ");
    
                }
                p.println("");
    p.println("            } // end of for");
    p.print("");
    
        } // end of dumpListAttr
        public void dumpSimpleAttr(com.sun.grid.cull.CullAttr attr) {
            String attrName = jh.getAttrName(attr);
            String gsname = Character.toUpperCase(attrName.charAt(0)) + attrName.substring(1);
            String getter = null;
            if (jh.getClassName(attr.getType()).endsWith("oolean")) {
                getter = "is" + gsname;
            } else {
                getter = "get" + gsname;
            }
p.println("");
    p.println("            {");
    p.print("                ");
    p.print(jh.getFullClassName(attr.getType()));p.print(" value = ");
    p.print(getter);p.println("();");
    p.print("                sb.append(\"");
    p.print(gsname);p.println(" = \" + value + \"\\n\");");
    p.println("            }");
    p.print("");
    
        } // end of dumpSimpleAttr
    } // end of DumpCompletelyGenerator
p.println("");
    p.println("");
    p.println("    public java.lang.String dump() {");
    p.println("        StringBuilder sb = new StringBuilder();");
    p.print("");
    
        DumpCompletelyGenerator dumpCompletelyGenerator = new DumpCompletelyGenerator();
        for (int i = 0; i < cullObj.getAttrCount(); i++) {
            attr = cullObj.getAttr(i);
            dumpCompletelyGenerator.dump(attr);
        }
p.println("");
    p.println("        return sb.toString();");
    p.println("    }    ");
    p.print("");
    
    if (classname.equals("ComplexEntryImpl")) {
p.println("");
    p.print("        ");

    // BEGIN /net/pinot/disk1/playpen/dev/OpenGridScheduler/GE2011.11p1/source/libs/jgdi/templates/javamodel_impl_CE.static --------------------------
    p.print("");
    
/*___INFO__MARK_BEGIN__*/
/*************************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  the Sun Industry Standards Source License Version 1.2
 *
 *  Sun Microsystems Inc., March, 2001
 *
 *
 *  Sun Industry Standards Source License Version 1.2
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.2 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *   Copyright: 2001 by Sun Microsystems, Inc.
 *
 *   All Rights Reserved.
 *
 ************************************************************************/
/*___INFO__MARK_END__*/
p.println("");
    p.println("   private class Convertor {");
    p.println("     private String typev[] = {");
    p.println("        \"??????\",");
    p.println("        \"INT\",     /* TYPE_INT */");
    p.println("        \"STRING\",  /* TYPE_STR */");
    p.println("        \"TIME\",    /* TYPE_TIM */");
    p.println("        \"MEMORY\",  /* TYPE_MEM */");
    p.println("        \"BOOL\",    /* TYPE_BOO */");
    p.println("        \"CSTRING\", /* TYPE_CSTR */");
    p.println("        \"HOST\",    /* TYPE_HOST */");
    p.println("        \"DOUBLE\",  /* TYPE_DOUBLE */");
    p.println("        \"RESTRING\", /* TYPE_RESTR */");
    p.println("     ");
    p.println("        \"TYPE_ACC\",/* TYPE_ACC */");
    p.println("        \"TYPE_LOG\",/* TYPE_LOG */");
    p.println("        \"TYPE_LOF\" /* TYPE_LOF */");
    p.println("     };");
    p.println("     ");
    p.println("     private String ropv[] = {");
    p.println("        \"??\",");
    p.println("        \"==\", /* CMPLXEQ_OP */");
    p.println("        \">=\", /* CMPLXGE_OP */");
    p.println("        \">\",  /* CMPLXGT_OP */");
    p.println("        \"<\",  /* CMPLXLT_OP */");
    p.println("        \"<=\", /* CMPLXLE_OP */");
    p.println("        \"!=\"  /* CMPLXNE_OP */");
    p.println("     };");
    p.println("     ");
    p.println("     private String fopv[] = {");
    p.println("        \"??\",");
    p.println("        \"NO\",       /* REQU_NO */");
    p.println("        \"YES\",      /* REQU_YES */");
    p.println("        \"FORCED\"    /* REQU_FORCED */");
    p.println("     };");
    p.println("     ");
    p.println("     private String typeToString(int type) {");
    p.println("        if (type < 1 || type >= typev.length) {");
    p.println("           type = 0;");
    p.println("        }");
    p.println("        return typev[type];");
    p.println("     }");
    p.println("     private int typeToInt(String type) {");
    p.println("        for (int i=1; i< typev.length; i++) {");
    p.println("           if (type.equalsIgnoreCase(typev[i])) {");
    p.println("              return i;");
    p.println("           }");
    p.println("        }");
    p.println("        return 0;");
    p.println("     }");
    p.println("     ");
    p.println("     private String opToString(int op) {");
    p.println("        if (op < 1 || op >= ropv.length) {");
    p.println("           op = 0;");
    p.println("        }");
    p.println("        return ropv[op];");
    p.println("     }");
    p.println("     private int opToInt(String type) {");
    p.println("        for (int i=1; i< ropv.length; i++) {");
    p.println("           if (type.equalsIgnoreCase(ropv[i])) {");
    p.println("              return i;");
    p.println("           }");
    p.println("        }");
    p.println("        return 0;");
    p.println("     }");
    p.println("     ");
    p.println("     private String reqToString(int op) {");
    p.println("        if (op < 1 || op >= fopv.length) {");
    p.println("           op = 0;");
    p.println("        }");
    p.println("        return fopv[op];");
    p.println("     }");
    p.println("     private int reqToInt(String type) {");
    p.println("        for (int i=1; i< fopv.length; i++) {");
    p.println("           if (type.equalsIgnoreCase(fopv[i])) {");
    p.println("              return i;");
    p.println("           }");
    p.println("        }");
    p.println("        return 0;");
    p.println("     }");
    p.println("  }  //End of Convertor inner class");
    p.println("  ");
    p.println("  public String typeToString(int type) {");
    p.println("     return new Convertor().typeToString(type);");
    p.println("  };");
    p.println("  public int typeToInt(String type) {");
    p.println("     return new Convertor().typeToInt(type);");
    p.println("  };");
    p.println("  ");
    p.println("  public String opToString(int op) {");
    p.println("     return new Convertor().opToString(op);");
    p.println("  };");
    p.println("  public int opToInt(String type) {");
    p.println("     return new Convertor().opToInt(type);");
    p.println("  };");
    p.println("  ");
    p.println("  public String reqToString(int op) {");
    p.println("     return new Convertor().reqToString(op);");
    p.println("  };");
    p.println("  public int reqToInt(String type) {");
    p.println("     return new Convertor().reqToInt(type);");
    p.println("  };");

    // END /net/pinot/disk1/playpen/dev/OpenGridScheduler/GE2011.11p1/source/libs/jgdi/templates/javamodel_impl_CE.static --------------------------
    p.println("");
    p.print("");
    
    } else if (classname.equals("AdvanceReservationImpl")) {
p.println("");
    p.print("        ");

    // BEGIN /net/pinot/disk1/playpen/dev/OpenGridScheduler/GE2011.11p1/source/libs/jgdi/templates/javamodel_impl_AR.static --------------------------
    p.print("");
    
/*___INFO__MARK_BEGIN__*/
/*************************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  the Sun Industry Standards Source License Version 1.2
 *
 *  Sun Microsystems Inc., March, 2001
 *
 *
 *  Sun Industry Standards Source License Version 1.2
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.2 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *   Copyright: 2001 by Sun Microsystems, Inc.
 *
 *   All Rights Reserved.
 *
 ************************************************************************/
/*___INFO__MARK_END__*/
p.println("");
    p.println("   private static String[] arState = { \"u\", \"w\", \"r\", \"x\", \"d\", \"E\", \"W\" };");
    p.println("");
    p.println("   public String getStateAsString() {");
    p.println("      int ord = getState();");
    p.println("      if (ord < 0 || ord > arState.length) {");
    p.println("         return \"?\";");
    p.println("      }");
    p.println("      return arState[ord];");
    p.println("   }");
    p.println("");

    // END /net/pinot/disk1/playpen/dev/OpenGridScheduler/GE2011.11p1/source/libs/jgdi/templates/javamodel_impl_AR.static --------------------------
    p.println("");
    p.print("");
    
    }
p.println("");
    p.println(" ");
    p.println("}");
  } // end of print
} // end of class javamodel_impl_jsp
