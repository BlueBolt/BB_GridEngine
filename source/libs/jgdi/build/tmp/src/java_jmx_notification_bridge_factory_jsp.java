public class java_jmx_notification_bridge_factory_jsp implements com.sun.grid.cull.template.Template {
  public void print(final com.sun.grid.cull.Printer p, final java.util.Map params) {
    p.println("/*___INFO__MARK_BEGIN__*/");
    p.println("/*************************************************************************");
    p.println(" *");
    p.println(" *  The Contents of this file are made available subject to the terms of");
    p.println(" *  the Sun Industry Standards Source License Version 1.2");
    p.println(" *");
    p.println(" *  Sun Microsystems Inc., March, 2001");
    p.println(" *");
    p.println(" *");
    p.println(" *  Sun Industry Standards Source License Version 1.2");
    p.println(" *  =================================================");
    p.println(" *  The contents of this file are subject to the Sun Industry Standards");
    p.println(" *  Source License Version 1.2 (the \"License\"); You may not use this file");
    p.println(" *  except in compliance with the License. You may obtain a copy of the");
    p.println(" *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html");
    p.println(" *");
    p.println(" *  Software provided under this License is provided on an \"AS IS\" basis,");
    p.println(" *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,");
    p.println(" *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,");
    p.println(" *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.");
    p.println(" *  See the License for the specific provisions governing your rights and");
    p.println(" *  obligations concerning the Software.");
    p.println(" *");
    p.println(" *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.");
    p.println(" *");
    p.println(" *   Copyright: 2001 by Sun Microsystems, Inc.");
    p.println(" *");
    p.println(" *   All Rights Reserved.");
    p.println(" *");
    p.println(" ************************************************************************/");
    p.println("/*___INFO__MARK_END__*/");
    p.println("/**");
    p.println(" *  Generated from java_event_client.jsp");
    p.println(" *  !!! DO NOT EDIT THIS FILE !!!");
    p.println(" */");
    p.print("");
    
  com.sun.grid.cull.JavaHelper jh = (com.sun.grid.cull.JavaHelper)params.get("javaHelper");
  com.sun.grid.cull.CullDefinition cullDef = (com.sun.grid.cull.CullDefinition)params.get("cullDef");
p.println("");
    p.println("package com.sun.grid.jgdi.management;");
    p.println("");
    p.println("import javax.management.MBeanNotificationInfo;");
    p.println("import javax.management.Notification;");
    p.println("import com.sun.grid.jgdi.EventClient;");
    p.println("import com.sun.grid.jgdi.event.Event;");
    p.println("import java.util.*;");
    p.println("import java.util.logging.Logger;");
    p.println("import java.util.logging.Level;");
    p.println("/** ");
    p.println(" *  Helper class for mapping JGDI Events to JMX notifications");
    p.println(" *");
    p.println(" */");
    p.println("public class NotificationBridgeFactory {");
    p.println("");
    p.println("    private static final Logger log = Logger.getLogger(NotificationBridgeFactory.class.getName());");
    p.println("    private static final Map<Class, EventToNotification> eventMap = new HashMap<Class, EventToNotification>();");
    p.println("");
    p.println("    private static class EventToNotification {");
    p.println("");
    p.println("        private final String eventName;");
    p.println("        private final Class eventClass;");
    p.println("        private final MBeanNotificationInfo notificationInfo;");
    p.println("");
    p.println("        public EventToNotification(String eventName, Class eventClass) {");
    p.println("            this.eventName = eventName;");
    p.println("            this.eventClass = eventClass;");
    p.println("            this.notificationInfo = new MBeanNotificationInfo(new String[]{eventName}, eventClass.getName(), null);");
    p.println("        }");
    p.println("");
    p.println("        public MBeanNotificationInfo getNotificationInfo() {");
    p.println("            return notificationInfo;");
    p.println("        }");
    p.println("");
    p.println("        public Notification createNotification(Event event, long seqNumber) {");
    p.println("            Notification notification = new Notification(eventName, EventClient.class.getName(), seqNumber);");
    p.println("            notification.setUserData(event);");
    p.println("            return notification;");
    p.println("        }");
    p.println("    }");
    p.println("");
    p.println("    public static Notification createNotification(Event evt, long seqNumber) {");
    p.println("        EventToNotification bridge = eventMap.get(evt.getClass());");
    p.println("        if (bridge != null) {");
    p.println("            log.log(Level.FINE, \"create notification for event {0}\", evt);");
    p.println("            return bridge.createNotification(evt, seqNumber);");
    p.println("        } else {");
    p.println("            return null;");
    p.println("        }");
    p.println("    }");
    p.println("    ");
    p.println("    public static NotificationBridge newInstance(String url) {    ");
    p.println("        return new NotificationBridge(url);");
    p.println("    }");
    p.println("    ");
    p.println("    private static void registerEvent(String eventName, Class eventClass) {");
    p.println("        if (log.isLoggable(Level.FINER)) {");
    p.println("            log.entering(\"NotificationBridgeFactory\", \"registerEvent\", new Object[]{eventName, eventClass});");
    p.println("        }");
    p.println("        EventToNotification evtNot = new EventToNotification(eventName, eventClass);");
    p.println("        eventMap.put(eventClass, evtNot);");
    p.println("        log.exiting(\"NotificationBridgeFactory\", \"registerEvent\");");
    p.println("    }");
    p.println("");
    p.println("    public static MBeanNotificationInfo[] createMBeanNotificationInfo() {");
    p.println("        log.entering(\"NotificationBridgeFactory\", \"createMBeanNotificationInfo\");");
    p.println("        MBeanNotificationInfo [] ret = new MBeanNotificationInfo[eventMap.size()];");
    p.println("        int i = 0;");
    p.println("        for (Map.Entry<Class, EventToNotification> entry : eventMap.entrySet()) {");
    p.println("            ret[i++] = entry.getValue().getNotificationInfo();");
    p.println("        }");
    p.println("        log.exiting(\"NotificationBridgeFactory\", \"createMBeanNotificationInfo\", ret);");
    p.println("        return ret;");
    p.println("    }");
    p.println("    ");
    p.println("    ");
    p.println("    static {");
    p.print("");
    
    com.sun.grid.cull.CullObject cullObj = null;    
    for (String name : cullDef.getObjectNames()) {
      cullObj = cullDef.getCullObject(name); 
      name = cullObj.getIdlName();
//      System.out.println("name = " + name + ", cullname = " + cullObj.getName() + " " + 
//                         (cullObj.hasAddEvent() ? "A" : "") + 
//                         (cullObj.hasDeleteEvent() ? "D" : "") +
//                         (cullObj.hasGetListEvent() ? "L" : "") +
//                         (cullObj.hasGetEvent() ? "G" : "") +
//                         (cullObj.hasModifyEvent() ? "M" : ""));
      if(name == null) {
         throw new IllegalStateException("Have no idl name for " + cullObj.getName());
      }
      String notifType = null;
      String classname = null;
      if(cullObj.hasAddEvent()) {
p.println("");
    p.print("      registerEvent(\"Add");
    p.print(name);p.print("\", com.sun.grid.jgdi.event.");
    p.print(cullObj.getIdlName());p.println("AddEvent.class);");
    p.print("");
        } 
      
      if(cullObj.hasDeleteEvent()) {
p.println("");
    p.print("      registerEvent(\"Del");
    p.print(name);p.print("\", com.sun.grid.jgdi.event.");
    p.print(cullObj.getIdlName());p.println("DelEvent.class);");
    p.print("");
    
      }
      if(cullObj.hasModifyEvent()) {
p.println("");
    p.print("      registerEvent(\"Mod");
    p.print(name);p.print("\", com.sun.grid.jgdi.event.");
    p.print(cullObj.getIdlName());p.println("ModEvent.class);");
    p.print("");
    
      }
      if(cullObj.hasGetListEvent()) {
p.println("");
    p.print("      registerEvent(\"List");
    p.print(name);p.print("\", com.sun.grid.jgdi.event.");
    p.print(cullObj.getIdlName());p.println("ListEvent.class);");
    p.print("");
    
      }
   } // end of for

   String [] specialEvents = {
       "QmasterGoesDown",
       "SchedulerRun",
       "Shutdown",
       "JobFinish",
       "JobUsage",
       "JobFinalUsage",
       "JobPriorityMod",
       "QueueInstanceSuspend",
       "QueueInstanceUnsuspend",
       "ConnectionClosed"
   };
   
   for (int i = 0; i < specialEvents.length; i++) {

p.println("");
    p.print("      registerEvent(\"");
    p.print(specialEvents[i]);p.print("\", com.sun.grid.jgdi.event.");
    p.print(specialEvents[i]);p.println("Event.class);");
    p.print("");
    
   } // end of for special events
p.println("");
    p.println("   }");
    p.println("}");
  } // end of print
} // end of class java_jmx_notification_bridge_factory_jsp
