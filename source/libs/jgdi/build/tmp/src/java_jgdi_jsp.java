public class java_jgdi_jsp implements com.sun.grid.cull.template.Template {
  public void print(final com.sun.grid.cull.Printer p, final java.util.Map params) {
    p.println("/*___INFO__MARK_BEGIN__*/");
    p.println("/*************************************************************************");
    p.println(" *");
    p.println(" *  The Contents of this file are made available subject to the terms of");
    p.println(" *  the Sun Industry Standards Source License Version 1.2");
    p.println(" *");
    p.println(" *  Sun Microsystems Inc., March, 2001");
    p.println(" *");
    p.println(" *");
    p.println(" *  Sun Industry Standards Source License Version 1.2");
    p.println(" *  =================================================");
    p.println(" *  The contents of this file are subject to the Sun Industry Standards");
    p.println(" *  Source License Version 1.2 (the \"License\"); You may not use this file");
    p.println(" *  except in compliance with the License. You may obtain a copy of the");
    p.println(" *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html");
    p.println(" *");
    p.println(" *  Software provided under this License is provided on an \"AS IS\" basis,");
    p.println(" *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,");
    p.println(" *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,");
    p.println(" *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.");
    p.println(" *  See the License for the specific provisions governing your rights and");
    p.println(" *  obligations concerning the Software.");
    p.println(" *");
    p.println(" *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.");
    p.println(" *");
    p.println(" *   Copyright: 2001 by Sun Microsystems, Inc.");
    p.println(" *");
    p.println(" *   All Rights Reserved.");
    p.println(" *");
    p.println(" ************************************************************************/");
    p.println("/*___INFO__MARK_END__*/");
    p.println("/**");
    p.println(" *  Generated from java_jgdi.jsp");
    p.println(" *  !!! DO NOT EDIT THIS FILE !!!");
    p.println(" */");
    p.print("");
    
  final com.sun.grid.cull.JavaHelper jh = (com.sun.grid.cull.JavaHelper)params.get("javaHelper");
  final com.sun.grid.cull.CullDefinition cullDef = (com.sun.grid.cull.CullDefinition)params.get("cullDef");
  
  final java.util.logging.Logger logger = java.util.logging.Logger.getLogger("cullconv");
  
  class JGDIGenerator extends com.sun.grid.cull.AbstractGDIGenerator {
     
     public JGDIGenerator(com.sun.grid.cull.CullObject cullObj) {
        super(cullObj.getIdlName(), jh.getClassName(cullObj), cullObj);
        addPrimaryKeys(cullObj, jh);
     }
     
     public void genImport() {
        if(!(cullObject.getType() == cullObject.TYPE_PRIMITIVE || 
             cullObject.getType() == cullObject.TYPE_MAPPED)) {
p.print("import com.sun.grid.jgdi.configuration.");
    p.print(classname);p.println(";");
    p.print("");
            
        }
     }

public void genUpdateMethod() {
p.println("");
    p.println("   /**");
    p.print("    *   Update a <code>");
    p.print(name);p.println("</code> object.");
    p.print("    *   @param obj   the <code>");
    p.print(name);p.println("</code> object with the new values");
    p.println("    *   @throws JGDIException on any error on the GDI layer");
    p.println("    */");
    p.print("   public void update");
    p.print(name);p.print("(");
    p.print(classname);p.println(" obj) throws JGDIException;");
    p.println("");
    p.println("   /**");
    p.print("    *   Update a <code>");
    p.print(name);p.println("</code> object.");
    p.print("    *   @param obj      the <code>");
    p.print(name);p.println("</code> object with the new values");
    p.println("    *   @param answers  the <code>answer list</code> object");
    p.println("    *   @throws JGDIException on any error on the GDI layer");
    p.println("    */");
    p.print("   public void update");
    p.print(name);p.print("WithAnswer(");
    p.print(classname);p.println(" obj, List<JGDIAnswer> answers) throws JGDIException;");
    p.print("");
            
    } // end of genUpdateMethod
    
    public void genGetMethod() {
p.println("");
    p.println("   /**");
    p.print("    *   Get the <code>");
    p.print(name);p.println("</code> object.");
    p.print("    *   @return the <code>");
    p.print(classname);p.println("</code> object.");
    p.println("    *   @throws JGDIException on any error on the GDI layer");
    p.println("    */");
    p.print("   public ");
    p.print(classname);p.print(" get");
    p.print(name);p.println("() throws JGDIException;");
    p.println("");
    p.println("   /**");
    p.print("    *   Get the <code>");
    p.print(name);p.println("</code> object.");
    p.println("    *   @param answers  the <code>answer list</code> object");
    p.print("    *   @return the <code>");
    p.print(classname);p.println("</code> object.");
    p.println("    *   @throws JGDIException on any error on the GDI layer");
    p.println("    */");
    p.print("   public ");
    p.print(classname);p.print(" get");
    p.print(name);p.println("WithAnswer(List<JGDIAnswer> answers) throws JGDIException;");
    p.print("");
    
} // end of genGetMethod
    
public void genGetListMethod() {
p.println("");
    p.println("   /**");
    p.print("    *   Get the list of all defined <code>");
    p.print(name);p.println("</code> objects.");
    p.print("    *   @return list of <code>");
    p.print(name);p.println("</code> objects");
    p.println("    *   @throws JGDIException on any error on the GDI layer");
    p.println("    */");
    p.print("   public List< ");
    p.print(classname);p.print(" > get");
    p.print(name);p.println("List() throws JGDIException;");
    p.println("   /**");
    p.print("    *   Get the list of all defined <code>");
    p.print(name);p.println("</code> objects.");
    p.println("    *   @param answers  the <code>answer list</code> object    ");
    p.print("    *   @return list of <code>");
    p.print(name);p.println("</code> objects");
    p.println("    *   @throws JGDIException on any error on the GDI layer");
    p.println("    */");
    p.print("   public List< ");
    p.print(classname);p.print(" > get");
    p.print(name);p.println("ListWithAnswer(List<JGDIAnswer> answers) throws JGDIException;");
    p.print("");
    
} // end of genGetListMethod
    
public void genAddMethod() {
p.println("    ");
    p.println("   ");
    p.println("   /**");
    p.print("    *   Add a new <code>");
    p.print(name);p.println("</code> object.");
    p.print("    *   @param  obj      the new <code>");
    p.print(name);p.println("</code> object");
    p.println("    *   @throws JGDIException on any error on the GDI layer");
    p.println("    */");
    p.print("   public void add");
    p.print(name);p.print("(");
    p.print(classname);p.println(" obj) throws JGDIException;");
    p.println("");
    p.println("   /**");
    p.print("    *   Add a new <code>");
    p.print(name);p.println("</code> object.");
    p.print("    *   @param obj       the new <code>");
    p.print(name);p.println("</code> object");
    p.println("    *   @param answers   the <code>answer list</code> object");
    p.println("    *   @throws JGDIException on any error on the GDI layer");
    p.println("    */");
    p.print("   public void add");
    p.print(name);p.print("WithAnswer(");
    p.print(classname);p.println(" obj, List<JGDIAnswer> answers) throws JGDIException;");
    p.println("");
    p.print("");
     if ((name.equals("Manager")) || 
       (name.equals("Operator")) ||
       (name.equals("AdminHost")) || 
       (name.equals("SubmitHost"))) { p.println("");
    p.println("   /**");
    p.print("    *   Add a new <code>");
    p.print(name);p.println("</code> object.");
    p.println("    *   @param  name the new <code>String</code> object");
    p.println("    *   @throws JGDIException on any error on the GDI layer");
    p.println("    */");
    p.print("   public void add");
    p.print(name);p.println("(String name) throws JGDIException;");
    p.println("");
    p.println("   /**");
    p.print("    *   Add a new <code>");
    p.print(name);p.println("</code> object.");
    p.println("    *   @param  name the new <code>String</code> object");
    p.println("    *   @param  answers the <code>answer list</code> object");
    p.println("    *   @throws JGDIException on any error on the GDI layer");
    p.println("    */");
    p.print("   public void add");
    p.print(name);p.println("WithAnswer(String name, List<JGDIAnswer> answers) throws JGDIException;");
    p.println("");
    p.print("");
    
     } // end if name.equals()
   } // end of genAddMethod

public void genDeleteMethod() {
p.println("");
    p.println("   /**");
    p.print("    *   Delete a <code>");
    p.print(name);p.println("</code> object.");
    p.print("    *   @param obj  <code>");
    p.print(name);p.println("</code> object with the primary key information");
    p.println("    *   @throws JGDIException on any error on the GDI layer");
    p.println("    */");
    p.print("   public void delete");
    p.print(name);p.print("(");
    p.print(classname);p.println(" obj) throws JGDIException;");
    p.println("   ");
    p.println("   /**");
    p.print("    *   Delete a <code>");
    p.print(name);p.println("</code> object.");
    p.print("    *   @param obj       the <code>");
    p.print(name);p.println("</code> object with the primary key information");
    p.println("    *   @param answers   the <code>answer list</code> object");
    p.println("    *   @throws JGDIException on any error on the GDI layer");
    p.println("    */");
    p.print("   public void delete");
    p.print(name);p.print("WithAnswer(");
    p.print(classname);p.println(" obj, List<JGDIAnswer> answers) throws JGDIException;");
    p.println("");
    p.print("");
    
} // end of genDeleteMethod

public void genDeleteByPrimaryKeyMethod() {
p.println("");
    p.println("   /**");
    p.print("    *   Delete a <code>");
    p.print(name);p.println("</code> object by its primary key");
    p.print("");
    
    for (java.util.Map.Entry<String, String> entry: primaryKeys.entrySet()) {
       String pkName = entry.getKey();
       String pkType = entry.getValue();
p.print("    *  @param ");
    p.print(pkName);p.print("   the ");
    p.print(pkName);p.print(" of the <code>");
    p.print(name);p.println("</code> object");
    p.print("");
      } // end of for
p.println("    *  @throws JGDIException on any error on the GDI layer");
    p.println("    */");
    p.print("   public void delete");
    p.print(name);p.print("(");
    
      boolean first = true;
      for (java.util.Map.Entry<String, String> entry: primaryKeys.entrySet()) {
          String pkName = entry.getKey();
          String pkType = entry.getValue();
          if (first) {
             first = false;
          } else { p.print(" , ");
               
       } p.print(" ");
    p.print(pkType);p.print(" ");
    p.print(pkName);p.print(" ");
    
    } // end of for  
    p.println(") throws JGDIException;");
    p.println("   /**");
    p.print("    *   Delete a <code>");
    p.print(name);p.println("</code> object by its primary key");
    p.print("");
    
    for (java.util.Map.Entry<String, String> entry: primaryKeys.entrySet()) {
       String pkName = entry.getKey();
       String pkType = entry.getValue();
p.print("    *  @param ");
    p.print(pkName);p.print("   the ");
    p.print(pkName);p.print(" of the <code>");
    p.print(name);p.println("</code> object");
    p.print("");
     
    } // end of for    
p.println("    *  @param answers   the <code>answer list</code> object");
    p.println("    *  @throws JGDIException on any error on the GDI layer");
    p.println("    */");
    p.print("   public void delete");
    p.print(name);p.print("WithAnswer(");
    
      first = true;  
      for (java.util.Map.Entry<String, String> entry: primaryKeys.entrySet()) {
          String pkName = entry.getKey();
          String pkType = entry.getValue();
          if (first) {
              first = false;
          } else { p.print(" , ");
               
       } p.print(" ");
    p.print(pkType);p.print(" ");
    p.print(pkName);p.print(" ");
    
    } // end of for
    p.println(", List<JGDIAnswer> answers) throws JGDIException;");
    p.println("");
    p.println("");
    p.println("   /**");
    p.print("    *   Delete several <code>");
    p.print(name);p.println("</code> objects by their primary key");
    p.print("");
    
    for (java.util.Map.Entry<String, String> entry: primaryKeys.entrySet()) {
       String pkName = entry.getKey();
       // String pkType = entry.getValue();
p.print("    *  @param ");
    p.print(pkName);p.print("s   array of ");
    p.print(pkName);p.print(" of the <code>");
    p.print(name);p.println("</code> objects");
    p.print("");
    
    } // end of for
p.println("    *  @param answers   the <code>answer list</code> object");
    p.println("    *  @throws JGDIException on any error on the GDI layer");
    p.println("    */");
    p.print("   public void delete");
    p.print(name);p.print("sWithAnswer(");
    
    first = true;
    for (java.util.Map.Entry<String, String> entry: primaryKeys.entrySet()) {
       String pkName = entry.getKey();
       // String pkType = entry.getValue();
       if (first) {
         first = false;
       } else {
            p.print(" , ");
               
       } 
       p.print(" String[] ");
    p.print(pkName);p.print("s ");
    
    } // end of for
    p.println("");
    p.print("");
     if (name.equals("Job") || name.equals("AdvanceReservation")) {p.println("");
    p.println("    , boolean forced, UserFilter userFilter");
    p.print("");
     }p.println("    , List<JGDIAnswer> answers) throws JGDIException;");
    p.print("");
    
} // end of genDeleteByPrimaryKeyMethod

public void genGetByPrimaryKeyMethod() {
p.println("");
    p.println("   /**");
    p.print("    *  Get a ");
    p.print(name);p.println(" by its primary key");
    p.println("    *");
    p.print("    *  @return the ");
    p.print(name);p.println("");
    p.print("");
    
    for (java.util.Map.Entry<String, String> entry: primaryKeys.entrySet()) {
       String pkName = entry.getKey();
       String pkType = entry.getValue();
p.print("    *  @param ");
    p.print(pkName);p.print("   the ");
    p.print(pkName);p.print(" of the <code>");
    p.print(name);p.println("</code> object");
    p.print("");
    
    } // end of for
p.print("    *  @return the found <code>");
    p.print(name);p.println("</code> object of <code>null</code>    ");
    p.println("    *  @throws JGDIException on any error on the GDI layer");
    p.println("    */");
    p.print("   public ");
    p.print(classname);p.print(" get");
    p.print(name);p.print("(");
    
    boolean first = true;  
    for (java.util.Map.Entry<String, String> entry: primaryKeys.entrySet()) {
       String pkName = entry.getKey();
       String pkType = entry.getValue();
       if (first) {
         first = false;
       } else {
            p.print(" , ");
               
       } 
       p.print(" ");
    p.print(pkType);p.print(" ");
    p.print(pkName);p.print(" ");
    
    } // end of for
    p.println(") throws JGDIException;");
    p.println("");
    p.println("   /**");
    p.print("    *  Get a ");
    p.print(name);p.println(" by its primary key");
    p.println("    *");
    p.print("    *  @return the ");
    p.print(name);p.println("");
    p.print("");
    
    for (java.util.Map.Entry<String, String> entry: primaryKeys.entrySet()) {
       String pkName = entry.getKey();
       String pkType = entry.getValue();
p.print("    *  @param ");
    p.print(pkName);p.print("   the ");
    p.print(pkName);p.print(" of the <code>");
    p.print(name);p.println("</code> object");
    p.print("");
    
    } // end of for
p.println("   *  @param answers   the <code>answer list</code> object  ");
    p.print("    *  @return the found <code>");
    p.print(name);p.println("</code> object of <code>null</code>    ");
    p.println("    *  @throws JGDIException on any error on the GDI layer");
    p.println("    */");
    p.print("   public ");
    p.print(classname);p.print(" get");
    p.print(name);p.print("WithAnswer(");
    
    first = true;  
    for (java.util.Map.Entry<String, String> entry: primaryKeys.entrySet()) {
       String pkName = entry.getKey();
       String pkType = entry.getValue();
       if (first) {
         first = false;
       } else {
            p.print(" , ");
               
       } 
       p.print(" ");
    p.print(pkType);p.print(" ");
    p.print(pkName);p.print(" ");
    
    } // end of for
    p.println(", List<JGDIAnswer> answers) throws JGDIException;");
    p.println("");
    p.print("");
    
     } // end of genGetByPrimaryKeyMethod
} // end of class JGDIGenerator
  
  // --------------------------------------------------------------------------
  // Build all generator instances
  // --------------------------------------------------------------------------
  java.util.ArrayList<JGDIGenerator> generators = new java.util.ArrayList<JGDIGenerator>();
  for (String name : cullDef.getObjectNames()) {
    com.sun.grid.cull.CullObject cullObj = cullDef.getCullObject(name);
    logger.fine("JGDIGenerator->handle " + cullObj.getName() + "(" + cullObj.getOperationString() +")");
    generators.add(new JGDIGenerator(cullObj));
  }
p.println("");
    p.println("");
    p.println("package com.sun.grid.jgdi;");
    p.println("");
    p.println("import java.util.List;");
    p.println("import com.sun.grid.jgdi.JGDIException;");
    p.println("import com.sun.grid.jgdi.configuration.JGDIAnswer;");
    p.println("import com.sun.grid.jgdi.monitoring.filter.UserFilter;");
    p.println("");
    p.print("");
     // Import all cull object names;
   for (JGDIGenerator gen : generators) {
     gen.genImport();
   }
p.println("");
    p.println("");
    p.println("/**");
    p.println(" *  <p>The class <code>JGDI</code> is the central interface for communication with");
    p.println(" *  the SGE master.</p>");
    p.println(" *");
    p.println(" *  <p>An instanceof of the interface can be obtained via the {@link JGDIFactory}. ");
    p.println(" *  For each <code>JGDI</code> instance the <code>close</code> method has to");
    p.println(" *  called to give the native parts of the implementation a chance to release");
    p.println(" *  the resources.</p>");
    p.println(" *");
    p.println(" *  <p>Example:</p>");
    p.println(" *  <pre>");
    p.println(" *     String url = \"bootstrap:///opt/sge@default:1026\";");
    p.println(" *     String user = \"sge_admin\";");
    p.println(" *     String password = \"secret\";");
    p.println(" *");
    p.println(" *     JGDI jgdi = JGDIFactory.newInstance(url, user, password);");
    p.println(" *     ...");
    p.println(" *     jgdi.close();");
    p.println(" *    ");
    p.println(" *  </pre>");
    p.println(" *");
    p.println(" *  <strong>Warning:</strong>  The JGDI interface will not be compatible with future Sun&trade; Grid Engine releases. ");
    p.println(" *");
    p.println(" *  @version 6.5");
    p.println(" *");
    p.println(" */");
    p.println("public interface JGDI extends JGDIBase {");
    p.print("");
    
  for (JGDIGenerator gen : generators) {
     gen.genMethods();
  }  
p.println("");
    p.println("   ");
    p.println("}");
  } // end of print
} // end of class java_jgdi_jsp
