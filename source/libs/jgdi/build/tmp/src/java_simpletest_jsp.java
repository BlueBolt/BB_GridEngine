public class java_simpletest_jsp implements com.sun.grid.cull.template.Template {
  public void print(final com.sun.grid.cull.Printer p, final java.util.Map params) {
    p.println("/*___INFO__MARK_BEGIN__*/");
    p.println("/*************************************************************************");
    p.println(" *");
    p.println(" *  The Contents of this file are made available subject to the terms of");
    p.println(" *  the Sun Industry Standards Source License Version 1.2");
    p.println(" *");
    p.println(" *  Sun Microsystems Inc., March, 2001");
    p.println(" *");
    p.println(" *");
    p.println(" *  Sun Industry Standards Source License Version 1.2");
    p.println(" *  =================================================");
    p.println(" *  The contents of this file are subject to the Sun Industry Standards");
    p.println(" *  Source License Version 1.2 (the \"License\"); You may not use this file");
    p.println(" *  except in compliance with the License. You may obtain a copy of the");
    p.println(" *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html");
    p.println(" *");
    p.println(" *  Software provided under this License is provided on an \"AS IS\" basis,");
    p.println(" *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,");
    p.println(" *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,");
    p.println(" *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.");
    p.println(" *  See the License for the specific provisions governing your rights and");
    p.println(" *  obligations concerning the Software.");
    p.println(" *");
    p.println(" *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.");
    p.println(" *");
    p.println(" *   Copyright: 2001 by Sun Microsystems, Inc.");
    p.println(" *");
    p.println(" *   All Rights Reserved.");
    p.println(" *");
    p.println(" ************************************************************************/");
    p.println("/*___INFO__MARK_END__*/");
    p.println("/**");
    p.println(" *  Generated from java_simpletest.jsp");
    p.println(" *  !!! DO NOT EDIT THIS FILE !!!");
    p.println(" */");
    p.print("");
    
com.sun.grid.cull.JavaHelper jh = (com.sun.grid.cull.JavaHelper)params.get("javaHelper");
com.sun.grid.cull.CullDefinition cullDef = (com.sun.grid.cull.CullDefinition)params.get("cullDef");
com.sun.grid.cull.CullObject cullObj = (com.sun.grid.cull.CullObject)params.get("cullObj");
String classname = jh.getClassName(cullObj);


p.println("");
    p.println("package com.sun.grid.jgdi.configuration;");
    p.println("");
    p.println("import junit.framework.*;");
    p.println("import com.sun.grid.jgdi.configuration.*;");
    p.println("import java.io.File;");
    p.println("import java.util.List;");
    p.println("import java.util.LinkedList;");
    p.println("import com.sun.grid.jgdi.configuration.Util;");
    p.println("import com.sun.grid.jgdi.configuration.xml.XMLUtil;");
    p.println("import com.sun.grid.jgdi.BaseTestCase;");
    p.println("import com.sun.grid.jgdi.JGDI;");
    p.println("import com.sun.grid.jgdi.TestValueFactory;");
    p.println("");
    p.println("/**");
    p.println(" *");
    p.println(" */");
    p.print("public class ");
    p.print(classname);p.println("TestCase extends BaseTestCase {");
    p.println("   ");
    p.print("   public  ");
    p.print(classname);p.println("TestCase(java.lang.String testName) {");
    p.println("      super(testName);");
    p.println("   }");
    p.println("   ");
    p.println("   public static Test suite() {");
    p.print("      TestSuite suite = new TestSuite(");
    p.print(classname);p.println("TestCase.class);");
    p.println("      return suite;");
    p.println("   }");
    p.println("   ");
    p.print("");
    
   // --------------------------------------------------------------------------
   // If the add/get/delete operation is available we use the TestValueFactory  
   // to add, get and delete all objects                                        
   // --------------------------------------------------------------------------
   if (cullObj.hasAddOperation() &&                                             
       cullObj.hasGetOperation() &&                                             
       cullObj.hasDeleteOperation()) {                                          
p.println("  ");
    p.println("   ");
    p.print("   public void test");
    p.print(classname);p.println("AddGetDelete() throws Exception {");
    p.println("   ");
    p.print("      Object[] testValues = TestValueFactory.getTestValues(");
    p.print(classname);p.println(".class);");
    p.print("      assertTrue(\"We have no test values for ");
    p.print(classname);p.println("\", (testValues.length > 0));");
    p.println("");
    p.println("      JGDI jgdi = createJGDI();");
    p.println("      try {");
    p.println("         List<Util.Difference> differences = new LinkedList<Util.Difference>();");
    p.println("         for (int i = 0; i < testValues.length; i++) {");
    p.print("            ");
    p.print(classname);p.print(" testObj = (");
    p.print(classname);p.println(")testValues[i];");
    p.println("            logger.info(\"adding testObj \" + testObj);");
    p.print("            jgdi.add");
    p.print(classname);p.println("(testObj);");
    p.println("            try {");
    p.println("              logger.info(\"fetching and diffing testObj \" + testObj);");
    p.print("              ");
    p.print(classname);p.print(" retObj = jgdi.get");
    p.print(classname);p.print("(");
    
              for (int i = 0; i < cullObj.getPrimaryKeyCount(); i++) {
                 com.sun.grid.cull.CullAttr attr = cullObj.getPrimaryKeyAttr(i);          
                 String attrName = jh.getAttrName(attr);                     
                 String gsname =  Character.toUpperCase( attrName.charAt(0) ) +
                                  attrName.substring(1);                     
                 if(i>0) {                                                   
                  p.print(",");
                                                          
                 }                                                           
                 p.print("testObj.get");
    p.print(gsname);p.print("()");
                                  
              }                                                                 
              p.println(");");
    p.println("              ");
    p.println("              Util.getDifferences(testObj, retObj, differences);");
    p.println("              if (!differences.isEmpty()) {");
    p.print("                 logger.warning(\"org ");
    p.print(classname);p.print(" is not equal to stored ");
    p.print(classname);p.println(" ------------------------\"); ");
    p.println("                 for (Util.Difference diff: differences) {");
    p.println("                    logger.warning(diff.toString());");
    p.println("                 }");
    p.println("              }");
    p.println("              //assertTrue(\"retobj is not equals to the testobj\", differences.isEmpty());");
    p.println("              differences.clear();");
    p.println("              ");
    p.println("            } finally {");
    p.print("              jgdi.delete");
    p.print(classname);p.println("(testObj);");
    p.println("              ");
    p.print("              ");
    p.print(classname);p.print(" retObj = jgdi.get");
    p.print(classname);p.print("(");
    
              for (int i = 0; i < cullObj.getPrimaryKeyCount(); i++) {                 
                 com.sun.grid.cull.CullAttr attr = cullObj.getPrimaryKeyAttr(i);          
                 String attrName = jh.getAttrName(attr);                     
                 String gsname =  Character.toUpperCase( attrName.charAt(0) ) +
                                  attrName.substring(1);                     
                 if (i>0) {                                                   
                  p.print(",");
                                                          
                 }                                                           
                  p.print("testObj.get");
    p.print(gsname);p.print("()");
                                  
              }                                                                 
              p.println(");");
    p.println("              ");
    p.println("              logger.info(\"deleting testObj \" + testObj);");
    p.println("              assertNull(testObj + \" has not been deleted\", retObj);");
    p.println("            }");
    p.println("         }");
    p.println("      } finally {");
    p.println("        jgdi.close();");
    p.println("      }");
    p.println("   }");
    p.print("");
    
   }
   // If the object has the get list operation we can test
   // the serialization of all objects into a xml object
   if (cullObj.hasGetListOperation()) {
p.println("");
    p.print("   public void test");
    p.print(classname);p.println("ListXML() throws Exception {");
    p.println("      JGDI jgdi = createJGDI();");
    p.println("      try {");
    p.print("         for (");
    p.print(classname);p.print(" obj : jgdi.get");
    p.print(classname);p.println("List()) {");
    p.print("            File file = File.createTempFile(\"");
    p.print(classname);p.println("\", \".xml\");");
    p.println("            try {");
    p.println("               XMLUtil.write(obj, file);");
    p.print("               ");
    p.print(classname);p.print(" obj1 = (");
    p.print(classname);p.println(")XMLUtil.read(file);");
    p.println("               ");
    p.println("// begin debug: check differences");
    p.println("//               List<Util.Difference> differences = new LinkedList<Util.Difference>();");
    p.println("//               Util.getDifferences(obj, obj1, differences);");
    p.println("//               if (!differences.isEmpty()) {");
    p.print("//                  logger.warning(\"org ");
    p.print(classname);p.print(" is not equal to filed/reread obj1 ");
    p.print(classname);p.println(" ------------------------\"); ");
    p.println("//                  for (Util.Difference diff : differences) {");
    p.println("//                     logger.warning(diff.toString());");
    p.println("//                  }");
    p.println("//               }");
    p.println("//               differences.clear();");
    p.println("// end debug: check differences");
    p.println("               ");
    p.print("               assertTrue(\"serialized xml object of class ");
    p.print(classname);p.println(" is invalid\", ");
    p.println("                          obj.equalsCompletely(obj1) );");
    p.println("            } finally {");
    p.println("              file.delete();");
    p.println("            }");
    p.println("         }");
    p.println("      } finally {");
    p.println("         jgdi.close();");
    p.println("      }");
    p.println("   }");
    p.print("");
    
   }

   if (cullObj.hasGetOperation() && cullObj.getPrimaryKeyCount() == 0) {
p.println("");
    p.println("   public void testGetXML() throws Exception {");
    p.println("   ");
    p.println("      JGDI jgdi = createJGDI();");
    p.println("      try {");
    p.print("         ");
    p.print(classname);p.print(" obj = jgdi.get");
    p.print(classname);p.println("();");
    p.println("         ");
    p.print("         File file = File.createTempFile(\"");
    p.print(classname);p.println("\", \".xml\");");
    p.println("         try {");
    p.println("            XMLUtil.write(obj, file);");
    p.print("            ");
    p.print(classname);p.print(" obj1 = (");
    p.print(classname);p.println(")XMLUtil.read(file);");
    p.print("            assertTrue(\"serialialized xml object of class ");
    p.print(classname);p.println(" is invalid\", ");
    p.println("                       obj.equalsCompletely(obj1) );");
    p.println("         } finally {");
    p.println("           file.delete();");
    p.println("         }");
    p.println("      } finally {");
    p.println("         jgdi.close();");
    p.println("      }");
    p.println("   }");
    p.println("");
    p.print("");
    
   } 
p.println("");
    p.println("}");
  } // end of print
} // end of class java_simpletest_jsp
