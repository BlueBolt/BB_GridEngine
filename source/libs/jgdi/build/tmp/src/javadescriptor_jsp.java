public class javadescriptor_jsp implements com.sun.grid.cull.template.Template {
  public void print(final com.sun.grid.cull.Printer p, final java.util.Map params) {
    p.println("/*___INFO__MARK_BEGIN__*/");
    p.println("/*************************************************************************");
    p.println(" *");
    p.println(" *  The Contents of this file are made available subject to the terms of");
    p.println(" *  the Sun Industry Standards Source License Version 1.2");
    p.println(" *");
    p.println(" *  Sun Microsystems Inc., March, 2001");
    p.println(" *");
    p.println(" *");
    p.println(" *  Sun Industry Standards Source License Version 1.2");
    p.println(" *  =================================================");
    p.println(" *  The contents of this file are subject to the Sun Industry Standards");
    p.println(" *  Source License Version 1.2 (the \"License\"); You may not use this file");
    p.println(" *  except in compliance with the License. You may obtain a copy of the");
    p.println(" *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html");
    p.println(" *");
    p.println(" *  Software provided under this License is provided on an \"AS IS\" basis,");
    p.println(" *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,");
    p.println(" *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,");
    p.println(" *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.");
    p.println(" *  See the License for the specific provisions governing your rights and");
    p.println(" *  obligations concerning the Software.");
    p.println(" *");
    p.println(" *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.");
    p.println(" *");
    p.println(" *   Copyright: 2001 by Sun Microsystems, Inc.");
    p.println(" *");
    p.println(" *   All Rights Reserved.");
    p.println(" *");
    p.println(" ************************************************************************/");
    p.println("/*___INFO__MARK_END__*/");
    p.println("/**");
    p.println(" *  Generated from javadescriptor.jsp");
    p.println(" *  !!! DO NOT EDIT THIS FILE !!!");
    p.println(" */");
    p.print("");
    
  com.sun.grid.cull.CullDefinition cullDef = (com.sun.grid.cull.CullDefinition)params.get("cullDef");
  com.sun.grid.cull.JavaHelper jh = (com.sun.grid.cull.JavaHelper)params.get("javaHelper");
  com.sun.grid.cull.CullObject cullObj = (com.sun.grid.cull.CullObject)params.get("cullObj");
  com.sun.grid.cull.CullAttr   attr = null;
  com.sun.grid.cull.CullObject parent = cullObj.getParentObject();
  
  class DescriptorGenerator {
  }
p.println("");
    p.print("package ");
    p.print(jh.getPackageName());p.println(";");
    p.println("");
    p.println("import com.sun.grid.jgdi.configuration.*;");
    p.println("import com.sun.grid.jgdi.CullConstants;");
    p.println("");
    p.println("/**");
    p.print(" *  Java descriptor of the cull object ");
    p.print(cullObj.getName());p.println("");
    p.print(" *  defined in ");
    p.print(jh.getSource(cullObj).getName());p.println("");
    p.println(" */");
    p.print("public class ");
    p.print(jh.getClassName(cullObj));p.print("Descriptor extends ");
    
   if (parent != null) {
     p.print(" ");
    p.print(jh.getClassName(parent));p.print("Descriptor ");
    
   } else {
     p.print(" GEObjectDescriptor ");
    
   }       
p.println("{");
    p.println("");
    p.print("   public ");
    p.print(jh.getClassName(cullObj));p.println("Descriptor() {");
    p.print("      this(");
    p.print(jh.getClassName(cullObj));p.print("Impl.class, ");
    
       if (parent != null ) {
          p.print("\"");
    p.print(cullObj.getName());p.print("\" ");
    
       } else {
          p.print("\"");
    p.print(cullObj.getName());p.print("\" ");
    
       }
       
   p.println(");");
    p.print("      setImplClass(");
    p.print(jh.getClassName(cullObj));p.println("Impl.class);");
    p.println("   }");
    p.println("      ");
    p.print("   protected ");
    p.print(jh.getClassName(cullObj));p.println("Descriptor(Class type, String name) {");
    p.println("      super(type, name);");
    p.print("");
     
  if (cullObj.getOwnAttrCount() > 0 ) {
p.println("     ");
    p.println("      PropertyDescriptor propDescr = null;");
    p.print("");
    
    }
    for (int i = 0; i < cullObj.getOwnAttrCount(); i++ ) {
        attr = cullObj.getOwnAttr(i);
        if (attr.isHidden() ) {
            continue;
        }
        String attrType = jh.getFullClassName(attr.getType());
        String attrName = jh.getAttrName(attr);
        String gsname = Character.toUpperCase(attrName.charAt(0)) + attrName.substring(1);
        com.sun.grid.cull.CullObject subobj = null;
        if (attr instanceof com.sun.grid.cull.CullMapListAttr) {
            com.sun.grid.cull.CullMapListAttr mapAttr = (com.sun.grid.cull.CullMapListAttr)attr;
            com.sun.grid.cull.CullAttr keyAttr = mapAttr.getKeyAttr();
            com.sun.grid.cull.CullAttr valueAttr = mapAttr.getValueAttr();
            subobj = cullDef.getCullObject(valueAttr.getType());
            String keyClass = jh.getClassNameWithSuffix(keyAttr.getType());
            String valueClass = jh.getClassNameWithSuffix(valueAttr.getType());
            if (attrName.endsWith("List")) {
                attrName = attrName.substring(0, attrName.length() - 4);
                gsname = Character.toUpperCase(attrName.charAt(0)) + attrName.substring(1);
        }
p.println("       ");
    p.print("      // keyAttr = ");
    p.print(keyAttr.getName());p.print(" (type = ");
    p.print(keyAttr.getType());p.println(")");
    p.print("      // valueAttr = ");
    p.print(valueAttr.getName());p.print(" (type = ");
    p.print(valueAttr.getType());p.println(")");
    p.print("      propDescr = addMapList(\"");
    p.print(attrName);p.print("\", ");
    p.print(valueClass);p.print(", \"");
    p.print(attr.getType());p.print("\", ");
    p.print(keyClass);p.print(", \"");
    p.print(valueAttr.getType());p.println("\",");
    p.print("             CullConstants.");
    p.print(attr.getName());p.print(", CullConstants.");
    p.print(mapAttr.getKeyAttr().getName());p.print(", CullConstants.");
    p.print(mapAttr.getValueAttr().getName());p.println(",");
    p.print("             ");
    p.print(attr.getDefault() == null ? "null" : "\"" + attr.getDefault() + "\"" );p.print(",");
    p.print(attr.isReadOnly());p.print(", ");
    p.print(attr.isConfigurable());p.println(");");
    p.print("");
    
        } else if (attr instanceof com.sun.grid.cull.CullMapAttr) {
            com.sun.grid.cull.CullMapAttr mapAttr = (com.sun.grid.cull.CullMapAttr)attr;
            com.sun.grid.cull.CullAttr keyAttr = mapAttr.getKeyAttr();
            com.sun.grid.cull.CullAttr valueAttr = mapAttr.getValueAttr();
            subobj = cullDef.getCullObject(valueAttr.getType());
            String keyClass = jh.getClassNameWithSuffix(keyAttr.getType());
            String valueClass = jh.getClassNameWithSuffix(valueAttr.getType());
            if (attrName.endsWith("List")) {
                attrName = attrName.substring(0, attrName.length() - 4);
                gsname = Character.toUpperCase(attrName.charAt(0)) + attrName.substring(1);
        }
p.println("");
    p.print("      // keyAttr = ");
    p.print(keyAttr.getName());p.print(" (type = ");
    p.print(keyAttr.getType());p.println(")");
    p.print("      // valueAttr = ");
    p.print(valueAttr.getName());p.print(" (type = ");
    p.print(valueAttr.getType());p.println(")");
    p.print("      propDescr = addMap(\"");
    p.print(attrName);p.print("\", ");
    p.print(valueClass);p.print(", \"");
    p.print(attr.getType());p.print("\", ");
    p.print(keyClass);p.println(",");
    p.print("             CullConstants.");
    p.print(attr.getName());p.print(", CullConstants.");
    p.print(mapAttr.getKeyAttr().getName());p.print(", CullConstants.");
    p.print(mapAttr.getValueAttr().getName());p.println(",");
    p.print("             ");
    p.print(attr.getDefault() == null ? "null" : "\"" + attr.getDefault() + "\"" );p.print(", ");
    p.print(attr.isReadOnly());p.print(", ");
    p.print(attr.isConfigurable());p.println(");");
    p.print("");
    
        } else if (attr instanceof com.sun.grid.cull.CullListAttr) {
            subobj = cullDef.getCullObject(attr.getType());
            if (attrName.endsWith("List")) {
                attrName = attrName.substring(0, attrName.length() - 4);
                gsname = Character.toUpperCase(attrName.charAt(0)) + attrName.substring(1);
        }
p.println("");
    p.print("      propDescr = addList(\"");
    p.print(attrName);p.print("\", ");
    p.print(jh.getClassNameWithSuffix(attr.getType()));p.print(", \"");
    p.print(attr.getType());p.print("\", CullConstants.");
    p.print(attr.getName());p.print(", true, ");
    p.print(attr.isReadOnly());p.print(", ");
    p.print(attr.isConfigurable());p.println(");");
    p.print("");
     
        } else {
            subobj = cullDef.getCullObject(attr.getType());
p.println("");
    p.print("      propDescr = addSimple(\"");
    p.print(attrName);p.print("\", ");
    p.print(jh.getClassNameWithSuffix(attr.getType()));p.print(", \"");
    p.print(attr.getType());p.print("\", CullConstants.");
    p.print(attr.getName());p.print(", ");
    p.print(attr.isPrimaryKey());p.print(", ");
    p.print(attr.isReadOnly());p.print(", ");
    p.print(attr.isConfigurable());p.println("); ");
    p.print("");
    
        } // end of if
        if (subobj != null) {
            if (subobj.getType() == com.sun.grid.cull.CullObject.TYPE_PRIMITIVE) {
p.println("");
    p.println("         propDescr.setHasCullWrapper(true);");
    p.print("         propDescr.setCullContentField(CullConstants.");
    p.print(subobj.getContentAttrName());p.println(");");
    p.print("");
    
        } else if (subobj.getType() == com.sun.grid.cull.CullObject.TYPE_MAPPED) {
p.println("");
    p.println("         propDescr.setHasCullWrapper(true);");
    p.println("         propDescr.setCullContentField(-1);");
    p.print("");
    
        }
    }
} // end of for
p.println("");
    p.println("   }");
    p.println("   ");
    p.println("   public void validate(Object obj) throws InvalidObjectException {");
    p.println("   ");
    p.print("      if (!(obj instanceof ");
    p.print(jh.getClassName(cullObj));p.println(")) {");
    p.print("         throw new InvalidObjectException(obj, \"obj is not an instanceof ");
    p.print(jh.getClassName(cullObj));p.println("\");");
    p.println("      }");
    p.print("");
    
    if (cullObj.getAttrCount() > 0) {
p.println("");
    p.print("      ");
    p.print(jh.getClassName(cullObj));p.print(" cullObj = (");
    p.print(jh.getClassName(cullObj));p.println(")obj;");
    p.println("      InvalidObjectException exc = null;");
    p.print("");
    
    for (int i = 0; i < cullObj.getPrimaryKeyCount(); i++ ) {
        attr = cullObj.getPrimaryKeyAttr(i);
        String attrType = jh.getFullClassName(attr.getType());
        String attrName = jh.getAttrName(attr);
        String gsname = Character.toUpperCase(attrName.charAt(0)) + attrName.substring(1);
p.println("   ");
    p.print("       if (!cullObj.isSet");
    p.print(gsname);p.println("()) {");
    p.println("          if (exc == null) {");
    p.println("             exc = new InvalidObjectException(obj, \"Primary key fields are not set\");");
    p.println("          }");
    p.print("          exc.addPropertyError(\"");
    p.print(attrName);p.println("\", \"primary key field is required\");");
    p.println("       }");
    p.print("");
    
    } // end of for
p.println("");
    p.println("       if (exc != null) {");
    p.println("           throw exc;");
    p.println("       }");
    p.print("");
    
    } // end of if attrCount > 0
    if (parent != null) {
p.println("     ");
    p.println("       super.validate(obj);");
    p.print("");
    
    }
p.println("");
    p.println("   }");
    p.println("}");
  } // end of print
} // end of class javadescriptor_jsp
