public class java_event_test_jsp implements com.sun.grid.cull.template.Template {
  public void print(final com.sun.grid.cull.Printer p, final java.util.Map params) {
    p.println("/*___INFO__MARK_BEGIN__*/");
    p.println("/*************************************************************************");
    p.println(" *");
    p.println(" *  The Contents of this file are made available subject to the terms of");
    p.println(" *  the Sun Industry Standards Source License Version 1.2");
    p.println(" *");
    p.println(" *  Sun Microsystems Inc., March, 2001");
    p.println(" *");
    p.println(" *");
    p.println(" *  Sun Industry Standards Source License Version 1.2");
    p.println(" *  =================================================");
    p.println(" *  The contents of this file are subject to the Sun Industry Standards");
    p.println(" *  Source License Version 1.2 (the \"License\"); You may not use this file");
    p.println(" *  except in compliance with the License. You may obtain a copy of the");
    p.println(" *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html");
    p.println(" *");
    p.println(" *  Software provided under this License is provided on an \"AS IS\" basis,");
    p.println(" *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,");
    p.println(" *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,");
    p.println(" *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.");
    p.println(" *  See the License for the specific provisions governing your rights and");
    p.println(" *  obligations concerning the Software.");
    p.println(" *");
    p.println(" *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.");
    p.println(" *");
    p.println(" *   Copyright: 2001 by Sun Microsystems, Inc.");
    p.println(" *");
    p.println(" *   All Rights Reserved.");
    p.println(" *");
    p.println(" ************************************************************************/");
    p.println("/*___INFO__MARK_END__*/");
    p.println("/**");
    p.println(" *  Generated from java_event_test.jsp");
    p.println(" *  !!! DO NOT EDIT THIS FILE !!!");
    p.println(" */");
    p.print("");
    
  final com.sun.grid.cull.JavaHelper jh = (com.sun.grid.cull.JavaHelper)params.get("javaHelper");
  final com.sun.grid.cull.CullDefinition cullDef = (com.sun.grid.cull.CullDefinition)params.get("cullDef");
  final com.sun.grid.cull.CullObject cullObj = (com.sun.grid.cull.CullObject)params.get("cullObj");  
  
  
  class TestGenerator {
     
     private com.sun.grid.cull.CullObject cullObj;
     
     public TestGenerator(com.sun.grid.cull.CullObject cullObj) {
        this.cullObj = cullObj;   
     }
     
     private void genAddDelTest() {
        String name = cullObj.getIdlName();
p.println("");
    p.print("   public void test");
    p.print(name);p.println("Events() throws Exception {");
    p.print("");
    
     if(cullObj.getType() == cullObj.TYPE_PRIMITIVE) {
           
        if(cullObj.getName().equals("SGE_HOST")) {
p.println("");
    p.println("      String testObj = TestValueFactory.getNextHostname();");
    p.print("");
            
        } else {
p.println("");
    p.println("      String testObj = \"blubber\";");
    p.print("");
    
        }
     } else {
p.println("         ");
    p.print("      Object [] testValues = TestValueFactory.getTestValues(");
    p.print(name);p.println(".class); ");
    p.println("");
    p.print("      assertTrue(\"No test values for ");
    p.print(name);p.println("\", testValues.length > 0 );");
    p.println("      ");
    p.print("      ");
    p.print(name);p.print(" testObj = (");
    p.print(name);p.println(")testValues[0];");
    p.print("");
    
     }
p.println("");
    p.println("");
    p.println("      WaitForEventThread waitThread = new WaitForEventThread(testObj);");
    p.println("");
    p.println("      int flushInterval = 1; // in seconds");
    p.println("      long timeout = flushInterval * 1000 * 3;");
    p.println("      Map<EventTypeEnum,Integer> map = new HashMap<EventTypeEnum,Integer>();");
    p.println("      try {");
    p.println("");
    p.println("          evc.addEventListener(waitThread);");
    p.println("");
    p.print("          map.put(EventTypeEnum.");
    p.print(name);p.println("Add, flushInterval);");
    p.print("          map.put(EventTypeEnum.");
    p.print(name);p.println("Del, flushInterval);");
    p.println("         ");
    p.print("");
     
   if (cullObj.hasModifyOperation()) {
p.println("         ");
    p.print("          map.put(EventTypeEnum.");
    p.print(name);p.println("Mod, flushInterval);");
    p.print("");
    
   }
p.println("         ");
    p.println("         evc.subscribe(map.keySet());            ");
    p.println("         evc.setFlush(map);");
    p.println("");
    p.println("         evc.commit();");
    p.println("         ");
    p.println("         waitThread.start();");
    p.println("");
    p.println("         Thread.yield();");
    p.println("");
    p.print("         jgdi.add");
    p.print(name);p.println("(testObj);");
    p.println("         logger.fine(testObj + \" added\");");
    p.print("         assertTrue(\"");
    p.print(name);p.println(": Did not get the add event\", waitThread.waitForAddEvent(timeout));");
    p.println("");
    p.print("");
     
   if (cullObj.hasModifyOperation()) {
p.println("         ");
    p.println("         // @jgdi.todo modify the test object");
    p.print("");
    
     if(name.equals("Calendar")) {
p.println("");
    p.println("         testObj.setYearCalendar(\"01.01.2007\");");
    p.print("");
             
     } else if (name.equals("User")) {
p.println("");
    p.println("         testObj.setOticket(10);");
    p.print("");
             
     } else if (name.equals("ParallelEnvironment")) {
p.println("");
    p.println("         testObj.setSlots(10);");
    p.print("");
             
     }
p.println("");
    p.print("         jgdi.update");
    p.print(name);p.println("(testObj);");
    p.println("         logger.fine(testObj + \" modified\");");
    p.print("         assertTrue(\"");
    p.print(name);p.println(": Did not get the mod event\", waitThread.waitForModEvent(timeout));");
    p.print("");
    
   } // end of cullObj.hasModifyOperation()
p.println("         ");
    p.println("");
    p.print("         jgdi.delete");
    p.print(name);p.println("(testObj);");
    p.println("         logger.fine(testObj + \" deleted\");");
    p.println("         testObj = null;");
    p.println("");
    p.print("         assertTrue(\"");
    p.print(name);p.println(": Did not get the del event\", waitThread.waitForDelEvent(timeout));");
    p.println("");
    p.println("      } finally {");
    p.println("         waitThread.interrupt();");
    p.println("         evc.unsubscribe(map.keySet());");
    p.println("         evc.commit();");
    p.println("         ");
    p.println("         if (testObj != null) {");
    p.println("            logger.fine(testObj + \" deleted again\");");
    p.println("            try {");
    p.print("               jgdi.delete");
    p.print(name);p.println("(testObj);");
    p.println("            } catch(Exception e) {");
    p.println("               // ignore");
    p.println("            }");
    p.println("         }");
    p.println("      }");
    p.println("   }");
    p.print("");
    
     } // genAddDelTest
     
     private void genStaticTest() {
        String name = cullObj.getIdlName();
        
p.println("");
    p.print("   public void test");
    p.print(name);p.println("() throws Exception {");
    p.println("");
    p.print("      // static test for ");
    p.print(name);p.println(" not implemented");
    p.print("      ");
    p.print(name);p.print(" testObj = jgdi.get");
    p.print(name);p.println("();");
    p.println("      ");
    p.print("");
    
         if(name.equals("SchedConf")) {         
p.println("");
    p.println("         int orgValue = testObj.getMaxujobs();");
    p.print("");
    
         }
p.println("        ");
    p.println("  ");
    p.println("    ");
    p.println("      WaitForEventThread waitThread = new WaitForEventThread(testObj);");
    p.println("    ");
    p.println("      int flushInterval = 1; // in seconds");
    p.println("      long timeout = flushInterval * 1000 * 3;");
    p.println("      try {");
    p.println("");
    p.println("         evc.addEventListener(waitThread);");
    p.println("");
    p.print("         evc.subscribe(EventTypeEnum.");
    p.print(name);p.println("Mod);");
    p.print("         evc.setFlush(EventTypeEnum.");
    p.print(name);p.println("Mod, flushInterval);");
    p.println("         ");
    p.println("         evc.commit();");
    p.println("         waitThread.start();");
    p.println("         Thread.yield();");
    p.print("");
    
         if(name.equals("SchedConf")) {         
p.println("");
    p.println("         testObj.setMaxujobs(orgValue+1);");
    p.print("");
    
         }
p.println("  ");
    p.println("");
    p.print("         jgdi.update");
    p.print(name);p.println("(testObj);");
    p.println("         ");
    p.print("         assertTrue(\"");
    p.print(name);p.println(": Did not get the mod event\", waitThread.waitForModEvent(timeout));");
    p.println("         ");
    p.println("      } finally {");
    p.println("         waitThread.interrupt();");
    p.print("         evc.unsubscribe(EventTypeEnum.");
    p.print(name);p.println("Mod);");
    p.println("         evc.commit();");
    p.println("");
    p.print("         testObj = jgdi.get");
    p.print(name);p.println("();");
    p.print("");
    
         if(name.equals("SchedConf")) {         
p.println("");
    p.println("         testObj.setMaxujobs(orgValue);");
    p.print("");
    
         }
p.println("  ");
    p.print("         jgdi.update");
    p.print(name);p.println("(testObj);");
    p.println("      }");
    p.println("         ");
    p.println("   }");
    p.print("");
            
        
     } // end of genStaticTest
     
  } // end of class TestGenerator
p.println("");
    p.println("package com.sun.grid.jgdi.event;");
    p.println("");
    p.println("");
    p.println("import com.sun.grid.jgdi.JGDIException;");
    p.println("import com.sun.grid.jgdi.JGDI;");
    p.println("import com.sun.grid.jgdi.configuration.*;");
    p.println("import com.sun.grid.jgdi.configuration.reflect.*;");
    p.println("import junit.framework.*;");
    p.println("import com.sun.grid.jgdi.BaseTestCase;");
    p.println("import java.util.HashMap;");
    p.println("import com.sun.grid.jgdi.EventClient;");
    p.println("import com.sun.grid.jgdi.JGDIFactory;");
    p.println("import java.util.Collection;");
    p.println("import java.util.Map;");
    p.println("import com.sun.grid.jgdi.TestValueFactory;");
    p.println("");
    p.print("public class ");
    p.print(cullObj.getIdlName());p.println("EventTestCase extends BaseTestCase {");
    p.println("");
    p.println("   private JGDI jgdi;");
    p.println("   private EventClient evc;");
    p.println("   ");
    p.print("   public ");
    p.print(cullObj.getIdlName());p.println("EventTestCase(String name) {");
    p.println("      super(name);");
    p.println("   }");
    p.println("   ");
    p.println("   public static Test suite() {");
    p.print("      TestSuite suite = new TestSuite(");
    p.print(cullObj.getIdlName());p.println("EventTestCase.class);");
    p.println("      return suite;");
    p.println("   }");
    p.println("   ");
    p.println("   protected void setUp() throws Exception {");
    p.println("");
    p.println("      jgdi = createJGDI();");
    p.println("      evc = createEventClient(0);");
    p.println("      super.setUp();");
    p.println("      logger.fine(\"SetUp done\");");
    p.println("   }");
    p.println("   ");
    p.println("   protected void tearDown() throws Exception {");
    p.println("      try {");
    p.println("        evc.close();");
    p.println("      } finally {");
    p.println("         jgdi.close();");
    p.println("      }");
    p.println("   }");
    p.println("   ");
    p.println("");
    p.print("");
    
   TestGenerator gen = new  TestGenerator(cullObj);

   if( cullObj.hasAddOperation() &&
       cullObj.hasAddEvent() &&
       cullObj.hasDeleteOperation() &&
       cullObj.hasDeleteEvent() ) {
      gen.genAddDelTest();
   } else if(cullObj.hasModifyEvent() && cullObj.hasModifyOperation()) {
      if (!cullObj.getIdlName().equals("JobSchedulingInfo")) {
         gen.genStaticTest();
      }
   }
p.println("");
    p.println("");
    p.println("}");
  } // end of print
} // end of class java_event_test_jsp
