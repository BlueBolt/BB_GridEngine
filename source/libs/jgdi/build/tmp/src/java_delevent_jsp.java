public class java_delevent_jsp implements com.sun.grid.cull.template.Template {
  public void print(final com.sun.grid.cull.Printer p, final java.util.Map params) {
    p.println("/*___INFO__MARK_BEGIN__*/");
    p.println("/*************************************************************************");
    p.println(" *");
    p.println(" *  The Contents of this file are made available subject to the terms of");
    p.println(" *  the Sun Industry Standards Source License Version 1.2");
    p.println(" *");
    p.println(" *  Sun Microsystems Inc., March, 2001");
    p.println(" *");
    p.println(" *");
    p.println(" *  Sun Industry Standards Source License Version 1.2");
    p.println(" *  =================================================");
    p.println(" *  The contents of this file are subject to the Sun Industry Standards");
    p.println(" *  Source License Version 1.2 (the \"License\"); You may not use this file");
    p.println(" *  except in compliance with the License. You may obtain a copy of the");
    p.println(" *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html");
    p.println(" *");
    p.println(" *  Software provided under this License is provided on an \"AS IS\" basis,");
    p.println(" *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,");
    p.println(" *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,");
    p.println(" *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.");
    p.println(" *  See the License for the specific provisions governing your rights and");
    p.println(" *  obligations concerning the Software.");
    p.println(" *");
    p.println(" *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.");
    p.println(" *");
    p.println(" *   Copyright: 2001 by Sun Microsystems, Inc.");
    p.println(" *");
    p.println(" *   All Rights Reserved.");
    p.println(" *");
    p.println(" ************************************************************************/");
    p.println("/*___INFO__MARK_END__*/");
    p.println("/**");
    p.println(" *  Generated from java_delevent.jsp");
    p.println(" *  !!! DO NOT EDIT THIS FILE !!!");
    p.println(" */");
    p.print("");
    
  com.sun.grid.cull.JavaHelper jh = (com.sun.grid.cull.JavaHelper)params.get("javaHelper");
  com.sun.grid.cull.CullObject cullObj = (com.sun.grid.cull.CullObject)params.get("cullObj");
  com.sun.grid.cull.CullAttr   attr = null;
  
  String name = jh.getNonPrimitiveClassname(cullObj);
  
p.println("");
    p.print("package ");
    p.print(jh.getPackageName());p.println(";");
    p.println("");
    p.println("import com.sun.grid.jgdi.event.DelEvent;");
    p.print("");
     if(cullObj.getType() != cullObj.TYPE_PRIMITIVE) { p.println("");
    p.print("import ");
    p.print(jh.getFullClassName(cullObj));p.println(";");
    p.print("");
     } p.println("");
    p.println("");
    p.println("/**");
    p.println(" */");
    p.print("public class ");
    p.print(name);p.println("DelEvent extends DelEvent implements java.io.Serializable {");
    p.println("");
    p.print("");
     // Default constructor ----------------------------------------- p.println("");
    p.print("  public ");
    p.print(name);p.println("DelEvent(long timestamp, int eventID) {");
    p.print("     super(timestamp, eventID, ");
    p.print(jh.getClassName(cullObj));p.println(".class );");
    p.println("  } // end of default constructor");
    p.println("");
    p.print("  public void set(");
    p.print(jh.getClassName(cullObj));p.println(" obj) {");
    p.println("     super.setChangedObject(obj);");
    p.println("  }");
    p.println("  ");
    p.print("  public ");
    p.print(jh.getClassName(cullObj));p.println(" get() {");
    p.print("     return (");
    p.print(jh.getClassName(cullObj));p.println(") getChangedObject();");
    p.println("  }");
    p.println("");
    p.println("  ");
    p.print("");

    // BEGIN /net/pinot/disk1/playpen/dev/OpenGridScheduler/GE2011.11p1/source/libs/jgdi/templates/java_event_pkinfo.jsp --------------------------
    p.print("");
    
/*___INFO__MARK_BEGIN__*/
/*************************************************************************
 *
 *  The Contents of this file are made available subject to the terms of
 *  the Sun Industry Standards Source License Version 1.2
 *
 *  Sun Microsystems Inc., March, 2001
 *
 *
 *  Sun Industry Standards Source License Version 1.2
 *  =================================================
 *  The contents of this file are subject to the Sun Industry Standards
 *  Source License Version 1.2 (the "License"); You may not use this file
 *  except in compliance with the License. You may obtain a copy of the
 *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html
 *
 *  Software provided under this License is provided on an "AS IS" basis,
 *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
 *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,
 *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.
 *  See the License for the specific provisions governing your rights and
 *  obligations concerning the Software.
 *
 *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.
 *
 *   Copyright: 2001 by Sun Microsystems, Inc.
 *
 *   All Rights Reserved.
 *
 ************************************************************************/
/*___INFO__MARK_END__*/
p.println("");
    p.println("/*");
    p.println(" *  Generated from java_event_pkinfo.jsp");
    p.println(" *  !!! DO NOT EDIT THIS FILE !!!");
    p.println(" */");
    p.print("");
    

   class PKField {
       private String name;
       private String type;
       private String key;
   }
   
   java.util.Map<String,PKField> pkMap = new java.util.HashMap<String,PKField>();
   
   int pkNumIndex = 1;
   int pkStrIndex = 1;
   
   for(int i = 0; i < cullObj.getPrimaryKeyCount(); i++) {
      attr = cullObj.getPrimaryKeyAttr(i);
      
      PKField field = new PKField();
      field.name = jh.getAttrName(attr);
      if( field.name.endsWith("List") ) {          
         field.name  = field.name.substring(0, field.name.length() - 4 );
      }
      field.type = jh.getFullClassName(attr.getType());
      if(field.type.equals(String.class.getName())) {
          if(pkStrIndex >= 2) {
              throw new IllegalStateException("cull type " + cullObj.getName() + " has more then two string primary key fields");
          }
          field.key = "strKey" + pkStrIndex;
          pkStrIndex++;
      } else {
          if(pkNumIndex >= 2) {
              throw new IllegalStateException("cull type " + cullObj.getName() + " has more then two numeric primary key fields");
          }
          field.key = "numKey" + pkNumIndex;
          pkNumIndex++;
      }
      pkMap.put(field.name, field);
   }
         
   if(cullObj.getName().equals("JAT_Type")) {
       PKField taskNumber = (PKField)pkMap.get("taskNumber");
       taskNumber.key = "numKey2";
       
       PKField jobid = new PKField();
       jobid.name = "jobId";
       jobid.type = "int";
       jobid.key = "numKey1";
       pkMap.put(jobid.name, jobid);
   }
   
   if (cullObj.getName().equals("PET_Type")) {
       PKField jobid = new PKField();
       jobid.name = "jobId";
       jobid.type = "int";
       jobid.key = "numKey1";
       pkMap.put(jobid.name, jobid);
       
       PKField taskNumber = new PKField();
       taskNumber.name = "taskNumber";
       taskNumber.type = "int";
       taskNumber.key  = "numKey2";
       pkMap.put(taskNumber.name, taskNumber);
   }

   for (PKField field : pkMap.values()) {
p.print("   private ");
    p.print(field.type);p.print(" m_");
    p.print(field.name);p.println(";");
    p.print("");
             
   } 
p.println("");
    p.println("");
    p.println("  /**");
    p.print("   *   Set the primary key info of the ");
    p.print(name);p.println(".");
    p.println("   *");
    p.println("   *   This method is not indented for public usage. It is called from the");
    p.println("   *   native code to set the primary key info of cull event.");
    p.println("   * ");
    p.println("   *   @param numKey1   first numerical key");
    p.println("   *   @param numKey2   second numerical key");
    p.println("   *   @param strKey1   fist string key");
    p.println("   *   @param strKey2   second string key");
    p.println("   */");
    p.println("  public void setPKInfo(int numKey1, int numKey2, String strKey1, String strKey2) {");
    p.print("");
    
    for (PKField field : pkMap.values()) {
p.println("");
    p.print("        m_");
    p.print(field.name);p.print(" = ");
    p.print(field.key);p.println(";");
    p.print("");
    
    }
p.println("");
    p.println("   }");
    p.println("   ");
    p.print("");
    
    // Accessor for the primary key information
   for (PKField field : pkMap.values()) {
       String gsmName = Character.toUpperCase(field.name.charAt(0)) + field.name.substring(1);
p.println("     ");
    p.println("   /**");
    p.print("    *   Get the ");
    p.print(field.name);p.print(" of the ");
    p.print(name);p.println("");
    p.println("    *");
    p.print("    *   @return the ");
    p.print(field.name);p.print(" of the ");
    p.print(name);p.println("");
    p.println("    */");
    p.print("    public ");
    p.print(field.type);p.print(" get");
    p.print(gsmName);p.println("() {");
    p.print("       return m_");
    p.print(field.name);p.println(";   ");
    p.println("    }");
    p.print("");
           
    }
p.println("   ");

    // END /net/pinot/disk1/playpen/dev/OpenGridScheduler/GE2011.11p1/source/libs/jgdi/templates/java_event_pkinfo.jsp --------------------------
    p.println("    ");
    p.println("  ");
    p.println("   ");
    p.println("   /**");
    p.println("    *  Determine if this event has deleted <code>obj</code>");
    p.println("    *  @param   obj  the object");
    p.println("    *  @return  <code>true</code> if this event has deleted <code>obj</code>");
    p.println("    */");
    p.println("   public boolean hasDeletedObject(Object obj) {");
    p.println("");
    p.print("      if (obj instanceof  ");
    p.print(jh.getClassName(cullObj));p.println(") {");
    p.print("          ");
    p.print(jh.getClassName(cullObj));p.print(" obj1 = (");
    p.print(jh.getClassName(cullObj));p.println(")obj;");
    p.print("");
    
  {
      for(int i = 0; i < cullObj.getPrimaryKeyCount(); i++) {
         attr = cullObj.getPrimaryKeyAttr(i);
         
         String attrName = jh.getAttrName(attr);
         if( attrName.endsWith("List") ) {          
            attrName  = attrName.substring(0, attrName.length() - 4 );
         }
         String gsmName = Character.toUpperCase(attrName.charAt(0)) + attrName.substring(1);

         if(jh.getFullClassName(attr.getType()).equals(String.class.getName())) {
p.println("         // Attention: strkey must be set for cull event elem");
    p.print("         if (!m_");
    p.print(attrName);p.print(".equals(obj1.get");
    p.print(gsmName);p.println("())) {");
    p.print("");
    
         } else if (jh.getClassName(attr.getType()).equals("int")) {
p.println("         // Attention: intkey must be set for cull event elem   ");
    p.print("         if (m_");
    p.print(attrName);p.print(" != obj1.get");
    p.print(gsmName);p.println("()) {");
    p.print("");
    
         } else {

           throw new IllegalStateException("Can not handle primary key field with type " + attr.getType()); 
         }
p.println("             return false;");
    p.println("         }");
    p.print("");
             
      } // end of for
  }
p.println("   ");
    p.println("         return true;");
    p.println("      }");
    p.println("      return false;");
    p.println("   }");
    p.println("   ");
    p.println("   public String toString() {");
    p.println("      StringBuilder ret = new StringBuilder();");
    p.println("      ret.append(super.toString());");
    p.println("      ret.append(\",\");");
    p.print("      ret.append(\"");
    p.print(jh.getClassName(cullObj));p.println("\");");
    p.println("      ret.append(\"(\");");
    p.print("");
          
  {
      for(int i = 0; i < cullObj.getPrimaryKeyCount(); i++) {
         attr = cullObj.getPrimaryKeyAttr(i);
         String attrName = jh.getAttrName(attr);
         if( attrName.endsWith("List") ) {          
            attrName  = attrName.substring(0, attrName.length() - 4 );
         }
         String gsmName = Character.toUpperCase(attrName.charAt(0)) + attrName.substring(1);

p.print("          ret.append(m_");
    p.print(attrName);p.println(");");
    p.print("");
    
      } // end of for
  }
p.println("   ");
    p.println("      ret.append(\")\");");
    p.println("      return ret.toString();");
    p.println("   }");
    p.println("  ");
    p.println("}");
  } // end of print
} // end of class java_delevent_jsp
