public class c_event_client_jsp implements com.sun.grid.cull.template.Template {
  public void print(final com.sun.grid.cull.Printer p, final java.util.Map params) {
    p.println("/*___INFO__MARK_BEGIN__*/");
    p.println("/*************************************************************************");
    p.println(" *");
    p.println(" *  The Contents of this file are made available subject to the terms of");
    p.println(" *  the Sun Industry Standards Source License Version 1.2");
    p.println(" *");
    p.println(" *  Sun Microsystems Inc., March, 2001");
    p.println(" *");
    p.println(" *");
    p.println(" *  Sun Industry Standards Source License Version 1.2");
    p.println(" *  =================================================");
    p.println(" *  The contents of this file are subject to the Sun Industry Standards");
    p.println(" *  Source License Version 1.2 (the \"License\"); You may not use this file");
    p.println(" *  except in compliance with the License. You may obtain a copy of the");
    p.println(" *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html");
    p.println(" *");
    p.println(" *  Software provided under this License is provided on an \"AS IS\" basis,");
    p.println(" *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,");
    p.println(" *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,");
    p.println(" *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.");
    p.println(" *  See the License for the specific provisions governing your rights and");
    p.println(" *  obligations concerning the Software.");
    p.println(" *");
    p.println(" *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.");
    p.println(" *");
    p.println(" *   Copyright: 2001 by Sun Microsystems, Inc.");
    p.println(" *");
    p.println(" *   All Rights Reserved.");
    p.println(" *");
    p.println(" ************************************************************************/");
    p.println("/*___INFO__MARK_END__*/");
    p.println("");
    p.println("/*  Generated from c_event_client.jsp");
    p.println(" *  !!! DO NOT EDIT THIS FILE !!!");
    p.println(" */");
    p.print("");
    
  final com.sun.grid.cull.JavaHelper jh = (com.sun.grid.cull.JavaHelper)params.get("javaHelper");
  com.sun.grid.cull.CullDefinition cullDef = (com.sun.grid.cull.CullDefinition)params.get("cullDef");
p.println("");
    p.println("#include <ctype.h>");
    p.println("#include <string.h>");
    p.println("#include <jni.h>");
    p.println("#include \"jgdi.h\"");
    p.println("#include \"basis_types.h\"");
    p.println("#include \"cull.h\"");
    p.println("#include \"commlib.h\"");
    p.println("#include \"sgermon.h\"");
    p.println("#include \"sge_all_listsL.h\"");
    p.println("#include \"sge_answer.h\"");
    p.println("#include \"sge_prog.h\"");
    p.println("#include \"sge_bootstrap.h\"");
    p.println("#include \"sge_gdi_ctx.h\"");
    p.println("#include \"cl_errors.h\"");
    p.println("#include \"sge_log.h\"");
    p.println("#include \"sge_error_class.h\"");
    p.println("#include \"jgdi_common.h\"");
    p.println("#include \"sge_event_client.h\"");
    p.println("#include \"jgdi_event.h\"");
    p.println("#include \"sge_mirror.h\"");
    p.println("#include \"sge_event.h\"");
    p.println("#include \"jgdi_wrapper.h\"");
    p.println("");
    p.print("");
    
   class EvtInfo {
       
       private String classname;
       private String cullObjName;
       private String addEvent;
       private String modEvent;
       private String delEvent;
       private String listEvent;
               
       public EvtInfo(com.sun.grid.cull.CullObject cullObj) {
           classname = jh.getFullClassName(cullObj).replace('.', '/');
           cullObjName = cullObj.getName();         
           if(cullObj.hasModifyEvent()) {
               modEvent = cullObj.getModifyEventName();
           }
           if(cullObj.hasAddEvent()) {
               addEvent = cullObj.getAddEventName();
           }
           if(cullObj.hasGetListEvent()) {
               listEvent = cullObj.getGetListEventName();
           }
           if(cullObj.hasDeleteEvent()) {
               delEvent = cullObj.getDeleteEventName();
           }
       }
       
       public void generate() {
      if(modEvent != null) {
p.println("");
    p.print("      case ");
    p.print(modEvent);p.println(":");
    p.print("         return create_generic_event(env, event,\"");
    p.print(classname);p.print("\", \"");
    p.print(cullObjName);p.print("\", ");
    p.print(cullObjName);p.println(", SGE_EMA_MOD, ev, alpp);");
    p.print("");
    
      }
      if(listEvent != null) {
p.println("      ");
    p.print("      case ");
    p.print(listEvent);p.println(":");
    p.print("         return create_generic_event(env, event,\"");
    p.print(classname);p.print("\", \"");
    p.print(cullObjName);p.print("\", ");
    p.print(cullObjName);p.println(", SGE_EMA_LIST, ev, alpp);");
    p.print("");
    
      }
      if(delEvent != null) {
p.println("      ");
    p.print("      case ");
    p.print(delEvent);p.println(":");
    p.print("         return create_generic_event(env, event,\"");
    p.print(classname);p.print("\", \"");
    p.print(cullObjName);p.print("\", ");
    p.print(cullObjName);p.println(", SGE_EMA_DEL, ev, alpp);");
    p.print("");
    
      }
      if(addEvent != null) {
p.println("      ");
    p.print("      case ");
    p.print(addEvent);p.println(":");
    p.print("         return create_generic_event(env, event,\"");
    p.print(classname);p.print("\", \"");
    p.print(cullObjName);p.print("\", ");
    p.print(cullObjName);p.println(", SGE_EMA_ADD, ev, alpp);");
    p.print("");
    
       }
       } // end of generate
   } // end of class EvtInfo
   
   com.sun.grid.cull.CullObject cullObj = null;
   // special events
    
   java.util.List<EvtInfo> evtList = new java.util.LinkedList<EvtInfo>();
   for (String name : cullDef.getObjectNames()) {
      cullObj = cullDef.getCullObject(name); 
      evtList.add(new EvtInfo(cullObj));
   } // end of for     

p.println("");
    p.println("");
    p.println("jgdi_result_t process_generic_event(JNIEnv *env,  jobject *event, lListElem *ev, lList** alpp) {");
    p.println("");
    p.println("   switch( lGetUlong(ev, ET_type)) {");
    p.print("");
    
   
   // generate the c code
   for (EvtInfo info : evtList) {
       info.generate();
   }
   
p.println("  ");
    p.println("      default:");
    p.println("         answer_list_add_sprintf(alpp, STATUS_EUNKNOWN, ANSWER_QUALITY_ERROR, ");
    p.println("                                 \"Event action not yet handled %d\",  lGetUlong(ev, ET_type));");
    p.println("         return JGDI_ERROR;");
    p.println("   }");
    p.println("");
    p.println("}");
  } // end of print
} // end of class c_event_client_jsp
