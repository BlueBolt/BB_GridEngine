public class java_event_factory_jsp implements com.sun.grid.cull.template.Template {
  public void print(final com.sun.grid.cull.Printer p, final java.util.Map params) {
    p.println("/*___INFO__MARK_BEGIN__*/");
    p.println("/*************************************************************************");
    p.println(" *");
    p.println(" *  The Contents of this file are made available subject to the terms of");
    p.println(" *  the Sun Industry Standards Source License Version 1.2");
    p.println(" *");
    p.println(" *  Sun Microsystems Inc., March, 2001");
    p.println(" *");
    p.println(" *");
    p.println(" *  Sun Industry Standards Source License Version 1.2");
    p.println(" *  =================================================");
    p.println(" *  The contents of this file are subject to the Sun Industry Standards");
    p.println(" *  Source License Version 1.2 (the \"License\"); You may not use this file");
    p.println(" *  except in compliance with the License. You may obtain a copy of the");
    p.println(" *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html");
    p.println(" *");
    p.println(" *  Software provided under this License is provided on an \"AS IS\" basis,");
    p.println(" *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,");
    p.println(" *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,");
    p.println(" *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.");
    p.println(" *  See the License for the specific provisions governing your rights and");
    p.println(" *  obligations concerning the Software.");
    p.println(" *");
    p.println(" *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.");
    p.println(" *");
    p.println(" *   Copyright: 2001 by Sun Microsystems, Inc.");
    p.println(" *");
    p.println(" *   All Rights Reserved.");
    p.println(" *");
    p.println(" ************************************************************************/");
    p.println("/*___INFO__MARK_END__*/");
    p.println("/**");
    p.println(" *  Generated from java_event_factory.jsp");
    p.println(" *  !!! DO NOT EDIT THIS FILE !!!");
    p.println(" */");
    p.print("");
    
  com.sun.grid.cull.JavaHelper jh = (com.sun.grid.cull.JavaHelper)params.get("javaHelper");
  com.sun.grid.cull.CullDefinition cullDef = (com.sun.grid.cull.CullDefinition)params.get("cullDef");
p.println("");
    p.println("package com.sun.grid.jgdi.event;");
    p.println("");
    p.println("");
    p.println("import java.util.*;");
    p.println("");
    p.print("");
     // Import all cull object names;
    com.sun.grid.cull.CullObject cullObj = null;
    for (String name : cullDef.getObjectNames()) {
      cullObj = cullDef.getCullObject(name); 
/*      if (cullObj.getType() == cullObj.TYPE_PRIMITIVE) {
         continue;
      }
      if(cullObj.getType() == cullObj.TYPE_MAPPED) {
         continue;
      }
      if(!cullObj.isRootObject()) {
        continue;
      }*/
p.print("import ");
    p.print(jh.getFullClassName(cullObj));p.println(";");
    p.print("");
     
   } // end of for
p.println("");
    p.println("");
    p.println("/**");
    p.println(" *  Factory class for all List/Del/Add/Mod Events of cull objects");
    p.println(" */");
    p.println("public class EventFactory extends EventFactoryBase {");
    p.println("");
    p.println("   /** store all internal event factories (key the name of the cull object,");
    p.println("    *  value is the internal event factory) */");
    p.println("   private static Map facMap;");
    p.println("   ");
    p.println("   ");
    p.println("  /**");
    p.println("   * Create a list event for a cull type");
    p.println("   * @param name        name of the cull type");
    p.println("   * @param timestamp   timestamp when the list event occured");
    p.println("   * @param eventId     unique id of the event");
    p.println("   * @return the list event");
    p.println("   */");
    p.println("  public static ListEvent createListEvent(String name, long timestamp, int eventId) {");
    p.println("   ");
    p.println("      InternalEventFactory fac = (InternalEventFactory)facMap.get(name);");
    p.println("      if( fac != null ) {");
    p.println("         return fac.createListEvent(timestamp, eventId);");
    p.println("      }");
    p.println("      throw new IllegalArgumentException( \"can not create list event for cull type \" + name );");
    p.println("  }");
    p.println("  ");
    p.println("  /**");
    p.println("   * Create a add event for a cull type");
    p.println("   * @param name        name of the cull type");
    p.println("   * @param timestamp   timestamp when the add event occured");
    p.println("   * @param eventId     unique id of the event");
    p.println("   * @return the add event");
    p.println("   */");
    p.println("   public static AddEvent createAddEvent(String name, long timestamp, int eventId) {");
    p.println("   ");
    p.println("      InternalEventFactory fac = (InternalEventFactory)facMap.get(name);");
    p.println("      if( fac != null ) {");
    p.println("         return fac.createAddEvent(timestamp, eventId);");
    p.println("      }");
    p.println("      throw new IllegalArgumentException( \"can not create add event for cull type \" + name );");
    p.println("   }");
    p.println("");
    p.println("  /**");
    p.println("   * Create a mod event for a cull type");
    p.println("   * @param name        name of the cull type");
    p.println("   * @param timestamp   timestamp when the mod event occured");
    p.println("   * @param eventId     unique id of the event");
    p.println("   * @return the mod event");
    p.println("   */");
    p.println("   public static ModEvent createModEvent(String name, long timestamp, int eventId) {");
    p.println("   ");
    p.println("      InternalEventFactory fac = (InternalEventFactory)facMap.get(name);");
    p.println("      if( fac != null ) {");
    p.println("         return fac.createModEvent(timestamp, eventId);");
    p.println("      }");
    p.println("      throw new IllegalArgumentException( \"can not create mod event for cull type \" + name );");
    p.println("   }");
    p.println("  ");
    p.println("  /**");
    p.println("   * Create a del event for a cull type");
    p.println("   * @param name        name of the cull type");
    p.println("   * @param timestamp   timestamp when the del event occured");
    p.println("   * @param eventId     unique id of the event");
    p.println("   * @return the del event");
    p.println("   */");
    p.println("   public static DelEvent createDelEvent(String name, long timestamp, int eventId) {");
    p.println("   ");
    p.println("      InternalEventFactory fac = (InternalEventFactory)facMap.get(name);");
    p.println("      if( fac != null ) {");
    p.println("         return fac.createDelEvent(timestamp, eventId);");
    p.println("      }");
    p.println("      throw new IllegalArgumentException( \"can not create del event for cull type \" + name );");
    p.println("   }");
    p.println("");
    p.println("   /**");
    p.println("    *  Interface for all internal event factory classes");
    p.println("    */");
    p.println("   interface InternalEventFactory  {");
    p.println("");
    p.println("       public ListEvent createListEvent(long timestamp, int eventId);");
    p.println("       public AddEvent  createAddEvent(long timestamp, int eventId);");
    p.println("       public ModEvent  createModEvent(long timestamp, int eventId);");
    p.println("       public DelEvent  createDelEvent(long timestamp, int eventId);    ");
    p.println("    }");
    p.println("");
    p.println("    /**");
    p.println("     *  this static initializer creates all internal event factories an stores");
    p.println("     *  it the the factory map.");
    p.println("     */");
    p.println("    static {        ");
    p.println("    ");
    p.println("        facMap = new HashMap();");
    p.println("        ");
    p.print("");
    
    for (String name : cullDef.getObjectNames()) {
       cullObj = cullDef.getCullObject(name); 
       String idlName = cullObj.getIdlName();
        // <%cullObj.getName()p.println("");
    p.print("        facMap.put(\"");
    p.print(cullObj.getName());p.print("\", new ");
    p.print(idlName);p.println("EventFactory()); ");
    p.print("");
    
    } // end of for
p.println("");
    p.println("    ");
    p.println("    }");
    p.println("    // -------------------- Factory classes -----------------------------------");
    p.print("");
    
    for (String name : cullDef.getObjectNames()) {
      cullObj = cullDef.getCullObject(name); 
      String idlName = cullObj.getIdlName();
p.println("");
    p.print("     // ");
    p.print(cullObj.getName());p.println("");
    p.print("    static class ");
    p.print(idlName);p.println("EventFactory implements InternalEventFactory {");
    p.println("    ");
    p.println("       public ListEvent createListEvent(long timestamp, int eventId) {");
    p.print("");
    
        if(cullObj.hasGetListEvent()) {
p.println("");
    p.print("           return new ");
    p.print(idlName);p.println("ListEvent(timestamp, eventId);");
    p.print("");
    
        } else {
p.println("");
    p.print("           throw new IllegalStateException(\"list event not supported for ");
    p.print(cullObj.getName());p.println("\");");
    p.print("");
    
        }
p.println("  ");
    p.println("       }");
    p.println("       public AddEvent  createAddEvent(long timestamp, int eventId) {");
    p.print("");
    
        if(cullObj.hasAddEvent()) {
p.println("");
    p.print("           return new ");
    p.print(idlName);p.println("AddEvent(timestamp, eventId);");
    p.print("");
    
        } else {
p.println("");
    p.print("           throw new IllegalStateException(\"add event not supported for ");
    p.print(cullObj.getName());p.println("\");");
    p.print("");
    
        }
p.println("  ");
    p.println("       }");
    p.println("       public ModEvent  createModEvent(long timestamp, int eventId) {");
    p.print("");
    
        if(cullObj.hasModifyEvent()) {
p.println("");
    p.print("           return new ");
    p.print(idlName);p.println("ModEvent(timestamp, eventId);");
    p.print("");
    
        } else {
p.println("");
    p.print("           throw new IllegalStateException(\"mod event not supported for ");
    p.print(cullObj.getName());p.println("\");");
    p.print("");
    
        }
p.println("  ");
    p.println("       }");
    p.println("       public DelEvent  createDelEvent(long timestamp, int eventId) {");
    p.print("");
    
        if(cullObj.hasDeleteEvent()) {
p.println("");
    p.print("           return new ");
    p.print(idlName);p.println("DelEvent(timestamp, eventId);");
    p.print("");
    
        } else {
p.println("");
    p.print("           throw new IllegalStateException(\"del event not supported for ");
    p.print(cullObj.getName());p.println("\");");
    p.print("");
    
        }
p.println("  ");
    p.println("       }");
    p.println("    }");
    p.println("    ");
    p.print("");
     
    } // end of for
p.println("");
    p.println("");
    p.println("}");
  } // end of print
} // end of class java_event_factory_jsp
