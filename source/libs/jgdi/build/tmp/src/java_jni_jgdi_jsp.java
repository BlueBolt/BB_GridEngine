public class java_jni_jgdi_jsp implements com.sun.grid.cull.template.Template {
  public void print(final com.sun.grid.cull.Printer p, final java.util.Map params) {
    p.println("/*___INFO__MARK_BEGIN__*/");
    p.println("/*************************************************************************");
    p.println(" *");
    p.println(" *  The Contents of this file are made available subject to the terms of");
    p.println(" *  the Sun Industry Standards Source License Version 1.2");
    p.println(" *");
    p.println(" *  Sun Microsystems Inc., March, 2001");
    p.println(" *");
    p.println(" *");
    p.println(" *  Sun Industry Standards Source License Version 1.2");
    p.println(" *  =================================================");
    p.println(" *  The contents of this file are subject to the Sun Industry Standards");
    p.println(" *  Source License Version 1.2 (the \"License\"); You may not use this file");
    p.println(" *  except in compliance with the License. You may obtain a copy of the");
    p.println(" *  License at http://gridengine.sunsource.net/Gridengine_SISSL_license.html");
    p.println(" *");
    p.println(" *  Software provided under this License is provided on an \"AS IS\" basis,");
    p.println(" *  WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,");
    p.println(" *  WITHOUT LIMITATION, WARRANTIES THAT THE SOFTWARE IS FREE OF DEFECTS,");
    p.println(" *  MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE, OR NON-INFRINGING.");
    p.println(" *  See the License for the specific provisions governing your rights and");
    p.println(" *  obligations concerning the Software.");
    p.println(" *");
    p.println(" *   The Initial Developer of the Original Code is: Sun Microsystems, Inc.");
    p.println(" *");
    p.println(" *   Copyright: 2001 by Sun Microsystems, Inc.");
    p.println(" *");
    p.println(" *   All Rights Reserved.");
    p.println(" *");
    p.println(" ************************************************************************/");
    p.println("/*___INFO__MARK_END__*/");
    p.println("/**");
    p.println(" *  Generated from java_jni_jgdi.jsp");
    p.println(" *  !!! DO NOT EDIT THIS FILE !!!");
    p.println(" */");
    p.print("");
    
  final com.sun.grid.cull.JavaHelper jh = (com.sun.grid.cull.JavaHelper)params.get("javaHelper");
  final com.sun.grid.cull.CullDefinition cullDef = (com.sun.grid.cull.CullDefinition)params.get("cullDef");
  
  class JGDIJniGenerator extends com.sun.grid.cull.AbstractGDIGenerator {

     private String cullname;
     public JGDIJniGenerator(com.sun.grid.cull.CullObject cullObject) {
        super(cullObject.getIdlName(), jh.getClassName(cullObject), cullObject);
        this.cullname = cullObject.getName();
        addPrimaryKeys(cullObject, jh);
     }

     public void genImport() {
        if(!(cullObject.getType() == cullObject.TYPE_PRIMITIVE ||
             cullObject.getType() == cullObject.TYPE_MAPPED)) {
p.print("// for ");
    p.print(name);p.println("");
    p.print("import com.sun.grid.jgdi.configuration.");
    p.print(classname);p.println(";");
    p.print("import com.sun.grid.jgdi.configuration.");
    p.print(classname);p.println("Impl;        ");
    p.print("");
            
        }
     } // end of genImport
     private boolean hasFillMethod;
     private void genFillMethod() {
        if(!hasFillMethod) {
p.println("        ");
    p.print("   private native void fill");
    p.print(name);p.print("ListWithAnswer(List< ");
    p.print(classname);p.println(" > list, JGDIFilter filter, List<JGDIAnswer> answers) throws JGDIException;");
    p.println("   ");
    p.print("   private void fill");
    p.print(name);p.print("List(List< ");
    p.print(classname);p.println(" > list, JGDIFilter filter) throws JGDIException {");
    p.print("      fill");
    p.print(name);p.println("ListWithAnswer(list, filter, null);");
    p.println("   }");
    p.println("   ");
    p.print("   private void fill");
    p.print(name);p.print("List(List< ");
    p.print(classname);p.println(" > list) throws JGDIException {");
    p.print("      fill");
    p.print(name);p.println("ListWithAnswer(list, null, null);");
    p.println("   }");
    p.println("   ");
    p.print("   private void fill");
    p.print(name);p.print("ListWithAnswer(List< ");
    p.print(classname);p.println(" > list, List<JGDIAnswer> answers) throws JGDIException {");
    p.print("      fill");
    p.print(name);p.println("ListWithAnswer(list, null, answers);");
    p.println("   }");
    p.println("");
    p.println("   ");
    p.print("");
            
           hasFillMethod = true;
        } 
     } // end of genFillMethod
     
     protected void genGetMethod() {
        genFillMethod();
p.println("");
    p.println("   /**");
    p.print("    *   Get the <code>");
    p.print(name);p.println("</code> object");
    p.print("    *   @return the <code>");
    p.print(name);p.println("</code> object");
    p.println("    *   @throws JGDIException on any error on the GDI layer");
    p.println("    */");
    p.print("   public ");
    p.print(classname);p.print(" get");
    p.print(name);p.println("() throws JGDIException {");
    p.print("      List< ");
    p.print(classname);p.print(" > ret = new LinkedList< ");
    p.print(classname);p.println(" >();");
    p.print("      fill");
    p.print(name);p.println("List(ret);");
    p.println("      switch(ret.size()) {");
    p.print("         case 0: throw new IllegalStateException(\"static  ");
    p.print(name);p.println(" object not found\");");
    p.print("         case 1: return (");
    p.print(classname);p.println(")ret.get(0);");
    p.println("         default:");
    p.print("           throw new IllegalStateException(\"Got more than 1 static ");
    p.print(name);p.println(" objects\");");
    p.println("      }");
    p.println("   }");
    p.println("");
    p.println("   /**");
    p.print("    *   Get the <code>");
    p.print(name);p.println("</code> object.");
    p.println("    *   @param  answers the <code>answer list</code> object");
    p.print("    *   @return the <code>");
    p.print(name);p.println("</code> object.");
    p.println("    *   @throws JGDIException on any error on the GDI layer");
    p.println("    */");
    p.print("   public ");
    p.print(classname);p.print(" get");
    p.print(name);p.println("WithAnswer(List<JGDIAnswer> answers) throws JGDIException {");
    p.print("      List< ");
    p.print(classname);p.print(" > ret = new LinkedList< ");
    p.print(classname);p.println(" >();");
    p.print("      fill");
    p.print(name);p.println("ListWithAnswer(ret, answers);");
    p.println("      switch(ret.size()) {");
    p.print("         case 0: throw new IllegalStateException(\"static  ");
    p.print(name);p.println(" object not found\");");
    p.print("         case 1: return (");
    p.print(classname);p.println(")ret.get(0);");
    p.println("         default:");
    p.print("           throw new IllegalStateException(\"Got more than 1 static ");
    p.print(name);p.println(" objects\");");
    p.println("      }");
    p.println("   }");
    p.print("");
    
     } // end of genGetMethod

     public void genGetListMethod() {
        genFillMethod();
p.println("        ");
    p.println("   /**");
    p.print("    *   Get the list of all defined <code>");
    p.print(name);p.println("</code> objects.");
    p.print("    *   @return list of <code>");
    p.print(name);p.println("</code> objects");
    p.println("    *   @throws JGDIException on any error on the GDI layer");
    p.println("    */");
    p.print("   public List get");
    p.print(name);p.println("List() throws JGDIException {");
    p.print("      List< ");
    p.print(classname);p.print(" > ret = new LinkedList< ");
    p.print(classname);p.println(" >();");
    p.print("      fill");
    p.print(name);p.println("List(ret);");
    p.println("      return ret;");
    p.println("   }");
    p.println("   /**");
    p.print("    *   Get the list of all defined <code>");
    p.print(name);p.println("</code> objects.");
    p.println("    *   @param  answers the <code>answer list</code> object");
    p.print("    *   @return list of <code>");
    p.print(name);p.println("</code> objects");
    p.println("    *   @throws JGDIException on any error on the GDI layer");
    p.println("    */");
    p.print("   public List get");
    p.print(name);p.println("ListWithAnswer(List<JGDIAnswer> answers) throws JGDIException {");
    p.print("      List< ");
    p.print(classname);p.print(" > ret = new LinkedList< ");
    p.print(classname);p.println(" >();");
    p.print("      fill");
    p.print(name);p.println("ListWithAnswer(ret, answers);");
    p.println("      return ret;");
    p.println("   }");
    p.println("");
    p.print("");
            
     } // end of genGetMethod
     
     public void genGetByPrimaryKeyMethod() {
        genFillMethod();
p.println("        ");
    p.println("   /**");
    p.print("    *  Get a ");
    p.print(name);p.println(" by its primary key");
    p.println("    *");
    p.print("    *  @return the ");
    p.print(name);p.println("");
    p.print("");
    
    for (java.util.Map.Entry<String, String> entry: primaryKeys.entrySet()) {
       String pkName = entry.getKey();
       String pkType = entry.getValue();
p.print("    *  @param ");
    p.print(pkName);p.print("   the ");
    p.print(pkName);p.print(" of the <code>");
    p.print(name);p.println("</code> object");
    p.print("");
    
    }    
p.print("    *  @return the found <code>");
    p.print(name);p.println("</code> object of <code>null</code>    ");
    p.println("    *  @throws JGDIException on any error on the GDI layer");
    p.println("    */");
    p.print("   public ");
    p.print(classname);p.print(" get");
    p.print(name);p.print("(");
    
      boolean first = true;
      for (java.util.Map.Entry<String, String> entry: primaryKeys.entrySet()) {
         String pkName = entry.getKey();
         String pkType = entry.getValue();
         if (first) {
            first = false;
         } else {
             p.print(", ");
    
         }
         p.print(" ");
    p.print(pkType);p.print(" ");
    p.print(pkName);p.print(" ");
    
    }
   p.println(") throws JGDIException {");
    p.println("    ");
    p.print("        List< ");
    p.print(classname);p.print(" > ret = new LinkedList< ");
    p.print(classname);p.println(" >();");
    p.print("        PrimaryKeyFilter filter = new PrimaryKeyFilter(\"");
    p.print(cullname);p.println("\");");
    p.print("");
    
    for (java.util.Map.Entry<String, String> entry: primaryKeys.entrySet()) {
       String pkName = entry.getKey();
       String pkType = entry.getValue();
p.println("");
    p.print("        filter.include(CullConstants.");
    p.print(pkName);p.print(", ");
    p.print(pkName);p.println(");");
    p.print("");
     
    }
p.println("");
    p.print("        fill");
    p.print(name);p.println("List(ret, filter);");
    p.println("");
    p.println("        switch(ret.size()) {");
    p.println("           case 0:  return null;");
    p.print("           case 1:  return (");
    p.print(classname);p.println(")ret.get(0);");
    p.println("           default:");
    p.println("                throw new IllegalStateException(\"Duplicate primary key\");");
    p.println("        }");
    p.println("   }");
    p.println("   ");
    p.println("   /**");
    p.print("    *  Get a ");
    p.print(name);p.println(" by its primary key");
    p.println("    *");
    p.print("    *  @return the ");
    p.print(name);p.println("");
    p.print("");
    
    for (java.util.Map.Entry<String, String> entry: primaryKeys.entrySet()) {
       String pkName = entry.getKey();
       String pkType = entry.getValue();
p.print("    *  @param ");
    p.print(pkName);p.print("   the ");
    p.print(pkName);p.print(" of the <code>");
    p.print(name);p.println("</code> object");
    p.print("");
    
    }
p.println("   *  @param  answers the <code>answer list</code> object");
    p.print("    *  @return the found <code>");
    p.print(name);p.println("</code> object of <code>null</code>    ");
    p.println("    *  @throws JGDIException on any error on the GDI layer");
    p.println("    */");
    p.print("   public ");
    p.print(classname);p.print(" get");
    p.print(name);p.print("WithAnswer(");
    
    first = true;
    for (java.util.Map.Entry<String, String> entry: primaryKeys.entrySet()) {
       String pkName = entry.getKey();
       String pkType = entry.getValue();
       if (first) {
          first = false;
       } else {
         p.print(", ");
    
       }
       p.print(" ");
    p.print(pkType);p.print(" ");
    p.print(pkName);p.print(" ");
    
    }
       p.println(", List<JGDIAnswer> answers) throws JGDIException {");
    p.println("    ");
    p.print("        List< ");
    p.print(classname);p.print(" >  ret = new LinkedList< ");
    p.print(classname);p.println(" >();");
    p.println("        ");
    p.print("        PrimaryKeyFilter filter = new PrimaryKeyFilter(\"");
    p.print(cullname);p.print("\");");
    
    for (java.util.Map.Entry<String, String> entry: primaryKeys.entrySet()) {
       String pkName = entry.getKey();
       String pkType = entry.getValue();p.println("");
    p.print("        filter.include(CullConstants.");
    p.print(pkName);p.print(", ");
    p.print(pkName);p.print("); ");
     
    }
p.println("");
    p.print("        fill");
    p.print(name);p.println("ListWithAnswer(ret, filter, answers);");
    p.println("");
    p.println("        switch(ret.size()) {");
    p.println("           case 0:  return null;");
    p.print("           case 1:  return (");
    p.print(classname);p.println(")ret.get(0);");
    p.println("           default:");
    p.println("                throw new IllegalStateException(\"Duplicate primary key\");");
    p.println("        }");
    p.println("   }");
    p.println("   ");
    p.print("");
    
    } // genGetByPrimaryKeyMethod
  
    public void genAddMethod() {
p.println("");
    p.println("   /**");
    p.print("    *   Add a new <code>");
    p.print(name);p.println("</code> object.");
    p.print("    *   @param  obj the new <code>");
    p.print(name);p.println("</code> object");
    p.println("    *   @throws JGDIException on any error on the GDI layer");
    p.println("    */");
    p.print("   public native void add");
    p.print(name);p.print("(");
    p.print(classname);p.println(" obj) throws JGDIException;");
    p.println("");
    p.println("   /**");
    p.print("    *   Add a new <code>");
    p.print(name);p.println("</code> object.");
    p.print("    *   @param  obj the new <code>");
    p.print(name);p.println("</code> object");
    p.println("    *   @param  answers the <code>answer list</code> object");
    p.println("    *   @throws JGDIException on any error on the GDI layer");
    p.println("    */");
    p.print("   public native void add");
    p.print(name);p.print("WithAnswer(");
    p.print(classname);p.println(" obj, List<JGDIAnswer> answers) throws JGDIException;");
    p.println("");
    p.print("");
     if ((name.equals("Manager")) || 
       (name.equals("Operator")) ||
       (name.equals("AdminHost")) || 
       (name.equals("SubmitHost"))) { p.println("");
    p.println("   /**");
    p.print("    *   Add a new <code>");
    p.print(name);p.println("</code> object.");
    p.println("    *   @param  name the new <code>String</code> object");
    p.println("    *   @throws JGDIException on any error on the GDI layer");
    p.println("    */");
    p.print("   public void add");
    p.print(name);p.println("(String name) throws JGDIException {");
    p.print("      ");
    p.print(name);p.print(" obj = new ");
    p.print(name);p.println("Impl(name);");
    p.print("      add");
    p.print(name);p.println("(obj);");
    p.println("   }");
    p.println("");
    p.println("   /**");
    p.print("    *   Add a new <code>");
    p.print(name);p.println("</code> object.");
    p.println("    *   @param  name the new <code>String</code> object");
    p.println("    *   @param  answers the <code>answer list</code> object");
    p.println("    *   @throws JGDIException on any error on the GDI layer");
    p.println("    */");
    p.print("   public void add");
    p.print(name);p.println("WithAnswer(String name, List<JGDIAnswer> answers) throws JGDIException {");
    p.print("      ");
    p.print(name);p.print(" obj = new ");
    p.print(name);p.println("Impl(name);");
    p.print("       add");
    p.print(name);p.println("WithAnswer(obj, answers);");
    p.println("   }");
    p.println("   ");
    p.print("");
       
       } //end if classname     
     } // end of genAddMethod
     
     public void genDeleteMethod() {
p.println("        ");
    p.println("   /**");
    p.print("    *   Delete a <code>");
    p.print(name);p.println("</code> object.");
    p.print("    *   @param obj  <code>");
    p.print(name);p.println("</code> object with the primary key information");
    p.println("    *   @throws JGDIException on any error on the GDI layer");
    p.println("    */");
    p.print("   public native void delete");
    p.print(name);p.print("(");
    p.print(classname);p.println(" obj) throws JGDIException;");
    p.println("");
    p.println("   /**");
    p.print("    *   Delete a <code>");
    p.print(name);p.println("</code> object.");
    p.print("    *   @param obj  <code>");
    p.print(name);p.println("</code> object with the primary key information");
    p.println("    *   @param answers  <code>answer list</code> object");
    p.println("    *   @throws JGDIException on any error on the GDI layer");
    p.println("    */");
    p.print("   public native void delete");
    p.print(name);p.print("WithAnswer(");
    p.print(classname);p.println(" obj, List<JGDIAnswer> answers) throws JGDIException;");
    p.println("   ");
    p.println("   /**");
    p.print("    *   Delete several <code>");
    p.print(name);p.println("</code> objects.");
    p.print("    *   @param objs  <code>");
    p.print(name);p.println("</code> object array with the primary key information");
    p.println("    *   @param force  <code>force</code> delete flag");
    p.println("    *   @param userFilter  delete object for users contained in userFilter");
    p.println("    *   @param answers  <code>answer list</code> object");
    p.println("    *   @throws JGDIException on any error on the GDI layer");
    p.println("    */");
    p.print("   public native void delete");
    p.print(name);p.println("sWithAnswer(Object[] objs, boolean force, UserFilter userFilter, List<JGDIAnswer> answers) throws JGDIException;");
    p.println("   ");
    p.print("");
    
     } // end of genDeleteMethod

     public void genDeleteByPrimaryKeyMethod() {
p.println("");
    p.println("");
    p.println("   /**");
    p.print("    *   Delete a <code>");
    p.print(name);p.println("</code> object by its primary key");
    p.print("");
    
    for (java.util.Map.Entry<String, String> entry: primaryKeys.entrySet()) {
       String pkName = entry.getKey();
       String pkType = entry.getValue();
p.print("    *   @param ");
    p.print(pkName);p.print("   the ");
    p.print(pkName);p.print(" of the <code>");
    p.print(name);p.println("</code> object");
    p.print("");
    
    }    
p.println("    *   @throws JGDIException on any error on the GDI layer");
    p.println("    */");
    p.print("   public void delete");
    p.print(name);p.print("(");
    
    boolean first = true;
    for (java.util.Map.Entry<String, String> entry: primaryKeys.entrySet()) {
       String pkName = entry.getKey();
       String pkType = entry.getValue();
       if(first) {
         first = false;
       } else {
            p.print(", ");
    
       }
       p.print("");
    p.print(pkType);p.print(" ");
    p.print(pkName);p.print("");
    
    }
    p.println(") throws JGDIException {");
    p.print("       ");
    p.print(classname);p.print(" obj = new ");
    p.print(classname);p.print("Impl(");
    
      first = true;
      for (java.util.Map.Entry<String, String> entry: primaryKeys.entrySet()) {
         String pkName = entry.getKey();
         String pkType = entry.getValue();
         if (first) {
            first = false;
         } else {
            p.print(" , ");
               
         }
         p.print("");
    p.print(pkName);p.print("");
    
      }
    p.println(");");
    p.print("       delete");
    p.print(name);p.println("(obj);");
    p.println("    }");
    p.println("");
    p.println("   /**");
    p.print("    *   Delete a <code>");
    p.print(name);p.println("</code> object by its primary key");
    p.print("");
    
    for (java.util.Map.Entry<String, String> entry: primaryKeys.entrySet()) {
       String pkName = entry.getKey();
       String pkType = entry.getValue();
p.print("    *   @param ");
    p.print(pkName);p.print("   the ");
    p.print(pkName);p.print(" of the <code>");
    p.print(name);p.println("</code> object");
    p.println("");
    p.print("");
    
    }    
p.println("       *   @param answers  <code>answer list</code> object");
    p.println("    *   @throws JGDIException on any error on the GDI layer");
    p.println("    */");
    p.print("   public void delete");
    p.print(name);p.print("WithAnswer(");
    
    first = true;  
    for (java.util.Map.Entry<String, String> entry: primaryKeys.entrySet()) {
       String pkName = entry.getKey();
       String pkType = entry.getValue();
       if(first) {
         first = false;
       } else {
            p.print(" , ");
               
       }
       p.print("");
    p.print(pkType);p.print(" ");
    p.print(pkName);p.print("");
    
    } // end of for  
    p.println(", List<JGDIAnswer> answers) throws JGDIException {");
    p.print("       ");
    p.print(classname);p.print(" obj = new ");
    p.print(classname);p.print("Impl(");
    
    first = true;  
    for (java.util.Map.Entry<String, String> entry: primaryKeys.entrySet()) {
       String pkName = entry.getKey();
       String pkType = entry.getValue();
       if(first) {
         first = false;
       } else {
            p.print(" , ");
               
       }
       p.print("");
    p.print(pkName);p.print("");
    
    } // end of for
    p.println(");");
    p.print("       delete");
    p.print(name);p.println("WithAnswer(obj, answers);");
    p.println("    }");
    p.println("");
    p.println("   /**");
    p.print("    *   Delete several <code>");
    p.print(name);p.println("</code> objects by its primary key");
    p.print("");
    
    for (java.util.Map.Entry<String, String> entry: primaryKeys.entrySet()) {
       String pkName = entry.getKey();
       String pkType = entry.getValue();
p.print("    *   @param ");
    p.print(pkName);p.print("s   the ");
    p.print(pkName);p.print(" of the <code>");
    p.print(name);p.println("</code> object");
    p.print("");
    
    }
if (name.equals("Job") || name.equals("AdvanceReservation")) {p.println("    ");
    p.println("    *   @param forced  <code>forced</code> delete flag");
    p.println("    *   @param userFilter  delete objects owned by users contained in userFilter ");
    p.print("");
    }p.println("    *   @param answers  <code>answer list</code> object  ");
    p.println("    *   @throws JGDIException on any error on the GDI layer");
    p.println("    */");
    p.print("   public void delete");
    p.print(name);p.print("sWithAnswer(");
    
    first = true;  
    for (java.util.Map.Entry<String, String> entry: primaryKeys.entrySet()) {
       String pkName = entry.getKey();
       // String pkType = entry.getValue();
       if(first) {
         first = false;
       } else {
            p.print(" , ");
               
       }
       p.print("String[] ");
    p.print(pkName);p.print("s");
    
    } // end of for
    if (name.equals("Job") || name.equals("AdvanceReservation")) {p.println(", boolean forced, UserFilter userFilter");
    p.print("    ");
    }p.println(", List<JGDIAnswer> answers) throws JGDIException {");
    p.println("");
    p.print("    ");
    
    if (name.equals("Job") || name.equals("AdvanceReservation")) {
       first = true;
       for (java.util.Map.Entry<String, String> entry: primaryKeys.entrySet()) {
          String pkName = entry.getKey();
    p.println("");
    p.print("         delete");
    p.print(name);p.println("sWithAnswer(  ");
    p.print("         ");
     if (first) {
            first = false;p.println("");
    p.print("            (Object[])");
    p.print(pkName);p.println("s");
    p.print("         ");
    } else {p.println("");
    p.print("            , (Object[])");
    p.print(pkName);p.println("s");
    p.print("         ");
    }p.println("");
    p.print("       ");
    
        } // end of for 
       p.println(", forced, userFilter, answers);");
    p.print("");
    } else {
      first = true;  
    for (java.util.Map.Entry<String, String> entry: primaryKeys.entrySet()) {
       String pkName = entry.getKey();
       if (first) {p.println("");
    p.println("       // Other objects");
    p.print("       List< ");
    p.print(classname);p.print(" > list = new LinkedList< ");
    p.print(classname);p.println(" >();");
    p.println("");
    p.print("       for (int i=0; ");
    p.print(pkName);p.print("s != null && i < ");
    p.print(pkName);p.println("s.length; i++) {");
    p.print("             ");
    p.print(classname);p.print(" obj = new ");
    p.print(classname);p.println("Impl(");
    p.print("       ");
    } else {p.print(" , ");
    }p.println("");
    p.print("       ");
    p.print(pkName);p.println("s[i]");
    p.print("  ");
    } // end of for 
         p.println(");");
    p.println("         list.add(obj);");
    p.println("       }");
    p.print("       delete");
    p.print(name);p.println("sWithAnswer(list.toArray(), false, null, answers);      ");
    p.print("");
    }p.println("    ");
    p.println("  }");
    p.print("");
    
    } // end of genDeleteByPrimaryKeyMethod
     public void genUpdateMethod() { 
p.println("       ");
    p.println("   /**");
    p.print("    *   Update a <code>");
    p.print(name);p.println("</code> object.");
    p.print("    *   @param obj   the <code>");
    p.print(name);p.println("</code> object with the new values");
    p.println("    *   @throws JGDIException on any error on the GDI layer");
    p.println("    */");
    p.print("   public native void update");
    p.print(name);p.print("(");
    p.print(classname);p.println(" obj) throws JGDIException;");
    p.println("");
    p.println("   /**");
    p.print("    *   Update a <code>");
    p.print(name);p.println("</code> object.");
    p.print("    *   @param obj      the <code>");
    p.print(name);p.println("</code> object with the new values");
    p.println("    *   @param answers  the <code>answer list</code> object");
    p.println("    *   @throws JGDIException on any error on the GDI layer");
    p.println("    */");
    p.print("   public native void update");
    p.print(name);p.print("WithAnswer(");
    p.print(classname);p.println(" obj, List<JGDIAnswer> answers) throws JGDIException;");
    p.print("");
       
     } // end of getUpdateMethod 
  } // end of JGDIGenerator  
  // ---------------------------------------------------------------------------
  // Build generators
  // ---------------------------------------------------------------------------
  java.util.List<JGDIJniGenerator> generators = new java.util.LinkedList<JGDIJniGenerator>();
  for (String name : cullDef.getObjectNames()) {
      com.sun.grid.cull.CullObject cullObj = cullDef.getCullObject(name);
      generators.add(new JGDIJniGenerator(cullObj));
  } // end of for
p.println("");
    p.println("package com.sun.grid.jgdi.jni;");
    p.println("");
    p.println("import com.sun.grid.jgdi.JGDIException;");
    p.println("import com.sun.grid.jgdi.filter.*;");
    p.println("import java.util.List;");
    p.println("import java.util.LinkedList;");
    p.println("import com.sun.grid.jgdi.CullConstants;");
    p.println("import com.sun.grid.jgdi.configuration.JGDIAnswer;");
    p.println("import com.sun.grid.jgdi.monitoring.filter.UserFilter;");
    p.println("");
    p.print("");
      
    for (JGDIJniGenerator gen : generators) {
      gen.genImport();
    }
p.println("");
    p.println("/**");
    p.println(" *  JNI implementation of {@link com.sun.grid.jgdi.JGDI}");
    p.println(" * ");
    p.println(" */");
    p.println("public class JGDIImpl extends JGDIBaseImpl implements com.sun.grid.jgdi.JGDI {");
    p.println("");
    p.print("");
    
    //  We can not move the getRealExecHostList into JGDIBase, because
    //  it uses fillExecHostList.
p.println("   ");
    p.println("    /**");
    p.println("     * Get the list of real exec hosts (excludes \"template\" and \"global\").");
    p.println("     *");
    p.println("     * @throws com.sun.grid.jgdi.JGDIException ");
    p.println("     * @return the list of real exec hosts");
    p.println("     */");
    p.println("   public List getRealExecHostList() throws com.sun.grid.jgdi.JGDIException {");
    p.println("        List<ExecHost> ret = new LinkedList<ExecHost>();");
    p.println("        PrimaryKeyFilter filter = new PrimaryKeyFilter(\"EH_Type\");");
    p.println("        filter.exclude(CullConstants.EH_name, \"template\" ); ");
    p.println("        filter.exclude(CullConstants.EH_name, \"global\" );");
    p.println("        fillExecHostList(ret, filter);");
    p.println("        return ret;");
    p.println("   }");
    p.println("");
    p.print("");
      
    for (JGDIJniGenerator gen : generators) {
      gen.genMethods();
    }
p.println("");
    p.println("");
    p.println("}");
  } // end of print
} // end of class java_jni_jgdi_jsp
